{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v5.json", "dbt_version": "1.7.3", "generated_at": "2023-12-09T18:55:57.701774Z", "invocation_id": "ce6d4b5b-5259-4d77-931f-04dde3e86a25", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:52.711995Z", "completed_at": "2023-12-09T18:55:52.717895Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:52.718628Z", "completed_at": "2023-12-09T18:55:52.718637Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008156061172485352, "adapter_response": {}, "message": null, "failures": null, "unique_id": "analysis.timeball.grid", "compiled": true, "compiled_code": "with\n    teams as (select distinct team_id from stg_rosters where year = 2005),\n\n    grid as (\n        select t1.team_id as team1, t2.team_id as team2\n        from teams t1\n        join teams t2 on t1.team_id < t2.team_id\n    ),\n\n\n    player_teams as (\n        select distinct player_id, team_id\n        from stg_rosters\n        where team_id in (select distinct team_id FROM stg_rosters where year = 2005)\n    ),\n\n    player_grid as (\n        select t1.player_id, [t1.team_id, t2.team_id] as teams,\n        from player_teams t1\n        join player_teams t2\n            on t1.player_id = t2.player_id\n            and t1.team_id < t2.team_id\n        --where t1.team_id IN (select distinct team_id from stg_rosters where year = 2005)\n    ),\n\n    roster_sizes as (\n        select r.year, r.team_id, COUNT(*) as total_pairs, COUNT(DISTINCT teams) as distinct_pairs\n        from stg_rosters r\n        join player_grid using (player_id)\n        group by 1, 2\n    )\n\n\nSELECT * FROM roster_sizes\nORDER BY 4 desc, 3 desc", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:52.721106Z", "completed_at": "2023-12-09T18:55:52.723601Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:52.724274Z", "completed_at": "2023-12-09T18:55:52.724280Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004716157913208008, "adapter_response": {}, "message": null, "failures": null, "unique_id": "analysis.timeball.player_completeness", "compiled": true, "compiled_code": "SELECT\n    player_id,\n    player_type,\n    COUNT(*) AS total_games,\n    COUNT_IF(has_play_by_play) AS play_by_play,\n    COUNT_IF(has_trajectory) AS trajectory,\n    COUNT_IF(has_location) AS location,\n    COUNT_IF(has_batted_to_fielder) AS batted_to_fielder,\n    COUNT_IF(has_count_balls) AS count_balls,\n    COUNT_IF(has_count_strikes) AS count_strikes,\n    COUNT_IF(has_count) AS count,\n    COUNT_IF(has_pitches) AS pitches,\n    COUNT_IF(has_pitch_results) AS pitch_results,\n    COUNT_IF(has_pitch_strike_types) AS pitch_strike_types\n\nGROUP BY 1, 2\nORDER BY total_games DESC", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:52.726551Z", "completed_at": "2023-12-09T18:55:52.728493Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:52.729131Z", "completed_at": "2023-12-09T18:55:52.729136Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004034996032714844, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.timeball.event_count_states", "compiled": true, "compiled_code": "-- For each event, pivot out counts that occurred during it,\n-- including same PAs across multiple events (I think), and\n-- the count at which the event occurred. Sample cols:\n-- occurred_1_strike\n-- result_at_1_strike\n-- occurred_0_1\n-- result_at_0_1\n-- occurrences_of_0_2 (due to fouls)\n-- Indicate missing data with nulls\n-- Worth making a macro to list out each count, each strikes, each balls, etc?\nSELECT 1", "relation_name": "\"timeball\".\"main_models\".\"event_count_states\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:52.731413Z", "completed_at": "2023-12-09T18:55:52.734834Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:52.735522Z", "completed_at": "2023-12-09T18:55:52.735531Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005697011947631836, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.timeball.stg_bio", "compiled": true, "compiled_code": "WITH source AS (\n    SELECT * FROM \"timeball\".\"misc\".\"bio\"\n),\n\nrenamed AS (\n    SELECT\n        player_id,\n        last AS last_name,\n        first AS official_name,\n        nickname AS first_name,\n        birthdate AS birth_date,\n        birth_city,\n        birth_state,\n        birth_country,\n        play_debut AS player_debut_date,\n        play_lastgame AS player_last_game_date,\n        mgr_debut AS manager_debut_date,\n        mgr_lastgame AS manager_last_game_date,\n        coach_debut AS coach_debut_date,\n        coach_lastgame AS coach_last_game_date,\n        ump_debut AS umpire_debut_date,\n        ump_lastgame AS umpire_last_game_date,\n        deathdate AS death_date,\n        death_city AS death_city,\n        death_state AS death_state,\n        death_country AS death_country,\n        bats,\n        throws,\n        CASE WHEN height LIKE '%-%'\n            THEN SPLIT_PART(height, '-', 1)::INT * 12 + SPLIT_PART(height, '-', 2)::INT\n        END AS height_inches,\n        weight AS weight_pounds,\n        -- TODO: Fix spelling\n        cemetary AS cemetery_name,\n        ceme_city AS cemetery_city,\n        ceme_state AS cemetery_state,\n        ceme_country AS cemetery_country,\n        ceme_note AS cemetery_note,\n        birth_name AS birth_name,\n        name_chg AS name_change_notes,\n        bat_chg AS batting_hand_change_notes,\n        hof AS hall_of_fame_status\n\n    FROM source\n)\n\nSELECT * FROM renamed", "relation_name": "\"timeball\".\"main_models\".\"stg_bio\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:52.738051Z", "completed_at": "2023-12-09T18:55:52.741029Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:52.741722Z", "completed_at": "2023-12-09T18:55:52.741726Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00521397590637207, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.timeball.stg_box_score_batting_lines", "compiled": true, "compiled_code": "WITH source AS (\n    SELECT * FROM \"timeball\".\"box_score\".\"box_score_batting_lines\"\n),\n\nrenamed AS (\n    SELECT\n        game_id,\n        batter_id,\n        side,\n        lineup_position,\n        nth_player_at_position,\n        at_bats,\n        runs,\n        hits,\n        doubles,\n        triples,\n        home_runs,\n        -- TODO: Change in source\n        rbi AS runs_batted_in,\n        sacrifice_hits,\n        sacrifice_flies,\n        -- TODO: Change in source\n        hit_by_pitch AS hit_by_pitches,\n        walks,\n        intentional_walks,\n        strikeouts,\n        stolen_bases,\n        caught_stealing,\n        grounded_into_double_plays,\n        -- TODO: Change in source\n        reached_on_interference AS reached_on_interferences,\n        -- TODO: Fix rows with 0 hits but 1+ XBH and where hits > AB\n        CASE WHEN hits = 0 AND doubles + triples + home_runs > 0 THEN NULL \n            ELSE hits - home_runs - triples - doubles\n        END::UTINYINT AS singles,\n        (singles + doubles * 2 + triples * 3 + home_runs * 4)::UTINYINT AS total_bases,\n        (at_bats + COALESCE(walks, 0) + COALESCE(hit_by_pitches, 0) + COALESCE(sacrifice_flies, 0)\n        + COALESCE(sacrifice_hits, 0) + COALESCE(reached_on_interferences, 0))::UTINYINT\n        AS plate_appearances,\n        (at_bats + COALESCE(walks, 0) + COALESCE(hit_by_pitches, 0) + COALESCE(sacrifice_flies, 0))::UTINYINT\n        AS on_base_opportunities,\n        (hits + COALESCE(walks, 0) + COALESCE(hit_by_pitches, 0))::UTINYINT AS on_base_successes,\n        CASE WHEN hits > at_bats THEN NULL\n            ELSE at_bats - hits + COALESCE(grounded_into_double_plays, 0)\n        END::UTINYINT AS batting_outs,\n    FROM source\n)\n\nSELECT * FROM renamed", "relation_name": "\"timeball\".\"main_models\".\"stg_box_score_batting_lines\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:52.743888Z", "completed_at": "2023-12-09T18:55:52.746352Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:52.746982Z", "completed_at": "2023-12-09T18:55:52.746986Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0044841766357421875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.timeball.stg_box_score_caught_stealing", "compiled": true, "compiled_code": "WITH source AS (\n    SELECT * FROM \"timeball\".\"box_score\".\"box_score_caught_stealing\"\n),\n\nrenamed AS (\n    SELECT\n        game_id,\n        running_side,\n        runner_id,\n        pitcher_id,\n        catcher_id,\n        inning\n\n    FROM source\n)\n\nSELECT * FROM renamed\nWHERE substring(game_id, 4,4)::INT < 1919", "relation_name": "\"timeball\".\"main_models\".\"stg_box_score_caught_stealing\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:52.749391Z", "completed_at": "2023-12-09T18:55:52.752429Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:52.753107Z", "completed_at": "2023-12-09T18:55:52.753112Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005239725112915039, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.timeball.stg_box_score_comments", "compiled": true, "compiled_code": "WITH source AS (\n    SELECT * FROM \"timeball\".\"box_score\".\"box_score_comments\"\n),\n\nrenamed AS (\n    SELECT\n        game_id,\n        sequence_id,\n        comment\n    FROM source\n)\n\nSELECT * FROM renamed", "relation_name": "\"timeball\".\"main_models\".\"stg_box_score_comments\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:52.755285Z", "completed_at": "2023-12-09T18:55:52.757800Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:52.758430Z", "completed_at": "2023-12-09T18:55:52.758434Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0045011043548583984, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.timeball.stg_box_score_double_plays", "compiled": true, "compiled_code": "WITH source AS (\n    SELECT * FROM \"timeball\".\"box_score\".\"box_score_double_plays\"\n),\n\nrenamed AS (\n    SELECT\n        game_id,\n        defense_side,\n        fielders\n\n    FROM source\n)\n\nSELECT * FROM renamed", "relation_name": "\"timeball\".\"main_models\".\"stg_box_score_double_plays\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:52.760542Z", "completed_at": "2023-12-09T18:55:52.763502Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:52.764161Z", "completed_at": "2023-12-09T18:55:52.764166Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004979848861694336, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.timeball.stg_box_score_fielding_lines", "compiled": true, "compiled_code": "WITH source AS (\n    SELECT * FROM \"timeball\".\"box_score\".\"box_score_fielding_lines\"\n),\n\nrenamed AS (\n    SELECT\n        game_id,\n        fielder_id,\n        side,\n        fielding_position,\n        nth_position_played_by_player,\n        outs_played,\n        putouts,\n        assists,\n        errors,\n        double_plays,\n        triple_plays,\n        passed_balls\n\n    FROM source\n)\n\nSELECT * FROM renamed", "relation_name": "\"timeball\".\"main_models\".\"stg_box_score_fielding_lines\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:52.766312Z", "completed_at": "2023-12-09T18:55:52.770404Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:52.771051Z", "completed_at": "2023-12-09T18:55:52.771054Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0060880184173583984, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.timeball.stg_box_score_hit_by_pitches", "compiled": true, "compiled_code": "WITH source AS (\n    SELECT * FROM \"timeball\".\"box_score\".\"box_score_hit_by_pitches\"\n),\n\nrenamed AS (\n    SELECT\n        game_id,\n        pitching_side,\n        pitcher_id,\n        batter_id\n\n    FROM source\n)\n\nSELECT * FROM renamed", "relation_name": "\"timeball\".\"main_models\".\"stg_box_score_hit_by_pitches\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:52.773121Z", "completed_at": "2023-12-09T18:55:52.775567Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:52.776187Z", "completed_at": "2023-12-09T18:55:52.776190Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004386186599731445, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.timeball.stg_box_score_home_runs", "compiled": true, "compiled_code": "WITH source AS (\n    SELECT * FROM \"timeball\".\"box_score\".\"box_score_home_runs\"\n),\n\nrenamed AS (\n    SELECT\n        game_id,\n        batting_side,\n        batter_id,\n        pitcher_id,\n        inning,\n        runners_on,\n        outs\n\n    FROM source\n)\n\nSELECT * FROM renamed", "relation_name": "\"timeball\".\"main_models\".\"stg_box_score_home_runs\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:52.778238Z", "completed_at": "2023-12-09T18:55:52.780656Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:52.781313Z", "completed_at": "2023-12-09T18:55:52.781316Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004533052444458008, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.timeball.stg_box_score_line_scores", "compiled": true, "compiled_code": "WITH source AS (\n    SELECT * FROM \"timeball\".\"box_score\".\"box_score_line_scores\"\n),\n\nrenamed AS (\n    SELECT\n        game_id,\n        side AS batting_side,\n        inning,\n        runs\n    FROM source\n)\n\nSELECT * FROM renamed", "relation_name": "\"timeball\".\"main_models\".\"stg_box_score_line_scores\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:52.784549Z", "completed_at": "2023-12-09T18:55:52.787686Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:52.788400Z", "completed_at": "2023-12-09T18:55:52.788405Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005800962448120117, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.timeball.stg_box_score_pinch_hitting_lines", "compiled": true, "compiled_code": "WITH source AS (\n    SELECT * FROM \"timeball\".\"box_score\".\"box_score_pinch_hitting_lines\"\n),\n\nrenamed AS (\n    SELECT\n        game_id,\n        pinch_hitter_id,\n        inning,\n        side,\n        at_bats,\n        runs,\n        hits,\n        doubles,\n        triples,\n        home_runs,\n        rbi,\n        sacrifice_hits,\n        sacrifice_flies,\n        hit_by_pitch AS hit_by_pitches,\n        walks,\n        intentional_walks,\n        strikeouts,\n        stolen_bases,\n        caught_stealing,\n        grounded_into_double_plays,\n        reached_on_interference\n\n    FROM source\n)\n\nSELECT * FROM renamed", "relation_name": "\"timeball\".\"main_models\".\"stg_box_score_pinch_hitting_lines\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:52.790647Z", "completed_at": "2023-12-09T18:55:52.793250Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:52.793885Z", "completed_at": "2023-12-09T18:55:52.793888Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004621744155883789, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.timeball.stg_box_score_pinch_running_lines", "compiled": true, "compiled_code": "WITH source AS (\n    SELECT * FROM \"timeball\".\"box_score\".\"box_score_pinch_running_lines\"\n),\n\nrenamed AS (\n    SELECT\n        game_id,\n        pinch_runner_id,\n        inning,\n        side,\n        runs,\n        stolen_bases,\n        caught_stealing\n\n    FROM source\n)\n\nSELECT * FROM renamed", "relation_name": "\"timeball\".\"main_models\".\"stg_box_score_pinch_running_lines\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:52.795985Z", "completed_at": "2023-12-09T18:55:52.799007Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:52.799685Z", "completed_at": "2023-12-09T18:55:52.799690Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005085945129394531, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.timeball.stg_box_score_pitching_lines", "compiled": true, "compiled_code": "WITH source AS (\n    SELECT * FROM \"timeball\".\"box_score\".\"box_score_pitching_lines\"\n),\n\nrenamed AS (\n    SELECT\n        game_id,\n        pitcher_id,\n        side,\n        nth_pitcher,\n        outs_recorded,\n        no_out_batters,\n        batters_faced,\n        hits,\n        doubles,\n        triples,\n        home_runs,\n        runs,\n        earned_runs,\n        walks,\n        intentional_walks,\n        strikeouts,\n        -- TODO: Change in original\n        hit_batsmen AS hit_by_pitches,\n        wild_pitches,\n        balks,\n        sacrifice_hits,\n        sacrifice_flies,\n        -- TODO: Fix rows where XBH > H\n        CASE WHEN hits::INT - (home_runs + triples + doubles) < 0 THEN NULL\n            ELSE hits - (home_runs + triples + doubles)\n        END AS singles,\n        singles + doubles * 2 + triples * 3 + home_runs * 4 AS total_bases,\n        -- This is a different formula vs batting lines because we don't have at bats.\n        -- The one missing piece is catcher's interferfence, which is extremely rare \n        -- if not non-existent in box-score only games.\n        batters_faced - COALESCE(sacrifice_hits, 0) AS on_base_opportunities,\n        hits + COALESCE(walks, 0) + COALESCE(hit_by_pitches, 0) AS on_base_successes,\n        CASE WHEN nth_pitcher = 1 THEN 1 ELSE 0 END AS games_started,\n        CASE WHEN nth_pitcher != 1 THEN 1 ELSE 0 END AS games_relieved,\n        CASE WHEN nth_pitcher = MAX(nth_pitcher) OVER (PARTITION BY game_id, side)\n                THEN 1\n            ELSE 0\n        END AS games_finished,\n    FROM source\n)\n\nSELECT * FROM renamed", "relation_name": "\"timeball\".\"main_models\".\"stg_box_score_pitching_lines\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:52.801834Z", "completed_at": "2023-12-09T18:55:52.804476Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:52.805123Z", "completed_at": "2023-12-09T18:55:52.805128Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004669189453125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.timeball.stg_box_score_stolen_bases", "compiled": true, "compiled_code": "WITH source AS (\n    SELECT * FROM \"timeball\".\"box_score\".\"box_score_stolen_bases\"\n),\n\nrenamed AS (\n    SELECT\n        game_id,\n        running_side,\n        runner_id,\n        pitcher_id,\n        catcher_id,\n        inning\n\n    FROM source\n)\n\nSELECT * FROM renamed", "relation_name": "\"timeball\".\"main_models\".\"stg_box_score_stolen_bases\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:52.807319Z", "completed_at": "2023-12-09T18:55:52.810037Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:52.810685Z", "completed_at": "2023-12-09T18:55:52.810689Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004728078842163086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.timeball.stg_box_score_team_batting_lines", "compiled": true, "compiled_code": "WITH source AS (\n    SELECT * FROM \"timeball\".\"box_score\".\"box_score_team_batting_lines\"\n),\n\nrenamed AS (\n    SELECT\n        game_id,\n        side,\n        at_bats,\n        runs,\n        hits,\n        doubles,\n        triples,\n        home_runs,\n        rbi,\n        sacrifice_hits,\n        sacrifice_flies,\n        hit_by_pitch AS hit_by_pitches,\n        walks,\n        intentional_walks,\n        strikeouts,\n        stolen_bases,\n        caught_stealing,\n        grounded_into_double_plays,\n        reached_on_interference\n    FROM source\n)\n\nSELECT * FROM renamed", "relation_name": "\"timeball\".\"main_models\".\"stg_box_score_team_batting_lines\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:52.812783Z", "completed_at": "2023-12-09T18:55:52.815663Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:52.816375Z", "completed_at": "2023-12-09T18:55:52.816380Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004951953887939453, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.timeball.stg_box_score_team_fielding_lines", "compiled": true, "compiled_code": "WITH source AS (\n    SELECT * FROM \"timeball\".\"box_score\".\"box_score_team_fielding_lines\"\n),\n\nrenamed AS (\n    SELECT\n        game_id,\n        side,\n        outs_played,\n        putouts,\n        assists,\n        errors,\n        double_plays,\n        triple_plays,\n        passed_balls\n\n    FROM source\n)\n\nSELECT * FROM renamed", "relation_name": "\"timeball\".\"main_models\".\"stg_box_score_team_fielding_lines\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:52.818537Z", "completed_at": "2023-12-09T18:55:52.821183Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:52.821839Z", "completed_at": "2023-12-09T18:55:52.821842Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004656076431274414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.timeball.stg_box_score_team_miscellaneous_lines", "compiled": true, "compiled_code": "WITH source AS (\n    SELECT * FROM \"timeball\".\"box_score\".\"box_score_team_miscellaneous_lines\"\n),\n\nrenamed AS (\n    SELECT\n        game_id,\n        side,\n        left_on_base,\n        team_earned_runs,\n        double_plays_turned,\n        triple_plays_turned\n\n    FROM source\n)\n\nSELECT * FROM renamed", "relation_name": "\"timeball\".\"main_models\".\"stg_box_score_team_miscellaneous_lines\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:52.824068Z", "completed_at": "2023-12-09T18:55:52.828060Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:52.828689Z", "completed_at": "2023-12-09T18:55:52.828693Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006083011627197266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.timeball.stg_box_score_triple_plays", "compiled": true, "compiled_code": "WITH source AS (\n    SELECT * FROM \"timeball\".\"box_score\".\"box_score_triple_plays\"\n),\n\nrenamed AS (\n    SELECT\n        game_id,\n        defense_side,\n        fielders\n\n    FROM source\n)\n\nSELECT * FROM renamed", "relation_name": "\"timeball\".\"main_models\".\"stg_box_score_triple_plays\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:52.830744Z", "completed_at": "2023-12-09T18:55:52.833930Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:52.834586Z", "completed_at": "2023-12-09T18:55:52.834590Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005184650421142578, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.timeball.stg_databank_batting", "compiled": true, "compiled_code": "WITH source AS (\n    SELECT * FROM \"timeball\".\"baseballdatabank\".\"batting\"\n),\n\nrenamed AS (\n\n    SELECT\n        player_id AS databank_player_id,\n        year_id AS season,\n        stint,\n        team_id AS team_id,\n        lg_id AS league_id,\n        g AS games,\n        ab AS at_bats,\n        r AS runs,\n        h AS hits,\n        _2b AS doubles, -- noqa: RF06\n        _3b AS triples, -- noqa: RF06\n        hr AS home_runs,\n        rbi AS runs_batted_in,\n        sb AS stolen_bases,\n        cs AS caught_stealing,\n        bb AS walks,\n        so AS strikeouts,\n        ibb AS intentional_walks,\n        hbp AS hit_by_pitches,\n        sh AS sacrifice_hits,\n        sf AS sacrifice_flies,\n        gidp AS grounded_into_double_plays,\n        hits - home_runs - triples - doubles AS singles,\n        singles + doubles * 2 + triples * 3 + home_runs * 4 AS total_bases,\n        at_bats + COALESCE(walks, 0) + COALESCE(hit_by_pitches, 0) + COALESCE(sacrifice_flies, 0)\n        + COALESCE(sacrifice_hits, 0)\n        AS plate_appearances,\n        at_bats + COALESCE(walks, 0) + COALESCE(hit_by_pitches, 0) + COALESCE(sacrifice_flies, 0)\n        AS on_base_opportunities,\n        hits + COALESCE(walks, 0) + COALESCE(hit_by_pitches, 0) AS on_base_successes,\n    FROM source\n\n)\n\nSELECT * FROM renamed", "relation_name": "\"timeball\".\"main_models\".\"stg_databank_batting\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:52.836689Z", "completed_at": "2023-12-09T18:55:52.839935Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:52.841046Z", "completed_at": "2023-12-09T18:55:52.841051Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0059888362884521484, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.timeball.stg_databank_fielding", "compiled": true, "compiled_code": "WITH source AS (\n    SELECT * FROM \"timeball\".\"baseballdatabank\".\"fielding\"\n),\n\nrenamed AS (\n    SELECT\n        player_id AS databank_player_id,\n        year_id AS season,\n        stint,\n        team_id AS team_id,\n        lg_id AS league_id,\n        g AS games,\n        gs AS games_started,\n        inn_outs AS outs_played,\n        po AS putouts,\n        a AS assists,\n        e AS errors,\n        dp AS double_plays,\n        pb AS passed_balls,\n        wp AS wild_pitches,\n        sb AS stolen_bases,\n        cs AS caught_stealing,\n        CASE pos\n            WHEN 'P' THEN 1\n            WHEN 'C' THEN 2\n            WHEN '1B' THEN 3\n            WHEN '2B' THEN 4\n            WHEN '3B' THEN 5\n            WHEN 'SS' THEN 6\n            ELSE 0 \n        END AS fielding_position,\n        CASE\n            WHEN pos IN ('P', 'C', 'OF') THEN pos\n            WHEN pos IN ('1B', '2B', '3B', 'SS') THEN 'IF'\n        END AS fielding_position_category\n    FROM source\n)\n\nSELECT * FROM renamed", "relation_name": "\"timeball\".\"main_models\".\"stg_databank_fielding\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:52.843713Z", "completed_at": "2023-12-09T18:55:52.846644Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:52.847379Z", "completed_at": "2023-12-09T18:55:52.847385Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005228996276855469, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.timeball.stg_databank_fielding_of", "compiled": true, "compiled_code": "WITH source AS (\n    SELECT * FROM \"timeball\".\"baseballdatabank\".\"fielding_of\"\n),\n\nrenamed AS (\n    SELECT\n        player_id AS databank_player_id,\n        year_id AS season,\n        stint,\n        g_lf AS games_left_field,\n        g_cf AS games_center_field,\n        g_rf AS games_right_field,\n    FROM source\n)\n\nSELECT * FROM renamed", "relation_name": "\"timeball\".\"main_models\".\"stg_databank_fielding_of\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:52.849777Z", "completed_at": "2023-12-09T18:55:52.852930Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:52.853591Z", "completed_at": "2023-12-09T18:55:52.853595Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005229949951171875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.timeball.stg_databank_pitching", "compiled": true, "compiled_code": "WITH source AS (\n    SELECT * FROM \"timeball\".\"baseballdatabank\".\"pitching\"\n),\n\nrenamed AS (\n    SELECT\n        player_id AS databank_player_id,\n        year_id AS season,\n        stint,\n        team_id AS team_id,\n        lg_id AS league_id,\n        w AS wins,\n        l AS losses,\n        g AS games,\n        gs AS games_started,\n        cg AS complete_games,\n        sho AS shutouts,\n        sv AS saves,\n        ip_outs AS outs_recorded,\n        h AS hits,\n        er AS earned_runs,\n        hr AS home_runs,\n        bb AS walks,\n        so AS strikeouts,\n        -- OAV could be used in theory to back into at-bats against,\n        -- but isn't populated for the years we source from this data\n        ba_opp AS opponent_batting_average,\n        era AS earned_run_average,\n        ibb AS intentional_walks,\n        wp AS wild_pitches,\n        hbp AS hit_by_pitches,\n        bk AS balks,\n        bfp AS batters_faced,\n        gf AS games_finished,\n        r AS runs,\n        sh AS sacrifice_hits,\n        sf AS sacrifice_flies,\n        gidp AS grounded_into_double_plays\n    FROM source\n)\n\nSELECT * from renamed", "relation_name": "\"timeball\".\"main_models\".\"stg_databank_pitching\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:52.855715Z", "completed_at": "2023-12-09T18:55:52.858307Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:52.858957Z", "completed_at": "2023-12-09T18:55:52.858960Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00458216667175293, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.timeball.stg_event_audit", "compiled": true, "compiled_code": "WITH source AS (\n    SELECT * FROM \"timeball\".\"event\".\"event_audit\"\n),\n\nrenamed AS (\n    SELECT\n        game_id,\n        event_id,\n        filename,\n        line_number,\n        event_key,\n        raw_play\n    FROM source\n)\n\nSELECT * FROM renamed", "relation_name": "\"timeball\".\"main_models\".\"stg_event_audit\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:52.861058Z", "completed_at": "2023-12-09T18:55:52.864199Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:52.864903Z", "completed_at": "2023-12-09T18:55:52.864908Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005402803421020508, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.timeball.stg_event_baserunners", "compiled": true, "compiled_code": "WITH source AS (\n    SELECT * FROM \"timeball\".\"event\".\"event_baserunners\"\n),\n\nrenamed AS (\n    SELECT\n        game_id,\n        event_id,\n        event_key,\n        baserunner,\n        runner_lineup_position,\n        runner_id,\n        charge_event_id,\n        reached_on_event_id,\n        explicit_charged_pitcher_id,\n        attempted_advance_to_base,\n        baserunning_play_type,\n        is_out,\n        base_end,\n        advanced_on_error_flag,\n        explicit_out_flag,\n        run_scored_flag,\n        rbi_flag,\n        (event_key // 255 * 255 + reached_on_event_id)::UINTEGER AS reached_on_event_key,\n        (event_key // 255 * 255 + charge_event_id)::UINTEGER AS charge_event_key,\n        -- Bitwise agg of this gives us the full base_state\n        CASE baserunner\n            WHEN 'First' THEN 1\n            WHEN 'Second' THEN 2\n            WHEN 'Third' THEN 4\n        END AS baserunner_bit,\n        attempted_advance_to_base IS NOT NULL AS is_advance_attempt,\n\n    FROM source\n)\n\nSELECT * FROM renamed", "relation_name": "\"timeball\".\"main_models\".\"stg_event_baserunners\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:52.867276Z", "completed_at": "2023-12-09T18:55:52.869929Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:52.870578Z", "completed_at": "2023-12-09T18:55:52.870582Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00465083122253418, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.timeball.stg_event_comments", "compiled": true, "compiled_code": "WITH source AS (\n    SELECT * FROM \"timeball\".\"event\".\"event_comments\"\n),\n\nrenamed AS (\n    SELECT DISTINCT\n        event_key,\n        comment\n    FROM source\n    WHERE comment IS NOT NULL\n)\n\nSELECT * FROM renamed", "relation_name": "\"timeball\".\"main_models\".\"stg_event_comments\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:52.872666Z", "completed_at": "2023-12-09T18:55:52.875121Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:52.875755Z", "completed_at": "2023-12-09T18:55:52.875758Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0044362545013427734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.timeball.stg_event_fielding_plays", "compiled": true, "compiled_code": "WITH source AS (\n    SELECT * FROM \"timeball\".\"event\".\"event_fielding_play\"\n),\n\nrenamed AS (\n    SELECT\n        game_id,\n        event_id,\n        event_key,\n        sequence_id,\n        fielding_position,\n        fielding_play,\n\n    FROM source\n)\n\nSELECT * FROM renamed", "relation_name": "\"timeball\".\"main_models\".\"stg_event_fielding_plays\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:52.877834Z", "completed_at": "2023-12-09T18:55:52.880424Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:52.881156Z", "completed_at": "2023-12-09T18:55:52.881163Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004712820053100586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.timeball.stg_event_flags", "compiled": true, "compiled_code": "WITH source AS (\n    SELECT * FROM \"timeball\".\"event\".\"event_flags\"\n),\n\nrenamed AS (\n    SELECT\n        event_key,\n        sequence_id,\n        flag,\n\n    FROM source\n)\n\nSELECT * FROM renamed", "relation_name": "\"timeball\".\"main_models\".\"stg_event_flags\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:52.883383Z", "completed_at": "2023-12-09T18:55:52.886081Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:52.886729Z", "completed_at": "2023-12-09T18:55:52.886732Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0047070980072021484, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.timeball.stg_event_pitch_sequences", "compiled": true, "compiled_code": "WITH source AS (\n    SELECT * FROM \"timeball\".\"event\".\"event_pitch_sequences\"\n),\n\nrenamed AS (\n    SELECT\n        game_id,\n        event_id,\n        event_key,\n        sequence_id,\n        sequence_item,\n        runners_going_flag,\n        blocked_by_catcher_flag,\n        catcher_pickoff_attempt_at_base,\n        STRPTIME(SUBSTRING(game_id, 4, 8), '%Y%m%d')::DATE AS date,\n        SUBSTRING(game_id, 4, 4)::INT2 AS season,\n\n    FROM source\n)\n\nSELECT * FROM renamed", "relation_name": "\"timeball\".\"main_models\".\"stg_event_pitch_sequences\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:52.888841Z", "completed_at": "2023-12-09T18:55:52.893230Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:52.893874Z", "completed_at": "2023-12-09T18:55:52.893877Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006371974945068359, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.timeball.stg_events", "compiled": true, "compiled_code": "WITH source AS (\n    SELECT * FROM \"timeball\".\"event\".\"events\"\n),\n\nrenamed AS (\n    SELECT\n        game_id,\n        event_id,\n        event_key,\n        -- TODO: Add plate appearance id\n        batting_side,\n        inning,\n        frame,\n        batter_lineup_position,\n        batter_id,\n        pitcher_id,\n        batting_team_id,\n        fielding_team_id,\n        outs,\n        count_balls,\n        count_strikes,\n        base_state,\n        LEFT(specified_batter_hand, 1)::HAND AS specified_batter_hand,\n        LEFT(specified_pitcher_hand, 1)::HAND AS specified_pitcher_hand,\n        strikeout_responsible_batter_id,\n        walk_responsible_pitcher_id,\n        plate_appearance_result,\n        batted_trajectory,\n        batted_to_fielder,\n        batted_location_general,\n        batted_location_depth,\n        batted_location_angle,\n        batted_contact_strength,\n        outs_on_play,\n        runs_on_play,\n        runs_batted_in,\n        team_unearned_runs,\n        no_play_flag,\n        STRPTIME(SUBSTRING(game_id, 4, 8), '%Y%m%d')::DATE AS date,\n        SUBSTRING(game_id, 4, 4)::INT2 AS season,\n        BIT_COUNT(base_state) AS runners_count,\n    from source\n)\n\nSELECT * from renamed", "relation_name": "\"timeball\".\"main_models\".\"stg_events\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:52.896091Z", "completed_at": "2023-12-09T18:55:52.898978Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:52.899680Z", "completed_at": "2023-12-09T18:55:52.899684Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004949808120727539, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.timeball.stg_game_earned_runs", "compiled": true, "compiled_code": "WITH source AS (\n    SELECT * FROM \"timeball\".\"game\".\"game_earned_runs\"\n),\n\nrenamed AS (\n    SELECT\n        game_id,\n        player_id,\n        earned_runs\n    FROM source\n)\n\nSELECT * FROM renamed", "relation_name": "\"timeball\".\"main_models\".\"stg_game_earned_runs\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:52.901829Z", "completed_at": "2023-12-09T18:55:52.904434Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:52.905088Z", "completed_at": "2023-12-09T18:55:52.905091Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004603147506713867, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.timeball.stg_game_fielding_appearances", "compiled": true, "compiled_code": "WITH source AS (\n    SELECT * FROM \"timeball\".\"game\".\"game_fielding_appearances\"\n),\n\nrenamed AS (\n    SELECT\n        game_id,\n        player_id,\n        side,\n        fielding_position,\n        start_event_id,\n        end_event_id,\n    FROM source\n)\n\nSELECT * FROM renamed", "relation_name": "\"timeball\".\"main_models\".\"stg_game_fielding_appearances\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:52.907394Z", "completed_at": "2023-12-09T18:55:52.909976Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:52.910628Z", "completed_at": "2023-12-09T18:55:52.910631Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004609107971191406, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.timeball.stg_game_lineup_appearances", "compiled": true, "compiled_code": "WITH source AS (\n    SELECT * FROM \"timeball\".\"game\".\"game_lineup_appearances\"\n),\n\nrenamed AS (\n    SELECT\n        game_id,\n        player_id,\n        side,\n        lineup_position,\n        entered_game_as,\n        start_event_id,\n        end_event_id,\n\n    FROM source\n)\n\nSELECT * FROM renamed", "relation_name": "\"timeball\".\"main_models\".\"stg_game_lineup_appearances\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:52.912728Z", "completed_at": "2023-12-09T18:55:52.915750Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:52.916415Z", "completed_at": "2023-12-09T18:55:52.916419Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0050449371337890625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.timeball.stg_gamelog", "compiled": true, "compiled_code": "WITH source AS (\n    SELECT * FROM \"timeball\".\"misc\".\"gamelog\"\n),\n\nrenamed AS (\n    SELECT\n        EXTRACT(YEAR FROM date)::INT2 AS season,\n        date::DATE AS date, -- noqa: RF04\n        CASE double_header\n            WHEN 0 THEN 'SingleGame'\n            WHEN 1 THEN 'DoubleHeaderGame1'\n            WHEN 2 THEN 'DoubleHeaderGame2'\n            WHEN 3 THEN 'DoubleHeaderGame3'\n        END::DOUBLEHEADER_STATUS AS doubleheader_status,\n        home_team || STRFTIME(date, '%Y%m%d') || double_header AS game_id,\n        visiting_team::TEAM_ID AS away_team_id,\n        home_team::TEAM_ID AS home_team_id,\n        CASE day_night WHEN 'N' THEN 'Night' ELSE 'Day' END::TIME_OF_DAY AS time_of_day,\n        park_id::PARK_ID AS park_id,\n        attendance,\n        umpire_h_id AS umpire_home_id,\n        umpire_1b_id AS umpire_first_id,\n        umpire_2b_id AS umpire_second_id,\n        umpire_3b_id AS umpire_third_id,\n        visitor_starting_pitcher_id::PLAYER_ID AS away_starting_pitcher_id,\n        home_starting_pitcher_id::PLAYER_ID AS home_starting_pitcher_id,\n        additional_info,\n        CASE WHEN additional_info LIKE '%HTBF%' THEN 'Home' ELSE 'Away' END::SIDE AS bat_first_side,\n        -- These two might need to be updated if there's ever another game without acq info\n        (EXTRACT(year from date) >= 1973 AND home_team_league = 'AL') AS use_dh,\n        'RegularSeason'::GAME_TYPE AS game_type,\n        -- Everything below is post-game knowledge\n        duration::INT2 AS duration_minutes,\n        -- TODO: Fix spelling in original\n        vistor_line_score AS away_line_score,\n        home_line_score,\n        -- TODO: Fix spelling in original\n        visitor_runs_scored::UTINYINT AS away_runs_scored,\n        home_runs_score::UTINYINT AS home_runs_scored,\n        forfeit_info,\n        'GameLog' AS source_type\n    FROM source\n)\n\nSELECT * FROM renamed", "relation_name": "\"timeball\".\"main_models\".\"stg_gamelog\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:52.918741Z", "completed_at": "2023-12-09T18:55:52.922117Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:52.922812Z", "completed_at": "2023-12-09T18:55:52.922816Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005604982376098633, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.timeball.stg_games", "compiled": true, "compiled_code": "WITH from_box_scores AS (\n    SELECT *\n    FROM \"timeball\".\"box_score\".\"box_score_games\"\n    WHERE game_id NOT IN (SELECT game_id FROM \"timeball\".\"game\".\"games\")\n),\n\nunioned AS (\n    SELECT\n        *,\n        'PlayByPlay' AS source_type\n    FROM \"timeball\".\"game\".\"games\"\n    UNION ALL\n    SELECT\n        *,\n        'BoxScore' AS source_type\n    FROM from_box_scores\n),\n\nrenamed AS (\n    SELECT\n        game_id,\n        game_key,\n        date,\n        start_time,\n        doubleheader_status,\n        time_of_day,\n        -- TODO: Fix all-star games without game type in raw data\n        CASE WHEN REGEXP_FULL_MATCH(filename, '\\d{4}AS.EVE')\n                THEN 'AllStarGame'::GAME_TYPE\n            ELSE game_type\n        END AS game_type,\n        bat_first_side,\n        sky,\n        field_condition,\n        precipitation,\n        wind_direction,\n        park_id,\n        temperature_fahrenheit,\n        CASE\n            WHEN attendance = 0 AND EXTRACT(YEAR FROM date) != 2020\n                THEN NULL\n            ELSE attendance\n        END::UINTEGER AS attendance,\n        wind_speed_mph,\n        use_dh,\n        -- TODO: Change in source\n        winning_pitcher AS winning_pitcher_id,\n        losing_pitcher AS losing_pitcher_id,\n        save_pitcher AS save_pitcher_id,\n        game_winning_rbi AS game_winning_rbi_player_id,\n        time_of_game_minutes AS duration_minutes,\n        protest_info,\n        completion_info,\n        scorer,\n        scoring_method,\n        inputter,\n        translator,\n        date_inputted,\n        date_edited,\n        account_type,\n        filename,\n        source_type,\n        away_team_id,\n        home_team_id,\n        umpire_home_id,\n        umpire_first_id,\n        umpire_second_id,\n        umpire_third_id,\n        umpire_left_id,\n        umpire_right_id,\n        EXTRACT(YEAR FROM date)::INT2 AS season,\n    FROM unioned\n)\n\nSELECT * FROM renamed", "relation_name": "\"timeball\".\"main_models\".\"stg_games\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:52.925114Z", "completed_at": "2023-12-09T18:55:52.927679Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:52.928324Z", "completed_at": "2023-12-09T18:55:52.928328Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004694938659667969, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.timeball.stg_parks", "compiled": true, "compiled_code": "WITH source AS (\n    SELECT * FROM \"timeball\".\"misc\".\"park\"\n),\n\nrenamed AS (\n    SELECT\n        park_id,\n        name,\n        aka,\n        city,\n        state,\n        start_date,\n        end_date,\n        league,\n        notes\n\n    FROM source\n)\n\nSELECT * FROM renamed", "relation_name": "\"timeball\".\"main_models\".\"stg_parks\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:52.930620Z", "completed_at": "2023-12-09T18:55:52.933597Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:52.934273Z", "completed_at": "2023-12-09T18:55:52.934278Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005202054977416992, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.timeball.stg_people", "compiled": true, "compiled_code": "WITH source AS (\n    SELECT * FROM \"timeball\".\"baseballdatabank\".\"people\"\n),\n\nrenamed AS (\n    SELECT\n        retro_id AS retrosheet_player_id,\n        bbref_id AS baseball_reference_player_id,\n        player_id AS databank_player_id,\n        birth_year AS birth_year,\n        birth_month AS birth_month,\n        birth_day AS birth_day,\n        birth_country AS birth_country,\n        birth_state AS birth_state,\n        birth_city AS birth_city,\n        death_year AS death_year,\n        death_month AS death_month,\n        death_day AS death_day,\n        death_country AS death_country,\n        death_state AS death_state,\n        death_city AS death_city,\n        name_first AS first_name,\n        name_last AS last_name,\n        name_given AS given_name,\n        weight AS weight_pounds,\n        height AS height_inches,\n        bats,\n        throws,\n        debut,\n        final_game AS final_game,\n        ROW_NUMBER() OVER (order by player_id) AS internal_id\n    FROM source\n)\n\nSELECT * FROM renamed", "relation_name": "\"timeball\".\"main_models\".\"stg_people\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:52.936427Z", "completed_at": "2023-12-09T18:55:52.938980Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:52.939609Z", "completed_at": "2023-12-09T18:55:52.939612Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004520893096923828, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.timeball.stg_rosters", "compiled": true, "compiled_code": "WITH source AS (\n    SELECT * FROM \"timeball\".\"misc\".\"roster\"\n),\n\nrenamed AS (\n    SELECT\n        year,\n        player_id,\n        last_name,\n        first_name,\n        NULLIF(bats, '?') AS bats,\n        NULLIF(throws, '?') AS throws,\n        team_id,\n        position\n\n    FROM source\n    -- TODO: Modify upstream deduper to handle multiple positions on same team\n    -- (or talk to retrosheet)\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY year, team_id, player_id ORDER BY position) = 1\n)\n\nSELECT * FROM renamed", "relation_name": "\"timeball\".\"main_models\".\"stg_rosters\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:52.941770Z", "completed_at": "2023-12-09T18:55:52.944340Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:52.944985Z", "completed_at": "2023-12-09T18:55:52.944989Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004619121551513672, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.timeball.stg_schedule", "compiled": true, "compiled_code": "WITH source AS (\n    SELECT * FROM \"timeball\".\"misc\".\"schedule\"\n),\n\nrenamed AS (\n    SELECT\n        date,\n        double_header,\n        day_of_week,\n        visiting_team,\n        visiting_team_league,\n        visiting_team_game_number,\n        home_team,\n        home_team_league,\n        home_team_game_number,\n        day_night,\n        postponement_indicator,\n        makeup_dates\n\n    FROM source\n)\n\nSELECT * FROM renamed", "relation_name": "\"timeball\".\"main_models\".\"stg_schedule\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:52.947125Z", "completed_at": "2023-12-09T18:55:52.950593Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:52.951307Z", "completed_at": "2023-12-09T18:55:52.951311Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005591154098510742, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.timeball.seed_base_state_info", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:52.953480Z", "completed_at": "2023-12-09T18:55:52.954730Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:52.955366Z", "completed_at": "2023-12-09T18:55:52.955369Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0032160282135009766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.timeball.seed_baserunner_info", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:52.957407Z", "completed_at": "2023-12-09T18:55:52.958627Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:52.959264Z", "completed_at": "2023-12-09T18:55:52.959267Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.003167867660522461, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.timeball.seed_baserunning_play_types", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:52.961356Z", "completed_at": "2023-12-09T18:55:52.962598Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:52.963250Z", "completed_at": "2023-12-09T18:55:52.963254Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.003278970718383789, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.timeball.seed_bases_info", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:52.965651Z", "completed_at": "2023-12-09T18:55:52.967087Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:52.967771Z", "completed_at": "2023-12-09T18:55:52.967775Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0036787986755371094, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.timeball.seed_country_regions", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:52.969933Z", "completed_at": "2023-12-09T18:55:52.971182Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:52.971821Z", "completed_at": "2023-12-09T18:55:52.971824Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0032629966735839844, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.timeball.seed_double_play_flag_types", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:52.974117Z", "completed_at": "2023-12-09T18:55:52.975404Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:52.976060Z", "completed_at": "2023-12-09T18:55:52.976063Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0034513473510742188, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.timeball.seed_franchises", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:52.978178Z", "completed_at": "2023-12-09T18:55:52.979390Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:52.980002Z", "completed_at": "2023-12-09T18:55:52.980006Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.003201007843017578, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.timeball.seed_game_types", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:52.982325Z", "completed_at": "2023-12-09T18:55:52.983681Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:52.984354Z", "completed_at": "2023-12-09T18:55:52.984357Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0034530162811279297, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.timeball.seed_hit_location_alignments", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:52.986448Z", "completed_at": "2023-12-09T18:55:52.987674Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:52.988294Z", "completed_at": "2023-12-09T18:55:52.988297Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0031747817993164062, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.timeball.seed_hit_location_angles", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:52.990458Z", "completed_at": "2023-12-09T18:55:52.991688Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:52.992305Z", "completed_at": "2023-12-09T18:55:52.992308Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0031690597534179688, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.timeball.seed_hit_location_categories", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:52.994372Z", "completed_at": "2023-12-09T18:55:52.997542Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:52.998330Z", "completed_at": "2023-12-09T18:55:52.998336Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005347728729248047, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.timeball.seed_hit_location_distance_buckets", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.000526Z", "completed_at": "2023-12-09T18:55:53.001785Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.002421Z", "completed_at": "2023-12-09T18:55:53.002424Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.003267049789428711, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.timeball.seed_hit_to_fielder_categories", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.004495Z", "completed_at": "2023-12-09T18:55:53.005716Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.006357Z", "completed_at": "2023-12-09T18:55:53.006360Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.003195047378540039, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.timeball.seed_outfield_hit_inference", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.008429Z", "completed_at": "2023-12-09T18:55:53.009650Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.010271Z", "completed_at": "2023-12-09T18:55:53.010274Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0032110214233398438, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.timeball.seed_pitch_types", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.012406Z", "completed_at": "2023-12-09T18:55:53.013628Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.014289Z", "completed_at": "2023-12-09T18:55:53.014292Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.003329038619995117, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.timeball.seed_plate_appearance_result_types", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.016697Z", "completed_at": "2023-12-09T18:55:53.018015Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.018654Z", "completed_at": "2023-12-09T18:55:53.018658Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.003376007080078125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.timeball.seed_plate_appearance_trajectories", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.020785Z", "completed_at": "2023-12-09T18:55:53.022021Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.022668Z", "completed_at": "2023-12-09T18:55:53.022671Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0032591819763183594, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.timeball.seed_scorer_disambiguation", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.024709Z", "completed_at": "2023-12-09T18:55:53.025917Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.026535Z", "completed_at": "2023-12-09T18:55:53.026538Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.003136157989501953, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.timeball.seed_scorer_lookup", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.028613Z", "completed_at": "2023-12-09T18:55:53.029800Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.030461Z", "completed_at": "2023-12-09T18:55:53.030467Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0032701492309570312, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.timeball.seed_scorer_numerical_ranges", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.032727Z", "completed_at": "2023-12-09T18:55:53.034043Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.034669Z", "completed_at": "2023-12-09T18:55:53.034672Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0032739639282226562, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.timeball.seed_stat_categories", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.036742Z", "completed_at": "2023-12-09T18:55:53.037988Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.038623Z", "completed_at": "2023-12-09T18:55:53.038626Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.003256082534790039, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.timeball.seed_us_states_regions", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.040770Z", "completed_at": "2023-12-09T18:55:53.050345Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.051026Z", "completed_at": "2023-12-09T18:55:53.051030Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.011623859405517578, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.source_not_null_baseballdatabank_people_playerid.15b902dc68", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect playerid\nfrom \"timeball\".\"baseballdatabank\".\"people\"\nwhere playerid is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.053283Z", "completed_at": "2023-12-09T18:55:53.057105Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.057776Z", "completed_at": "2023-12-09T18:55:53.057780Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005908966064453125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.source_not_null_box_score_box_score_batting_lines_at_bats.b6d88915f8", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect at_bats\nfrom \"timeball\".\"box_score\".\"box_score_batting_lines\"\nwhere at_bats is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.059897Z", "completed_at": "2023-12-09T18:55:53.063520Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.064183Z", "completed_at": "2023-12-09T18:55:53.064189Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005731105804443359, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.source_not_null_box_score_box_score_batting_lines_batter_id.d0f6fb2a89", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect batter_id\nfrom \"timeball\".\"box_score\".\"box_score_batting_lines\"\nwhere batter_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.066508Z", "completed_at": "2023-12-09T18:55:53.070445Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.071106Z", "completed_at": "2023-12-09T18:55:53.071110Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005988121032714844, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.source_not_null_box_score_box_score_batting_lines_game_id.57dbc78fca", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect game_id\nfrom \"timeball\".\"box_score\".\"box_score_batting_lines\"\nwhere game_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.073241Z", "completed_at": "2023-12-09T18:55:53.077197Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.077865Z", "completed_at": "2023-12-09T18:55:53.077869Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005988121032714844, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.source_not_null_box_score_box_score_batting_lines_lineup_position.ad36913951", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect lineup_position\nfrom \"timeball\".\"box_score\".\"box_score_batting_lines\"\nwhere lineup_position is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.080016Z", "completed_at": "2023-12-09T18:55:53.084417Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.085112Z", "completed_at": "2023-12-09T18:55:53.085116Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006490945816040039, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.source_not_null_box_score_box_score_batting_lines_nth_player_at_position.b79200b54d", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect nth_player_at_position\nfrom \"timeball\".\"box_score\".\"box_score_batting_lines\"\nwhere nth_player_at_position is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.087316Z", "completed_at": "2023-12-09T18:55:53.090879Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.091532Z", "completed_at": "2023-12-09T18:55:53.091535Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005589008331298828, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.source_not_null_box_score_box_score_batting_lines_side.002275cba3", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect side\nfrom \"timeball\".\"box_score\".\"box_score_batting_lines\"\nwhere side is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.093682Z", "completed_at": "2023-12-09T18:55:53.097611Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.098530Z", "completed_at": "2023-12-09T18:55:53.098539Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0063970088958740234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.source_not_null_box_score_box_score_caught_stealing_game_id.6f95dd8a54", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect game_id\nfrom \"timeball\".\"box_score\".\"box_score_caught_stealing\"\nwhere game_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.101060Z", "completed_at": "2023-12-09T18:55:53.105092Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.105787Z", "completed_at": "2023-12-09T18:55:53.105792Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006262063980102539, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.source_not_null_box_score_box_score_caught_stealing_runner_id.f0b3ec2fc3", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect runner_id\nfrom \"timeball\".\"box_score\".\"box_score_caught_stealing\"\nwhere runner_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.108223Z", "completed_at": "2023-12-09T18:55:53.112140Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.112810Z", "completed_at": "2023-12-09T18:55:53.112814Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0062181949615478516, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.source_not_null_box_score_box_score_caught_stealing_running_side.e9ccccfdf3", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect running_side\nfrom \"timeball\".\"box_score\".\"box_score_caught_stealing\"\nwhere running_side is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.115228Z", "completed_at": "2023-12-09T18:55:53.121302Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.121974Z", "completed_at": "2023-12-09T18:55:53.121979Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00837397575378418, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.source_not_null_box_score_box_score_comments_comment.27f5650bb2", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect comment\nfrom \"timeball\".\"box_score\".\"box_score_comments\"\nwhere comment is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.124165Z", "completed_at": "2023-12-09T18:55:53.127822Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.128464Z", "completed_at": "2023-12-09T18:55:53.128467Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00567173957824707, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.source_not_null_box_score_box_score_comments_game_id.ee9b68198f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect game_id\nfrom \"timeball\".\"box_score\".\"box_score_comments\"\nwhere game_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.130775Z", "completed_at": "2023-12-09T18:55:53.134899Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.135576Z", "completed_at": "2023-12-09T18:55:53.135581Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006361961364746094, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.source_not_null_box_score_box_score_comments_sequence_id.61b7b70a39", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect sequence_id\nfrom \"timeball\".\"box_score\".\"box_score_comments\"\nwhere sequence_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.137834Z", "completed_at": "2023-12-09T18:55:53.141740Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.142412Z", "completed_at": "2023-12-09T18:55:53.142416Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0060329437255859375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.source_not_null_box_score_box_score_double_plays_defense_side.cea8fd9283", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect defense_side\nfrom \"timeball\".\"box_score\".\"box_score_double_plays\"\nwhere defense_side is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.144564Z", "completed_at": "2023-12-09T18:55:53.148297Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.148991Z", "completed_at": "2023-12-09T18:55:53.148998Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005816221237182617, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.source_not_null_box_score_box_score_double_plays_game_id.3eb854846f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect game_id\nfrom \"timeball\".\"box_score\".\"box_score_double_plays\"\nwhere game_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.151200Z", "completed_at": "2023-12-09T18:55:53.155044Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.155727Z", "completed_at": "2023-12-09T18:55:53.155731Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0059010982513427734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.source_not_null_box_score_box_score_fielding_lines_fielder_id.cf9c2b33ad", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect fielder_id\nfrom \"timeball\".\"box_score\".\"box_score_fielding_lines\"\nwhere fielder_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.157931Z", "completed_at": "2023-12-09T18:55:53.161777Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.162442Z", "completed_at": "2023-12-09T18:55:53.162446Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005926847457885742, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.source_not_null_box_score_box_score_fielding_lines_fielding_position.1a91f0160e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect fielding_position\nfrom \"timeball\".\"box_score\".\"box_score_fielding_lines\"\nwhere fielding_position is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.164728Z", "completed_at": "2023-12-09T18:55:53.168855Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.169519Z", "completed_at": "2023-12-09T18:55:53.169523Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006232261657714844, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.source_not_null_box_score_box_score_fielding_lines_game_id.8a41130214", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect game_id\nfrom \"timeball\".\"box_score\".\"box_score_fielding_lines\"\nwhere game_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.171679Z", "completed_at": "2023-12-09T18:55:53.175397Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.176055Z", "completed_at": "2023-12-09T18:55:53.176058Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00574493408203125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.source_not_null_box_score_box_score_fielding_lines_nth_position_played_by_player.3dc8b9aa9e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect nth_position_played_by_player\nfrom \"timeball\".\"box_score\".\"box_score_fielding_lines\"\nwhere nth_position_played_by_player is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.178298Z", "completed_at": "2023-12-09T18:55:53.182252Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.182937Z", "completed_at": "2023-12-09T18:55:53.182942Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006021022796630859, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.source_not_null_box_score_box_score_fielding_lines_side.c31b2fa481", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect side\nfrom \"timeball\".\"box_score\".\"box_score_fielding_lines\"\nwhere side is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.185089Z", "completed_at": "2023-12-09T18:55:53.190615Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.191270Z", "completed_at": "2023-12-09T18:55:53.191274Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00754094123840332, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.source_not_null_box_score_box_score_games_account_type.ee49ce5d5e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect account_type\nfrom \"timeball\".\"box_score\".\"box_score_games\"\nwhere account_type is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.193383Z", "completed_at": "2023-12-09T18:55:53.196951Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.197610Z", "completed_at": "2023-12-09T18:55:53.197614Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005869865417480469, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.source_not_null_box_score_box_score_games_away_team_id.3db65a46ed", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect away_team_id\nfrom \"timeball\".\"box_score\".\"box_score_games\"\nwhere away_team_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.200225Z", "completed_at": "2023-12-09T18:55:53.203945Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.204606Z", "completed_at": "2023-12-09T18:55:53.204610Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005787849426269531, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.source_not_null_box_score_box_score_games_bat_first_side.f20df82299", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect bat_first_side\nfrom \"timeball\".\"box_score\".\"box_score_games\"\nwhere bat_first_side is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.206697Z", "completed_at": "2023-12-09T18:55:53.210258Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.210900Z", "completed_at": "2023-12-09T18:55:53.210903Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005545854568481445, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.source_not_null_box_score_box_score_games_date.4e354fb03d", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom \"timeball\".\"box_score\".\"box_score_games\"\nwhere date is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.213012Z", "completed_at": "2023-12-09T18:55:53.217011Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.217684Z", "completed_at": "2023-12-09T18:55:53.217688Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006050825119018555, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.source_not_null_box_score_box_score_games_doubleheader_status.d596eb38d8", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect doubleheader_status\nfrom \"timeball\".\"box_score\".\"box_score_games\"\nwhere doubleheader_status is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.219872Z", "completed_at": "2023-12-09T18:55:53.223637Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.224288Z", "completed_at": "2023-12-09T18:55:53.224292Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005803108215332031, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.source_not_null_box_score_box_score_games_field_condition.db9cd2b113", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect field_condition\nfrom \"timeball\".\"box_score\".\"box_score_games\"\nwhere field_condition is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.226443Z", "completed_at": "2023-12-09T18:55:53.230117Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.230754Z", "completed_at": "2023-12-09T18:55:53.230758Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005694866180419922, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.source_not_null_box_score_box_score_games_game_id.44872eca82", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect game_id\nfrom \"timeball\".\"box_score\".\"box_score_games\"\nwhere game_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.233065Z", "completed_at": "2023-12-09T18:55:53.236908Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.237571Z", "completed_at": "2023-12-09T18:55:53.237575Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005908012390136719, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.source_not_null_box_score_box_score_games_game_key.76f62a5ea0", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect game_key\nfrom \"timeball\".\"box_score\".\"box_score_games\"\nwhere game_key is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.239707Z", "completed_at": "2023-12-09T18:55:53.243213Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.243857Z", "completed_at": "2023-12-09T18:55:53.243861Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0055119991302490234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.source_not_null_box_score_box_score_games_game_type.bec21d95d6", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect game_type\nfrom \"timeball\".\"box_score\".\"box_score_games\"\nwhere game_type is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.245921Z", "completed_at": "2023-12-09T18:55:53.249925Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.250595Z", "completed_at": "2023-12-09T18:55:53.250599Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006031036376953125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.source_not_null_box_score_box_score_games_home_team_id.7a5b9e78fc", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect home_team_id\nfrom \"timeball\".\"box_score\".\"box_score_games\"\nwhere home_team_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.252766Z", "completed_at": "2023-12-09T18:55:53.258253Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.258912Z", "completed_at": "2023-12-09T18:55:53.258916Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007513999938964844, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.source_not_null_box_score_box_score_games_park_id.2bbc694559", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect park_id\nfrom \"timeball\".\"box_score\".\"box_score_games\"\nwhere park_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.261029Z", "completed_at": "2023-12-09T18:55:53.264674Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.265404Z", "completed_at": "2023-12-09T18:55:53.265408Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005780220031738281, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.source_not_null_box_score_box_score_games_precipitation.b66a143e37", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect precipitation\nfrom \"timeball\".\"box_score\".\"box_score_games\"\nwhere precipitation is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.267639Z", "completed_at": "2023-12-09T18:55:53.271414Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.272057Z", "completed_at": "2023-12-09T18:55:53.272060Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005786895751953125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.source_not_null_box_score_box_score_games_scoring_method.2983bc45ed", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect scoring_method\nfrom \"timeball\".\"box_score\".\"box_score_games\"\nwhere scoring_method is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.274127Z", "completed_at": "2023-12-09T18:55:53.277708Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.278361Z", "completed_at": "2023-12-09T18:55:53.278365Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005568027496337891, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.source_not_null_box_score_box_score_games_sky.d531881035", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect sky\nfrom \"timeball\".\"box_score\".\"box_score_games\"\nwhere sky is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.280619Z", "completed_at": "2023-12-09T18:55:53.284957Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.285651Z", "completed_at": "2023-12-09T18:55:53.285655Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006548881530761719, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.source_not_null_box_score_box_score_games_time_of_day.c0265c9214", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect time_of_day\nfrom \"timeball\".\"box_score\".\"box_score_games\"\nwhere time_of_day is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.288022Z", "completed_at": "2023-12-09T18:55:53.291756Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.292438Z", "completed_at": "2023-12-09T18:55:53.292442Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005918979644775391, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.source_not_null_box_score_box_score_games_use_dh.0576fbd0ba", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect use_dh\nfrom \"timeball\".\"box_score\".\"box_score_games\"\nwhere use_dh is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.294558Z", "completed_at": "2023-12-09T18:55:53.298408Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.299116Z", "completed_at": "2023-12-09T18:55:53.299121Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005944013595581055, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.source_not_null_box_score_box_score_games_wind_direction.61c0ecd269", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect wind_direction\nfrom \"timeball\".\"box_score\".\"box_score_games\"\nwhere wind_direction is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.301343Z", "completed_at": "2023-12-09T18:55:53.305201Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.305857Z", "completed_at": "2023-12-09T18:55:53.305860Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005936861038208008, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.source_not_null_box_score_box_score_home_runs_batter_id.61a8db5c58", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect batter_id\nfrom \"timeball\".\"box_score\".\"box_score_home_runs\"\nwhere batter_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.308009Z", "completed_at": "2023-12-09T18:55:53.311585Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.312223Z", "completed_at": "2023-12-09T18:55:53.312226Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0055599212646484375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.source_not_null_box_score_box_score_home_runs_batting_side.d8a1a565f0", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect batting_side\nfrom \"timeball\".\"box_score\".\"box_score_home_runs\"\nwhere batting_side is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.314964Z", "completed_at": "2023-12-09T18:55:53.320682Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.321338Z", "completed_at": "2023-12-09T18:55:53.321342Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00830221176147461, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.source_not_null_box_score_box_score_home_runs_game_id.e28865fff5", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect game_id\nfrom \"timeball\".\"box_score\".\"box_score_home_runs\"\nwhere game_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.323482Z", "completed_at": "2023-12-09T18:55:53.327066Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.327721Z", "completed_at": "2023-12-09T18:55:53.327725Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005585908889770508, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.source_not_null_box_score_box_score_home_runs_pitcher_id.469cea3d74", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect pitcher_id\nfrom \"timeball\".\"box_score\".\"box_score_home_runs\"\nwhere pitcher_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.329864Z", "completed_at": "2023-12-09T18:55:53.333953Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.334637Z", "completed_at": "2023-12-09T18:55:53.334641Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006161212921142578, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.source_not_null_box_score_box_score_pinch_hitting_lines_game_id.162a4e38b5", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect game_id\nfrom \"timeball\".\"box_score\".\"box_score_pinch_hitting_lines\"\nwhere game_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.336816Z", "completed_at": "2023-12-09T18:55:53.340588Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.341236Z", "completed_at": "2023-12-09T18:55:53.341239Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0057947635650634766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.source_not_null_box_score_box_score_pinch_hitting_lines_pinch_hitter_id.bae1f38990", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect pinch_hitter_id\nfrom \"timeball\".\"box_score\".\"box_score_pinch_hitting_lines\"\nwhere pinch_hitter_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.343371Z", "completed_at": "2023-12-09T18:55:53.347191Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.347878Z", "completed_at": "2023-12-09T18:55:53.347883Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005945682525634766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.source_not_null_box_score_box_score_pinch_hitting_lines_side.d772416d56", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect side\nfrom \"timeball\".\"box_score\".\"box_score_pinch_hitting_lines\"\nwhere side is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.350203Z", "completed_at": "2023-12-09T18:55:53.354004Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.354674Z", "completed_at": "2023-12-09T18:55:53.354678Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005862236022949219, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.source_not_null_box_score_box_score_pinch_running_lines_game_id.08777674e3", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect game_id\nfrom \"timeball\".\"box_score\".\"box_score_pinch_running_lines\"\nwhere game_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.356932Z", "completed_at": "2023-12-09T18:55:53.360969Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.361642Z", "completed_at": "2023-12-09T18:55:53.361646Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006181955337524414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.source_not_null_box_score_box_score_pinch_running_lines_pinch_runner_id.b0d9ccfc3e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect pinch_runner_id\nfrom \"timeball\".\"box_score\".\"box_score_pinch_running_lines\"\nwhere pinch_runner_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.363912Z", "completed_at": "2023-12-09T18:55:53.367733Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.368385Z", "completed_at": "2023-12-09T18:55:53.368389Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005908012390136719, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.source_not_null_box_score_box_score_stolen_bases_game_id.026246df9e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect game_id\nfrom \"timeball\".\"box_score\".\"box_score_stolen_bases\"\nwhere game_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.370505Z", "completed_at": "2023-12-09T18:55:53.374154Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.374813Z", "completed_at": "2023-12-09T18:55:53.374817Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005666017532348633, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.source_not_null_box_score_box_score_stolen_bases_runner_id.c702a78489", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect runner_id\nfrom \"timeball\".\"box_score\".\"box_score_stolen_bases\"\nwhere runner_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.377265Z", "completed_at": "2023-12-09T18:55:53.380793Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.381459Z", "completed_at": "2023-12-09T18:55:53.381463Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005877017974853516, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.source_not_null_box_score_box_score_stolen_bases_running_side.c2c5c13135", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect running_side\nfrom \"timeball\".\"box_score\".\"box_score_stolen_bases\"\nwhere running_side is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.383589Z", "completed_at": "2023-12-09T18:55:53.389099Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.389768Z", "completed_at": "2023-12-09T18:55:53.389772Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0075452327728271484, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.source_not_null_box_score_box_score_team_batting_lines_at_bats.0a61108426", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect at_bats\nfrom \"timeball\".\"box_score\".\"box_score_team_batting_lines\"\nwhere at_bats is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.391883Z", "completed_at": "2023-12-09T18:55:53.395402Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.396055Z", "completed_at": "2023-12-09T18:55:53.396058Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00551605224609375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.source_not_null_box_score_box_score_team_batting_lines_game_id.bd95c834cc", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect game_id\nfrom \"timeball\".\"box_score\".\"box_score_team_batting_lines\"\nwhere game_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.398170Z", "completed_at": "2023-12-09T18:55:53.401785Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.402440Z", "completed_at": "2023-12-09T18:55:53.402443Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0056340694427490234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.source_not_null_box_score_box_score_team_batting_lines_hits.a6fddad181", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect hits\nfrom \"timeball\".\"box_score\".\"box_score_team_batting_lines\"\nwhere hits is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.404816Z", "completed_at": "2023-12-09T18:55:53.408326Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.408979Z", "completed_at": "2023-12-09T18:55:53.408983Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005761623382568359, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.source_not_null_box_score_box_score_team_batting_lines_runs.eb5d3c40d4", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect runs\nfrom \"timeball\".\"box_score\".\"box_score_team_batting_lines\"\nwhere runs is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.411063Z", "completed_at": "2023-12-09T18:55:53.414596Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.415254Z", "completed_at": "2023-12-09T18:55:53.415257Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005520820617675781, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.source_not_null_box_score_box_score_team_batting_lines_side.804ee6c99a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect side\nfrom \"timeball\".\"box_score\".\"box_score_team_batting_lines\"\nwhere side is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.417373Z", "completed_at": "2023-12-09T18:55:53.420897Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.421570Z", "completed_at": "2023-12-09T18:55:53.421573Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005555152893066406, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.source_not_null_box_score_box_score_team_fielding_lines_game_id.8437d7158c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect game_id\nfrom \"timeball\".\"box_score\".\"box_score_team_fielding_lines\"\nwhere game_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.423661Z", "completed_at": "2023-12-09T18:55:53.427381Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.428030Z", "completed_at": "2023-12-09T18:55:53.428033Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005719661712646484, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.source_not_null_box_score_box_score_team_fielding_lines_outs_played.14ebdb3b7b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect outs_played\nfrom \"timeball\".\"box_score\".\"box_score_team_fielding_lines\"\nwhere outs_played is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.430124Z", "completed_at": "2023-12-09T18:55:53.433784Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.434433Z", "completed_at": "2023-12-09T18:55:53.434436Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005651950836181641, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.source_not_null_box_score_box_score_team_fielding_lines_side.7918cf72f9", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect side\nfrom \"timeball\".\"box_score\".\"box_score_team_fielding_lines\"\nwhere side is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.436531Z", "completed_at": "2023-12-09T18:55:53.440173Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.440823Z", "completed_at": "2023-12-09T18:55:53.440826Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005646944046020508, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.source_not_null_box_score_box_score_team_miscellaneous_lines_game_id.fcda3e41c8", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect game_id\nfrom \"timeball\".\"box_score\".\"box_score_team_miscellaneous_lines\"\nwhere game_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.442916Z", "completed_at": "2023-12-09T18:55:53.446594Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.447236Z", "completed_at": "2023-12-09T18:55:53.447239Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005658149719238281, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.source_not_null_box_score_box_score_team_miscellaneous_lines_side.40c4727a51", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect side\nfrom \"timeball\".\"box_score\".\"box_score_team_miscellaneous_lines\"\nwhere side is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.449390Z", "completed_at": "2023-12-09T18:55:53.454663Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.455323Z", "completed_at": "2023-12-09T18:55:53.455327Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007316112518310547, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.source_not_null_box_score_box_score_triple_plays_defense_side.2eec5d74dc", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect defense_side\nfrom \"timeball\".\"box_score\".\"box_score_triple_plays\"\nwhere defense_side is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.457424Z", "completed_at": "2023-12-09T18:55:53.461111Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.461777Z", "completed_at": "2023-12-09T18:55:53.461780Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005704164505004883, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.source_not_null_box_score_box_score_triple_plays_game_id.bcc2a3622b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect game_id\nfrom \"timeball\".\"box_score\".\"box_score_triple_plays\"\nwhere game_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.463845Z", "completed_at": "2023-12-09T18:55:53.467409Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.468067Z", "completed_at": "2023-12-09T18:55:53.468070Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005555152893066406, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.source_not_null_game_game_earned_runs_earned_runs.e4409d3c75", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect earned_runs\nfrom \"timeball\".\"game\".\"game_earned_runs\"\nwhere earned_runs is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.470163Z", "completed_at": "2023-12-09T18:55:53.473703Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.474359Z", "completed_at": "2023-12-09T18:55:53.474362Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005532741546630859, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.source_not_null_game_game_earned_runs_game_id.5b52e3dc8e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect game_id\nfrom \"timeball\".\"game\".\"game_earned_runs\"\nwhere game_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.476446Z", "completed_at": "2023-12-09T18:55:53.479920Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.480569Z", "completed_at": "2023-12-09T18:55:53.480572Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005467891693115234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.source_not_null_game_game_earned_runs_player_id.c46963cd36", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect player_id\nfrom \"timeball\".\"game\".\"game_earned_runs\"\nwhere player_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.482657Z", "completed_at": "2023-12-09T18:55:53.486327Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.486981Z", "completed_at": "2023-12-09T18:55:53.486984Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005661964416503906, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.source_not_null_game_game_fielding_appearances_end_event_id.60aa09d0ec", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect end_event_id\nfrom \"timeball\".\"game\".\"game_fielding_appearances\"\nwhere end_event_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.489105Z", "completed_at": "2023-12-09T18:55:53.492757Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.493407Z", "completed_at": "2023-12-09T18:55:53.493410Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005670309066772461, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.source_not_null_game_game_fielding_appearances_fielding_position.fb3999bb73", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect fielding_position\nfrom \"timeball\".\"game\".\"game_fielding_appearances\"\nwhere fielding_position is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.495498Z", "completed_at": "2023-12-09T18:55:53.498995Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.499659Z", "completed_at": "2023-12-09T18:55:53.499663Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005509138107299805, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.source_not_null_game_game_fielding_appearances_game_id.dd2b7e8969", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect game_id\nfrom \"timeball\".\"game\".\"game_fielding_appearances\"\nwhere game_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.501759Z", "completed_at": "2023-12-09T18:55:53.505251Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.505892Z", "completed_at": "2023-12-09T18:55:53.505895Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005491971969604492, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.source_not_null_game_game_fielding_appearances_player_id.0c7ac8daaa", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect player_id\nfrom \"timeball\".\"game\".\"game_fielding_appearances\"\nwhere player_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.507983Z", "completed_at": "2023-12-09T18:55:53.513191Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.513838Z", "completed_at": "2023-12-09T18:55:53.513842Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007203102111816406, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.source_not_null_game_game_fielding_appearances_side.266aa13571", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect side\nfrom \"timeball\".\"game\".\"game_fielding_appearances\"\nwhere side is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.515987Z", "completed_at": "2023-12-09T18:55:53.519489Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.520129Z", "completed_at": "2023-12-09T18:55:53.520132Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005511045455932617, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.source_not_null_game_game_fielding_appearances_start_event_id.408c346cde", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect start_event_id\nfrom \"timeball\".\"game\".\"game_fielding_appearances\"\nwhere start_event_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.522196Z", "completed_at": "2023-12-09T18:55:53.525654Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.526310Z", "completed_at": "2023-12-09T18:55:53.526314Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0054531097412109375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.source_not_null_game_game_lineup_appearances_end_event_id.62781ded2c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect end_event_id\nfrom \"timeball\".\"game\".\"game_lineup_appearances\"\nwhere end_event_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.528427Z", "completed_at": "2023-12-09T18:55:53.532071Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.532719Z", "completed_at": "2023-12-09T18:55:53.532722Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005666971206665039, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.source_not_null_game_game_lineup_appearances_entered_game_as.a9e19b02e5", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect entered_game_as\nfrom \"timeball\".\"game\".\"game_lineup_appearances\"\nwhere entered_game_as is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.534801Z", "completed_at": "2023-12-09T18:55:53.538304Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.538957Z", "completed_at": "2023-12-09T18:55:53.538960Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00549006462097168, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.source_not_null_game_game_lineup_appearances_game_id.f63a900428", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect game_id\nfrom \"timeball\".\"game\".\"game_lineup_appearances\"\nwhere game_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.541038Z", "completed_at": "2023-12-09T18:55:53.544655Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.545293Z", "completed_at": "2023-12-09T18:55:53.545296Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005584001541137695, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.source_not_null_game_game_lineup_appearances_lineup_position.4b45e3e931", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect lineup_position\nfrom \"timeball\".\"game\".\"game_lineup_appearances\"\nwhere lineup_position is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.547340Z", "completed_at": "2023-12-09T18:55:53.550791Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.551445Z", "completed_at": "2023-12-09T18:55:53.551449Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005422115325927734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.source_not_null_game_game_lineup_appearances_player_id.6033a911ba", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect player_id\nfrom \"timeball\".\"game\".\"game_lineup_appearances\"\nwhere player_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.553514Z", "completed_at": "2023-12-09T18:55:53.556985Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.557617Z", "completed_at": "2023-12-09T18:55:53.557621Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005445957183837891, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.source_not_null_game_game_lineup_appearances_side.bcbf5ff7f4", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect side\nfrom \"timeball\".\"game\".\"game_lineup_appearances\"\nwhere side is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.559711Z", "completed_at": "2023-12-09T18:55:53.563193Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.563845Z", "completed_at": "2023-12-09T18:55:53.563849Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005467891693115234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.source_not_null_game_game_lineup_appearances_start_event_id.b44f764b97", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect start_event_id\nfrom \"timeball\".\"game\".\"game_lineup_appearances\"\nwhere start_event_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.565923Z", "completed_at": "2023-12-09T18:55:53.569548Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.570182Z", "completed_at": "2023-12-09T18:55:53.570185Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0055849552154541016, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.source_not_null_game_games_account_type.7a0a3ee64a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect account_type\nfrom \"timeball\".\"game\".\"games\"\nwhere account_type is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.572235Z", "completed_at": "2023-12-09T18:55:53.577372Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.578022Z", "completed_at": "2023-12-09T18:55:53.578026Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007112979888916016, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.source_not_null_game_games_away_team_id.8e41b8425b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect away_team_id\nfrom \"timeball\".\"game\".\"games\"\nwhere away_team_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.580083Z", "completed_at": "2023-12-09T18:55:53.583698Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.584379Z", "completed_at": "2023-12-09T18:55:53.584382Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005648136138916016, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.source_not_null_game_games_bat_first_side.91b0360bdd", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect bat_first_side\nfrom \"timeball\".\"game\".\"games\"\nwhere bat_first_side is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.586476Z", "completed_at": "2023-12-09T18:55:53.590038Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.590696Z", "completed_at": "2023-12-09T18:55:53.590700Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005552768707275391, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.source_not_null_game_games_date.742eb9e3c2", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom \"timeball\".\"game\".\"games\"\nwhere date is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.592804Z", "completed_at": "2023-12-09T18:55:53.596523Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.597176Z", "completed_at": "2023-12-09T18:55:53.597180Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005728006362915039, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.source_not_null_game_games_doubleheader_status.053829553b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect doubleheader_status\nfrom \"timeball\".\"game\".\"games\"\nwhere doubleheader_status is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.599298Z", "completed_at": "2023-12-09T18:55:53.602998Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.603663Z", "completed_at": "2023-12-09T18:55:53.603667Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005742788314819336, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.source_not_null_game_games_field_condition.68aa42357b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect field_condition\nfrom \"timeball\".\"game\".\"games\"\nwhere field_condition is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.605816Z", "completed_at": "2023-12-09T18:55:53.609464Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.610130Z", "completed_at": "2023-12-09T18:55:53.610135Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005692005157470703, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.source_not_null_game_games_filename.b603af55c2", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect filename\nfrom \"timeball\".\"game\".\"games\"\nwhere filename is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.612317Z", "completed_at": "2023-12-09T18:55:53.616233Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.616880Z", "completed_at": "2023-12-09T18:55:53.616885Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005933046340942383, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.source_not_null_game_games_game_id.2418071e8e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect game_id\nfrom \"timeball\".\"game\".\"games\"\nwhere game_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.619054Z", "completed_at": "2023-12-09T18:55:53.622821Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.623492Z", "completed_at": "2023-12-09T18:55:53.623495Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0058269500732421875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.source_not_null_game_games_game_key.888d752037", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect game_key\nfrom \"timeball\".\"game\".\"games\"\nwhere game_key is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.625869Z", "completed_at": "2023-12-09T18:55:53.629503Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.630147Z", "completed_at": "2023-12-09T18:55:53.630151Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005860090255737305, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.source_not_null_game_games_game_type.8ba97fed9b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect game_type\nfrom \"timeball\".\"game\".\"games\"\nwhere game_type is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.632248Z", "completed_at": "2023-12-09T18:55:53.635772Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.636405Z", "completed_at": "2023-12-09T18:55:53.636409Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00551295280456543, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.source_not_null_game_games_home_team_id.8a8347ed3c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect home_team_id\nfrom \"timeball\".\"game\".\"games\"\nwhere home_team_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.638493Z", "completed_at": "2023-12-09T18:55:53.643929Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.644596Z", "completed_at": "2023-12-09T18:55:53.644599Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007464885711669922, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.source_not_null_game_games_park_id.ae1e9e1fda", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect park_id\nfrom \"timeball\".\"game\".\"games\"\nwhere park_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.646705Z", "completed_at": "2023-12-09T18:55:53.650302Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.650942Z", "completed_at": "2023-12-09T18:55:53.650945Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0055620670318603516, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.source_not_null_game_games_precipitation.53cfe6a1d5", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect precipitation\nfrom \"timeball\".\"game\".\"games\"\nwhere precipitation is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.653219Z", "completed_at": "2023-12-09T18:55:53.656667Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.657316Z", "completed_at": "2023-12-09T18:55:53.657319Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005640983581542969, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.source_not_null_game_games_scoring_method.b1ac89e487", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect scoring_method\nfrom \"timeball\".\"game\".\"games\"\nwhere scoring_method is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.659395Z", "completed_at": "2023-12-09T18:55:53.662943Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.663575Z", "completed_at": "2023-12-09T18:55:53.663578Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005510091781616211, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.source_not_null_game_games_sky.d1e4d31777", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect sky\nfrom \"timeball\".\"game\".\"games\"\nwhere sky is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.665635Z", "completed_at": "2023-12-09T18:55:53.669136Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.669779Z", "completed_at": "2023-12-09T18:55:53.669782Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0054819583892822266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.source_not_null_game_games_time_of_day.c9113d1123", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect time_of_day\nfrom \"timeball\".\"game\".\"games\"\nwhere time_of_day is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.672015Z", "completed_at": "2023-12-09T18:55:53.675752Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.676424Z", "completed_at": "2023-12-09T18:55:53.676428Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005895853042602539, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.source_not_null_game_games_use_dh.9dcb036550", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect use_dh\nfrom \"timeball\".\"game\".\"games\"\nwhere use_dh is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.678584Z", "completed_at": "2023-12-09T18:55:53.682349Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.683004Z", "completed_at": "2023-12-09T18:55:53.683008Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0058078765869140625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.source_not_null_game_games_wind_direction.28ae0e1ff6", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect wind_direction\nfrom \"timeball\".\"game\".\"games\"\nwhere wind_direction is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.685127Z", "completed_at": "2023-12-09T18:55:53.688738Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.689390Z", "completed_at": "2023-12-09T18:55:53.689393Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0056171417236328125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.source_not_null_misc_park_city.dd95bd0af9", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect city\nfrom \"timeball\".\"misc\".\"park\"\nwhere city is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.691520Z", "completed_at": "2023-12-09T18:55:53.695099Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.695909Z", "completed_at": "2023-12-09T18:55:53.695913Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005808115005493164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.source_not_null_misc_park_name.cb07f266fc", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect name\nfrom \"timeball\".\"misc\".\"park\"\nwhere name is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.698120Z", "completed_at": "2023-12-09T18:55:53.701759Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.702403Z", "completed_at": "2023-12-09T18:55:53.702407Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005646944046020508, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.source_not_null_misc_park_park_id.6eb47dd84e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect park_id\nfrom \"timeball\".\"misc\".\"park\"\nwhere park_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.704492Z", "completed_at": "2023-12-09T18:55:53.709912Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.710566Z", "completed_at": "2023-12-09T18:55:53.710570Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007418155670166016, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.source_not_null_misc_park_start_date.7ab9b2c116", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect start_date\nfrom \"timeball\".\"misc\".\"park\"\nwhere start_date is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.712664Z", "completed_at": "2023-12-09T18:55:53.716184Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.716825Z", "completed_at": "2023-12-09T18:55:53.716828Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005513906478881836, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.source_not_null_misc_roster_last_name.2016310734", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect last_name\nfrom \"timeball\".\"misc\".\"roster\"\nwhere last_name is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.718897Z", "completed_at": "2023-12-09T18:55:53.722425Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.723085Z", "completed_at": "2023-12-09T18:55:53.723089Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005524873733520508, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.source_not_null_misc_roster_player_id.a4e0bf60be", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect player_id\nfrom \"timeball\".\"misc\".\"roster\"\nwhere player_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.725271Z", "completed_at": "2023-12-09T18:55:53.728878Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.729545Z", "completed_at": "2023-12-09T18:55:53.729548Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005682945251464844, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.source_not_null_misc_roster_position.0abc3727ad", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect position\nfrom \"timeball\".\"misc\".\"roster\"\nwhere position is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.731655Z", "completed_at": "2023-12-09T18:55:53.735507Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.736182Z", "completed_at": "2023-12-09T18:55:53.736187Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005923271179199219, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.source_not_null_misc_roster_team_id.251ed96cc3", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect team_id\nfrom \"timeball\".\"misc\".\"roster\"\nwhere team_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.738426Z", "completed_at": "2023-12-09T18:55:53.742332Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.743009Z", "completed_at": "2023-12-09T18:55:53.743013Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005971193313598633, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.source_not_null_misc_roster_year.944fe03dad", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect year\nfrom \"timeball\".\"misc\".\"roster\"\nwhere year is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.745147Z", "completed_at": "2023-12-09T18:55:53.750497Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.751179Z", "completed_at": "2023-12-09T18:55:53.751184Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007411956787109375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.source_unique_baseballdatabank_people_bbrefid.ae622725ff", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    bbrefid as unique_field,\n    count(*) as n_records\n\nfrom \"timeball\".\"baseballdatabank\".\"people\"\nwhere bbrefid is not null\ngroup by bbrefid\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.753774Z", "completed_at": "2023-12-09T18:55:53.757525Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.758181Z", "completed_at": "2023-12-09T18:55:53.758185Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006165027618408203, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.source_unique_baseballdatabank_people_playerid.028c893cc1", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    playerid as unique_field,\n    count(*) as n_records\n\nfrom \"timeball\".\"baseballdatabank\".\"people\"\nwhere playerid is not null\ngroup by playerid\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.760327Z", "completed_at": "2023-12-09T18:55:53.764037Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.764711Z", "completed_at": "2023-12-09T18:55:53.764715Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0057828426361083984, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.source_unique_baseballdatabank_people_retro_id.dd8c06d204", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    retro_id as unique_field,\n    count(*) as n_records\n\nfrom \"timeball\".\"baseballdatabank\".\"people\"\nwhere retro_id is not null\ngroup by retro_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.767041Z", "completed_at": "2023-12-09T18:55:53.772771Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.773449Z", "completed_at": "2023-12-09T18:55:53.773453Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007931709289550781, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.source_unique_box_score_box_score_games_game_id.b94243eaff", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    game_id as unique_field,\n    count(*) as n_records\n\nfrom \"timeball\".\"box_score\".\"box_score_games\"\nwhere game_id is not null\ngroup by game_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.775634Z", "completed_at": "2023-12-09T18:55:53.779178Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.779839Z", "completed_at": "2023-12-09T18:55:53.779843Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005586147308349609, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.source_unique_box_score_box_score_games_game_key.a9054ce21a", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    game_key as unique_field,\n    count(*) as n_records\n\nfrom \"timeball\".\"box_score\".\"box_score_games\"\nwhere game_key is not null\ngroup by game_key\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.781969Z", "completed_at": "2023-12-09T18:55:53.785450Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.786092Z", "completed_at": "2023-12-09T18:55:53.786095Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005465984344482422, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.source_unique_game_games_game_id.ed73a19cd5", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    game_id as unique_field,\n    count(*) as n_records\n\nfrom \"timeball\".\"game\".\"games\"\nwhere game_id is not null\ngroup by game_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.788180Z", "completed_at": "2023-12-09T18:55:53.791660Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.792317Z", "completed_at": "2023-12-09T18:55:53.792320Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005476951599121094, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.source_unique_game_games_game_key.caa87137ff", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    game_key as unique_field,\n    count(*) as n_records\n\nfrom \"timeball\".\"game\".\"games\"\nwhere game_key is not null\ngroup by game_key\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.794413Z", "completed_at": "2023-12-09T18:55:53.797916Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.798572Z", "completed_at": "2023-12-09T18:55:53.798576Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005496025085449219, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.source_unique_misc_park_park_id.ab6b1ee1d3", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    park_id as unique_field,\n    count(*) as n_records\n\nfrom \"timeball\".\"misc\".\"park\"\nwhere park_id is not null\ngroup by park_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.800649Z", "completed_at": "2023-12-09T18:55:53.803503Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.804148Z", "completed_at": "2023-12-09T18:55:53.804152Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004842996597290039, "adapter_response": {}, "message": null, "failures": null, "unique_id": "analysis.timeball.event_completeness_fielding_credit", "compiled": true, "compiled_code": "WITH fielding_play_agg AS (\n    SELECT\n        event_key,\n        NOT BOOL_OR(\n            fielding_position = 0 AND fielding_play = 'Putout'\n        ) AS has_fielder_putouts,\n        NOT BOOL_OR(\n            -- Some assists are explicitly recorded as Unknown, but if the putout is unknown\n            -- then assists are usually missing entirely\n            fielding_position = 0 AND fielding_play IN ('Putout', 'Assist')\n        ) AS has_fielder_assists,\n        -- As of now we always have the fielder for an error, but just in case\n        NOT BOOL_OR(\n            fielding_position = 0 AND fielding_play = 'Error'\n        ) AS has_fielder_errors\n    FROM \"timeball\".\"main_models\".\"stg_event_fielding_plays\"\n    GROUP BY 1\n),\n\nfinal AS (\n    SELECT\n        event_key,\n        -- Fielding data may only be present for some plate appearances\n        -- and its absence doesn't indicate missing data\n        COALESCE(fpa.has_fielder_putouts, TRUE) AS has_fielder_putouts,\n        COALESCE(fpa.has_fielder_assists, TRUE) AS has_fielder_assists,\n        COALESCE(fpa.has_fielder_errors, TRUE) AS has_fielder_errors\n    FROM fielding_play_agg AS fpa\n    FULL OUTER JOIN \"timeball\".\"main_models\".\"stg_events\" USING (event_key)\n    WHERE plate_appearance_result IS NOT NULL\n)\n\nSELECT * FROM final", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.806260Z", "completed_at": "2023-12-09T18:55:53.809244Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.809918Z", "completed_at": "2023-12-09T18:55:53.809922Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005025148391723633, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.timeball.calc_fielding_play_agg", "compiled": true, "compiled_code": "WITH grouper_init AS (\n    SELECT\n        *,\n        COUNT(CASE WHEN fielding_play IN ('Putout', 'Error') THEN 1 END) OVER w AS group_id_init\n    FROM \"timeball\".\"main_models\".\"stg_event_fielding_plays\"\n    WINDOW w AS (PARTITION BY event_key ORDER BY sequence_id)\n),\n\ngrouper AS (\n    SELECT\n        *,\n        -- need to do this to properly put the putout/error in with its assists\n        LAG(group_id_init, 1, 0) OVER w AS group_id\n    FROM grouper_init\n    WINDOW w AS (PARTITION BY event_key ORDER BY sequence_id)\n),\n\nassist_tracker AS (\n    SELECT\n        *,\n        COUNT(CASE WHEN fielding_play = 'Assist' THEN 1 END) OVER w AS assists_in_group\n    FROM grouper\n    WINDOW w AS (PARTITION BY event_key, group_id)\n),\n\nadd_batted_ball AS (\n    SELECT\n        assist_tracker.*,\n        e.batted_location_general IS NOT NULL as is_batted_ball,\n    FROM assist_tracker\n    INNER JOIN \"timeball\".\"main_models\".\"stg_events\" AS e USING (event_key)\n),\n\nfinal AS (\n    SELECT\n        event_key,\n        fielding_position,\n        ANY_VALUE(game_id) AS game_id,\n        COUNT(*) FILTER (WHERE fielding_play = 'Putout')::UTINYINT AS putouts,\n        -- A fielder can appear multiple times in one segment (on a rundown)\n        -- but is only credited with one assist per putout\n        COUNT(DISTINCT CASE WHEN fielding_play = 'Assist' THEN group_id END)::UTINYINT AS assists,\n        COUNT(*) FILTER (WHERE fielding_play = 'Error')::UTINYINT AS errors,\n        COUNT(*) FILTER (WHERE fielding_play = 'FieldersChoice')::UTINYINT AS fielders_choices,\n        COUNT(*) FILTER (WHERE sequence_id = 1 AND fielding_play != 'Error' AND is_batted_ball)::UTINYINT AS plays_started,\n        -- An \"unassisted putout\" often refers specifically to ground balls, which we don't always know about.\n        -- We also don't know if a putout by an unknown fielder was assisted or not (see below).\n        -- So we'll just track when putouts are explicitly assisted\n        COUNT(*) FILTER (WHERE assists_in_group > 0 AND fielding_play = 'Putout')::UTINYINT AS assisted_putouts,\n        COUNT(*) FILTER (WHERE group_id = 0 AND fielding_play = 'Error') AS first_errors,\n        -- We always know how many putouts occur on a play even when we don't know who made them...\n        COUNT(*) FILTER (WHERE fielding_position = 0 AND fielding_play = 'Putout') AS unknown_putouts,\n        -- ...But the same is not true for assists.\n        -- Explicitly unknown assists are extremely rare in the data. An unknown putout also implies\n        -- unknown assists (0 or more). So it just makes sense to count the total number of events\n        -- where an unknown assist may have occurred.\n        BOOL_OR(fielding_position = 0)::UTINYINT AS incomplete_events,\n    FROM add_batted_ball\n    GROUP BY 1, 2\n)\n\nSELECT * FROM final", "relation_name": "\"timeball\".\"main_models\".\"calc_fielding_play_agg\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.812251Z", "completed_at": "2023-12-09T18:55:53.814977Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.815620Z", "completed_at": "2023-12-09T18:55:53.815623Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004914760589599609, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.timeball.event_score_states", "compiled": true, "compiled_code": "\nWITH windowed AS (\n    SELECT\n        e.event_key,\n        SUM(e.runs_on_play) FILTER (WHERE e.batting_side = 'Home') OVER start_event AS score_home_start,\n        SUM(e.runs_on_play) FILTER (WHERE e.batting_side = 'Away') OVER start_event AS score_away_start,\n        SUM(e.runs_on_play) FILTER (WHERE e.batting_side = 'Home') OVER end_event AS score_home_end,\n        SUM(e.runs_on_play) FILTER (WHERE e.batting_side = 'Away') OVER end_event AS score_away_end,\n        e.runs_on_play,\n    FROM \"timeball\".\"main_models\".\"stg_events\" AS e\n    WINDOW\n        start_event AS (\n            PARTITION BY e.game_id\n            ORDER BY e.event_key\n            ROWS BETWEEN UNBOUNDED PRECEDING AND 1 PRECEDING\n        ),\n        end_event AS (\n            PARTITION BY e.game_id\n            ORDER BY e.event_key\n            ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\n        )\n),\n\nfinal AS (\n    SELECT\n        event_key,\n        COALESCE(score_home_start, 0)::UTINYINT AS score_home_start,\n        COALESCE(score_away_end, 0)::UTINYINT AS score_away_start,\n        COALESCE(score_home_end, 0)::UTINYINT AS score_home_end,\n        COALESCE(score_away_end, 0)::UTINYINT AS score_away_end,\n        runs_on_play\n    FROM windowed\n)\n\nSELECT * FROM final", "relation_name": "\"timeball\".\"main_models\".\"event_score_states\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.817731Z", "completed_at": "2023-12-09T18:55:53.820709Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.821366Z", "completed_at": "2023-12-09T18:55:53.821370Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00499725341796875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.timeball.game_suspensions", "compiled": true, "compiled_code": "WITH source_event AS (\n    SELECT\n        event_key,\n        STRING_SPLIT(REPLACE(comment, 'Suspend=', ''), ',') AS suspension_info\n    FROM \"timeball\".\"main_models\".\"stg_event_comments\"\n    WHERE comment ILIKE '%Suspend=%'\n),\n\nevent_joined AS (\n    SELECT\n        events.game_id,\n        event_key AS event_key_at_suspension,\n        source_event.suspension_info\n    FROM \"timeball\".\"main_models\".\"stg_events\" AS events\n    INNER JOIN source_event USING (event_key)\n),\n\nsource_box AS (\n    SELECT\n        game_id,\n        STRING_SPLIT(REPLACE(comment, 'Suspend=', ''), ',') AS suspension_info\n    FROM \"timeball\".\"main_models\".\"stg_box_score_comments\"\n    WHERE comment ILIKE '%Suspend=%'\n        AND game_id NOT IN (SELECT game_id FROM event_joined)\n),\n\nunioned AS (\n    SELECT\n        game_id,\n        event_key_at_suspension,\n        suspension_info\n    FROM event_joined\n    UNION ALL\n    SELECT\n        game_id,\n        NULL AS event_key_at_suspension,\n        suspension_info\n    FROM source_box\n)\n\n\n\nSELECT\n    game_id,\n    event_key_at_suspension,\n    STRPTIME(suspension_info[1], '%Y%m%d')::DATE AS date_resumed,\n    NULLIF(suspension_info[2], '')::PARK_ID AS new_park_id,\n    suspension_info[3]::UTINYINT AS away_score_at_suspension,\n    suspension_info[4]::UTINYINT AS home_score_at_suspension,\n    suspension_info[5]::UTINYINT AS game_outs_recorded_at_suspension,\nFROM unioned", "relation_name": "\"timeball\".\"main_models\".\"game_suspensions\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.823455Z", "completed_at": "2023-12-09T18:55:53.827681Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.828345Z", "completed_at": "2023-12-09T18:55:53.828349Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006237983703613281, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.relationships_stg_event_audit_event_key__event_key__ref_stg_events_.c365ebf19a", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select event_key as from_field\n    from \"timeball\".\"main_models\".\"stg_event_audit\"\n    where event_key is not null\n),\n\nparent as (\n    select event_key as to_field\n    from \"timeball\".\"main_models\".\"stg_events\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.830484Z", "completed_at": "2023-12-09T18:55:53.834717Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.835382Z", "completed_at": "2023-12-09T18:55:53.835385Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006268978118896484, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.relationships_stg_event_baserunners_event_key__event_key__ref_stg_events_.44661689b8", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select event_key as from_field\n    from \"timeball\".\"main_models\".\"stg_event_baserunners\"\n    where event_key is not null\n),\n\nparent as (\n    select event_key as to_field\n    from \"timeball\".\"main_models\".\"stg_events\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.837512Z", "completed_at": "2023-12-09T18:55:53.843744Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.844425Z", "completed_at": "2023-12-09T18:55:53.844429Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008300065994262695, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.relationships_stg_event_comments_event_key__event_key__ref_stg_events_.10a708d8a1", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select event_key as from_field\n    from \"timeball\".\"main_models\".\"stg_event_comments\"\n    where event_key is not null\n),\n\nparent as (\n    select event_key as to_field\n    from \"timeball\".\"main_models\".\"stg_events\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.846572Z", "completed_at": "2023-12-09T18:55:53.850734Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.851395Z", "completed_at": "2023-12-09T18:55:53.851398Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006186008453369141, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.relationships_stg_event_fielding_plays_event_key__event_key__ref_stg_events_.da88649ba4", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select event_key as from_field\n    from \"timeball\".\"main_models\".\"stg_event_fielding_plays\"\n    where event_key is not null\n),\n\nparent as (\n    select event_key as to_field\n    from \"timeball\".\"main_models\".\"stg_events\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.853533Z", "completed_at": "2023-12-09T18:55:53.857780Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.858479Z", "completed_at": "2023-12-09T18:55:53.858483Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006323099136352539, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.relationships_stg_event_pitch_sequences_event_key__event_key__ref_stg_events_.6567690dc0", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select event_key as from_field\n    from \"timeball\".\"main_models\".\"stg_event_pitch_sequences\"\n    where event_key is not null\n),\n\nparent as (\n    select event_key as to_field\n    from \"timeball\".\"main_models\".\"stg_events\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.860605Z", "completed_at": "2023-12-09T18:55:53.864830Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.865510Z", "completed_at": "2023-12-09T18:55:53.865513Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006262063980102539, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.relationships_stg_game_fielding_appearances_player_id__player_id__ref_stg_bio_.c79c4af955", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select player_id as from_field\n    from \"timeball\".\"main_models\".\"stg_game_fielding_appearances\"\n    where player_id is not null\n),\n\nparent as (\n    select player_id as to_field\n    from \"timeball\".\"main_models\".\"stg_bio\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.867621Z", "completed_at": "2023-12-09T18:55:53.871225Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.871904Z", "completed_at": "2023-12-09T18:55:53.871908Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005658149719238281, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.timeball.game_starting_lineups", "compiled": true, "compiled_code": "\nWITH event_offense AS (\n    SELECT\n        game_id,\n        player_id,\n        side,\n        lineup_position\n    FROM \"timeball\".\"main_models\".\"stg_game_lineup_appearances\"\n    WHERE start_event_id = 1\n        -- Full outer join will cover pitchers\n        AND lineup_position > 0\n),\n\nevent_fielding AS (\n    SELECT\n        game_id,\n        player_id,\n        side,\n        -- This is to choose pitcher over DH\n        -- when Ohtani is doing both.\n        MIN(fielding_position) AS fielding_position\n    FROM \"timeball\".\"main_models\".\"stg_game_fielding_appearances\"\n    WHERE start_event_id = 1\n    GROUP BY 1, 2, 3\n),\n\nbox_offense AS (\n    SELECT\n        game_id,\n        batter_id,\n        side,\n        lineup_position\n    FROM \"timeball\".\"main_models\".\"stg_box_score_batting_lines\"\n    WHERE nth_player_at_position = 1\n),\n\nbox_fielding AS (\n    SELECT\n        game_id,\n        fielder_id,\n        side,\n        fielding_position\n    FROM \"timeball\".\"main_models\".\"stg_box_score_fielding_lines\"\n    -- This doesn't fully filter down to starters,\n    -- just the first position played by any player,\n    -- starter or sub.\n    WHERE nth_position_played_by_player = 1\n    -- TODO: Remove deduper after resolution of PH5194105241\n    QUALIFY COUNT(*) OVER (PARTITION BY game_id, side, fielding_position) = 1\n),\n\nevent_joined AS (\n    SELECT\n        game_id,\n        player_id,\n        side,\n        COALESCE(event_offense.lineup_position, 0) AS lineup_position,\n        event_fielding.fielding_position\n    -- TODO: Figure out Ohtani filter\n    FROM event_offense\n    FULL OUTER JOIN event_fielding\n        USING (game_id, player_id, side)\n),\n\nbox_joined AS (\n    SELECT\n        box_offense.game_id,\n        box_offense.batter_id AS player_id,\n        box_offense.side,\n        box_offense.lineup_position,\n        box_fielding.fielding_position\n    FROM box_offense\n    INNER JOIN box_fielding\n        ON box_offense.game_id = box_fielding.game_id\n            AND box_offense.batter_id = box_fielding.fielder_id\n            AND box_offense.side = box_fielding.side\n    WHERE box_offense.game_id NOT IN (\n            SELECT DISTINCT game_id\n            FROM event_joined\n        )\n),\n\nunioned AS (\n    SELECT *\n    FROM event_joined\n    UNION ALL\n    SELECT *\n    FROM box_joined\n),\n\nagged AS (\n    SELECT\n        game_id,\n        MAP(\n            LIST(lineup_position::UTINYINT ORDER BY lineup_position) FILTER (WHERE side = 'Away'),\n            LIST(player_id ORDER BY lineup_position) FILTER (WHERE side = 'Away')\n        ) AS lineup_map_away,\n        MAP(\n            LIST(fielding_position::UTINYINT ORDER BY fielding_position) FILTER (WHERE side = 'Away'),\n            LIST(player_id ORDER BY fielding_position) FILTER (WHERE side = 'Away')\n        ) AS fielding_map_away,\n        MAP(\n            LIST(lineup_position::UTINYINT ORDER BY lineup_position) FILTER (WHERE side = 'Home'),\n            LIST(player_id ORDER BY lineup_position) FILTER (WHERE side = 'Home')\n        ) AS lineup_map_home,\n        MAP(\n            LIST(fielding_position::UTINYINT ORDER BY fielding_position) FILTER (WHERE side = 'Home'),\n            LIST(player_id ORDER BY fielding_position) FILTER (WHERE side = 'Home')\n        ) AS fielding_map_home\n    FROM unioned\n    GROUP BY 1\n)\n\nSELECT * FROM agged", "relation_name": "\"timeball\".\"main_models\".\"game_starting_lineups\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.874149Z", "completed_at": "2023-12-09T18:55:53.878909Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.879603Z", "completed_at": "2023-12-09T18:55:53.879607Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006866931915283203, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.relationships_stg_game_lineup_appearances_player_id__player_id__ref_stg_bio_.032a75b5cb", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select player_id as from_field\n    from \"timeball\".\"main_models\".\"stg_game_lineup_appearances\"\n    where player_id is not null\n),\n\nparent as (\n    select player_id as to_field\n    from \"timeball\".\"main_models\".\"stg_bio\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.881838Z", "completed_at": "2023-12-09T18:55:53.885107Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.885753Z", "completed_at": "2023-12-09T18:55:53.885756Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005316972732543945, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.timeball.game_forfeits", "compiled": true, "compiled_code": "WITH source_event AS (\n    SELECT\n        event_key,\n        REGEXP_EXTRACT(comment, 'Forfeit=(.*)', 1) AS forfeit_info\n    FROM \"timeball\".\"main_models\".\"stg_event_comments\"\n    WHERE comment ILIKE '%Forfeit=%'\n),\n\nevent_joined AS (\n    SELECT\n        events.game_id,\n        event_key AS event_key_at_forfeit,\n        source_event.forfeit_info\n    FROM \"timeball\".\"main_models\".\"stg_events\" AS events\n    INNER JOIN source_event USING (event_key)\n),\n\nsource_box AS (\n    SELECT\n        game_id,\n        REGEXP_EXTRACT(comment, 'Forfeit=(.*)', 1) AS forfeit_info\n    FROM \"timeball\".\"main_models\".\"stg_box_score_comments\"\n    WHERE comment ILIKE '%Forfeit=%'\n        AND game_id NOT IN (SELECT game_id FROM event_joined)\n),\n\nsource_gamelog AS (\n    SELECT\n        game_id,\n        forfeit_info\n    FROM \"timeball\".\"main_models\".\"stg_gamelog\"\n    WHERE forfeit_info IS NOT NULL\n        AND game_id NOT IN (SELECT game_id FROM event_joined)\n        AND game_id NOT IN (SELECT game_id FROM source_box)\n),\n\nunioned AS (\n    SELECT\n        game_id,\n        event_key_at_forfeit,\n        forfeit_info\n    FROM event_joined\n    UNION ALL\n    SELECT\n        game_id,\n        NULL AS event_key_at_forfeit,\n        forfeit_info\n    FROM source_box\n    UNION ALL\n    SELECT\n        game_id,\n        NULL AS event_key_at_forfeit,\n        forfeit_info\n    FROM source_gamelog\n)\n\nSELECT\n    game_id,\n    event_key_at_forfeit,\n    CASE forfeit_info\n        WHEN 'H' THEN 'Home'\n        WHEN 'V' THEN 'Away'\n        WHEN 'T' THEN 'Tie'\n    END AS winning_side,\n    CASE WHEN game_id = 'CLE197406040' THEN .10 END AS price_of_beer_dollars\nFROM unioned", "relation_name": "\"timeball\".\"main_models\".\"game_forfeits\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.887905Z", "completed_at": "2023-12-09T18:55:53.891033Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.891697Z", "completed_at": "2023-12-09T18:55:53.891700Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0051648616790771484, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.timeball.personnel_fielding_states", "compiled": true, "compiled_code": "\n-- We create the concept of a personnel state as a range of events\n-- where none of the players in the lineup change. This allows us\n-- to store personnel info at a lower cardinality than one row per event-player.\nWITH ranges AS (\n    SELECT DISTINCT\n        game_id,\n        side,\n        start_event_id,\n        COALESCE(\n            MIN(start_event_id - 1) OVER w,\n            end_event_id\n        )::UINTEGER AS end_event_id\n    FROM \"timeball\".\"main_models\".\"stg_game_fielding_appearances\"\n    -- The MIN over this window is the next-largest value\n    WINDOW w AS (\n        PARTITION BY game_id, side\n        ORDER BY start_event_id\n        RANGE BETWEEN 1 FOLLOWING AND UNBOUNDED FOLLOWING\n    )\n),\n\nfinal AS (\n    SELECT\n        appearances.game_id,\n        CASE WHEN appearances.side = 'Home' THEN games.home_team_id ELSE games.away_team_id END AS fielding_team_id,\n        appearances.side AS fielding_side,\n        (games.game_key + ranges.start_event_id) * CASE WHEN appearances.side = 'Home' THEN 1 ELSE -1 END\n        AS personnel_fielding_key,\n        ranges.start_event_id,\n        ranges.end_event_id,\n        appearances.player_id,\n        appearances.fielding_position,\n    FROM \"timeball\".\"main_models\".\"stg_game_fielding_appearances\" AS appearances\n    INNER JOIN \"timeball\".\"main_models\".\"stg_games\" AS games USING (game_id)\n    INNER JOIN ranges\n        ON ranges.game_id = appearances.game_id\n            AND ranges.side = appearances.side\n            AND ranges.start_event_id <= appearances.end_event_id\n            AND ranges.end_event_id >= appearances.start_event_id\n    -- We need this to dedupe positions on multi-sub events. There's definitely\n    -- a better way to to this that fails louder on real dupes.\n    QUALIFY ROW_NUMBER() OVER (\n        PARTITION BY personnel_fielding_key, appearances.fielding_position\n        ORDER BY appearances.end_event_id DESC\n    ) = 1\n)\n\nSELECT * FROM final", "relation_name": "\"timeball\".\"main_models\".\"personnel_fielding_states\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.893823Z", "completed_at": "2023-12-09T18:55:53.896925Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.897583Z", "completed_at": "2023-12-09T18:55:53.897586Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005118846893310547, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.timeball.personnel_lineup_states", "compiled": true, "compiled_code": "\n-- We create the concept of a personnel state as a range of events\n-- where none of the players in the lineup change. This allows us\n-- to store personnel info at a lower cardinality than one row per event-player.\nWITH ranges AS (\n    SELECT DISTINCT\n        game_id,\n        side,\n        start_event_id,\n        COALESCE(\n            MIN(start_event_id - 1) OVER next_largest,\n            -- This can almos always just be the end_event_id of the same line,\n            -- except for the fun edge case where the final substitution\n            -- of the game is a move that moves the DH into the field\n            MAX(end_event_id) OVER full_game\n        )::UINTEGER AS end_event_id\n    FROM \"timeball\".\"main_models\".\"stg_game_lineup_appearances\"\n    -- The MIN over this window is the next-largest value\n    WINDOW\n        next_largest AS (\n            PARTITION BY game_id, side\n            ORDER BY start_event_id\n            RANGE BETWEEN 1 FOLLOWING AND UNBOUNDED FOLLOWING\n        ),\n        full_game AS (\n            PARTITION BY game_id, side\n        )\n),\n\nfinal AS (\n    SELECT\n        appearances.game_id,\n        CASE WHEN ranges.side = 'Home' THEN games.home_team_id ELSE games.away_team_id END AS batting_team_id,\n        appearances.side AS batting_side,\n        (games.game_key + ranges.start_event_id) * CASE WHEN appearances.side = 'Home' THEN 1 ELSE -1 END::INT\n        AS personnel_lineup_key,\n        ranges.start_event_id,\n        ranges.end_event_id,\n        appearances.player_id,\n        appearances.lineup_position,\n    FROM \"timeball\".\"main_models\".\"stg_game_lineup_appearances\" AS appearances\n    INNER JOIN \"timeball\".\"main_models\".\"stg_games\" AS games USING (game_id)\n    INNER JOIN ranges\n        ON ranges.game_id = appearances.game_id\n            AND ranges.side = appearances.side\n            AND ranges.start_event_id <= appearances.end_event_id\n            AND ranges.end_event_id >= appearances.start_event_id\n)\n\nSELECT * FROM final", "relation_name": "\"timeball\".\"main_models\".\"personnel_lineup_states\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.899755Z", "completed_at": "2023-12-09T18:55:53.903717Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.904372Z", "completed_at": "2023-12-09T18:55:53.904375Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005975961685180664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.timeball.player_game_appearances", "compiled": true, "compiled_code": "\nWITH event_based AS (\n    SELECT game_id\n    FROM \"timeball\".\"main_models\".\"stg_games\"\n    WHERE source_type = 'PlayByPlay'\n),\n\nbox_offense AS (\n    SELECT\n        bat.game_id,\n        bat.batter_id AS player_id,\n        bat.side,\n        bat.lineup_position,\n        CASE\n            WHEN bat.nth_player_at_position = 1 THEN 'Starter'\n            WHEN pinch_hit.pinch_hitter_id IS NOT NULL THEN 'PinchHitter'\n            WHEN pinch_run.pinch_runner_id IS NOT NULL THEN 'PinchRunner'\n            ELSE 'DefensiveSubstitution'\n        END AS entered_game_as,\n        bat.nth_player_at_position AS position_order\n    FROM \"timeball\".\"main_models\".\"stg_box_score_batting_lines\" AS bat\n    LEFT JOIN \"timeball\".\"main_models\".\"stg_box_score_pinch_hitting_lines\" AS pinch_hit\n        ON pinch_hit.game_id = bat.game_id\n            AND pinch_hit.pinch_hitter_id = bat.batter_id\n            AND pinch_hit.side = bat.side\n    LEFT JOIN \"timeball\".\"main_models\".\"stg_box_score_pinch_running_lines\" AS pinch_run\n        ON pinch_run.game_id = bat.game_id\n            AND pinch_run.pinch_runner_id = bat.batter_id\n            AND pinch_run.side = bat.side\n),\n\noffense_union AS (\n    SELECT\n        game_id,\n        player_id,\n        side,\n        lineup_position,\n        entered_game_as,\n        -- We're just using this to order so gaps don't matter\n        start_event_id AS position_order\n    FROM \"timeball\".\"main_models\".\"stg_game_lineup_appearances\"\n    UNION ALL\n    SELECT\n        game_id,\n        player_id,\n        side,\n        lineup_position,\n        entered_game_as,\n        position_order\n    FROM box_offense\n    WHERE game_id NOT IN (SELECT game_id FROM event_based)\n),\n\nfielding_union AS (\n    SELECT\n        game_id,\n        player_id,\n        side,\n        fielding_position,\n        start_event_id AS position_order\n    FROM \"timeball\".\"main_models\".\"stg_game_fielding_appearances\"\n    UNION ALL\n    SELECT\n        game_id,\n        fielder_id AS player_id,\n        side,\n        fielding_position,\n        nth_position_played_by_player AS position_order\n    FROM \"timeball\".\"main_models\".\"stg_box_score_fielding_lines\"\n    WHERE game_id NOT IN (SELECT game_id FROM event_based)\n),\n\noffense_agg AS (\n    SELECT\n        game_id,\n        player_id,\n        ANY_VALUE(side) AS side,\n        BOOL_OR(entered_game_as = 'Starter')::UTINYINT AS games_started,\n        BOOL_OR(entered_game_as = 'PinchHitter')::UTINYINT AS games_pinch_hit,\n        BOOL_OR(entered_game_as = 'PinchRunner')::UTINYINT AS games_pinch_run,\n        BOOL_OR(entered_game_as = 'DefensiveSubstitution')::UTINYINT AS games_defensive_sub,\n        -- Just choose first sub location - We can track courtesy runner situations somewhere else\n        FIRST(lineup_position) AS lineup_position\n    -- Ignore pitcher in DH lineups\n    FROM offense_union\n    WHERE lineup_position > 0\n    GROUP BY 1, 2\n),\n\nfielding_agg AS (\n    SELECT\n        game_id,\n        player_id,\n        ANY_VALUE(side) AS side,\n        -- Sort by fielding position to choose pitcher first in event of Ohtani rule\n        LIST(fielding_position ORDER BY position_order, fielding_position) AS fielding_positions,\n        (BOOL_OR(fielding_position = 1 AND position_order = 1)\n            AND BOOL_OR(fielding_position = 10 AND position_order = 1) \n        )::UTINYINT AS games_ohtani_rule\n    FROM fielding_union\n    -- Keep DH, but ignore PH/PR\n    WHERE fielding_position BETWEEN 1 AND 10\n    GROUP BY 1, 2 \n),\n\nfinal AS (\n    SELECT\n        game_id,\n        player_id,\n        offense_agg.side,\n        offense_agg.games_started,\n        offense_agg.games_pinch_hit,\n        offense_agg.games_pinch_run,\n        offense_agg.games_defensive_sub,\n        COALESCE(fielding_agg.games_ohtani_rule, 0) AS games_ohtani_rule,\n        offense_agg.lineup_position,\n        fielding_agg.fielding_positions[1] AS first_fielding_position,\n        fielding_agg.fielding_positions,\n    FROM offense_agg\n    LEFT JOIN fielding_agg USING (game_id, player_id)\n)\n\nSELECT * FROM final", "relation_name": "\"timeball\".\"main_models\".\"player_game_appearances\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.906442Z", "completed_at": "2023-12-09T18:55:53.911987Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.912634Z", "completed_at": "2023-12-09T18:55:53.912637Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007517099380493164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.not_null_stg_games_park_id.5fec03cb29", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect park_id\nfrom \"timeball\".\"main_models\".\"stg_games\"\nwhere park_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.914732Z", "completed_at": "2023-12-09T18:55:53.919025Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.919677Z", "completed_at": "2023-12-09T18:55:53.919680Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006297111511230469, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.relationships_stg_event_baserunners_game_id__game_id__ref_stg_games_.d70abfb1df", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select game_id as from_field\n    from \"timeball\".\"main_models\".\"stg_event_baserunners\"\n    where game_id is not null\n),\n\nparent as (\n    select game_id as to_field\n    from \"timeball\".\"main_models\".\"stg_games\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.921785Z", "completed_at": "2023-12-09T18:55:53.925965Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.926631Z", "completed_at": "2023-12-09T18:55:53.926635Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006205081939697266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.relationships_stg_event_fielding_plays_game_id__game_id__ref_stg_games_.377518fe2c", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select game_id as from_field\n    from \"timeball\".\"main_models\".\"stg_event_fielding_plays\"\n    where game_id is not null\n),\n\nparent as (\n    select game_id as to_field\n    from \"timeball\".\"main_models\".\"stg_games\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.928753Z", "completed_at": "2023-12-09T18:55:53.932885Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.933550Z", "completed_at": "2023-12-09T18:55:53.933553Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006163835525512695, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.relationships_stg_event_pitch_sequences_game_id__game_id__ref_stg_games_.41a391d15a", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select game_id as from_field\n    from \"timeball\".\"main_models\".\"stg_event_pitch_sequences\"\n    where game_id is not null\n),\n\nparent as (\n    select game_id as to_field\n    from \"timeball\".\"main_models\".\"stg_games\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.935681Z", "completed_at": "2023-12-09T18:55:53.939744Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.940409Z", "completed_at": "2023-12-09T18:55:53.940412Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006094932556152344, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.relationships_stg_events_game_id__game_id__ref_stg_games_.2ff9f22170", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select game_id as from_field\n    from \"timeball\".\"main_models\".\"stg_events\"\n    where game_id is not null\n),\n\nparent as (\n    select game_id as to_field\n    from \"timeball\".\"main_models\".\"stg_games\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.942550Z", "completed_at": "2023-12-09T18:55:53.946900Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.947563Z", "completed_at": "2023-12-09T18:55:53.947566Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006399393081665039, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.relationships_stg_game_earned_runs_game_id__game_id__ref_stg_games_.a12c168f7b", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select game_id as from_field\n    from \"timeball\".\"main_models\".\"stg_game_earned_runs\"\n    where game_id is not null\n),\n\nparent as (\n    select game_id as to_field\n    from \"timeball\".\"main_models\".\"stg_games\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.949726Z", "completed_at": "2023-12-09T18:55:53.953850Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.954522Z", "completed_at": "2023-12-09T18:55:53.954526Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006176948547363281, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.relationships_stg_game_fielding_appearances_game_id__game_id__ref_stg_games_.53b862f062", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select game_id as from_field\n    from \"timeball\".\"main_models\".\"stg_game_fielding_appearances\"\n    where game_id is not null\n),\n\nparent as (\n    select game_id as to_field\n    from \"timeball\".\"main_models\".\"stg_games\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.956665Z", "completed_at": "2023-12-09T18:55:53.961029Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.961688Z", "completed_at": "2023-12-09T18:55:53.961692Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006409883499145508, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.relationships_stg_game_lineup_appearances_game_id__game_id__ref_stg_games_.e186087a87", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select game_id as from_field\n    from \"timeball\".\"main_models\".\"stg_game_lineup_appearances\"\n    where game_id is not null\n),\n\nparent as (\n    select game_id as to_field\n    from \"timeball\".\"main_models\".\"stg_games\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.963844Z", "completed_at": "2023-12-09T18:55:53.967855Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.968506Z", "completed_at": "2023-12-09T18:55:53.968509Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006035327911376953, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.relationships_stg_games_park_id__park_id__ref_stg_parks_.670e6f218e", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select park_id as from_field\n    from \"timeball\".\"main_models\".\"stg_games\"\n    where park_id is not null\n),\n\nparent as (\n    select park_id as to_field\n    from \"timeball\".\"main_models\".\"stg_parks\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.970646Z", "completed_at": "2023-12-09T18:55:53.974027Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.974688Z", "completed_at": "2023-12-09T18:55:53.974692Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005419015884399414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.timeball.people", "compiled": true, "compiled_code": "WITH roster_files AS (\n    SELECT\n        player_id,\n        MODE(bats) AS bats,\n        MODE(throws) AS throws,\n    FROM \"timeball\".\"main_models\".\"stg_rosters\"\n    GROUP BY 1\n),\n\nbox_files AS (\n      SELECT DISTINCT batter_id AS player_id FROM \"timeball\".\"main_models\".\"stg_box_score_batting_lines\"\n      UNION\n      SELECT DISTINCT fielder_id AS player_id FROM \"timeball\".\"main_models\".\"stg_box_score_fielding_lines\"\n),\n\njoined AS (\n    SELECT\n        COALESCE(\n            retro.player_id,\n            databank.retrosheet_player_id,\n            roster_files.player_id,\n            box_files.player_id\n        ) AS person_id,\n        databank.baseball_reference_player_id,\n        COALESCE(retro.first_name, databank.first_name) AS first_name,\n        COALESCE(retro.last_name, databank.last_name) AS last_name,\n        COALESCE(retro.bats, databank.bats, roster_files.bats) AS bats,\n        COALESCE(retro.throws, databank.throws, roster_files.throws) AS throws,\n        databank.birth_year,\n        retro.official_name,\n        retro.birth_date,\n        retro.birth_city,\n        retro.birth_state,\n        retro.birth_country,\n        COALESCE(retro.height_inches, databank.height_inches) AS height_inches,\n        COALESCE(retro.weight_pounds, databank.weight_pounds) AS weight_pounds\n    FROM \"timeball\".\"main_models\".\"stg_bio\" AS retro\n    FULL OUTER JOIN roster_files USING (player_id)\n    FULL OUTER JOIN box_files USING (player_id)\n    FULL OUTER JOIN \"timeball\".\"main_models\".\"stg_people\" AS databank\n        ON databank.retrosheet_player_id = COALESCE(retro.player_id, roster_files.player_id, box_files.player_id)\n    WHERE COALESCE(\n            retro.player_id,\n            databank.retrosheet_player_id,\n            roster_files.player_id,\n            box_files.player_id\n        ) IS NOT NULL\n),\n\nfinal AS (\n    SELECT\n        CASE WHEN person_id SIMILAR TO '[a-z]{5}[01][0-9]{2}' THEN person_id ELSE NULL END AS player_id,\n        *\n    FROM joined\n)\n\nSELECT * FROM final", "relation_name": "\"timeball\".\"main_models\".\"people\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.976918Z", "completed_at": "2023-12-09T18:55:53.982128Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.982793Z", "completed_at": "2023-12-09T18:55:53.982797Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007313966751098633, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.timeball.event_base_out_states", "compiled": true, "compiled_code": "\nWITH runners AS (\n    SELECT\n        event_key,\n        ANY_VALUE(CASE WHEN baserunner_bit = 1 THEN runner_id END)::PLAYER_ID AS runner_first_id,\n        ANY_VALUE(CASE WHEN baserunner_bit = 2 THEN runner_id END)::PLAYER_ID AS runner_second_id,\n        ANY_VALUE(CASE WHEN baserunner_bit = 4 THEN runner_id END)::PLAYER_ID AS runner_third_id,\n    FROM \"timeball\".\"main_models\".\"stg_event_baserunners\"\n    GROUP BY 1\n),\n\nadd_outs AS (\n    SELECT\n        event_key,\n        events.batting_side,\n        events.inning,\n        events.frame,\n        -- Next two cols are transformed to reduce size of partition key in next step\n        event_key // 255 AS game_key,\n        CASE events.frame WHEN 'Top' THEN 0 ELSE 1 END AS frame_key,\n        events.outs AS outs_start,\n        events.outs_on_play,\n        events.runs_on_play,\n        events.outs + events.outs_on_play AS outs_end,\n        runners.runner_first_id,\n        runners.runner_second_id,\n        runners.runner_third_id,\n        events.base_state AS base_state,\n        COALESCE(info.is_force_on_second, FALSE) AND outs_start < 2 AS is_gidp_eligible,\n    FROM \"timeball\".\"main_models\".\"stg_events\" AS events\n    LEFT JOIN runners USING (event_key)\n    LEFT JOIN \"timeball\".\"main_seeds\".\"seed_base_state_info\" AS info USING (base_state)\n),\n\nfinal AS (\n    SELECT\n        event_key,\n        inning AS inning_start,\n        LEAD(inning) OVER end_event AS inning_end,\n        frame AS frame_start,\n        LEAD(frame) OVER end_event AS frame_end,\n        ((inning - 1) * 3 + outs_start)::UTINYINT AS inning_in_outs_start,\n        -- TODO: Add inning_in_outs_end\n        -- (tricky since not sure whether it should be +1 or +4 or null)\n        outs_start,\n        outs_end,\n        outs_on_play,\n        is_gidp_eligible,\n        base_state AS base_state_start,\n        runner_first_id AS runner_first_id_start,\n        runner_second_id AS runner_second_id_start,\n        runner_third_id AS runner_third_id_start,\n        BIT_COUNT(base_state)::UTINYINT AS runners_count_start,\n        LEAD(base_state) OVER narrow AS base_state_end,\n        BIT_COUNT(LEAD(base_state) OVER narrow)::UTINYINT AS runners_count_end,\n        LEAD(runner_first_id) OVER narrow AS runner_first_id_end,\n        LEAD(runner_second_id) OVER narrow AS runner_second_id_end,\n        LEAD(runner_third_id) OVER narrow AS runner_third_id_end,\n        COALESCE(SUM(runs_on_play) FILTER (WHERE batting_side = 'Home') OVER start_event, 0)::UTINYINT AS score_home_start,\n        COALESCE(SUM(runs_on_play) FILTER (WHERE batting_side = 'Away') OVER start_event, 0)::UTINYINT AS score_away_start,\n        COALESCE(SUM(runs_on_play) FILTER (WHERE batting_side = 'Home') OVER end_event, 0)::UTINYINT AS score_home_end,\n        COALESCE(SUM(runs_on_play) FILTER (WHERE batting_side = 'Away') OVER end_event, 0)::UTINYINT AS score_away_end,\n        runs_on_play,\n        LAG(event_key) OVER narrow IS NULL AS frame_start_flag,\n        LEAD(event_key) OVER narrow IS NULL AS frame_end_flag,\n        LEAD(event_key) OVER narrow IS NULL AND outs_end != 3 AS truncated_frame_flag,\n        LAG(event_key) OVER start_event IS NULL AS game_start_flag,\n        LEAD(event_key) OVER end_event IS NULL AS game_end_flag,\n    FROM add_outs\n    WINDOW\n        narrow AS (\n            PARTITION BY game_key, inning, frame_key\n            ORDER BY event_key\n        ),\n        start_event AS (\n            PARTITION BY game_key\n            ORDER BY event_key\n            ROWS BETWEEN UNBOUNDED PRECEDING AND 1 PRECEDING\n        ),\n        end_event AS (\n            PARTITION BY game_key\n            ORDER BY event_key\n            ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\n        )\n)\n\nSELECT * FROM final", "relation_name": "\"timeball\".\"main_models\".\"event_base_out_states\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.985279Z", "completed_at": "2023-12-09T18:55:53.988530Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.989257Z", "completed_at": "2023-12-09T18:55:53.989262Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005502939224243164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.timeball.event_double_plays", "compiled": true, "compiled_code": "WITH final AS (\n    SELECT\n        flags.event_key,\n        BOOL_OR(dp_flag_types.is_double_play) AS is_double_play,\n        BOOL_OR(dp_flag_types.is_triple_play) AS is_triple_play,\n        BOOL_OR(\n            dp_flag_types.is_ground_ball_double_play\n        ) AS is_ground_ball_double_play\n    FROM \"timeball\".\"main_models\".\"stg_event_flags\" AS flags\n    INNER JOIN \"timeball\".\"main_seeds\".\"seed_double_play_flag_types\" AS dp_flag_types USING (flag)\n    GROUP BY 1\n)\n\nSELECT * FROM final", "relation_name": "\"timeball\".\"main_models\".\"event_double_plays\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.991662Z", "completed_at": "2023-12-09T18:55:53.994833Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:53.995496Z", "completed_at": "2023-12-09T18:55:53.995500Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0053730010986328125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "analysis.timeball.event_completeness_pitches", "compiled": true, "compiled_code": "WITH counts AS (\n    SELECT\n        event_key,\n        plate_appearance_result IS NOT NULL AS has_plate_appearance,\n        count_balls IS NOT NULL AS has_count_balls,\n        count_strikes IS NOT NULL AS has_count_strikes,\n        count_balls + count_strikes IS NOT NULL AS has_count\n    FROM \"timeball\".\"main_models\".\"stg_events\"\n    -- We don't use baserunning-only plays as criteria\n    -- for determining whether pitch data is missing,\n    -- as it is neither necessary nor sufficient for complete data.\n),\n\npitch_agg AS (\n    SELECT\n        ps.event_key,\n        BOOL_AND(spt.category != 'Unknown') AS has_pitch_results,\n        BOOL_AND(\n            spt.category != 'Unknown' AND spt.sequence_item != 'StrikeUnknownType'\n        ) AS has_strike_types\n    FROM \"timeball\".\"main_models\".\"stg_event_pitch_sequences\" AS ps\n    INNER JOIN \"timeball\".\"main_seeds\".\"seed_pitch_types\" AS spt USING (sequence_item)\n    WHERE spt.is_pitch\n    GROUP BY 1\n),\n\nfinal AS (\n    SELECT\n        event_key,\n        counts.has_count_balls,\n        counts.has_count_strikes,\n        counts.has_count,\n        COALESCE(pitch_agg.event_key IS NOT NULL) AS has_pitches,\n        COALESCE(pitch_agg.has_pitch_results, FALSE) AS has_pitch_results,\n        COALESCE(pitch_agg.has_strike_types, FALSE) AS has_strike_types\n    FROM counts\n    LEFT JOIN pitch_agg USING (event_key)\n    WHERE counts.has_plate_appearance\n        OR pitch_agg.event_key IS NOT NULL\n)\n\nSELECT * FROM final", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:53.997673Z", "completed_at": "2023-12-09T18:55:54.001270Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:54.001952Z", "completed_at": "2023-12-09T18:55:54.001957Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005755186080932617, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.timeball.event_pitch_sequence_stats", "compiled": true, "compiled_code": "\nWITH add_meta AS (\n    SELECT\n        pitch_meta.*,\n        pitches.event_key,\n        pitches.runners_going_flag,\n        pitches.blocked_by_catcher_flag,\n        pitches.catcher_pickoff_attempt_at_base\n    FROM \"timeball\".\"main_models\".\"stg_event_pitch_sequences\" AS pitches\n    INNER JOIN \"timeball\".\"main_seeds\".\"seed_pitch_types\" AS pitch_meta USING (sequence_item)\n),\n\nother_events AS (\n    SELECT\n        event_key,\n        BOOL_OR(baserunning_play_type = 'PassedBall')::UTINYINT AS passed_balls,\n        BOOL_OR(baserunning_play_type = 'WildPitch')::UTINYINT AS wild_pitches,\n        BOOL_OR(baserunning_play_type = 'Balk')::UTINYINT AS balks,\n    FROM \"timeball\".\"main_models\".\"stg_event_baserunners\"\n    GROUP BY 1\n),\n\ngrouped_sequence AS (\n    SELECT\n        event_key,\n        COUNT(*) FILTER (WHERE is_pitch)::UTINYINT AS pitches,\n\n        COUNT(*) FILTER (WHERE is_swing)::UTINYINT AS swings,\n        COUNT(*) FILTER (WHERE is_contact)::UTINYINT AS swings_with_contact,\n\n        COUNT(*) FILTER (WHERE is_strike)::UTINYINT AS strikes,\n        COUNT(*) FILTER (WHERE is_strike AND NOT is_swing)::UTINYINT AS strikes_called,\n        COUNT(*) FILTER (WHERE is_swing AND NOT is_contact)::UTINYINT AS strikes_swinging,\n        COUNT(*) FILTER (\n            WHERE is_swing AND is_contact AND NOT is_in_play AND NOT can_be_strike_three\n        )::UTINYINT AS strikes_foul,\n        COUNT(*) FILTER (WHERE sequence_item LIKE 'FoulTip%')::UTINYINT AS strikes_foul_tip,\n        COUNT(*) FILTER (WHERE is_in_play)::UTINYINT AS strikes_in_play,\n        COUNT(*) FILTER (WHERE sequence_item = 'StrikeUnknownType')::UTINYINT AS strikes_unknown,\n\n        COUNT(*) FILTER (WHERE category = 'Ball')::UTINYINT AS balls,\n        COUNT(*) FILTER (WHERE sequence_item = 'Ball')::UTINYINT AS balls_called,\n        COUNT(*) FILTER (WHERE sequence_item = 'IntentionalBall')::UTINYINT AS balls_intentional,\n        COUNT(*) FILTER (WHERE sequence_item = 'AutomaticBall')::UTINYINT AS balls_automatic,\n\n        COUNT(*) FILTER (WHERE category = 'Unknown')::UTINYINT AS unknown_pitches,\n\n        COUNT(*) FILTER (WHERE sequence_item LIKE '%Pitchout')::UTINYINT AS pitchouts,\n        COUNT(*) FILTER (WHERE sequence_item LIKE 'Pickoff%')::UTINYINT AS pitcher_pickoff_attempts,\n        COUNT(*) FILTER (\n            WHERE catcher_pickoff_attempt_at_base IS NOT NULL\n        )::UTINYINT AS catcher_pickoff_attempts,\n        COUNT(*) FILTER (WHERE blocked_by_catcher_flag)::UTINYINT AS pitches_blocked_by_catcher,\n        COUNT(*) FILTER (WHERE is_pitch AND runners_going_flag)::UTINYINT AS pitches_with_runners_going,\n    FROM add_meta\n    GROUP BY 1\n),\n\nfinal AS (\n    SELECT\n        grouped_sequence.*,\n        COALESCE(other_events.passed_balls, 0)::UTINYINT AS passed_balls,\n        COALESCE(other_events.wild_pitches, 0)::UTINYINT AS wild_pitches,\n        COALESCE(other_events.balks, 0)::UTINYINT AS balks\n    FROM grouped_sequence\n    LEFT JOIN other_events USING (event_key)\n)\n\nSELECT * FROM final", "relation_name": "\"timeball\".\"main_models\".\"event_pitch_sequence_stats\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:54.004380Z", "completed_at": "2023-12-09T18:55:54.008973Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:54.009651Z", "completed_at": "2023-12-09T18:55:54.009655Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006723642349243164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.timeball.event_baserunning_stats", "compiled": true, "compiled_code": "\nWITH joined AS (\n    SELECT\n        event_key,\n        b.baserunner,\n        b.game_id,\n        e.batting_team_id,\n        e.fielding_team_id,\n        e.base_state,\n        b.runner_id,\n        e.pitcher_id AS current_pitcher_id,\n        b.runner_lineup_position,\n        b.reached_on_event_key,\n        b.charge_event_key,\n        b.explicit_charged_pitcher_id,\n        b.baserunner != 'Batter' AS is_on_base,\n        b.attempted_advance_to_base IS NOT NULL AS is_advance_attempt,\n        part.plate_appearance_result IS NOT NULL AS is_plate_appearance,\n        b.is_out,\n        b.is_advance_attempt AND NOT b.is_out AS is_successful,\n        COALESCE(b.advanced_on_error_flag, FALSE) AS advanced_on_error_flag,\n        COALESCE(b.explicit_out_flag, FALSE) AS explicit_out_flag,\n        baserunner_meta.numeric_value AS number_base_from,\n        bases_meta.numeric_value AS number_base_to,\n        COALESCE(part.is_in_play, FALSE) AS is_in_play,\n        COALESCE(part.is_hit, FALSE) AS is_hit,\n        COALESCE(b.baserunning_play_type, 'None') AS baserunning_play_type,\n        COALESCE(part.total_bases, 0)::UTINYINT AS batter_total_bases,\n        CASE WHEN b.baserunner = 'Batter'\n                THEN e.base_state & 1 = 0\n            WHEN b.baserunner = 'First'\n                THEN e.base_state >> 1 & 1 = 0\n            WHEN b.baserunner = 'Second'\n                THEN e.base_state >> 2 & 1 = 0\n            ELSE FALSE\n        END AS is_next_base_empty,\n        CASE WHEN b.baserunner = 'Batter'\n                -- By convention we say that the batter is never the lead runner\n                THEN FALSE\n            WHEN b.baserunner = 'First'\n                THEN e.base_state = 1\n            WHEN b.baserunner = 'Second'\n                THEN e.base_state < 4\n            ELSE TRUE\n        END AS is_lead_runner,\n        CASE WHEN b.baserunner = 'Second'\n                THEN e.base_state & 1 = 1\n            WHEN b.baserunner = 'Third'\n                THEN e.base_state = 7\n            ELSE TRUE\n        END AS is_force_on_runner,\n        CASE WHEN e.plate_appearance_result = 'Single'\n                THEN b.baserunner IN ('First', 'Second')\n            WHEN e.plate_appearance_result = 'Double'\n                THEN b.baserunner = 'First'\n            ELSE FALSE\n        END AS is_extra_base_chance,\n\n    FROM \"timeball\".\"main_models\".\"stg_event_baserunners\" AS b\n    LEFT JOIN \"timeball\".\"main_models\".\"stg_events\" AS e USING (event_key)\n    LEFT JOIN \"timeball\".\"main_seeds\".\"seed_plate_appearance_result_types\" AS part\n        USING (plate_appearance_result)\n    LEFT JOIN \"timeball\".\"main_seeds\".\"seed_baserunner_info\" AS baserunner_meta\n        ON b.baserunner = baserunner_meta.baserunner\n    LEFT JOIN \"timeball\".\"main_seeds\".\"seed_bases_info\" AS bases_meta\n        ON b.attempted_advance_to_base = bases_meta.base\n    WHERE NOT e.no_play_flag\n),\n\nfinal AS (\n    SELECT\n        event_key,\n        game_id,\n        batting_team_id,\n        fielding_team_id,\n        runner_id,\n        current_pitcher_id,\n        baserunner,\n        runner_lineup_position,\n        reached_on_event_key,\n        charge_event_key,\n        explicit_charged_pitcher_id,\n        (is_successful AND number_base_to = 4)::UTINYINT AS runs,\n        is_out::UTINYINT AS outs_on_basepaths,\n        -- Note that this is different from OBP - it includes fielders choices, errors, etc.\n        (is_successful AND baserunner = 'Batter')::UTINYINT AS times_reached_base,\n        (is_lead_runner)::UTINYINT AS times_lead_runner,\n        (is_force_on_runner)::UTINYINT AS times_force_on_runner,\n        (is_next_base_empty)::UTINYINT AS times_next_base_empty,\n        (baserunning_play_type = 'StolenBase')::UTINYINT AS stolen_bases,\n        (stolen_bases > 0 AND baserunner = 'First')::UTINYINT AS stolen_bases_second,\n        (stolen_bases > 0 AND baserunner = 'Second')::UTINYINT AS stolen_bases_third,\n        (stolen_bases > 0 AND baserunner = 'Third')::UTINYINT AS stolen_bases_home,\n        (baserunning_play_type LIKE '%CaughtStealing')::UTINYINT AS caught_stealing,\n        (caught_stealing > 0 AND baserunner = 'First')::UTINYINT AS caught_stealing_second,\n        (caught_stealing > 0 AND baserunner = 'Second')::UTINYINT AS caught_stealing_third,\n        (caught_stealing > 0 AND baserunner = 'Third')::UTINYINT AS caught_stealing_home,\n        (\n            stolen_bases + caught_stealing > 0\n            OR is_next_base_empty AND is_on_base\n        )::UTINYINT AS stolen_base_opportunities,\n        (stolen_base_opportunities > 0 AND baserunner = 'First')::UTINYINT AS stolen_base_opportunities_second,\n        (stolen_base_opportunities > 0 AND baserunner = 'Second')::UTINYINT AS stolen_base_opportunities_third,\n        (stolen_base_opportunities > 0 AND baserunner = 'Third')::UTINYINT AS stolen_base_opportunities_home,\n        (baserunning_play_type LIKE 'PickedOff%' AND is_out)::UTINYINT AS picked_off,\n        (picked_off > 0 AND baserunner = 'First')::UTINYINT AS picked_off_first,\n        (picked_off > 0 AND baserunner = 'Second')::UTINYINT AS picked_off_second,\n        (picked_off > 0 AND baserunner = 'Third')::UTINYINT AS picked_off_third,\n        (baserunning_play_type = 'PickedOffCaughtStealing')::UTINYINT AS picked_off_caught_stealing,\n\n        (baserunning_play_type = 'WildPitch' AND is_successful)::UTINYINT AS advances_on_wild_pitches,\n        (baserunning_play_type = 'PassedBall' AND is_successful)::UTINYINT AS advances_on_passed_balls,\n        (baserunning_play_type = 'Balk' AND is_successful)::UTINYINT AS advances_on_balks,\n        (\n            baserunning_play_type = 'OtherAdvance' AND is_successful\n        )::UTINYINT AS advances_on_unspecified_plays,\n        (\n            baserunning_play_type = 'DefensiveIndifference' AND is_successful\n        )::UTINYINT AS advances_on_defensive_indifference,\n        (\n            (baserunning_play_type = 'AdvancedOnError' OR advanced_on_error_flag) AND is_successful\n        )::UTINYINT AS advances_on_errors,\n\n        (is_plate_appearance AND is_on_base)::UTINYINT AS plate_appearances_while_on_base,\n        (is_in_play)::UTINYINT AS balls_in_play_while_running,\n        (is_in_play AND is_on_base)::UTINYINT AS balls_in_play_while_on_base,\n        batter_total_bases AS batter_total_bases_while_running,\n        CASE WHEN is_on_base\n                THEN batter_total_bases\n            ELSE 0\n        END::UTINYINT AS batter_total_bases_while_on_base,\n        CASE WHEN is_hit AND number_base_to - number_base_from > batter_total_bases\n                THEN 1\n            ELSE 0\n        END::UTINYINT AS extra_base_advance_attempts,\n        CASE WHEN is_successful\n                THEN number_base_to - number_base_from\n            ELSE 0\n        END::INT1 AS bases_advanced,\n        CASE WHEN is_successful AND is_in_play AND NOT advanced_on_error_flag\n                THEN number_base_to - number_base_from\n            ELSE 0\n        END::INT1 AS bases_advanced_on_balls_in_play,\n        CASE WHEN is_successful AND is_in_play AND NOT advanced_on_error_flag\n                THEN number_base_to\n                    - number_base_from\n                    - LEAST(4 - number_base_from, batter_total_bases)\n            ELSE 0\n        END::INT1 AS surplus_bases_advanced_on_balls_in_play,\n        (\n            is_out AND explicit_out_flag AND number_base_to - number_base_from > 1\n        )::UTINYINT AS outs_on_extra_base_advance_attempts,\n        (explicit_out_flag AND NOT is_out)::UTINYINT AS outs_avoided_on_errors,\n        -- Tags do not count as an unforced out if they occur when a force was in play.\n        -- This will cause us to miss some cases when a runner on base is tagged out\n        -- after advancing, straying off the bag, and then failing to return.\n        (\n            is_out AND (\n                outs_on_extra_base_advance_attempts = 1\n                OR NOT is_force_on_runner\n                -- Force outs can't happen on the same plays as hits,\n                -- so runners marked out on hits are always unforced\n                OR is_hit\n            )\n        )::UTINYINT AS unforced_outs_on_basepaths,\n\n        (is_extra_base_chance)::UTINYINT AS extra_base_chances,\n        (is_extra_base_chance AND extra_base_advance_attempts > 0 AND is_successful)::UTINYINT AS extra_bases_taken,\n\n    FROM joined\n)\n\nSELECT * FROM final", "relation_name": "\"timeball\".\"main_models\".\"event_baserunning_stats\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:54.012005Z", "completed_at": "2023-12-09T18:55:54.015866Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:54.016569Z", "completed_at": "2023-12-09T18:55:54.016573Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006000041961669922, "adapter_response": {}, "message": null, "failures": null, "unique_id": "analysis.timeball.event_completeness_batted_balls", "compiled": true, "compiled_code": "WITH final AS (\n    SELECT\n        event_key,\n        COALESCE(e.batted_trajectory != 'Unknown', FALSE) AS has_trajectory,\n        COALESCE(e.batted_location_general != 'Unknown', FALSE) AS has_general_location,\n        -- To avoid false negatives, we'll say that a fielder is present regardless\n        -- if it's a ground-rule double or home run where there is location info\n        COALESCE(\n            e.batted_to_fielder != 0 OR (NOT rt.is_in_play AND has_general_location),\n            FALSE\n        ) AS has_batted_to_fielder,\n        has_batted_to_fielder OR has_general_location AS has_any_location,\n        -- Coverage of the fields below can't be determined at an event granularity, so\n        -- the false negative issue above isn't a concern. Coverage should be inferred\n        -- by having at least ~1 predicate-satisfying event over the course of\n        -- a game or another appropriate sample.\n        COALESCE(e.batted_location_depth != 'Default', FALSE) AS has_depth,\n        COALESCE(e.batted_location_depth = 'ExtraDeep', FALSE) AS has_extra_deep_depth,\n        COALESCE(e.batted_location_angle != 'Default', FALSE) AS has_angle,\n        COALESCE(e.batted_location_angle = 'Foul', FALSE) AS has_foul_angle,\n\n        COALESCE(e.batted_contact_strength != 'Default', FALSE) AS has_strength,\n        COALESCE(lt.is_mid_position, FALSE) AS has_mid_position,\n        COALESCE(\n            ct.broad_classification = 'GroundBall' AND e.batted_location_general IS NOT NULL,\n            FALSE\n        ) AS has_general_location_groundball,\n        COALESCE(\n            ct.broad_classification = 'AirBall' AND e.batted_location_general IS NOT NULL,\n            FALSE\n        ) AS has_general_location_airball,\n        COALESCE(\n            ct.broad_classification = 'GroundBall' AND lt.is_mid_position,\n            FALSE\n        ) AS has_mid_position_groundball,\n        COALESCE(\n            ct.broad_classification = 'AirBall' AND lt.is_mid_position,\n            FALSE\n        ) AS has_mid_position_airball,\n        COALESCE(\n            ct.broad_classification = 'GroundBall' AND e.batted_location_depth != 'Default',\n            FALSE\n        ) AS has_depth_groundball,\n        COALESCE(\n            ct.broad_classification = 'AirBall' AND e.batted_location_depth != 'Default',\n            FALSE\n        ) AS has_depth_airball,\n        COALESCE(\n            ct.broad_classification = 'GroundBall' AND e.batted_location_angle != 'Default',\n            FALSE\n        ) AS has_angle_groundball,\n        COALESCE(\n            ct.broad_classification = 'AirBall' AND e.batted_location_angle != 'Default',\n            FALSE\n        ) AS has_angle_airball,\n        COALESCE(\n            ct.broad_classification = 'GroundBall' AND e.batted_contact_strength != 'Default',\n            FALSE\n        ) AS has_strength_groundball,\n        COALESCE(\n            ct.broad_classification = 'AirBall' AND e.batted_contact_strength != 'Default',\n            FALSE\n        ) AS has_strength_airball,\n        -- Based on the location diagram, any outside-the-park home run\n        -- from left-center to right-center should be Deep or ExtraDeep in almost any park.\n        -- A default (or shallow) batted_location_depth is a strong indicator\n        -- that the batted_location_depth info is partially or entirely missing from the sample.\n        (\n            plate_appearance_result = 'HomeRun'\n            AND lt.category_edge = 'Middle'\n            AND e.batted_location_depth NOT LIKE '%Deep'\n        ) AS has_misclassified_home_run_distance,\n    FROM \"timeball\".\"main_models\".\"stg_events\" e\n    INNER JOIN \"timeball\".\"main_seeds\".\"seed_plate_appearance_result_types\" AS rt USING (plate_appearance_result)\n    LEFT JOIN \"timeball\".\"main_seeds\".\"seed_hit_location_categories\" AS lt USING (batted_location_general)\n    LEFT JOIN \"timeball\".\"main_seeds\".\"seed_plate_appearance_trajectories\" AS ct USING (batted_trajectory)\n)\n\nSELECT * FROM final", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:54.018822Z", "completed_at": "2023-12-09T18:55:54.022871Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:54.023568Z", "completed_at": "2023-12-09T18:55:54.023572Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006165027618408203, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.timeball.game_scorekeeping", "compiled": true, "compiled_code": "WITH flattened_init AS (\n    SELECT\n        season,\n        game_id,\n        away_team_id,\n        home_team_id,\n        date,\n        inputter,\n        translator,\n        CASE WHEN scorer IS NULL or TRIM(scorer) = '' THEN 'unknown' ELSE scorer END AS filled_scorer,\n        -- Delimiters aren't consistent, so we need to split on multiple characters\n        UNNEST(STRING_SPLIT_REGEX(filled_scorer, '[/&,]|( -(-?) )')) as split_scorer,\n        LOWER(TRIM(split_scorer)) AS scorer\n    FROM \"timeball\".\"main_models\".\"stg_games\"\n),\n\nflattened AS (\n    SELECT\n        * REPLACE (\n            -- One more split to cover the common cases of \"[team1] [team2]\" AND \"teams\"\n            UNNEST(\n                CASE WHEN scorer NOT IN ('tsn box', 'red sox') AND REGEXP_FULL_MATCH(scorer, '\\w{3}\\W+\\w{3}')\n                        THEN STRING_SPLIT_REGEX(scorer, '\\W+')\n                    WHEN scorer IN ('teams', 'both teams', 'both')\n                        THEN [LOWER(away_team_id), LOWER(home_team_id)]\n                    ELSE [scorer]\n                END\n            ) AS scorer\n        )\n    FROM flattened_init\n),\n\ncounts AS (\n    SELECT DISTINCT ON (f.game_id, cleaned_scorer)\n        f.season,\n        f.game_id,\n        f.date,\n        f.away_team_id,\n        LOWER(away.nickname) AS away_nickname,\n        f.home_team_id,\n        LOWER(home.nickname) AS home_nickname,\n        f.inputter,\n        f.translator,\n        CASE WHEN s.normalized_scorer IS NOT NULL\n                THEN s.normalized_scorer\n            WHEN dis_away.normalized_scorer IS NOT NULL\n                THEN dis_away.normalized_scorer\n            WHEN dis_home.normalized_scorer IS NOT NULL\n                THEN dis_home.normalized_scorer\n            WHEN num_range.group_id IS NOT NULL\n                THEN num_range.group_id\n            WHEN f.scorer IN (LOWER(away.nickname), LOWER(f.away_team_id))\n                THEN LOWER(away.nickname)\n            WHEN f.scorer IN (LOWER(home.nickname), LOWER(f.home_team_id))\n                THEN LOWER(home.nickname)\n            ELSE f.scorer\n        END AS cleaned_scorer,\n        f.scorer AS raw_scorer,\n        COUNT(*) OVER (PARTITION BY f.game_id) AS game_scorer_splits,\n        COUNT(*) OVER (PARTITION BY cleaned_scorer) AS scorer_game_count_raw,\n        1 / game_scorer_splits AS game_share,\n    FROM flattened AS f\n    LEFT JOIN \"timeball\".\"main_seeds\".\"seed_scorer_lookup\" AS s ON f.scorer = LOWER(TRIM(s.scorer))\n    LEFT JOIN \"timeball\".\"main_seeds\".\"seed_scorer_numerical_ranges\" AS num_range\n        -- TODO: Test assumption that all possible range candidates are 3 digits\n        ON REGEXP_FULL_MATCH(f.scorer, '\\d{3}')\n            AND f.scorer BETWEEN num_range.start::VARCHAR AND num_range.end::VARCHAR\n    LEFT JOIN \"timeball\".\"main_seeds\".\"seed_franchises\" AS away\n        ON f.away_team_id = away.team_id\n            AND f.date BETWEEN away.date_start AND COALESCE(away.date_end, '9999-12-31')\n    LEFT JOIN \"timeball\".\"main_seeds\".\"seed_franchises\" AS home\n        ON f.home_team_id = home.team_id\n            AND f.date BETWEEN home.date_start AND COALESCE(home.date_end, '9999-12-31')\n    LEFT JOIN \"timeball\".\"main_seeds\".\"seed_scorer_disambiguation\" AS dis_away\n        ON f.scorer = dis_away.scorer\n            AND LOWER(f.away_team_id) = dis_away.team_id\n    LEFT JOIN \"timeball\".\"main_seeds\".\"seed_scorer_disambiguation\" AS dis_home\n        ON f.scorer = dis_home.scorer\n            AND LOWER(f.home_team_id) = dis_home.team_id\n    WHERE TRIM(f.scorer) != ''\n),\n\nfinal AS (\n    SELECT\n        season,\n        game_id,\n        date,\n        cleaned_scorer,\n        raw_scorer,\n        away_team_id,\n        home_team_id,\n        inputter,\n        translator,\n        game_share,\n        scorer_game_count_raw,\n        SUM(game_share) OVER scorer AS scorer_game_count_weighted,\n        CASE\n            WHEN SUM(game_share) OVER scorer_away >= SUM(game_share) OVER scorer_home\n                THEN away_team_id\n            ELSE home_team_id\n        END AS scorer_more_common_team_id\n    FROM counts\n    WINDOW\n        scorer AS (PARTITION BY cleaned_scorer),\n        scorer_away AS (PARTITION BY cleaned_scorer, away_team_id),\n        scorer_home AS (PARTITION BY cleaned_scorer, home_team_id)\n)\n\nSELECT * FROM final", "relation_name": "\"timeball\".\"main_models\".\"game_scorekeeping\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:54.025718Z", "completed_at": "2023-12-09T18:55:54.029575Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:54.030260Z", "completed_at": "2023-12-09T18:55:54.030264Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00595402717590332, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.timeball.calc_batted_ball_type", "compiled": true, "compiled_code": "\n-- trajectory type inference rules (only valid for batted balls without trajectory type)\n-- 1. Unassisted putouts are air balls (unassisted GB putouts should already be explicit grounders)\n-- 2. Balls with an outfield locaiton are air balls\n-- 2. Home runs are air balls\n-- 4. Balls fielded by infielders with an assisted putout are ground balls\n-- Many exceptions are possible, but they are some combination\n-- of rare and likely to be explicitly noted when they do occur.\n\n-- Location inference rules (applies to batted balls without location)\n-- 1. Ground balls fielded by outfielders have infield depth\n-- 2. All other depth/side cases are dictated by the fielder's position\n--    via the `seed_batted_to_fielder_categories` table\n-- 3. If there is no fielder, we go by the explicit location\n-- (which is rarely available, especially when there is no fielder).\n-- The explicit location data is better than the fielder data in a vacuum,\n-- but fielder-based location is far more consistently available.\n-- Choosing it as the default makes the data more precise (in the sense of self-consistency).\nWITH putouts AS (\n    SELECT\n        event_key,\n        SUM(putouts - assisted_putouts) AS unassisted_putouts,\n        SUM(assisted_putouts) AS assisted_putouts,\n    FROM \"timeball\".\"main_models\".\"calc_fielding_play_agg\"\n    -- When the putout is from an unknown fielder, that often means\n    -- that there is a missing assist on the play as well, so we can't\n    -- infer anything from it.\n    WHERE fielding_position != 0\n    GROUP BY 1\n\n),\n\ninference AS (\n    SELECT\n        batted_ball.game_id,\n        batted_ball.event_key,\n        batted_ball.plate_appearance_result,\n        -- Null out batted_to_fielder on homers to distinguish between \"no fielder\" and \"unknown fielder\"\n        -- TODO: Handle upstream\n        CASE WHEN batted_ball.plate_appearance_result NOT IN ('HomeRun', 'GroundRuleDouble')\n                THEN batted_ball.batted_to_fielder\n        END AS batted_to_fielder,\n        batted_ball.batted_trajectory AS recorded_trajectory,\n        batted_ball.batted_location_general AS recorded_location,\n        batted_ball.batted_location_depth AS recorded_location_depth,\n        batted_ball.batted_location_angle AS recorded_location_angle,\n        location_info.category_depth,\n        location_info.category_side,\n        location_info.category_edge,\n        (\n            (recorded_trajectory != 'GroundBall' AND putouts.unassisted_putouts > 0)\n            OR batted_ball.plate_appearance_result = 'HomeRun'\n            -- 2000-2002 seasons have a lot of shallow outfield flies that are actually\n            -- ground balls, and no metadata to isolate faulty sources.\n            OR (location_info.category_depth = 'Outfield' AND batted_ball.season NOT BETWEEN 2000 AND 2002)\n        ) AS is_inferred_air_ball,\n        CASE\n            WHEN batted_ball.batted_to_fielder BETWEEN 1 AND 6 AND putouts.assisted_putouts > 0\n                THEN 'GroundBall'\n            ELSE 'Unknown'\n        END AS inferred_contact,\n        CASE WHEN recorded_trajectory = 'Unknown' THEN inferred_contact\n            ELSE recorded_trajectory\n        END AS batted_trajectory,\n    FROM \"timeball\".\"main_models\".\"stg_events\" AS batted_ball\n    LEFT JOIN putouts USING (event_key)\n    LEFT JOIN \"timeball\".\"main_seeds\".\"seed_hit_location_categories\" AS location_info USING (batted_location_general)\n    WHERE batted_ball.batted_trajectory IS NOT NULL\n),\n\nfinal AS (\n    SELECT\n        inference.game_id,\n        inference.event_key,\n        inference.plate_appearance_result,\n        inference.batted_to_fielder,\n        inference.batted_trajectory::trajectory AS trajectory,\n        inference.recorded_trajectory,\n        inference.batted_trajectory != inference.recorded_trajectory AS is_trajectory_deduced,\n        CASE WHEN inference.is_inferred_air_ball\n                THEN 'AirBall'\n            ELSE trajectory_info.broad_classification\n        END AS trajectory_broad_classification,\n        inference.recorded_location,\n        inference.recorded_location_depth,\n        inference.recorded_location_angle,\n        CASE\n            WHEN inference.batted_trajectory = 'GroundBall' AND inference.batted_to_fielder BETWEEN 7 AND 9\n                THEN 'Infield'\n            WHEN inference.batted_trajectory = 'Unknown' AND inference.batted_to_fielder BETWEEN 7 AND 9\n                THEN 'Unknown'\n            WHEN fielder.category_depth IS NOT NULL\n                THEN fielder.category_depth\n            WHEN inference.category_depth IS NOT NULL\n                THEN inference.category_depth\n            ELSE 'Unknown'\n        END AS location_depth,\n        COALESCE(fielder.category_side, inference.category_side, 'Unknown') AS location_side,\n        COALESCE(inference.category_edge, 'Unknown') AS location_edge,\n    FROM inference\n    LEFT JOIN \"timeball\".\"main_seeds\".\"seed_plate_appearance_trajectories\" AS trajectory_info USING (batted_trajectory)\n    LEFT JOIN \"timeball\".\"main_seeds\".\"seed_hit_to_fielder_categories\" AS fielder USING (batted_to_fielder)\n)\n\nSELECT * FROM final", "relation_name": "\"timeball\".\"main_models\".\"calc_batted_ball_type\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:54.032604Z", "completed_at": "2023-12-09T18:55:54.036920Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:54.037569Z", "completed_at": "2023-12-09T18:55:54.037573Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006436824798583984, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.timeball.game_start_info", "compiled": true, "compiled_code": "\nWITH games AS (\n    SELECT\n        g.game_id,\n        g.date,\n        g.start_time,\n        g.season,\n        g.home_team_id,\n        g.away_team_id,\n        g.doubleheader_status,\n        g.time_of_day,\n        g.game_type,\n        g.bat_first_side,\n        g.sky,\n        g.field_condition,\n        g.precipitation,\n        g.wind_direction,\n        g.park_id,\n        g.temperature_fahrenheit,\n        g.attendance::UINTEGER AS attendance,\n        g.wind_speed_mph::UTINYINT AS wind_speed_mph,\n        g.use_dh,\n        g.scorer,\n        g.scoring_method,\n        g.source_type,\n        g.umpire_home_id,\n        g.umpire_first_id,\n        g.umpire_second_id,\n        g.umpire_third_id,\n        g.umpire_left_id,\n        g.umpire_right_id,\n        g.filename,\n    FROM \"timeball\".\"main_models\".\"stg_games\" AS g\n),\n\nadd_gamelog AS (\n    SELECT *\n    FROM games\n    UNION ALL BY NAME\n    -- Gamelogs from non-acquired games\n    -- have a small subset of info\n    SELECT\n        game_id,\n        date,\n        season,\n        home_team_id,\n        away_team_id,\n        doubleheader_status,\n        time_of_day,\n        game_type,\n        bat_first_side,\n        park_id,\n        attendance::UINTEGER AS attendance,\n        use_dh,\n        umpire_home_id,\n        umpire_first_id,\n        umpire_second_id,\n        umpire_third_id,\n        source_type,\n        home_starting_pitcher_id,\n        away_starting_pitcher_id,\n        'Unknown'::SKY AS sky,\n        'Unknown'::FIELD_CONDITION AS field_condition,\n        'Unknown'::PRECIPITATION AS precipitation,\n        'Unknown'::WIND_DIRECTION AS wind_direction,\n    FROM \"timeball\".\"main_models\".\"stg_gamelog\"\n    WHERE game_id NOT IN (SELECT game_id FROM games)\n),\n\nadd_rest AS (\n    SELECT\n        add_gamelog.* REPLACE (\n            COALESCE(add_gamelog.away_starting_pitcher_id, lineups.fielding_map_away[1][1])\n            AS away_starting_pitcher_id,\n            COALESCE(add_gamelog.home_starting_pitcher_id, lineups.fielding_map_home[1][1])\n            AS home_starting_pitcher_id,\n            COALESCE(add_gamelog.park_id, missing_parks.park_id) AS park_id,\n        ),\n        game_types.is_regular_season,\n        game_types.is_postseason,\n        COALESCE(\n            add_gamelog.season >= 1947 AND add_gamelog.filename NOT LIKE '%.E%R', FALSE\n        ) AS is_integrated,\n        COALESCE(add_gamelog.filename LIKE '%.E%R', FALSE) AS is_negro_leagues,\n        (NOT is_integrated AND NOT is_negro_leagues) AS is_segregated_white,\n        franchise_a.franchise_id::TEAM_ID AS away_franchise_id,\n        franchise_h.franchise_id::TEAM_ID AS home_franchise_id,\n        franchise_a.league AS away_league,\n        franchise_h.league AS home_league,\n        franchise_a.division AS away_division,\n        franchise_h.division AS home_division,\n        franchise_a.location || ' ' || franchise_a.nickname AS away_team_name,\n        franchise_h.location || ' ' || franchise_h.nickname AS home_team_name,\n        COALESCE(franchise_a.league != franchise_h.league, FALSE) AS is_interleague,\n        lineups.lineup_map_away,\n        lineups.lineup_map_home,\n        lineups.fielding_map_away,\n        lineups.fielding_map_home,\n    FROM add_gamelog\n    -- It's an extra join, but we need to join after denormalizing\n    -- in order to get the gamelog-only games\n    LEFT JOIN \"timeball\".\"main_seeds\".\"seed_franchises\" AS franchise_a\n        ON add_gamelog.away_team_id = franchise_a.team_id\n            AND add_gamelog.date BETWEEN\n            franchise_a.date_start AND COALESCE(franchise_a.date_end, '9999-12-31')\n    LEFT JOIN \"timeball\".\"main_seeds\".\"seed_franchises\" AS franchise_h\n        ON add_gamelog.home_team_id = franchise_h.team_id\n            AND add_gamelog.date BETWEEN\n            franchise_h.date_start AND COALESCE(franchise_h.date_end, '9999-12-31')\n    LEFT JOIN \"timeball\".\"main_models\".\"game_starting_lineups\" AS lineups USING (game_id)\n    LEFT JOIN \"timeball\".\"main_seeds\".\"seed_game_types\" AS game_types USING (game_type)\n    -- Some parks are missing from early box files, so we supplement with the gamelog\n    -- Otherwise, gamelog games are mutually exclusive with box/event games in this data\n    LEFT JOIN \"timeball\".\"main_models\".\"stg_gamelog\" AS missing_parks USING (game_id)\n)\n\nSELECT * FROM add_rest", "relation_name": "\"timeball\".\"main_models\".\"game_start_info\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:54.039916Z", "completed_at": "2023-12-09T18:55:54.044995Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:54.045668Z", "completed_at": "2023-12-09T18:55:54.045672Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007250308990478516, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.timeball.event_personnel_lookup", "compiled": true, "compiled_code": "\nWITH lineup AS (\n    SELECT\n        game_id,\n        batting_side,\n        personnel_lineup_key::INT AS personnel_lineup_key,\n        ANY_VALUE(start_event_id) AS start_event_id,\n        ANY_VALUE(end_event_id) AS end_event_id\n    FROM \"timeball\".\"main_models\".\"personnel_lineup_states\"\n    GROUP BY 1, 2, 3\n),\n\nfielding AS (\n    SELECT\n        game_id,\n        fielding_side,\n        personnel_fielding_key::INT AS personnel_fielding_key,\n        ANY_VALUE(start_event_id) AS start_event_id,\n        ANY_VALUE(end_event_id) AS end_event_id\n    FROM \"timeball\".\"main_models\".\"personnel_fielding_states\"\n    GROUP BY 1, 2, 3\n),\n\nfinal AS (\n    SELECT\n        events.game_id,\n        events.event_id,\n        events.event_key,\n        lineup.personnel_lineup_key,\n        fielding.personnel_fielding_key,\n    FROM \"timeball\".\"main_models\".\"stg_events\" AS events\n    LEFT JOIN lineup\n        ON events.game_id = lineup.game_id\n            AND events.batting_side = lineup.batting_side\n            AND events.event_id BETWEEN lineup.start_event_id AND lineup.end_event_id\n    LEFT JOIN fielding\n        ON events.game_id = fielding.game_id\n            AND events.batting_side != fielding.fielding_side\n            AND events.event_id BETWEEN fielding.start_event_id AND fielding.end_event_id\n    WHERE NOT events.no_play_flag\n)\n\nSELECT * FROM final", "relation_name": "\"timeball\".\"main_models\".\"event_personnel_lookup\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:54.048007Z", "completed_at": "2023-12-09T18:55:54.051517Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:54.052192Z", "completed_at": "2023-12-09T18:55:54.052196Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0057201385498046875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.timeball.event_states_batter_pitcher", "compiled": true, "compiled_code": "\nWITH joined AS (\n    SELECT\n        events.game_id,\n        events.event_key,\n        events.batting_side,\n        CASE WHEN events.batting_side = 'Home' THEN 'Away' ELSE 'Home' END::SIDE AS fielding_side,\n        events.batting_team_id,\n        events.fielding_team_id,\n        events.batter_id,\n        events.batter_lineup_position,\n        batter_field.fielding_position AS batter_fielding_position,\n        events.pitcher_id,\n        CASE\n            WHEN events.specified_batter_hand IS NOT NULL THEN events.specified_batter_hand\n            WHEN batters.bats = 'B' AND pitchers.throws = 'L' THEN 'R'\n            WHEN batters.bats = 'B' AND pitchers.throws = 'R' THEN 'L'\n            ELSE NULLIF(batters.bats, 'B')\n        END::HAND AS batter_hand,\n        CASE\n            WHEN events.specified_pitcher_hand IS NOT NULL THEN events.specified_pitcher_hand\n            WHEN pitchers.throws = 'B' AND batter_hand = 'L' THEN 'R'\n            WHEN pitchers.throws = 'B' AND batter_hand = 'R' THEN 'L'\n            ELSE NULLIF(pitchers.throws, 'B')\n        END::HAND AS pitcher_hand,\n        events.strikeout_responsible_batter_id,\n        events.walk_responsible_pitcher_id,\n        \n    FROM \"timeball\".\"main_models\".\"stg_events\" AS events\n    \n    LEFT JOIN \"timeball\".\"main_models\".\"people\" AS batters\n        ON events.batter_id = batters.player_id\n    LEFT JOIN \"timeball\".\"main_models\".\"people\" AS pitchers\n        ON events.pitcher_id = pitchers.player_id\n    LEFT JOIN \"timeball\".\"main_models\".\"stg_game_fielding_appearances\" AS batter_field\n        ON events.game_id = batter_field.game_id\n            AND events.batter_id = batter_field.player_id\n            AND events.event_id BETWEEN batter_field.start_event_id AND batter_field.end_event_id\n),\n\nthe_singular_exception_of_shohhei_ohtani AS (\n    SELECT *\n    FROM joined\n    -- Choose DH when he's both, just because\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY event_key ORDER BY batter_fielding_position DESC) = 1\n)\n\n\nSELECT * FROM the_singular_exception_of_shohhei_ohtani", "relation_name": "\"timeball\".\"main_models\".\"event_states_batter_pitcher\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:54.054424Z", "completed_at": "2023-12-09T18:55:54.057940Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:54.058602Z", "completed_at": "2023-12-09T18:55:54.058605Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005609989166259766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.timeball.event_batting_stats", "compiled": true, "compiled_code": "\nWITH sacs AS (\n    -- TODO: Investigate single sac hit dedupe (BOS194606040-37)\n    SELECT DISTINCT event_key\n    FROM \"timeball\".\"main_models\".\"stg_event_flags\"\n    WHERE flag IN ('SacrificeFly', 'SacrificeHit')\n),\n\nfinal AS (\n    SELECT\n        pa.game_id,\n        pa.event_key,\n        CASE WHEN result_types.plate_appearance_result = 'StrikeOut'\n                THEN COALESCE(pa.strikeout_responsible_batter_id, pa.batter_id)\n            ELSE pa.batter_id\n        END AS batter_id,\n        CASE WHEN result_types.plate_appearance_result IN ('Walk', 'IntentionalWalk')\n                THEN COALESCE(pa.walk_responsible_pitcher_id, pa.pitcher_id)\n            ELSE pa.pitcher_id\n        END AS pitcher_id,\n        pa.batting_team_id,\n        pa.fielding_team_id,\n        pa.batter_lineup_position,\n        1::UTINYINT AS plate_appearances,\n        (result_types.is_at_bat AND sacs.event_key IS NULL)::UTINYINT AS at_bats,\n        result_types.is_hit::UTINYINT AS hits,\n        (result_types.total_bases = 1)::UTINYINT AS singles,\n        (result_types.total_bases = 2)::UTINYINT AS doubles,\n        (result_types.total_bases = 3)::UTINYINT AS triples,\n        (result_types.total_bases = 4)::UTINYINT AS home_runs,\n        result_types.total_bases::UTINYINT AS total_bases,\n\n        CASE WHEN pa.batted_to_fielder BETWEEN 1 AND 6 THEN hits ELSE 0 END::UTINYINT AS infield_hits,\n\n        (result_types.plate_appearance_result = 'StrikeOut')::UTINYINT AS strikeouts,\n        (result_types.plate_appearance_result IN ('Walk', 'IntentionalWalk'))::UTINYINT AS walks,\n        (result_types.plate_appearance_result = 'IntentionalWalk')::UTINYINT AS intentional_walks,\n        (result_types.plate_appearance_result = 'HitByPitch')::UTINYINT AS hit_by_pitches,\n        (result_types.plate_appearance_result = 'SacrificeFly')::UTINYINT AS sacrifice_flies,\n        (result_types.plate_appearance_result = 'SacrificeHit')::UTINYINT AS sacrifice_hits,\n        (result_types.plate_appearance_result = 'ReachedOnError')::UTINYINT AS reached_on_errors,\n        (result_types.plate_appearance_result = 'Interference')::UTINYINT AS reached_on_interferences,\n        (result_types.plate_appearance_result = 'GroundRuleDouble')::UTINYINT AS ground_rule_doubles,\n        (result_types.plate_appearance_result = 'InsideTheParkHomeRun')::UTINYINT AS inside_the_park_home_runs,\n\n        result_types.is_on_base_opportunity::UTINYINT AS on_base_opportunities,\n        result_types.is_on_base_success::UTINYINT AS on_base_successes,\n        COALESCE(pa.runs_batted_in, 0)::UTINYINT AS runs_batted_in,\n        COALESCE(double_plays.is_ground_ball_double_play, 0)::UTINYINT AS grounded_into_double_plays,\n        COALESCE(double_plays.is_double_play, 0)::UTINYINT AS double_plays,\n        COALESCE(double_plays.is_triple_play, 0)::UTINYINT AS triple_plays,\n        -- The extra out from GIDPs is attributed to the batter,\n        -- but for other types of double plays, the other out\n        -- is considered to be a baserunning out (for now)\n        result_types.is_batting_out::UTINYINT + grounded_into_double_plays AS batting_outs,\n        pa.outs_on_play,\n        -- We're assuming that ROEs and similar plays do not count as stranding runners\n        -- Also require it to be an AB to leave out sac flies and bunts\n        CASE WHEN result_types.is_batting_out AND pa.outs_on_play > 0 AND result_types.is_at_bat\n                THEN pa.runners_count - pa.outs_on_play - pa.runs_on_play + 1\n            ELSE 0\n        END::UTINYINT AS left_on_base,\n        CASE WHEN pa.outs + pa.outs_on_play = 3\n                THEN left_on_base\n            ELSE 0\n        END::UTINYINT AS left_on_base_with_two_outs,\n\n    FROM \"timeball\".\"main_models\".\"stg_events\" AS pa\n    INNER JOIN \"timeball\".\"main_seeds\".\"seed_plate_appearance_result_types\" AS result_types\n        USING (plate_appearance_result)\n    LEFT JOIN \"timeball\".\"main_models\".\"event_double_plays\" AS double_plays USING (event_key)\n    LEFT JOIN sacs USING (event_key)\n    WHERE pa.plate_appearance_result IS NOT NULL\n)\n\nSELECT * FROM final", "relation_name": "\"timeball\".\"main_models\".\"event_batting_stats\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:54.060706Z", "completed_at": "2023-12-09T18:55:54.063884Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:54.064523Z", "completed_at": "2023-12-09T18:55:54.064527Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005176067352294922, "adapter_response": {}, "message": null, "failures": null, "unique_id": "analysis.timeball.runner_advance_expectancy", "compiled": true, "compiled_code": "WITH base_data AS (\n    SELECT\n        e.season,\n        e.event_key,\n        e.outs,\n        b.baserunner,\n        b.runner_id,\n        e.base_state,\n        e.batted_to_fielder,\n        COALESCE(bbt.trajectory_broad_classification, 'Unknown') AS trajectory,\n        b.bases_advanced,\n        b.unforced_outs_on_basepaths,\n        -- We don't want to distinguish between out types\n        -- because that selects on the dependent variable\n        -- (e.g. a sac fly is always a successful advance)\n        CASE WHEN part.is_batting_out\n                THEN 'InPlayOut'\n        ELSE part.plate_appearance_result\n        END AS plate_appearance_result,\n    FROM \"timeball\".\"main_models\".\"event_baserunning_stats\" AS b\n    INNER JOIN \"timeball\".\"main_models\".\"stg_events\" AS e USING (event_key)\n    INNER JOIN \"timeball\".\"main_seeds\".\"seed_plate_appearance_result_types\" AS part USING (plate_appearance_result)\n    LEFT JOIN \"timeball\".\"main_models\".\"calc_batted_ball_type\" AS bbt USING (event_key)\n    WHERE part.is_in_play AND e.plate_appearance_result != 'GroundRuleDouble'\n),\n\naverages AS (\n    SELECT\n        base_state,\n        outs,\n        baserunner,\n        batted_to_fielder,\n        plate_appearance_result,\n        trajectory,\n        AVG(bases_advanced) AS average_bases_advanced,\n        AVG(unforced_outs_on_basepaths) AS average_outs_on_basepaths,\n    FROM base_data\n    GROUP BY 1, 2, 3, 4, 5, 6\n),\n\nexpectations AS (\n    SELECT\n        bd.*,\n        a.average_bases_advanced,\n        a.average_outs_on_basepaths,\n        bd.bases_advanced - a.average_bases_advanced AS bases_advanced_above_average,\n        bd.unforced_outs_on_basepaths - a.average_outs_on_basepaths AS outs_on_basepaths_above_average,\n        AVG(bases_advanced_above_average) OVER baseline AS season_adjustment_bases,\n        AVG(outs_on_basepaths_above_average) OVER baseline AS season_adjustment_outs,\n        bases_advanced_above_average - season_adjustment_bases AS adjusted_bases_advanced,\n        outs_on_basepaths_above_average - season_adjustment_outs AS adjusted_outs_on_basepaths\n    FROM base_data AS bd\n    INNER JOIN averages AS a\n        USING (base_state, outs, baserunner, batted_to_fielder, plate_appearance_result, trajectory)\n    WINDOW baseline AS (PARTITION BY season, base_state, outs, baserunner, plate_appearance_result, batted_to_fielder)\n),\n\nleaders AS (\n    SELECT\n        runner_id,\n        COUNT(DISTINCT event_key) AS plate_appearances,\n        SUM(adjusted_bases_advanced) AS bases_aa,\n        SUM(adjusted_outs_on_basepaths) AS outs_aa,\n        bases_aa * .2 + outs_aa * -0.42 AS run_value\n    FROM expectations\n    GROUP BY 1\n)\n\nSELECT *,\n    run_value / plate_appearances * 100 AS run_value_per_100\nFROM leaders\nORDER BY run_value DESC", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:54.066682Z", "completed_at": "2023-12-09T18:55:54.070534Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:54.071203Z", "completed_at": "2023-12-09T18:55:54.071207Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005899190902709961, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.accepted_values_calc_batted_ball_type_location_edge__Left__Middle__Right__Unknown.c9ef91bfc9", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        location_edge as value_field,\n        count(*) as n_records\n\n    from \"timeball\".\"main_models\".\"calc_batted_ball_type\"\n    group by location_edge\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Left','Middle','Right','Unknown'\n)\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:54.073324Z", "completed_at": "2023-12-09T18:55:54.076722Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:54.077372Z", "completed_at": "2023-12-09T18:55:54.077375Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005404233932495117, "adapter_response": {}, "message": null, "failures": null, "unique_id": "analysis.timeball.game_data_completeness", "compiled": true, "compiled_code": "WITH batted_balls AS (\n    SELECT\n        bb.game_id,\n        BOOL_AND(bb.trajectory != 'Unknown') AS has_trajectory,\n        BOOL_AND(bb.location_side != 'Unknown') AS has_location,\n        BOOL_AND(bb.batted_to_fielder != 0 OR NOT rt.is_in_play) AS has_batted_to_fielder,\n    FROM \"timeball\".\"main_models\".\"calc_batted_ball_type\" AS bb\n    LEFT JOIN \"timeball\".\"main_seeds\".\"seed_plate_appearance_result_types\" AS rt USING (plate_appearance_result)\n    GROUP BY 1\n),\n\nfielding_credit AS (\n    SELECT\n        events.game_id,\n        BOOL_AND(fc.has_fielder_putouts) AS has_fielder_putouts,\n        BOOL_AND(fc.has_fielder_assists) AS has_fielder_assists,\n        BOOL_AND(fc.has_fielder_errors) AS has_fielder_errors,\n    FROM \"timeball\".\"main_models\".\"stg_events\" AS events\n    \n    GROUP BY 1\n),\n\npitches AS (\n    SELECT\n        events.game_id,\n        BOOL_AND(p.has_count_balls) AS has_count_balls,\n        BOOL_AND(p.has_count_strikes) AS has_count_strikes,\n        BOOL_AND(p.has_count) AS has_count,\n        BOOL_AND(p.has_pitches) AS has_pitches,\n        BOOL_AND(p.has_pitch_results) AS has_pitch_results,\n        BOOL_AND(p.has_strike_types) AS has_pitch_strike_types,\n    FROM \"timeball\".\"main_models\".\"stg_events\" AS events\n    \n    GROUP BY 1\n),\n\njoined AS (\n    SELECT\n        game_id,\n        game_start_info.season,\n        game_start_info.date,\n        game_start_info.home_league AS league,\n        game_start_info.source_type = 'PlayByPlay' AS has_play_by_play,\n        game_start_info.source_type IN ('Event', 'BoxScore') AS has_box_score,\n        COALESCE(batted_balls.has_trajectory, FALSE) AS has_trajectory,\n        COALESCE(batted_balls.has_location, FALSE) AS has_location,\n        COALESCE(batted_balls.has_batted_to_fielder, FALSE) AS has_batted_to_fielder,\n        COALESCE(fielding_credit.has_fielder_putouts, FALSE) AS has_fielder_putouts,\n        COALESCE(fielding_credit.has_fielder_assists, FALSE) AS has_fielder_assists,\n        COALESCE(fielding_credit.has_fielder_errors, FALSE) AS has_fielder_errors,\n        COALESCE(pitches.has_count_balls, FALSE) AS has_count_balls,\n        COALESCE(pitches.has_count_strikes, FALSE) AS has_count_strikes,\n        COALESCE(pitches.has_count, FALSE) AS has_count,\n        COALESCE(pitches.has_pitches, FALSE) AS has_pitches,\n        COALESCE(pitches.has_pitch_results, FALSE) AS has_pitch_results,\n        COALESCE(pitches.has_pitch_strike_types, FALSE) AS has_pitch_strike_types\n    FROM \"timeball\".\"main_models\".\"game_start_info\" AS game_start_info\n    LEFT JOIN batted_balls USING (game_id)\n    LEFT JOIN fielding_credit USING (game_id)\n    LEFT JOIN pitches USING (game_id)\n)\n\nSELECT * FROM joined", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:54.079472Z", "completed_at": "2023-12-09T18:55:54.083168Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:54.083815Z", "completed_at": "2023-12-09T18:55:54.083820Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005709648132324219, "adapter_response": {}, "message": null, "failures": null, "unique_id": "analysis.timeball.player_game_data_completeness", "compiled": true, "compiled_code": "\nWITH events AS (\n    SELECT\n        *,\n        'BATTING' AS player_type\n    FROM \"timeball\".\"main_models\".\"stg_events\"\n    UNION ALL\n    SELECT\n        *,\n        'PITCHING' AS player_type\n    FROM \"timeball\".\"main_models\".\"stg_events\"\n),\n\nbatted_balls AS (\n    SELECT\n        events.game_id,\n        events.player_type,\n        CASE WHEN events.player_type = 'BATTING' THEN batter_id ELSE pitcher_id END AS player_id,\n        ANY_VALUE(CASE WHEN events.player_type = 'BATTING' THEN batting_team_id ELSE fielding_team_id END) AS team_id,\n        COALESCE(BOOL_AND(bb.trajectory != 'Unknown'), TRUE) AS has_trajectory,\n        COALESCE(BOOL_AND(bb.recorded_location != 'Unknown'), TRUE) AS has_scoresheet_location,\n        COALESCE(BOOL_AND(bb.location_side != 'Unknown'), TRUE) AS has_location,\n        COALESCE(BOOL_AND(bb.batted_to_fielder != 0 OR NOT rt.is_in_play), TRUE) AS has_batted_to_fielder,\n    FROM events\n    LEFT JOIN \"timeball\".\"main_models\".\"calc_batted_ball_type\" AS bb USING (event_key)\n    LEFT JOIN \"timeball\".\"main_seeds\".\"seed_plate_appearance_result_types\" AS rt\n        ON rt.plate_appearance_result = events.plate_appearance_result\n    GROUP BY 1, 2, 3\n),\n\npitches AS (\n    SELECT\n        events.game_id,\n        events.player_type,\n        CASE WHEN player_type = 'BATTING' THEN batter_id ELSE pitcher_id END AS player_id,\n        ANY_VALUE(CASE WHEN player_type = 'BATTING' THEN batting_team_id ELSE fielding_team_id END) AS team_id,\n        BOOL_AND(p.has_count_balls) AS has_count_balls,\n        BOOL_AND(p.has_count_strikes) AS has_count_strikes,\n        BOOL_AND(p.has_count) AS has_count,\n        BOOL_AND(p.has_pitches) AS has_pitches,\n        BOOL_AND(p.has_pitch_results) AS has_pitch_results,\n        BOOL_AND(p.has_strike_types) AS has_pitch_strike_types,\n    FROM events\n    \n    GROUP BY 1, 2, 3\n),\n\n-- TODO: Add fielding credit by comparing event-based totals to box totals\njoined AS (\n    SELECT\n        game_id,\n        player_id,\n        player_type,\n        game_start_info.season,\n        game_start_info.date,\n        game_start_info.home_league AS league,\n        COALESCE(batted_balls.has_trajectory, FALSE) AS has_trajectory,\n        COALESCE(batted_balls.has_scoresheet_location, FALSE) AS has_scoresheet_location,\n        COALESCE(batted_balls.has_location, FALSE) AS has_location,\n        COALESCE(batted_balls.has_batted_to_fielder, FALSE) AS has_batted_to_fielder,\n        COALESCE(pitches.has_count_balls, FALSE) AS has_count_balls,\n        COALESCE(pitches.has_count_strikes, FALSE) AS has_count_strikes,\n        COALESCE(pitches.has_count, FALSE) AS has_count,\n        COALESCE(pitches.has_pitches, FALSE) AS has_pitches,\n        COALESCE(pitches.has_pitch_results, FALSE) AS has_pitch_results,\n        COALESCE(pitches.has_pitch_strike_types, FALSE) AS has_pitch_strike_types\n    FROM \"timeball\".\"main_models\".\"game_start_info\" AS game_start_info\n    FULL OUTER JOIN batted_balls USING (game_id)\n    FULL OUTER JOIN pitches USING (game_id, player_type, player_id)\n    WHERE player_id IS NOT NULL\n)\n\nSELECT * FROM joined", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:54.086256Z", "completed_at": "2023-12-09T18:55:54.089656Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:54.090304Z", "completed_at": "2023-12-09T18:55:54.090309Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005670070648193359, "adapter_response": {}, "message": null, "failures": null, "unique_id": "analysis.timeball.unknown_play_no_box", "compiled": true, "compiled_code": "WITH t AS (\n    SELECT\n        game_id,\n        ANY_VALUE(substring(game_id, 4, 4)::INT) AS season,\n        SUM(unknown_putouts) AS unknown_putouts\n    FROM \"timeball\".\"main_models\".\"calc_fielding_play_agg\"\n    WHERE game_id NOT IN (SELECT game_id FROM \"timeball\".\"main_models\".\"stg_box_score_fielding_lines\")\n        --AND game_id IN (SELECT game_id FROM \"timeball\".\"main_models\".\"game_start_info\" WHERE home_league IN ('NL', 'AL', 'FL'))\n    GROUP BY 1\n    HAVING SUM(unknown_putouts) > 0\n)\n\nSELECT     \n    t.*,\n    filename,\n    line_number,\n    scorer,\n    park_id,\n    scoring_method,\n    inputter,\n    translator,\n    date_inputted,\nFROM t\nINNER JOIN \"timeball\".\"main_models\".\"stg_games\" USING (game_id)\nINNER JOIN \"timeball\".\"main_models\".\"stg_event_audit\" a USING (game_id)\nWHERE a.event_id = 1\nORDER BY t.season, game_id", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:54.092565Z", "completed_at": "2023-12-09T18:55:54.095687Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:54.096348Z", "completed_at": "2023-12-09T18:55:54.096352Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005257844924926758, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.timeball.team_game_start_info", "compiled": true, "compiled_code": "WITH base AS (\n    SELECT\n        home_team_id AS team_id,\n        away_team_id AS opponent_id,\n        home_league AS league,\n        away_league AS opponent_league,\n        home_division AS division,\n        away_division AS opponent_division,\n        home_team_name AS team_name,\n        away_team_name AS opponent_name,\n        home_starting_pitcher_id AS starting_pitcher_id,\n        away_starting_pitcher_id AS opponent_starting_pitcher_id,\n        'Home'::SIDE AS team_side,\n        *\n    FROM \"timeball\".\"main_models\".\"game_start_info\"\n    UNION ALL BY NAME\n    SELECT\n        away_team_id AS team_id,\n        home_team_id AS opponent_id,\n        away_league AS league,\n        home_league AS opponent_league,\n        away_division AS division,\n        home_division AS opponent_division,\n        away_team_name AS team_name,\n        home_team_name AS opponent_name,\n        away_starting_pitcher_id AS starting_pitcher_id,\n        home_starting_pitcher_id AS opponent_starting_pitcher_id,\n        'Away'::SIDE AS team_side,\n        *\n    FROM \"timeball\".\"main_models\".\"game_start_info\"\n),\n\nadd_series_start_flag AS (\n    SELECT\n        * EXCLUDE (\n            away_team_id,\n            home_team_id,\n            away_league,\n            home_league,\n            away_division,\n            home_division,\n            away_team_name,\n            home_team_name,\n            away_starting_pitcher_id,\n            home_starting_pitcher_id\n        ),\n        CASE\n            WHEN LAG(opponent_id::VARCHAR, 1, 'N/A') OVER season_series != opponent_id\n                THEN game_id\n        END AS series_id\n    FROM base\n    WINDOW season_series AS (\n        PARTITION BY season, team_id, game_type, opponent_id\n        ORDER BY date, doubleheader_status\n    )\n),\n\nassign_series_id AS (\n    SELECT -- noqa: AM04\n        * REPLACE (\n            -- The closest non-null value to the current row (inclusive) is the proper series_id.\n            COALESCE(LAG(series_id IGNORE NULLS) OVER season_series, series_id) AS series_id\n        )\n    FROM add_series_start_flag\n    WINDOW season_series AS (\n        PARTITION BY season, team_id, game_type, opponent_id\n        ORDER BY date, doubleheader_status\n    )\n),\n\nfinal AS (\n    SELECT\n        *,\n        COUNT(*) OVER season AS season_game_number,\n        COUNT(*) OVER series AS series_game_number,\n        DATEDIFF('day', LAG(date) OVER season, date) AS days_since_last_game,\n    FROM assign_series_id\n    WINDOW\n        season AS (\n            PARTITION BY season, team_id, game_type\n            ORDER BY date, doubleheader_status\n        ),\n        series AS (\n            PARTITION BY team_id, series_id\n            ORDER BY date, doubleheader_status\n        )\n)\n\nSELECT * FROM final", "relation_name": "\"timeball\".\"main_models\".\"team_game_start_info\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:54.098642Z", "completed_at": "2023-12-09T18:55:54.101831Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:54.102502Z", "completed_at": "2023-12-09T18:55:54.102505Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005287885665893555, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.timeball.event_fielders_flat", "compiled": true, "compiled_code": "\nWITH fielders AS (\n    SELECT\n        personnel_fielding_key::INT AS personnel_fielding_key,\n        ANY_VALUE(CASE WHEN fielding_position = 1 THEN player_id END)::PLAYER_ID AS pitcher_id,\n        ANY_VALUE(CASE WHEN fielding_position = 2 THEN player_id END)::PLAYER_ID AS catcher_id,\n        ANY_VALUE(CASE WHEN fielding_position = 3 THEN player_id END)::PLAYER_ID AS first_base_id,\n        ANY_VALUE(CASE WHEN fielding_position = 4 THEN player_id END)::PLAYER_ID AS second_base_id,\n        ANY_VALUE(CASE WHEN fielding_position = 5 THEN player_id END)::PLAYER_ID AS third_base_id,\n        ANY_VALUE(CASE WHEN fielding_position = 6 THEN player_id END)::PLAYER_ID AS shortstop_id,\n        ANY_VALUE(CASE WHEN fielding_position = 7 THEN player_id END)::PLAYER_ID AS left_field_id,\n        ANY_VALUE(CASE WHEN fielding_position = 8 THEN player_id END)::PLAYER_ID AS center_field_id,\n        ANY_VALUE(CASE WHEN fielding_position = 9 THEN player_id END)::PLAYER_ID AS right_field_id       \n    FROM \"timeball\".\"main_models\".\"personnel_fielding_states\"\n    GROUP BY 1\n),\n\nfinal AS (\n    SELECT\n        epl.game_id,\n        epl.event_id,\n        epl.event_key,\n        fielders.*\n    FROM \"timeball\".\"main_models\".\"event_personnel_lookup\" AS epl\n    INNER JOIN fielders USING (personnel_fielding_key)\n)\n\nSELECT * FROM final", "relation_name": "\"timeball\".\"main_models\".\"event_fielders_flat\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:54.104618Z", "completed_at": "2023-12-09T18:55:54.108427Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:54.109087Z", "completed_at": "2023-12-09T18:55:54.109090Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0058400630950927734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.timeball.event_fielding_stats", "compiled": true, "compiled_code": "\nWITH fielding_plays_agg AS (\n    SELECT\n        event_key,\n        SUM(putouts) AS putouts,\n        SUM(assists) AS assists,\n        SUM(errors) AS errors,\n        SUM(fielders_choices) AS fielders_choices,\n        SUM(assisted_putouts) AS assisted_putouts,\n        SUM(unknown_putouts) AS unknown_putouts,\n        SUM(incomplete_events) AS incomplete_events,\n    FROM \"timeball\".\"main_models\".\"calc_fielding_play_agg\"\n    GROUP BY 1\n),\n\nbaserunning AS (\n    SELECT\n        event_key,\n        COUNT(*) FILTER (WHERE baserunning_play_type = 'StolenBase') AS stolen_bases,\n        COUNT(*) FILTER (WHERE baserunning_play_type LIKE 'CaughtStealing') AS caught_stealing,\n        COUNT(*) FILTER (WHERE baserunning_play_type LIKE 'PickedOff%') AS pickoffs,\n        BOOL_OR(baserunning_play_type = 'PassedBall')::UTINYINT AS passed_balls,\n    FROM \"timeball\".\"main_models\".\"stg_event_baserunners\"\n    WHERE baserunning_play_type IS NOT NULL\n    GROUP BY 1\n),\n\nfinal AS (\n    SELECT\n        event_key,\n        events.season,\n        events.game_id,\n        events.fielding_team_id AS team_id,\n        lookup.personnel_fielding_key,\n        events.outs_on_play AS outs_played,\n        (events.plate_appearance_result IS NOT NULL)::UTINYINT AS plate_appearances_in_field,\n        events.batted_to_fielder,\n        COALESCE(fp.putouts, 0)::UTINYINT AS putouts,\n        COALESCE(fp.assists, 0)::UTINYINT AS assists,\n        COALESCE(fp.errors, 0)::UTINYINT AS errors,\n        COALESCE(fp.fielders_choices, 0)::UTINYINT AS fielders_choices,\n        COALESCE(fp.assisted_putouts, 0)::UTINYINT AS assisted_putouts,\n        COALESCE(dp.is_double_play, FALSE)::UTINYINT AS double_plays,\n        COALESCE(dp.is_triple_play, FALSE)::UTINYINT AS triple_plays,\n        COALESCE(dp.is_ground_ball_double_play, FALSE)::UTINYINT AS ground_ball_double_plays,\n        COALESCE(baserunning.stolen_bases, 0)::UTINYINT AS stolen_bases,\n        COALESCE(baserunning.caught_stealing, 0)::UTINYINT AS caught_stealing,\n        COALESCE(baserunning.pickoffs, 0)::UTINYINT AS pickoffs,\n        COALESCE(baserunning.passed_balls, 0)::UTINYINT AS passed_balls,\n        CASE WHEN prt.is_in_play THEN 1 ELSE 0 END::UTINYINT AS plate_appearances_in_field_with_ball_in_play,\n        CASE WHEN prt.is_in_play THEN COALESCE(fp.putouts, 0) ELSE 0 END::UTINYINT AS in_play_putouts,\n        CASE WHEN prt.is_in_play THEN COALESCE(fp.assists, 0) ELSE 0 END::UTINYINT AS in_play_assists,\n        CASE WHEN events.plate_appearance_result = 'ReachedOnError' THEN 1 ELSE 0 END::UTINYINT AS reaching_errors,\n        COALESCE(fp.unknown_putouts, 0)::UTINYINT AS unknown_putouts,\n        COALESCE(fp.incomplete_events, 0)::UTINYINT AS incomplete_events,\n    FROM \"timeball\".\"main_models\".\"stg_events\" AS events\n    LEFT JOIN baserunning USING (event_key)\n    LEFT JOIN \"timeball\".\"main_seeds\".\"seed_plate_appearance_result_types\" AS prt USING (plate_appearance_result)\n    LEFT JOIN \"timeball\".\"main_models\".\"event_double_plays\" AS dp USING (event_key)\n    LEFT JOIN \"timeball\".\"main_models\".\"event_personnel_lookup\" AS lookup USING (event_key)\n    LEFT JOIN fielding_plays_agg AS fp USING (event_key)\n    WHERE NOT events.no_play_flag\n)\n\nSELECT * FROM final", "relation_name": "\"timeball\".\"main_models\".\"event_fielding_stats\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:54.114708Z", "completed_at": "2023-12-09T18:55:54.118518Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:54.119220Z", "completed_at": "2023-12-09T18:55:54.119225Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006961822509765625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.timeball.event_batted_ball_stats", "compiled": true, "compiled_code": "\nWITH batted_ball AS (\n    SELECT\n        event_key,\n        1::UTINYINT AS balls_batted,\n        (batted_to_fielder IS NOT NULL)::UTINYINT AS balls_in_play,\n        CASE WHEN trajectory = 'Fly' THEN 1 ELSE 0 END::UTINYINT AS trajectory_fly_ball,\n        CASE WHEN trajectory = 'GroundBall' THEN 1 ELSE 0 END::UTINYINT AS trajectory_ground_ball,\n        CASE WHEN trajectory = 'LineDrive' THEN 1 ELSE 0 END::UTINYINT AS trajectory_line_drive,\n        CASE WHEN trajectory = 'PopUp' THEN 1 ELSE 0 END::UTINYINT AS trajectory_pop_up,\n        CASE\n            WHEN COALESCE(trajectory, 'Unknown') = 'Unknown' THEN 1 ELSE 0\n        END::UTINYINT AS trajectory_unknown,\n        (1 - trajectory_unknown)::UTINYINT AS trajectory_known,\n        CASE WHEN trajectory_broad_classification = 'AirBall' THEN 1 ELSE 0 END::UTINYINT AS trajectory_broad_air_ball,\n        CASE\n            WHEN trajectory_broad_classification = 'GroundBall' THEN 1 ELSE 0\n        END::UTINYINT AS trajectory_broad_ground_ball,\n        CASE\n            WHEN COALESCE(trajectory_broad_classification, 'Unknown') = 'Unknown' THEN 1 ELSE 0\n        END::UTINYINT AS trajectory_broad_unknown,\n        (1 - trajectory_broad_unknown)::UTINYINT AS trajectory_broad_known,\n        CASE WHEN trajectory_broad_classification = 'Bunt' THEN 1 ELSE 0 END::UTINYINT AS bunts,\n        -- Distances,\n        CASE WHEN location_depth = 'Plate' THEN 1 ELSE 0 END::UTINYINT AS batted_distance_plate,\n        CASE WHEN location_depth = 'Infield' THEN 1 ELSE 0 END::UTINYINT AS batted_distance_infield,\n        CASE WHEN location_depth = 'Outfield' THEN 1 ELSE 0 END::UTINYINT AS batted_distance_outfield,\n        CASE\n            WHEN COALESCE(location_depth, 'Unknown') = 'Unknown' THEN 1 ELSE 0\n        END::UTINYINT AS batted_distance_unknown,\n        (1 - batted_distance_unknown)::UTINYINT AS batted_distance_known,\n        CASE WHEN batted_to_fielder BETWEEN 1 AND 2 THEN 1 ELSE 0 END::UTINYINT AS fielded_by_battery,\n        CASE WHEN batted_to_fielder BETWEEN 3 AND 6 THEN 1 ELSE 0 END::UTINYINT AS fielded_by_infielder,\n        CASE WHEN batted_to_fielder BETWEEN 7 AND 9 THEN 1 ELSE 0 END::UTINYINT AS fielded_by_outfielder,\n        CASE WHEN batted_to_fielder = 0 THEN 1 ELSE 0 END::UTINYINT AS fielded_by_unknown,\n        (1 - fielded_by_unknown)::UTINYINT AS fielded_by_known,\n        CASE WHEN location_side = 'Left' THEN 1 ELSE 0 END::UTINYINT AS batted_angle_left,\n        CASE WHEN location_side = 'Right' THEN 1 ELSE 0 END::UTINYINT AS batted_angle_right,\n        CASE WHEN location_side = 'Middle' THEN 1 ELSE 0 END::UTINYINT AS batted_angle_middle,\n        CASE\n            WHEN COALESCE(location_side, 'Unknown') IN ('All', 'Unknown') THEN 1 ELSE 0\n        END::UTINYINT AS batted_angle_unknown,\n        (1 - batted_angle_unknown)::UTINYINT AS batted_angle_known,\n        -- More granular locations that are still sensitive to the groundball location problem.\n        CASE WHEN batted_to_fielder = 2 THEN 1 ELSE 0 END::UTINYINT AS batted_location_plate,\n        batted_distance_infield * batted_angle_right AS batted_location_right_infield,\n        batted_distance_infield * batted_angle_left AS batted_location_left_infield,\n        batted_distance_infield * batted_angle_middle AS batted_location_middle_infield,\n        batted_distance_outfield * batted_angle_left AS batted_location_left_field,\n        batted_distance_outfield * batted_angle_middle AS batted_location_center_field,\n        batted_distance_outfield * batted_angle_right AS batted_location_right_field,\n        CASE WHEN location_depth = 'Unknown' THEN 1 ELSE 0 END::UTINYINT AS batted_location_unknown,\n        (1 - batted_location_unknown)::UTINYINT AS batted_location_known,\n    FROM \"timeball\".\"main_models\".\"calc_batted_ball_type\"\n),\n\nfinal AS (\n    SELECT\n        batted_ball.*,\n        CASE WHEN hand.batter_hand = 'R'\n                THEN batted_ball.batted_angle_left\n            WHEN hand.batter_hand = 'L'\n                THEN batted_ball.batted_angle_right\n            ELSE 0\n        END AS batted_balls_pulled,\n        CASE WHEN hand.batter_hand = 'R'\n                THEN batted_ball.batted_angle_right\n            WHEN hand.batter_hand = 'L'\n                THEN batted_ball.batted_angle_left\n            ELSE 0\n        END AS batted_balls_opposite_field,\n\n    FROM batted_ball\n    INNER JOIN \"timeball\".\"main_models\".\"event_states_batter_pitcher\" AS hand USING (event_key)\n)\n\nSELECT * FROM final", "relation_name": "\"timeball\".\"main_models\".\"event_batted_ball_stats\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:54.121660Z", "completed_at": "2023-12-09T18:55:54.125120Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:54.125870Z", "completed_at": "2023-12-09T18:55:54.125874Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00574803352355957, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.timeball.event_run_assignment_stats", "compiled": true, "compiled_code": "\nWITH event_runs AS (\n    SELECT\n        run_stats.event_key,\n        run_stats.game_id,\n        run_stats.fielding_team_id AS team_id,\n        run_stats.current_pitcher_id AS current_pitcher_id,\n        COALESCE(run_stats.explicit_charged_pitcher_id, charged_pitcher.pitcher_id) AS charged_pitcher_id,\n        run_stats.runs,\n        events.team_unearned_runs\n    FROM \"timeball\".\"main_models\".\"event_baserunning_stats\" AS run_stats\n    INNER JOIN \"timeball\".\"main_models\".\"event_states_batter_pitcher\" AS charged_pitcher USING (event_key)\n    INNER JOIN \"timeball\".\"main_models\".\"stg_events\" AS events USING (event_key)\n    WHERE run_stats.runs = 1\n),\n\nunioned AS (\n    SELECT\n        event_key,\n        game_id,\n        team_id,\n        current_pitcher_id AS pitcher_id,\n        runs,\n        team_unearned_runs,\n        0 AS inherited_runners_scored,\n        0 AS bequeathed_runners_scored\n    FROM event_runs\n    WHERE current_pitcher_id = charged_pitcher_id\n    UNION ALL\n    SELECT\n        event_key,\n        game_id,\n        team_id,\n        charged_pitcher_id AS pitcher_id,\n        runs,\n        team_unearned_runs,\n        0 AS inherited_runners_scored,\n        runs AS bequeathed_runners_scored\n    FROM event_runs\n    WHERE current_pitcher_id != charged_pitcher_id\n    UNION ALL\n    SELECT\n        event_key,\n        game_id,\n        team_id,\n        current_pitcher_id AS pitcher_id,\n        0 AS runs,\n        0 AS team_unearned_runs,\n        runs AS inherited_runners_scored,\n        0 AS bequeathed_runners_scored\n    FROM event_runs\n    WHERE current_pitcher_id != charged_pitcher_id\n),\n\nfinal AS (\n    SELECT\n        event_key,\n        pitcher_id,\n        MIN(game_id) AS game_id,\n        MIN(team_id) AS team_id,\n        SUM(runs)::UTINYINT AS runs,\n        SUM(team_unearned_runs)::UTINYINT AS team_unearned_runs,\n        SUM(inherited_runners_scored)::UTINYINT AS inherited_runners_scored,\n        SUM(bequeathed_runners_scored)::UTINYINT AS bequeathed_runners_scored\n    FROM unioned\n    GROUP BY 1, 2\n)\n\nSELECT * FROM final", "relation_name": "\"timeball\".\"main_models\".\"event_run_assignment_stats\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:54.128132Z", "completed_at": "2023-12-09T18:55:54.132002Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:54.132705Z", "completed_at": "2023-12-09T18:55:54.132709Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00605010986328125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.timeball.event_states_full", "compiled": true, "compiled_code": "\nWITH final AS (\n    SELECT\n        -- IDs\n        game_id,\n        e.event_id,\n        e.event_key,\n        -- Basic state\n        g.season::SMALLINT AS season,\n        g.home_league AS league,\n        g.is_interleague,\n        g.game_type,\n        g.date,\n        g.park_id,\n        g.bat_first_side,\n        g.time_of_day,\n        -- Useful for determining save situations\n        CASE WHEN e.batting_side = 'Home'::SIDE\n                THEN g.away_starting_pitcher_id\n            ELSE g.home_starting_pitcher_id\n        END AS pitching_team_starting_pitcher_id,\n        base_out.inning_start,\n        base_out.frame_start,\n        base_out.outs_start,\n        base_out.inning_in_outs_start,\n        base_out.is_gidp_eligible,\n        players.batting_side,\n        players.fielding_side,\n        base_out.score_home_start,\n        base_out.score_away_start,\n        (base_out.score_home_start::INT - base_out.score_away_start)::INT1 AS home_margin_start,\n        CASE WHEN e.batting_side = 'Home'\n                THEN home_margin_start\n            ELSE -home_margin_start\n        END::INT1 AS batting_team_margin_start,\n        players.batter_lineup_position,\n        players.batter_fielding_position,\n        -- Player/Team IDs and info\n        players.batter_hand,\n        players.pitcher_hand,\n        g.away_team_id,\n        g.home_team_id,\n        players.batting_team_id,\n        players.fielding_team_id,\n        players.batter_id,\n        players.pitcher_id,\n        -- These are too memory-intensive to include\n        -- at the moment - can put them back in later\n        \n        base_out.base_state_start,\n        base_out.runners_count_start,\n        base_out.frame_start_flag,\n        base_out.runner_first_id_start,\n        base_out.runner_second_id_start,\n        base_out.runner_third_id_start,\n        -- Future state\n        -- TODO: Enforce clearer separation\n        e.count_balls,\n        e.count_strikes,\n        base_out.inning_end,\n        base_out.frame_end,\n        base_out.outs_on_play,\n        base_out.outs_end,\n        base_out.base_state_end,\n        base_out.runs_on_play,\n        base_out.score_home_end,\n        base_out.score_away_end,\n        (base_out.score_home_end::INT1 - base_out.score_away_end)::INT1 AS home_margin_end,\n        CASE WHEN e.batting_side = 'Home'::SIDE\n                THEN home_margin_end\n            ELSE -home_margin_end\n        END::INT1 AS batting_team_margin_end,\n        base_out.frame_end_flag,\n        base_out.truncated_frame_flag,\n        base_out.game_end_flag,\n        -- IDs for calculating expectancy_values\n        CASE WHEN g.home_league NOT IN ('AL', 'NL', 'FL') OR g.home_league IS NULL\n                THEN 'Other'\n            ELSE g.home_league\n        END AS league_group,\n        GREATEST(g.season, 1914) AS season_group,\n        CASE WHEN base_out.inning_start < 10\n                THEN base_out.inning_start::VARCHAR\n            WHEN g.season >= 2020 AND g.game_type = 'RegularSeason'\n                THEN 11\n            ELSE 10\n        END AS inning_group_start,\n        CASE WHEN base_out.inning_start < 10\n                THEN base_out.inning_end::VARCHAR\n            WHEN g.season >= 2020 AND g.game_type = 'RegularSeason'\n                THEN 11\n            ELSE 10\n        END AS inning_group_end,\n        GREATEST(LEAST(home_margin_start, 10), -10)::INT1 AS truncated_home_margin_start,\n        GREATEST(LEAST(home_margin_end, 10), -10)::INT1 AS truncated_home_margin_end,\n        CONCAT_WS(\n            '_', season_group, league_group,\n            base_out.outs_start, base_out.base_state_start\n        ) AS run_expectancy_start_key,\n        CONCAT_WS(\n            '_', season_group, league_group,\n            base_out.outs_end, COALESCE(base_out.base_state_end, 0)\n        ) AS run_expectancy_end_key,\n        CONCAT_WS(\n            '_', inning_group_start, base_out.frame_start, truncated_home_margin_start,\n            base_out.outs_start, base_out.base_state_start\n        ) AS win_expectancy_start_key,\n        CONCAT_WS(\n            '_', inning_group_end, base_out.frame_end, truncated_home_margin_end,\n            base_out.outs_end % 3, COALESCE(base_out.base_state_end, 0)\n        ) AS win_expectancy_end_key,\n    FROM \"timeball\".\"main_models\".\"stg_events\" AS e\n    INNER JOIN \"timeball\".\"main_models\".\"game_start_info\" AS g USING (game_id)\n    INNER JOIN \"timeball\".\"main_models\".\"event_states_batter_pitcher\" AS players USING (event_key)\n    INNER JOIN \"timeball\".\"main_models\".\"event_base_out_states\" AS base_out USING (event_key)\n\n)\n\nSELECT * FROM final", "relation_name": "\"timeball\".\"main_models\".\"event_states_full\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:54.135170Z", "completed_at": "2023-12-09T18:55:54.138056Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:54.138704Z", "completed_at": "2023-12-09T18:55:54.138708Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004896879196166992, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.timeball.season_team_coverage", "compiled": true, "compiled_code": "WITH final AS (\n    SELECT\n        season,\n        team_id,\n        ANY_VALUE(league) AS league,\n        CASE WHEN BOOL_AND(source_type = 'PlayByPlay')\n                THEN 'PlayByPlay'\n            WHEN BOOL_AND(source_type = 'PlayByPlay' OR source_type = 'BoxScore')\n                THEN 'BoxScore'\n            ELSE 'GameLog'\n        END AS least_granular_source_type\n    FROM \"timeball\".\"main_models\".\"team_game_start_info\"\n    WHERE game_id NOT IN (SELECT game_id FROM \"timeball\".\"main_models\".\"game_forfeits\")\n        AND (game_type != 'Exhibition' OR league IS NULL)\n    GROUP BY 1, 2\n)\n\nSELECT * FROM final", "relation_name": "\"timeball\".\"main_models\".\"season_team_coverage\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:54.140806Z", "completed_at": "2023-12-09T18:55:54.144239Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:54.144885Z", "completed_at": "2023-12-09T18:55:54.144888Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0054361820220947266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "analysis.timeball.assists_as_putouts_finder", "compiled": true, "compiled_code": "WITH game_info AS (\n    SELECT *\n    FROM \"timeball\".\"main_models\".\"game_start_info\"\n),\n\nbasic_groundouts AS (\n    SELECT\n        event_key\n    FROM \"timeball\".\"main_models\".\"calc_fielding_play_agg\"\n    GROUP BY 1\n    HAVING COUNT_IF(fielding_position = 3 and assisted_putouts = 1) = 1\n        AND SUM(assists) = 1\n        AND COUNT(*) = 2\n),\n\ne AS (\n    SELECT\n        e.game_id,\n        s.team_id,\n        COUNT_IF(\n            e.batted_to_fielder BETWEEN 1 AND 6\n            AND e.outs_on_play = 1\n            AND e.batted_trajectory = 'Unknown'\n            AND f.event_key IS NULL\n            AND s.putouts - s.assisted_putouts = 1\n            AND e.base_state % 2 = 0\n        ) AS no_force_unmarked_popups,\n        COUNT_IF(basic_groundouts.event_key IS NOT NULL) AS infield_conventional_groundouts,\n        GREATEST(2 * no_force_unmarked_popups - infield_conventional_groundouts, no_force_unmarked_popups) AS rating\n    FROM \"timeball\".\"main_models\".\"stg_events\" e\n    INNER JOIN \"timeball\".\"main_models\".\"event_fielding_stats\" s USING (event_key)\n    LEFT JOIN \"timeball\".\"main_models\".\"stg_event_flags\" f USING (event_key)\n    LEFT JOIN basic_groundouts USING (event_key)\n    WHERE COALESCE(f.flag, 'Foul') = 'Foul'\n    GROUP BY 1, 2\n)\n\nSELECT\n    e.*,\n    filename,\n    line_number,\n    scorer,\n    park_id,\n    scoring_method,\n    inputter,\n    translator,\n    date_inputted,\nFROM e\nINNER JOIN \"timeball\".\"main_models\".\"stg_games\" USING (game_id)\nINNER JOIN \"timeball\".\"main_models\".\"stg_event_audit\" a USING (game_id)\nWHERE a.event_id = 1\n    AND no_force_unmarked_popups > 1\nORDER BY rating DESC, game_id", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:54.146973Z", "completed_at": "2023-12-09T18:55:54.150184Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:54.150815Z", "completed_at": "2023-12-09T18:55:54.150819Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005187273025512695, "adapter_response": {}, "message": null, "failures": null, "unique_id": "analysis.timeball.unknown_plays", "compiled": true, "compiled_code": "WITH t AS (\n    SELECT\n        game_id,\n        team_id,\n        SUM(putouts) AS total_putouts,\n        SUM(unknown_putouts) AS unknown_putouts\n    FROM \"timeball\".\"main_models\".\"event_fielding_stats\"\n    GROUP BY 1, 2\n),\n\nteam_season_overall_coverage AS (\n    SELECT\n        t.*,\n        gt.team_side AS side,\n        SUM(total_putouts - unknown_putouts) OVER season_side / SUM(total_putouts) OVER season_side AS season_coverage_rate_by_side\n    FROM t \n    INNER JOIN \"timeball\".\"main_models\".\"stg_games\" g USING (game_id)\n    INNER JOIN \"timeball\".\"main_models\".\"team_game_start_info\" gt USING (game_id, team_id)\n    WINDOW season_side AS (PARTITION BY t.team_id, gt.team_side)\n),\n\nagg AS (\n    SELECT\n        game_id,\n        SUM(unknown_putouts) AS total_unknown_putouts,\n        ANY_VALUE(CASE WHEN side = 'Home' THEN season_coverage_rate_by_side END) AS coverage_rate_home,\n        ANY_VALUE(CASE WHEN side = 'Away' THEN season_coverage_rate_by_side END) AS coverage_rate_away,\n    FROM team_season_overall_coverage\n    GROUP BY 1\n    HAVING SUM(unknown_putouts) > 0\n)\n\nSELECT\n    season,\n    agg.*,\n    filename,\n    line_number,\n    scorer,\n    park_id,\n    scoring_method,\n    inputter,\n    translator,\n    date_inputted,\nFROM agg\nINNER JOIN \"timeball\".\"main_models\".\"stg_games\" USING (game_id)\nINNER JOIN \"timeball\".\"main_models\".\"stg_event_audit\" a USING (game_id)\nWHERE a.event_id = 1\n    AND filename NOT LIKE '%.EVR'\nORDER BY coverage_rate_home * coverage_rate_away DESC", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:54.152926Z", "completed_at": "2023-12-09T18:55:54.156232Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:54.156900Z", "completed_at": "2023-12-09T18:55:54.156904Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005362033843994141, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.timeball.event_player_fielding_stats", "compiled": true, "compiled_code": "-- TODO: Unclear whether this should exist as such.\n-- Per-event-fielding stats for positions not involved in the play\n-- are only there for innings/PA played, which can be tabulated\n-- in more efficient ways.\n\nWITH final AS (\n    SELECT\n        e.event_key,\n        p.fielding_position,\n        p.game_id,\n        p.player_id,\n        p.fielding_team_id AS team_id,\n        -- DHs are in this table, which makes the nomenclature for the 3 cols below\n        -- a little ambigious, but keeping for now because it's useful to keep track of\n        -- for them.\n        e.outs_played,\n        e.plate_appearances_in_field,\n        e.plate_appearances_in_field_with_ball_in_play,\n        e.unknown_putouts AS unknown_putouts_while_fielding,\n        CASE WHEN e.batted_to_fielder = p.fielding_position THEN 1 ELSE 0 END::UTINYINT AS balls_hit_to,\n        COALESCE(fp.putouts, 0)::UTINYINT AS putouts,\n        COALESCE(fp.assists, 0)::UTINYINT AS assists,\n        COALESCE(fp.errors, 0)::UTINYINT AS errors,\n        COALESCE(fp.fielders_choices, 0)::UTINYINT AS fielders_choices,\n        COALESCE(fp.assisted_putouts)::UTINYINT AS assisted_putouts,\n        CASE WHEN e.plate_appearances_in_field_with_ball_in_play > 0\n                THEN COALESCE(fp.putouts, 0)\n            ELSE 0\n        END::UTINYINT AS in_play_putouts,\n        CASE WHEN e.plate_appearances_in_field_with_ball_in_play > 0\n                THEN COALESCE(fp.assists, 0)\n            ELSE 0\n        END::UTINYINT AS in_play_assists,\n        CASE WHEN fp.first_errors = 1 THEN e.reaching_errors ELSE 0 END::UTINYINT AS reaching_errors,\n        CASE WHEN p.fielding_position IN (1, 2) THEN e.stolen_bases ELSE 0 END::UTINYINT AS stolen_bases,\n        CASE WHEN p.fielding_position IN (1, 2) THEN e.caught_stealing ELSE 0 END::UTINYINT AS caught_stealing,\n        CASE WHEN p.fielding_position IN (1, 2) AND fp.assists > 0 THEN e.pickoffs ELSE 0 END::UTINYINT AS pickoffs,\n        CASE WHEN p.fielding_position = 2 THEN e.passed_balls ELSE 0 END AS passed_balls,\n        -- Only count double plays for the fielder who made a putout\n        -- or assist on the play\n        CASE WHEN fp.putouts + fp.assists > 0\n                THEN e.double_plays\n            ELSE 0\n        END::UTINYINT AS double_plays,\n        CASE WHEN fp.putouts + fp.assists > 0\n                THEN e.triple_plays\n            ELSE 0\n        END::UTINYINT AS triple_plays,\n        CASE WHEN fp.putouts + fp.assists > 0\n                THEN e.ground_ball_double_plays\n            ELSE 0\n        END::UTINYINT AS ground_ball_double_plays,\n        CASE WHEN fp.plays_started > 0\n                THEN e.double_plays\n            ELSE 0\n        END::UTINYINT AS double_plays_started,\n        CASE WHEN fp.plays_started > 0\n                THEN e.ground_ball_double_plays\n            ELSE 0\n        END::UTINYINT AS ground_ball_double_plays_started,\n    FROM \"timeball\".\"main_models\".\"event_fielding_stats\" AS e\n    INNER JOIN \"timeball\".\"main_models\".\"personnel_fielding_states\" AS p USING (personnel_fielding_key)\n    LEFT JOIN \"timeball\".\"main_models\".\"calc_fielding_play_agg\" AS fp USING (event_key, fielding_position)\n)\n\nSELECT * FROM final", "relation_name": "\"timeball\".\"main_models\".\"event_player_fielding_stats\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:54.159161Z", "completed_at": "2023-12-09T18:55:54.163479Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:54.164148Z", "completed_at": "2023-12-09T18:55:54.164151Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006453990936279297, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.timeball.event_offense_stats", "compiled": true, "compiled_code": "\nWITH batter_baserunning AS (\n    SELECT *\n    FROM \"timeball\".\"main_models\".\"event_baserunning_stats\"\n    WHERE baserunner = 'Batter'\n),\n\nbatter_stats AS (\n    SELECT\n        COALESCE(hit.batter_id, batter_baserunning.runner_id) AS player_id,\n        COALESCE(hit.batting_team_id, batter_baserunning.batting_team_id) AS team_id,\n        event_key,\n        'Batter'::BASERUNNER AS baserunner,\n        hit.* EXCLUDE (event_key),\n        bat.* EXCLUDE (event_key),\n        batter_baserunning.* EXCLUDE (event_key, baserunner),\n        pitch.* EXCLUDE (event_key),\n    FROM \"timeball\".\"main_models\".\"event_batting_stats\" AS hit\n    LEFT JOIN \"timeball\".\"main_models\".\"event_batted_ball_stats\" AS bat USING (event_key)\n    LEFT JOIN \"timeball\".\"main_models\".\"event_pitch_sequence_stats\" AS pitch USING (event_key)\n    FULL OUTER JOIN batter_baserunning USING (event_key)\n),\n\nunioned AS (\n    SELECT * FROM batter_stats\n    UNION ALL BY NAME\n    SELECT * FROM \"timeball\".\"main_models\".\"event_baserunning_stats\"\n    WHERE baserunner != 'Batter'\n),\n\nfinal AS (\n    SELECT\n        game_id::GAME_ID AS game_id,\n        event_key,\n        COALESCE(team_id, batting_team_id)::TEAM_ID AS team_id,\n        COALESCE(player_id, runner_id)::PLAYER_ID AS player_id,\n        baserunner,\n        COALESCE(plate_appearances, 0)::INT1 AS plate_appearances,\n        COALESCE(at_bats, 0)::INT1 AS at_bats,\n        COALESCE(hits, 0)::INT1 AS hits,\n        COALESCE(singles, 0)::INT1 AS singles,\n        COALESCE(doubles, 0)::INT1 AS doubles,\n        COALESCE(triples, 0)::INT1 AS triples,\n        COALESCE(home_runs, 0)::INT1 AS home_runs,\n        COALESCE(total_bases, 0)::INT1 AS total_bases,\n        COALESCE(strikeouts, 0)::INT1 AS strikeouts,\n        COALESCE(walks, 0)::INT1 AS walks,\n        COALESCE(intentional_walks, 0)::INT1 AS intentional_walks,\n        COALESCE(hit_by_pitches, 0)::INT1 AS hit_by_pitches,\n        COALESCE(sacrifice_hits, 0)::INT1 AS sacrifice_hits,\n        COALESCE(sacrifice_flies, 0)::INT1 AS sacrifice_flies,\n        COALESCE(reached_on_errors, 0)::INT1 AS reached_on_errors,\n        COALESCE(reached_on_interferences, 0)::INT1 AS reached_on_interferences,\n        COALESCE(inside_the_park_home_runs, 0)::INT1 AS inside_the_park_home_runs,\n        COALESCE(ground_rule_doubles, 0)::INT1 AS ground_rule_doubles,\n        COALESCE(infield_hits, 0)::INT1 AS infield_hits,\n        COALESCE(on_base_opportunities, 0)::INT1 AS on_base_opportunities,\n        COALESCE(on_base_successes, 0)::INT1 AS on_base_successes,\n        COALESCE(runs_batted_in, 0)::INT1 AS runs_batted_in,\n        COALESCE(grounded_into_double_plays, 0)::INT1 AS grounded_into_double_plays,\n        COALESCE(double_plays, 0)::INT1 AS double_plays,\n        COALESCE(triple_plays, 0)::INT1 AS triple_plays,\n        COALESCE(batting_outs, 0)::INT1 AS batting_outs,\n        COALESCE(balls_in_play, 0)::INT1 AS balls_in_play,\n        COALESCE(balls_batted, 0)::INT1 AS balls_batted,\n        COALESCE(trajectory_fly_ball, 0)::INT1 AS trajectory_fly_ball,\n        COALESCE(trajectory_ground_ball, 0)::INT1 AS trajectory_ground_ball,\n        COALESCE(trajectory_line_drive, 0)::INT1 AS trajectory_line_drive,\n        COALESCE(trajectory_pop_up, 0)::INT1 AS trajectory_pop_up,\n        COALESCE(trajectory_unknown, 0)::INT1 AS trajectory_unknown,\n        COALESCE(trajectory_known, 0)::INT1 AS trajectory_known,\n        COALESCE(trajectory_broad_air_ball, 0)::INT1 AS trajectory_broad_air_ball,\n        COALESCE(trajectory_broad_ground_ball, 0)::INT1 AS trajectory_broad_ground_ball,\n        COALESCE(trajectory_broad_unknown, 0)::INT1 AS trajectory_broad_unknown,\n        COALESCE(trajectory_broad_known, 0)::INT1 AS trajectory_broad_known,\n        COALESCE(bunts, 0)::INT1 AS bunts,\n        COALESCE(batted_distance_plate, 0)::INT1 AS batted_distance_plate,\n        COALESCE(batted_distance_infield, 0)::INT1 AS batted_distance_infield,\n        COALESCE(batted_distance_outfield, 0)::INT1 AS batted_distance_outfield,\n        COALESCE(batted_distance_unknown, 0)::INT1 AS batted_distance_unknown,\n        COALESCE(batted_distance_known, 0)::INT1 AS batted_distance_known,\n        COALESCE(fielded_by_battery, 0)::INT1 AS fielded_by_battery,\n        COALESCE(fielded_by_infielder, 0)::INT1 AS fielded_by_infielder,\n        COALESCE(fielded_by_outfielder, 0)::INT1 AS fielded_by_outfielder,\n        COALESCE(fielded_by_known, 0)::INT1 AS fielded_by_known,\n        COALESCE(fielded_by_unknown, 0)::INT1 AS fielded_by_unknown,\n        COALESCE(batted_angle_left, 0)::INT1 AS batted_angle_left,\n        COALESCE(batted_angle_right, 0)::INT1 AS batted_angle_right,\n        COALESCE(batted_angle_middle, 0)::INT1 AS batted_angle_middle,\n        COALESCE(batted_angle_unknown, 0)::INT1 AS batted_angle_unknown,\n        COALESCE(batted_angle_known, 0)::INT1 AS batted_angle_known,\n        COALESCE(batted_location_plate, 0)::INT1 AS batted_location_plate,\n        COALESCE(batted_location_right_infield, 0)::INT1 AS batted_location_right_infield,\n        COALESCE(batted_location_middle_infield, 0)::INT1 AS batted_location_middle_infield,\n        COALESCE(batted_location_left_infield, 0)::INT1 AS batted_location_left_infield,\n        COALESCE(batted_location_left_field, 0)::INT1 AS batted_location_left_field,\n        COALESCE(batted_location_center_field, 0)::INT1 AS batted_location_center_field,\n        COALESCE(batted_location_right_field, 0)::INT1 AS batted_location_right_field,\n        COALESCE(batted_location_unknown, 0)::INT1 AS batted_location_unknown,\n        COALESCE(batted_location_known, 0)::INT1 AS batted_location_known,\n        COALESCE(batted_balls_pulled, 0)::INT1 AS batted_balls_pulled,\n        COALESCE(batted_balls_opposite_field, 0)::INT1 AS batted_balls_opposite_field,\n        COALESCE(runs, 0)::INT1 AS runs,\n        COALESCE(times_reached_base, 0)::INT1 AS times_reached_base,\n        COALESCE(times_lead_runner, 0)::INT1 AS times_lead_runner,\n        COALESCE(times_force_on_runner, 0)::INT1 AS times_force_on_runner,\n        COALESCE(times_next_base_empty, 0)::INT1 AS times_next_base_empty,\n        COALESCE(stolen_base_opportunities, 0)::INT1 AS stolen_base_opportunities,\n        COALESCE(stolen_base_opportunities_second, 0)::INT1 AS stolen_base_opportunities_second,\n        COALESCE(stolen_base_opportunities_third, 0)::INT1 AS stolen_base_opportunities_third,\n        COALESCE(stolen_base_opportunities_home, 0)::INT1 AS stolen_base_opportunities_home,\n        COALESCE(stolen_bases, 0)::INT1 AS stolen_bases,\n        COALESCE(stolen_bases_second, 0)::INT1 AS stolen_bases_second,\n        COALESCE(stolen_bases_third, 0)::INT1 AS stolen_bases_third,\n        COALESCE(stolen_bases_home, 0)::INT1 AS stolen_bases_home,\n        COALESCE(caught_stealing, 0)::INT1 AS caught_stealing,\n        COALESCE(caught_stealing_second, 0)::INT1 AS caught_stealing_second,\n        COALESCE(caught_stealing_third, 0)::INT1 AS caught_stealing_third,\n        COALESCE(caught_stealing_home, 0)::INT1 AS caught_stealing_home,\n        COALESCE(picked_off, 0)::INT1 AS picked_off,\n        COALESCE(picked_off_first, 0)::INT1 AS picked_off_first,\n        COALESCE(picked_off_second, 0)::INT1 AS picked_off_second,\n        COALESCE(picked_off_third, 0)::INT1 AS picked_off_third,\n        COALESCE(picked_off_caught_stealing, 0)::INT1 AS picked_off_caught_stealing,\n        COALESCE(outs_on_basepaths, 0)::INT1 AS outs_on_basepaths,\n        COALESCE(unforced_outs_on_basepaths, 0)::INT1 AS unforced_outs_on_basepaths,\n        COALESCE(outs_avoided_on_errors, 0)::INT1 AS outs_avoided_on_errors,\n        COALESCE(advances_on_wild_pitches, 0)::INT1 AS advances_on_wild_pitches,\n        COALESCE(advances_on_passed_balls, 0)::INT1 AS advances_on_passed_balls,\n        COALESCE(advances_on_balks, 0)::INT1 AS advances_on_balks,\n        COALESCE(advances_on_unspecified_plays, 0)::INT1 AS advances_on_unspecified_plays,\n        COALESCE(advances_on_defensive_indifference, 0)::INT1 AS advances_on_defensive_indifference,\n        COALESCE(advances_on_errors, 0)::INT1 AS advances_on_errors,\n        COALESCE(plate_appearances_while_on_base, 0)::INT1 AS plate_appearances_while_on_base,\n        COALESCE(balls_in_play_while_running, 0)::INT1 AS balls_in_play_while_running,\n        COALESCE(balls_in_play_while_on_base, 0)::INT1 AS balls_in_play_while_on_base,\n        COALESCE(batter_total_bases_while_running, 0)::INT1 AS batter_total_bases_while_running,\n        COALESCE(batter_total_bases_while_on_base, 0)::INT1 AS batter_total_bases_while_on_base,\n        COALESCE(extra_base_chances, 0)::INT1 AS extra_base_chances,\n        COALESCE(extra_base_advance_attempts, 0)::INT1 AS extra_base_advance_attempts,\n        COALESCE(extra_bases_taken, 0)::INT1 AS extra_bases_taken,\n        COALESCE(bases_advanced, 0)::INT1 AS bases_advanced,\n        COALESCE(bases_advanced_on_balls_in_play, 0)::INT1 AS bases_advanced_on_balls_in_play,\n        COALESCE(surplus_bases_advanced_on_balls_in_play, 0)::INT1 AS surplus_bases_advanced_on_balls_in_play,\n        COALESCE(outs_on_extra_base_advance_attempts, 0)::INT1 AS outs_on_extra_base_advance_attempts,\n        COALESCE(pitches, 0)::INT1 AS pitches,\n        COALESCE(swings, 0)::INT1 AS swings,\n        COALESCE(swings_with_contact, 0)::INT1 AS swings_with_contact,\n        COALESCE(strikes, 0)::INT1 AS strikes,\n        COALESCE(strikes_called, 0)::INT1 AS strikes_called,\n        COALESCE(strikes_swinging, 0)::INT1 AS strikes_swinging,\n        COALESCE(strikes_foul, 0)::INT1 AS strikes_foul,\n        COALESCE(strikes_foul_tip, 0)::INT1 AS strikes_foul_tip,\n        COALESCE(strikes_in_play, 0)::INT1 AS strikes_in_play,\n        COALESCE(strikes_unknown, 0)::INT1 AS strikes_unknown,\n        COALESCE(balls, 0)::INT1 AS balls,\n        COALESCE(balls_called, 0)::INT1 AS balls_called,\n        COALESCE(balls_intentional, 0)::INT1 AS balls_intentional,\n        COALESCE(balls_automatic, 0)::INT1 AS balls_automatic,\n        COALESCE(unknown_pitches, 0)::INT1 AS unknown_pitches,\n        COALESCE(pitchouts, 0)::INT1 AS pitchouts,\n        COALESCE(pitcher_pickoff_attempts, 0)::INT1 AS pitcher_pickoff_attempts,\n        COALESCE(catcher_pickoff_attempts, 0)::INT1 AS catcher_pickoff_attempts,\n        COALESCE(pitches_blocked_by_catcher, 0)::INT1 AS pitches_blocked_by_catcher,\n        COALESCE(pitches_with_runners_going, 0)::INT1 AS pitches_with_runners_going,\n        COALESCE(passed_balls, 0)::INT1 AS passed_balls,\n        COALESCE(wild_pitches, 0)::INT1 AS wild_pitches,\n        COALESCE(balks, 0)::INT1 AS balks,\n        COALESCE(left_on_base, 0)::INT1 AS left_on_base,\n        COALESCE(left_on_base_with_two_outs, 0)::INT1 AS left_on_base_with_two_outs,\n        \n    FROM unioned\n)\n\nSELECT * FROM final", "relation_name": "\"timeball\".\"main_models\".\"event_offense_stats\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:54.166528Z", "completed_at": "2023-12-09T18:55:54.330080Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:54.330785Z", "completed_at": "2023-12-09T18:55:54.330790Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.19798684120178223, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.timeball.event_pitching_stats", "compiled": true, "compiled_code": "\n\nWITH baserunning_agg AS (\n    -- Runs are populated separately to charge to the right pitcher\n    SELECT\n        event_key,\n        MIN(game_id) AS game_id,\n        MIN(current_pitcher_id) AS player_id,\n        MIN(fielding_team_id) AS team_id,\n        SUM(runs)::TINYINT AS runs,\n        SUM(outs_on_basepaths)::TINYINT AS outs_on_basepaths,\n        SUM(times_reached_base)::TINYINT AS times_reached_base,\n        SUM(stolen_base_opportunities)::TINYINT AS stolen_base_opportunities,\n        SUM(stolen_base_opportunities_second)::TINYINT AS stolen_base_opportunities_second,\n        SUM(stolen_base_opportunities_third)::TINYINT AS stolen_base_opportunities_third,\n        SUM(stolen_base_opportunities_home)::TINYINT AS stolen_base_opportunities_home,\n        SUM(stolen_bases)::TINYINT AS stolen_bases,\n        SUM(stolen_bases_second)::TINYINT AS stolen_bases_second,\n        SUM(stolen_bases_third)::TINYINT AS stolen_bases_third,\n        SUM(stolen_bases_home)::TINYINT AS stolen_bases_home,\n        SUM(caught_stealing)::TINYINT AS caught_stealing,\n        SUM(caught_stealing_second)::TINYINT AS caught_stealing_second,\n        SUM(caught_stealing_third)::TINYINT AS caught_stealing_third,\n        SUM(caught_stealing_home)::TINYINT AS caught_stealing_home,\n        SUM(picked_off)::TINYINT AS picked_off,\n        SUM(picked_off_first)::TINYINT AS picked_off_first,\n        SUM(picked_off_second)::TINYINT AS picked_off_second,\n        SUM(picked_off_third)::TINYINT AS picked_off_third,\n        SUM(picked_off_caught_stealing)::TINYINT AS picked_off_caught_stealing,\n        SUM(advances_on_wild_pitches)::TINYINT AS advances_on_wild_pitches,\n        SUM(advances_on_passed_balls)::TINYINT AS advances_on_passed_balls,\n        SUM(advances_on_balks)::TINYINT AS advances_on_balks,\n        SUM(advances_on_unspecified_plays)::TINYINT AS advances_on_unspecified_plays,\n        SUM(advances_on_defensive_indifference)::TINYINT AS advances_on_defensive_indifference,\n        SUM(advances_on_errors)::TINYINT AS advances_on_errors,\n        SUM(extra_base_advance_attempts)::TINYINT AS extra_base_advance_attempts,\n        SUM(bases_advanced)::TINYINT AS bases_advanced,\n        SUM(bases_advanced_on_balls_in_play)::TINYINT AS bases_advanced_on_balls_in_play,\n        SUM(surplus_bases_advanced_on_balls_in_play)::TINYINT AS surplus_bases_advanced_on_balls_in_play,\n        SUM(outs_on_extra_base_advance_attempts)::TINYINT AS outs_on_extra_base_advance_attempts,\n        SUM(outs_avoided_on_errors)::TINYINT AS outs_avoided_on_errors,\n        SUM(unforced_outs_on_basepaths)::TINYINT AS unforced_outs_on_basepaths,\n        SUM(extra_base_chances)::TINYINT AS extra_base_chances,\n        SUM(extra_bases_taken)::TINYINT AS extra_bases_taken,\n        \n    FROM \"timeball\".\"main_models\".\"event_baserunning_stats\"\n    GROUP BY 1\n),\n\njoined_stats AS (\n    SELECT\n        event_key,\n        COALESCE(baserunning_agg.game_id, hit.game_id) AS game_id,\n        COALESCE(baserunning_agg.player_id, hit.pitcher_id) AS player_id,\n        COALESCE(baserunning_agg.team_id, hit.fielding_team_id) AS team_id,\n        hit.* EXCLUDE (event_key),\n        bat.* EXCLUDE (event_key),\n        -- Populate runs with the CTE below\n        baserunning_agg.* EXCLUDE (event_key, runs),\n        pitch.* EXCLUDE (event_key),\n        hit.plate_appearances AS batters_faced,\n        COALESCE(hit.outs_on_play, baserunning_agg.outs_on_basepaths) AS outs_recorded,\n    FROM \"timeball\".\"main_models\".\"event_batting_stats\" AS hit\n    FULL OUTER JOIN baserunning_agg USING (event_key)\n    LEFT JOIN \"timeball\".\"main_models\".\"event_batted_ball_stats\" AS bat USING (event_key)\n    LEFT JOIN \"timeball\".\"main_models\".\"event_pitch_sequence_stats\" AS pitch USING (event_key)\n),\n\nadd_current_pitcher_runs AS (\n    SELECT\n        joined_stats.*,\n        runs.runs,\n        runs.team_unearned_runs,\n        runs.inherited_runners_scored,\n    FROM joined_stats\n    LEFT JOIN \"timeball\".\"main_models\".\"event_run_assignment_stats\" AS runs\n        ON joined_stats.event_key = runs.event_key\n            AND joined_stats.player_id = runs.pitcher_id\n),\n\n-- This gets unioned instead of joined as these rows are supplemental\ninsert_non_current_pitcher_runs AS (\n    SELECT\n        game_id,\n        event_key,\n        team_id,\n        pitcher_id AS player_id,\n        runs,\n        team_unearned_runs,\n        bequeathed_runners_scored,\n    FROM \"timeball\".\"main_models\".\"event_run_assignment_stats\"\n    -- Meaning they are not currently in the game\n    WHERE bequeathed_runners_scored > 0\n),\n\nunioned AS (\n    SELECT * FROM add_current_pitcher_runs\n    UNION ALL BY NAME\n    SELECT * FROM insert_non_current_pitcher_runs\n),\n\nfinal AS (\n    SELECT\n        game_id,\n        event_key,\n        team_id,\n        player_id,\n        COALESCE(batters_faced, 0)::INT1 AS batters_faced,\n        COALESCE(outs_recorded, 0)::INT1 AS outs_recorded,\n        COALESCE(inherited_runners_scored, 0)::INT1 AS inherited_runners_scored,\n        COALESCE(bequeathed_runners_scored, 0)::INT1 AS bequeathed_runners_scored,\n        COALESCE(team_unearned_runs, 0)::INT1 AS team_unearned_runs,\n        COALESCE(plate_appearances, 0)::INT1 AS plate_appearances,\n        COALESCE(at_bats, 0)::INT1 AS at_bats,\n        COALESCE(hits, 0)::INT1 AS hits,\n        COALESCE(singles, 0)::INT1 AS singles,\n        COALESCE(doubles, 0)::INT1 AS doubles,\n        COALESCE(triples, 0)::INT1 AS triples,\n        COALESCE(home_runs, 0)::INT1 AS home_runs,\n        COALESCE(total_bases, 0)::INT1 AS total_bases,\n        COALESCE(strikeouts, 0)::INT1 AS strikeouts,\n        COALESCE(walks, 0)::INT1 AS walks,\n        COALESCE(intentional_walks, 0)::INT1 AS intentional_walks,\n        COALESCE(hit_by_pitches, 0)::INT1 AS hit_by_pitches,\n        COALESCE(sacrifice_hits, 0)::INT1 AS sacrifice_hits,\n        COALESCE(sacrifice_flies, 0)::INT1 AS sacrifice_flies,\n        COALESCE(reached_on_errors, 0)::INT1 AS reached_on_errors,\n        COALESCE(reached_on_interferences, 0)::INT1 AS reached_on_interferences,\n        COALESCE(inside_the_park_home_runs, 0)::INT1 AS inside_the_park_home_runs,\n        COALESCE(ground_rule_doubles, 0)::INT1 AS ground_rule_doubles,\n        COALESCE(infield_hits, 0)::INT1 AS infield_hits,\n        COALESCE(on_base_opportunities, 0)::INT1 AS on_base_opportunities,\n        COALESCE(on_base_successes, 0)::INT1 AS on_base_successes,\n        COALESCE(grounded_into_double_plays, 0)::INT1 AS grounded_into_double_plays,\n        COALESCE(double_plays, 0)::INT1 AS double_plays,\n        COALESCE(triple_plays, 0)::INT1 AS triple_plays,\n        COALESCE(batting_outs, 0)::INT1 AS batting_outs,\n        COALESCE(balls_in_play, 0)::INT1 AS balls_in_play,\n        COALESCE(balls_batted, 0)::INT1 AS balls_batted,\n        COALESCE(trajectory_fly_ball, 0)::INT1 AS trajectory_fly_ball,\n        COALESCE(trajectory_ground_ball, 0)::INT1 AS trajectory_ground_ball,\n        COALESCE(trajectory_line_drive, 0)::INT1 AS trajectory_line_drive,\n        COALESCE(trajectory_pop_up, 0)::INT1 AS trajectory_pop_up,\n        COALESCE(trajectory_unknown, 0)::INT1 AS trajectory_unknown,\n        COALESCE(trajectory_known, 0)::INT1 AS trajectory_known,\n        COALESCE(trajectory_broad_air_ball, 0)::INT1 AS trajectory_broad_air_ball,\n        COALESCE(trajectory_broad_ground_ball, 0)::INT1 AS trajectory_broad_ground_ball,\n        COALESCE(trajectory_broad_unknown, 0)::INT1 AS trajectory_broad_unknown,\n        COALESCE(trajectory_broad_known, 0)::INT1 AS trajectory_broad_known,\n        COALESCE(bunts, 0)::INT1 AS bunts,\n        COALESCE(batted_distance_plate, 0)::INT1 AS batted_distance_plate,\n        COALESCE(batted_distance_infield, 0)::INT1 AS batted_distance_infield,\n        COALESCE(batted_distance_outfield, 0)::INT1 AS batted_distance_outfield,\n        COALESCE(batted_distance_unknown, 0)::INT1 AS batted_distance_unknown,\n        COALESCE(batted_distance_known, 0)::INT1 AS batted_distance_known,\n        COALESCE(fielded_by_battery, 0)::INT1 AS fielded_by_battery,\n        COALESCE(fielded_by_infielder, 0)::INT1 AS fielded_by_infielder,\n        COALESCE(fielded_by_outfielder, 0)::INT1 AS fielded_by_outfielder,\n        COALESCE(fielded_by_known, 0)::INT1 AS fielded_by_known,\n        COALESCE(fielded_by_unknown, 0)::INT1 AS fielded_by_unknown,\n        COALESCE(batted_angle_left, 0)::INT1 AS batted_angle_left,\n        COALESCE(batted_angle_right, 0)::INT1 AS batted_angle_right,\n        COALESCE(batted_angle_middle, 0)::INT1 AS batted_angle_middle,\n        COALESCE(batted_angle_unknown, 0)::INT1 AS batted_angle_unknown,\n        COALESCE(batted_angle_known, 0)::INT1 AS batted_angle_known,\n        COALESCE(batted_location_plate, 0)::INT1 AS batted_location_plate,\n        COALESCE(batted_location_right_infield, 0)::INT1 AS batted_location_right_infield,\n        COALESCE(batted_location_middle_infield, 0)::INT1 AS batted_location_middle_infield,\n        COALESCE(batted_location_left_infield, 0)::INT1 AS batted_location_left_infield,\n        COALESCE(batted_location_left_field, 0)::INT1 AS batted_location_left_field,\n        COALESCE(batted_location_center_field, 0)::INT1 AS batted_location_center_field,\n        COALESCE(batted_location_right_field, 0)::INT1 AS batted_location_right_field,\n        COALESCE(batted_location_unknown, 0)::INT1 AS batted_location_unknown,\n        COALESCE(batted_location_known, 0)::INT1 AS batted_location_known,\n        COALESCE(batted_balls_pulled, 0)::INT1 AS batted_balls_pulled,\n        COALESCE(batted_balls_opposite_field, 0)::INT1 AS batted_balls_opposite_field,\n        COALESCE(runs, 0)::INT1 AS runs,\n        COALESCE(times_reached_base, 0)::INT1 AS times_reached_base,\n        COALESCE(stolen_base_opportunities, 0)::INT1 AS stolen_base_opportunities,\n        COALESCE(stolen_base_opportunities_second, 0)::INT1 AS stolen_base_opportunities_second,\n        COALESCE(stolen_base_opportunities_third, 0)::INT1 AS stolen_base_opportunities_third,\n        COALESCE(stolen_base_opportunities_home, 0)::INT1 AS stolen_base_opportunities_home,\n        COALESCE(stolen_bases, 0)::INT1 AS stolen_bases,\n        COALESCE(stolen_bases_second, 0)::INT1 AS stolen_bases_second,\n        COALESCE(stolen_bases_third, 0)::INT1 AS stolen_bases_third,\n        COALESCE(stolen_bases_home, 0)::INT1 AS stolen_bases_home,\n        COALESCE(caught_stealing, 0)::INT1 AS caught_stealing,\n        COALESCE(caught_stealing_second, 0)::INT1 AS caught_stealing_second,\n        COALESCE(caught_stealing_third, 0)::INT1 AS caught_stealing_third,\n        COALESCE(caught_stealing_home, 0)::INT1 AS caught_stealing_home,\n        COALESCE(picked_off, 0)::INT1 AS picked_off,\n        COALESCE(picked_off_first, 0)::INT1 AS picked_off_first,\n        COALESCE(picked_off_second, 0)::INT1 AS picked_off_second,\n        COALESCE(picked_off_third, 0)::INT1 AS picked_off_third,\n        COALESCE(picked_off_caught_stealing, 0)::INT1 AS picked_off_caught_stealing,\n        COALESCE(outs_on_basepaths, 0)::INT1 AS outs_on_basepaths,\n        COALESCE(unforced_outs_on_basepaths, 0)::INT1 AS unforced_outs_on_basepaths,\n        COALESCE(outs_avoided_on_errors, 0)::INT1 AS outs_avoided_on_errors,\n        COALESCE(advances_on_wild_pitches, 0)::INT1 AS advances_on_wild_pitches,\n        COALESCE(advances_on_passed_balls, 0)::INT1 AS advances_on_passed_balls,\n        COALESCE(advances_on_balks, 0)::INT1 AS advances_on_balks,\n        COALESCE(advances_on_unspecified_plays, 0)::INT1 AS advances_on_unspecified_plays,\n        COALESCE(advances_on_defensive_indifference, 0)::INT1 AS advances_on_defensive_indifference,\n        COALESCE(advances_on_errors, 0)::INT1 AS advances_on_errors,\n        COALESCE(extra_base_chances, 0)::INT1 AS extra_base_chances,\n        COALESCE(extra_base_advance_attempts, 0)::INT1 AS extra_base_advance_attempts,\n        COALESCE(extra_bases_taken, 0)::INT1 AS extra_bases_taken,\n        COALESCE(bases_advanced, 0)::INT1 AS bases_advanced,\n        COALESCE(bases_advanced_on_balls_in_play, 0)::INT1 AS bases_advanced_on_balls_in_play,\n        COALESCE(surplus_bases_advanced_on_balls_in_play, 0)::INT1 AS surplus_bases_advanced_on_balls_in_play,\n        COALESCE(outs_on_extra_base_advance_attempts, 0)::INT1 AS outs_on_extra_base_advance_attempts,\n        COALESCE(pitches, 0)::INT1 AS pitches,\n        COALESCE(swings, 0)::INT1 AS swings,\n        COALESCE(swings_with_contact, 0)::INT1 AS swings_with_contact,\n        COALESCE(strikes, 0)::INT1 AS strikes,\n        COALESCE(strikes_called, 0)::INT1 AS strikes_called,\n        COALESCE(strikes_swinging, 0)::INT1 AS strikes_swinging,\n        COALESCE(strikes_foul, 0)::INT1 AS strikes_foul,\n        COALESCE(strikes_foul_tip, 0)::INT1 AS strikes_foul_tip,\n        COALESCE(strikes_in_play, 0)::INT1 AS strikes_in_play,\n        COALESCE(strikes_unknown, 0)::INT1 AS strikes_unknown,\n        COALESCE(balls, 0)::INT1 AS balls,\n        COALESCE(balls_called, 0)::INT1 AS balls_called,\n        COALESCE(balls_intentional, 0)::INT1 AS balls_intentional,\n        COALESCE(balls_automatic, 0)::INT1 AS balls_automatic,\n        COALESCE(unknown_pitches, 0)::INT1 AS unknown_pitches,\n        COALESCE(pitchouts, 0)::INT1 AS pitchouts,\n        COALESCE(pitcher_pickoff_attempts, 0)::INT1 AS pitcher_pickoff_attempts,\n        COALESCE(catcher_pickoff_attempts, 0)::INT1 AS catcher_pickoff_attempts,\n        COALESCE(pitches_blocked_by_catcher, 0)::INT1 AS pitches_blocked_by_catcher,\n        COALESCE(pitches_with_runners_going, 0)::INT1 AS pitches_with_runners_going,\n        COALESCE(passed_balls, 0)::INT1 AS passed_balls,\n        COALESCE(wild_pitches, 0)::INT1 AS wild_pitches,\n        COALESCE(balks, 0)::INT1 AS balks,\n        COALESCE(left_on_base, 0)::INT1 AS left_on_base,\n        COALESCE(left_on_base_with_two_outs, 0)::INT1 AS left_on_base_with_two_outs,\n        \n    FROM unioned\n)\n\nSELECT * FROM final", "relation_name": "\"timeball\".\"main_models\".\"event_pitching_stats\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:54.365723Z", "completed_at": "2023-12-09T18:55:54.369497Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:54.370157Z", "completed_at": "2023-12-09T18:55:54.370161Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005949258804321289, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.timeball.event_pitching_flags", "compiled": true, "compiled_code": "\nWITH init_flags AS (\n    SELECT\n        game_id,\n        event_key,\n        event_id,\n        batting_side,\n        pitcher_id,\n        batting_team_margin_start,\n        inning_in_outs_start,\n        runners_count_start,\n        pitching_team_starting_pitcher_id = pitcher_id AS starting_pitcher_flag,\n        LAG(pitcher_id) OVER game_side AS previous_pitcher_id,\n        COALESCE(previous_pitcher_id != pitcher_id, TRUE) AS new_pitcher_flag,\n        -- This specifically excludes finishing pitchers\n        COALESCE(LEAD(pitcher_id) OVER game_side != pitcher_id, FALSE) AS pitcher_exit_flag,\n        LEAD(pitcher_id) OVER game_side IS NULL AS pitcher_finish_flag,\n\n        CASE WHEN new_pitcher_flag\n                THEN runners_count_start\n            ELSE 0\n        END AS inherited_runners,\n\n        CASE WHEN pitcher_exit_flag\n                THEN LEAD(runners_count_start) OVER game_side\n            ELSE 0\n        END AS bequeathed_runners,\n\n        -- A new relief pitcher can enter the game as the first pitcher in rare cases\n        COALESCE(new_pitcher_flag AND pitching_team_starting_pitcher_id != pitcher_id, FALSE)\n        AS new_relief_pitcher_flag,\n        COALESCE(new_pitcher_flag AND previous_pitcher_id = pitching_team_starting_pitcher_id, FALSE)\n        AS starting_pitcher_exit_flag,\n        COALESCE(starting_pitcher_exit_flag AND inning_in_outs_start < 15, FALSE)\n        AS starting_pitcher_early_exit_flag,\n\n        -- Conditions (necessary but not sufficient) for all 3 save situation types:\n        -- A new pitcher enters the game with a lead unless they are replacing a starter who\n        -- has pitched fewer than 5 innings\n        new_relief_pitcher_flag\n        AND NOT starting_pitcher_early_exit_flag\n        AND batting_team_margin_start < 0\n        AS save_situation_base,\n\n        save_situation_base\n        AND batting_team_margin_start >= -3\n        -- In this situation, the pitcher must pitch a full inning,\n        -- which is only possible if he enters before the 9th inning\n        -- or at the start of a frame (or if he enters without a lead,\n        -- in which case it would not be a save situation)\n        AND (inning_in_outs_start <= 24 OR inning_in_outs_start % 3 = 0)\n        AS save_situation_1_flag,\n\n        save_situation_base\n        AND batting_team_margin_start >= -5\n        -- Tying run is on deck, at the plate, or on the bases\n        AND batting_team_margin_start + runners_count_start + 2 >= 0\n        AS save_situation_2_flag,\n\n        -- There's a bit of an arcane distinction between #1-2 and 3:\n        -- The first two are classified as a \"save situation\" while the third\n        -- makes the pitcher eligible for a save if he finishes the game.\n        -- The main difference is that a pitcher qualfiies for a hold in the first two,\n        -- but not in the third.\n        CASE WHEN save_situation_base\n                THEN inning_in_outs_start <= 18\n            ELSE FALSE\n        END AS long_save_eligible_start_flag,\n\n        -- This is non-null only on the first event for each new pitcher,\n        -- which allows LAG to work properly in the subsequent query\n        CASE WHEN new_pitcher_flag\n                THEN save_situation_1_flag OR save_situation_2_flag\n            ELSE FALSE\n        END AS save_situation_start_flag,\n\n        CASE WHEN new_pitcher_flag\n                THEN save_situation_1_flag OR save_situation_2_flag OR long_save_eligible_start_flag\n            ELSE FALSE\n        END AS save_eligible_start_flag,\n\n        -- These flags only apply if the exiting/finishing pitcher\n        -- came in in a save situation\n        pitcher_exit_flag\n        AND batting_team_margin_end < 0\n        AS conditional_hold_flag,\n\n        pitcher_finish_flag\n        AND batting_team_margin_end < 0\n        AS conditional_save_flag,\n\n        -- A blown save happens as soon as the game is tied, not\n        -- when the pitcher leaves\n        batting_team_margin_end >= 0 AS conditional_blown_save_flag\n\n    FROM \"timeball\".\"main_models\".\"event_states_full\"\n    WINDOW\n        game_side AS (\n            PARTITION BY game_id, batting_side\n            ORDER BY event_id\n        )\n),\n\nsave_flags AS (\n    SELECT\n        *,\n        CASE WHEN LAG(save_situation_start_flag IGNORE NULLS) OVER pitcher_appearance\n                THEN conditional_hold_flag\n            ELSE FALSE\n        END AS hold_flag,\n        CASE WHEN LAG(save_eligible_start_flag IGNORE NULLS) OVER pitcher_appearance\n                THEN conditional_save_flag\n            ELSE FALSE\n        END AS save_flag,\n        -- TODO: Is it possible to blow a 3-inning save? Baseball Reference and MLB.com appear\n        -- to differ - see the Cardinals-Pirates 2022-06-13 game for an example.\n        -- We'll say that it is possible because it's funnier.\n        CASE WHEN LAG(save_eligible_start_flag IGNORE NULLS) OVER pitcher_appearance\n                -- This ensures that only a single event is marked as a blown save,\n                -- and that the event is the one on which the save was blown\n                AND NOT LAG(conditional_blown_save_flag) OVER pitcher_appearance\n                THEN conditional_blown_save_flag\n            ELSE FALSE\n        END AS blown_save_flag,\n        CASE WHEN LAG(long_save_eligible_start_flag IGNORE NULLS) OVER pitcher_appearance\n                AND NOT LAG(save_situation_start_flag IGNORE NULLS) OVER pitcher_appearance\n                AND NOT LAG(conditional_blown_save_flag) OVER pitcher_appearance\n                THEN conditional_blown_save_flag\n            ELSE FALSE\n        END AS blown_long_save_flag,\n    FROM init_flags\n    WINDOW\n        pitcher_appearance AS (\n            PARTITION BY game_id, batting_side, pitcher_id\n            ORDER BY event_id\n        )\n),\n\nfinal AS (\n    SELECT\n        game_id,\n        event_key,\n        event_id,\n        previous_pitcher_id,\n        pitcher_id,\n        starting_pitcher_flag,\n        bequeathed_runners::UTINYINT AS bequeathed_runners,\n        inherited_runners::UTINYINT AS inherited_runners,\n        new_relief_pitcher_flag,\n        pitcher_exit_flag,\n        pitcher_finish_flag,\n        starting_pitcher_exit_flag,\n        starting_pitcher_early_exit_flag,\n        save_situation_start_flag,\n        hold_flag,\n        save_flag,\n        blown_save_flag,\n        blown_long_save_flag,\n    FROM save_flags\n)\n\nSELECT * FROM final", "relation_name": "\"timeball\".\"main_models\".\"event_pitching_flags\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:54.372393Z", "completed_at": "2023-12-09T18:55:54.375483Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:54.376154Z", "completed_at": "2023-12-09T18:55:54.376157Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005197048187255859, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.timeball.game_line_scores", "compiled": true, "compiled_code": "WITH event_lines AS (\n    SELECT\n        game_id,\n        batting_side,\n        inning_start AS inning,\n        SUM(runs_on_play) AS runs,\n        SUM(outs_on_play) AS outs,\n    FROM \"timeball\".\"main_models\".\"event_states_full\"\n    GROUP BY 1, 2, 3\n),\n\nunioned AS (\n    SELECT *\n    FROM event_lines\n    UNION ALL BY NAME\n    \n    SELECT *\n    FROM \"timeball\".\"main_models\".\"stg_box_score_line_scores\"\n    WHERE game_id NOT IN (SELECT DISTINCT game_id FROM event_lines)\n),\n\ngame_agg AS (\n    SELECT\n        game_id,\n        batting_side AS side,\n        SUM(runs) AS total_runs,\n        STRING_AGG(CASE\n            WHEN runs >= 10\n                THEN CONCAT('(', runs, ')')\n            ELSE runs::STRING\n        END, '') AS line_score,\n        SUM(outs) AS duration_outs,\n        LIST(runs::UTINYINT ORDER BY inning) AS line_score_list\n    FROM unioned\n    GROUP BY 1, 2\n),\n\nbox_outs AS (\n    SELECT\n        game_id,\n        side,\n        SUM(outs_recorded) AS duration_outs\n    FROM \"timeball\".\"main_models\".\"stg_box_score_pitching_lines\"\n    GROUP BY 1, 2\n),\n\nside_agg AS (\n    SELECT\n        game_id,\n        FIRST(g.total_runs) FILTER (WHERE side = 'Home') AS home_runs_scored,\n        FIRST(g.total_runs) FILTER (WHERE side = 'Away') AS away_runs_scored,\n        FIRST(g.line_score) FILTER (WHERE side = 'Home') AS home_line_score,\n        FIRST(g.line_score) FILTER (WHERE side = 'Away') AS away_line_score,\n        FIRST(g.line_score_list) FILTER (WHERE side = 'Home') AS home_line_score_list,\n        FIRST(g.line_score_list) FILTER (WHERE side = 'Away') AS away_line_score_list,\n        SUM(COALESCE(g.duration_outs, box_outs.duration_outs))::UTINYINT AS duration_outs,\n    FROM game_agg AS g\n    LEFT JOIN box_outs USING (game_id, side)\n    GROUP BY 1\n),\n\nfinal AS (\n    SELECT * REPLACE (\n        CASE WHEN LENGTH(home_line_score) > LENGTH(away_line_score)\n            THEN away_line_score || 'x'\n            ELSE away_line_score\n        END AS away_line_score,\n        CASE WHEN LENGTH(away_line_score) > LENGTH(home_line_score)\n            THEN home_line_score || 'x'\n            ELSE home_line_score\n        END AS home_line_score,    \n    )\n    FROM side_agg\n)\n\nSELECT * FROM final", "relation_name": "\"timeball\".\"main_models\".\"game_line_scores\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:54.378351Z", "completed_at": "2023-12-09T18:55:54.381231Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:54.381885Z", "completed_at": "2023-12-09T18:55:54.381888Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004912137985229492, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.timeball.run_expectancy_matrix", "compiled": true, "compiled_code": "\nWITH next_runs AS (\n    SELECT\n        run_expectancy_start_key AS run_expectancy_key,\n        league_group,\n        season_group,\n        outs_start,\n        base_state_start,\n        SUM(runs_on_play) OVER rest_of_inning AS runs_scored,\n    FROM \"timeball\".\"main_models\".\"event_states_full\"\n    WHERE game_type = 'RegularSeason'\n        -- Final/extra innings have atypical expectencies\n        AND inning_start < 9\n    WINDOW\n        rest_of_inning AS (\n            PARTITION BY game_id, frame_start, inning_start\n            ORDER BY event_id\n            ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING\n        )\n    QUALIFY NOT BOOL_OR(truncated_frame_flag) OVER rest_of_inning\n),\n\nfinal AS (\n    SELECT\n        run_expectancy_key,\n        ANY_VALUE(league_group) AS league_group,\n        ANY_VALUE(season_group) AS season_group,\n        ANY_VALUE(outs_start) AS outs,\n        ANY_VALUE(base_state_start) AS base_state,\n        ROUND(AVG(runs_scored), 2)::DECIMAL AS avg_runs_scored,\n        ROUND(COALESCE(VAR_SAMP(runs_scored), 2), 0)::DECIMAL AS variance_runs_scored,\n        COUNT(*) AS sample_size\n    FROM next_runs\n    GROUP BY 1\n)\n\nSELECT * FROM final", "relation_name": "\"timeball\".\"main_models\".\"run_expectancy_matrix\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:54.384016Z", "completed_at": "2023-12-09T18:55:54.386961Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:54.387612Z", "completed_at": "2023-12-09T18:55:54.387615Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004947185516357422, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.timeball.win_expectancy_matrix", "compiled": true, "compiled_code": "\nWITH states AS (\n    SELECT\n        -- Treat 9th and later as the same to increase sample size\n        -- TODO: Put add upstream `truncated_inning` col\n        win_expectancy_start_key AS win_expectancy_key,\n        inning_group_start AS inning,\n        truncated_home_margin_start AS truncated_home_margin,\n        frame_start AS frame,\n        outs_start AS outs,\n        base_state_start AS base_state,\n        -- Buckets for merging low-sample-size states, see next query for integration\n        ROUND(CASE\n            WHEN home_margin_start = 0 THEN 0\n            WHEN home_margin_start BETWEEN 1 AND 3 THEN 1\n            WHEN home_margin_start BETWEEN 4 AND 6 THEN 2\n            WHEN home_margin_start >= 7 THEN 3\n            WHEN home_margin_start BETWEEN -3 AND -1 THEN -1\n            WHEN home_margin_start BETWEEN -6 AND -4 THEN -2\n            ELSE -3\n        END, 0) AS home_margin_bucket,\n        base_state_start > 0 AS any_runners_on,\n        LAST(score_home_end::INT - score_away_end > 0) OVER rest_of_game AS home_team_win\n    FROM \"timeball\".\"main_models\".\"event_states_full\"\n    -- Exclude the rare cases where the home team bats first\n    -- TODO: Should also exclude/differentiate any bullshit extra innings runner on 2nd stuff\n    WHERE bat_first_side = 'Away'\n    WINDOW\n        rest_of_game AS (\n            PARTITION BY game_id\n            ORDER BY event_id\n            ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING\n        )\n    -- Eliminate ties or games that lasted under 9 innings\n    QUALIFY LAST(score_away_end::INT - score_home_end !=0) OVER rest_of_game\n        AND LAST(inning) OVER rest_of_game >= 9\n\n),\n\nagg AS (\n    SELECT DISTINCT ON (win_expectancy_key)\n        win_expectancy_key,\n        inning,\n        frame,\n        truncated_home_margin,\n        outs,\n        base_state,\n        SUM(home_team_win::NUMERIC) OVER narrow AS home_team_wins_narrow,\n        COUNT(*) OVER narrow AS sample_size_narrow,\n        SUM(home_team_win::NUMERIC) OVER broad / COUNT(*) OVER broad AS win_rate_broad,\n    FROM states\n    WINDOW\n        narrow AS (\n            PARTITION BY win_expectancy_key\n        ),\n        broad AS (\n            PARTITION BY inning, frame, home_margin_bucket, any_runners_on\n        )\n),\n\nfinal AS (\n    SELECT\n        win_expectancy_key,\n        inning,\n        frame,\n        truncated_home_margin,\n        outs,\n        base_state,\n        -- Use the \"broad\" category as a prior to smooth out rare states\n        ROUND(\n            (home_team_wins_narrow + win_rate_broad * 10) / (sample_size_narrow + 10), 3\n        )::DECIMAL(4, 3) AS home_win_rate,\n    FROM agg\n)\n\nSELECT * FROM final\nORDER BY home_win_rate DESC", "relation_name": "\"timeball\".\"main_models\".\"win_expectancy_matrix\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:54.389762Z", "completed_at": "2023-12-09T18:55:54.393330Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:54.393961Z", "completed_at": "2023-12-09T18:55:54.393965Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005541801452636719, "adapter_response": {}, "message": null, "failures": null, "unique_id": "analysis.timeball.fielder_advance_expectancy", "compiled": true, "compiled_code": "WITH base_data AS (\n    SELECT\n        e.season,\n        e.event_key,\n        e.outs,\n        b.baserunner,\n        e.base_state,\n        e.batting_side,\n        e.batted_to_fielder,\n        g.park_id,\n        f.player_id AS fielder_id,\n        COALESCE(bbt.trajectory_broad_classification, 'Unknown') AS trajectory,\n        b.bases_advanced,\n        b.unforced_outs_on_basepaths,\n        -- We don't want to distinguish between out types because that selects on the dependent variable\n        -- (e.g. a sac fly is always a successful advance). We also want to lump ROEs and failed fielders choices\n        -- in with hits here so we can assign the reaching-base penalty consistently separately.\n        CASE WHEN part.plate_appearance_result = 'ReachedOnError'\n            OR (part.plate_appearance_result = 'FieldersChoice' AND e.outs_on_play = 0)\n                THEN FALSE\n            ELSE part.is_batting_out\n        END AS is_out,\n    FROM \"timeball\".\"main_models\".\"event_baserunning_stats\" AS b\n    INNER JOIN \"timeball\".\"main_models\".\"stg_events\" AS e USING (event_key)\n    INNER JOIN \"timeball\".\"main_seeds\".\"seed_plate_appearance_result_types\" AS part USING (plate_appearance_result)\n    INNER JOIN \"timeball\".\"main_models\".\"game_start_info\" AS g ON g.game_id = e.game_id\n    LEFT JOIN \"timeball\".\"main_models\".\"calc_batted_ball_type\" AS bbt USING (event_key)\n    LEFT JOIN \"timeball\".\"main_models\".\"event_player_fielding_stats\" AS f\n        ON e.event_key = f.event_key\n        AND e.batted_to_fielder = f.fielding_position\n    WHERE part.is_in_play\n),\n\n-- TODO: add park\naverages AS (\n    SELECT\n        base_state,\n        outs,\n        baserunner,\n        batted_to_fielder,\n        is_out,\n        trajectory,\n        AVG(bases_advanced) AS average_bases_advanced,\n        AVG(unforced_outs_on_basepaths) AS average_outs_on_basepaths,\n    FROM base_data\n    GROUP BY 1, 2, 3, 4, 5, 6\n),\n\nexpectations AS (\n    SELECT\n        bd.*,\n        a.average_bases_advanced,\n        a.average_outs_on_basepaths,\n        bd.bases_advanced - a.average_bases_advanced AS bases_advanced_above_average,\n        bd.unforced_outs_on_basepaths - a.average_outs_on_basepaths AS outs_on_basepaths_above_average,\n        AVG(bases_advanced_above_average) OVER season_baseline AS season_adjustment_bases,\n        AVG(outs_on_basepaths_above_average) OVER season_baseline AS season_adjustment_outs,\n        bases_advanced_above_average - season_adjustment_bases AS adjusted_bases_advanced,\n        outs_on_basepaths_above_average - season_adjustment_outs AS adjusted_outs_on_basepaths\n    FROM base_data AS bd\n    INNER JOIN averages AS a\n        USING (base_state, outs, baserunner, is_out, trajectory, batted_to_fielder)\n    WINDOW season_baseline AS (PARTITION BY season, base_state, outs, baserunner, is_out, trajectory, batted_to_fielder)\n),\n\nleaders AS (\n    SELECT\n        fielder_id,\n        COUNT(DISTINCT event_key) AS plate_appearances,\n        SUM(adjusted_bases_advanced) AS bases_aa,\n        SUM(adjusted_outs_on_basepaths) AS outs_aa,\n        bases_aa * .2 + outs_aa * -0.42 AS run_value\n    FROM expectations\n    GROUP BY 1\n)\n\nSELECT *,\n    bases_aa / plate_appearances AS bases_aa_per_pa,\n    outs_aa / plate_appearances AS outs_aa_per_pa,\n    run_value / plate_appearances AS run_value_per_pa\nFROM leaders\nWHERE plate_appearances > 100\nORDER BY run_value_per_pa", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:54.396051Z", "completed_at": "2023-12-09T18:55:54.401129Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:54.401807Z", "completed_at": "2023-12-09T18:55:54.401811Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00711822509765625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.timeball.player_position_game_fielding_stats", "compiled": true, "compiled_code": "\nWITH box_agg AS (\n    SELECT\n        game_id,\n        stats.fielder_id AS player_id,\n        stats.fielding_position,\n        MIN(CASE WHEN stats.side = 'Home' THEN games.home_team_id ELSE games.away_team_id END) AS team_id,\n        SUM(stats.outs_played) AS outs_played,\n        CASE WHEN BOOL_OR(stats.putouts IS NULL) THEN NULL ELSE SUM(stats.putouts) END AS putouts,\n        CASE WHEN BOOL_OR(stats.assists IS NULL) THEN NULL ELSE SUM(stats.assists) END AS assists,\n        CASE WHEN BOOL_OR(stats.errors IS NULL) THEN NULL ELSE SUM(stats.errors) END AS errors,\n        CASE WHEN BOOL_OR(stats.double_plays IS NULL) THEN NULL ELSE SUM(stats.double_plays) END AS double_plays,\n        CASE WHEN BOOL_OR(stats.triple_plays IS NULL) THEN NULL ELSE SUM(stats.triple_plays) END AS triple_plays,\n        CASE WHEN BOOL_OR(stats.passed_balls IS NULL) THEN NULL ELSE SUM(stats.passed_balls) END AS passed_balls\n    FROM \"timeball\".\"main_models\".\"stg_box_score_fielding_lines\" AS stats\n    INNER JOIN \"timeball\".\"main_models\".\"stg_games\" AS games USING (game_id)\n    GROUP BY 1, 2, 3\n),\n\nevent_agg AS (\n    SELECT\n        game_id,\n        player_id,\n        fielding_position,\n        MIN(team_id) AS team_id,\n        SUM(outs_played)::UTINYINT AS outs_played,\n        SUM(plate_appearances_in_field)::UTINYINT AS plate_appearances_in_field,\n        SUM(plate_appearances_in_field_with_ball_in_play)::UTINYINT AS plate_appearances_in_field_with_ball_in_play,\n        SUM(putouts)::UTINYINT AS putouts,\n        SUM(assists)::UTINYINT AS assists,\n        SUM(errors)::UTINYINT AS errors,\n        SUM(fielders_choices)::UTINYINT AS fielders_choices,\n        SUM(assisted_putouts)::UTINYINT AS assisted_putouts,\n        SUM(in_play_putouts)::UTINYINT AS in_play_putouts,\n        SUM(in_play_assists)::UTINYINT AS in_play_assists,\n        SUM(double_plays)::UTINYINT AS double_plays,\n        SUM(triple_plays)::UTINYINT AS triple_plays,\n        SUM(ground_ball_double_plays)::UTINYINT AS ground_ball_double_plays,\n        SUM(stolen_bases)::UTINYINT AS stolen_bases,\n        SUM(caught_stealing)::UTINYINT AS caught_stealing,\n        SUM(passed_balls)::UTINYINT AS passed_balls,\n        SUM(balls_hit_to)::UTINYINT AS balls_hit_to,\n        SUM(reaching_errors)::UTINYINT AS reaching_errors,\n        SUM(pickoffs)::UTINYINT AS pickoffs,\n        SUM(double_plays_started)::UTINYINT AS double_plays_started,\n        SUM(ground_ball_double_plays_started)::UTINYINT AS ground_ball_double_plays_started,\n        SUM(unknown_putouts_while_fielding)::UTINYINT AS unknown_putouts_while_fielding\n    FROM \"timeball\".\"main_models\".\"event_player_fielding_stats\"\n    GROUP BY 1, 2, 3\n),\n\n-- Unlike batting/fielding, we join the data instead of unioning\n-- because box scores are more reliable for fielding plays\nfinal AS (\n    SELECT\n        game_id,\n        player_id,\n        fielding_position,\n        COALESCE(event_agg.team_id, box_agg.team_id) AS team_id,\n        CASE\n            WHEN appearances.first_fielding_position = fielding_position\n                OR appearances.games_ohtani_rule = 1 AND fielding_position IN (1, 10)\n                THEN appearances.games_started\n            ELSE 0\n        END::UTINYINT AS games_started,\n        -- Outs played data is always more authoritative from events, unlike other fielding data\n        COALESCE(event_agg.outs_played, box_agg.outs_played)::UTINYINT AS outs_played,\n        -- The rules for combining box and event fielding data are:\n        -- If there is an event account with no unknown plays while the fielder was playing, use it\n        -- Otherwise, if there is there is a box score account with data for that field, use it\n        -- If the box score account exists but is missing data for that particular field, leave it empty\n        -- If there is an event account but no box score account, use events\n        CASE WHEN box_agg.game_id IS NULL OR event_agg.unknown_putouts_while_fielding = 0\n                THEN event_agg.putouts\n            ELSE box_agg.putouts\n        END::UTINYINT AS putouts,\n        CASE WHEN box_agg.game_id IS NULL OR event_agg.unknown_putouts_while_fielding = 0\n                THEN event_agg.assists\n            ELSE box_agg.assists\n        END::UTINYINT AS assists,\n        CASE WHEN box_agg.game_id IS NULL OR event_agg.unknown_putouts_while_fielding = 0\n                THEN event_agg.errors\n            ELSE box_agg.errors\n        END::UTINYINT AS errors,\n        CASE WHEN box_agg.game_id IS NULL OR event_agg.unknown_putouts_while_fielding = 0\n                THEN event_agg.double_plays\n            ELSE box_agg.double_plays\n        END::UTINYINT AS double_plays,\n        CASE WHEN box_agg.game_id IS NULL OR event_agg.unknown_putouts_while_fielding = 0\n                THEN event_agg.triple_plays\n            ELSE box_agg.triple_plays\n        END::UTINYINT AS triple_plays,\n        event_agg.plate_appearances_in_field,\n        event_agg.plate_appearances_in_field_with_ball_in_play,\n        event_agg.reaching_errors,\n        event_agg.fielders_choices,\n        event_agg.assisted_putouts,\n        event_agg.in_play_putouts,\n        event_agg.in_play_assists,\n        event_agg.balls_hit_to,\n        event_agg.ground_ball_double_plays,\n        COALESCE(box_agg.passed_balls, event_agg.passed_balls)::UTINYINT AS passed_balls,\n        event_agg.stolen_bases,\n        event_agg.caught_stealing,\n        event_agg.unknown_putouts_while_fielding,\n        event_agg.pickoffs,\n        event_agg.double_plays_started,\n        event_agg.ground_ball_double_plays_started,\n        (box_agg.putouts - event_agg.putouts)::TINYINT AS surplus_box_putouts,\n        (box_agg.assists - event_agg.assists)::TINYINT AS surplus_box_assists,\n        (box_agg.errors - event_agg.errors)::TINYINT AS surplus_box_errors,\n    FROM box_agg\n    FULL OUTER JOIN event_agg USING (game_id, player_id, fielding_position)\n    LEFT JOIN \"timeball\".\"main_models\".\"player_game_appearances\" AS appearances USING (game_id, player_id)\n)\n\nSELECT * FROM final", "relation_name": "\"timeball\".\"main_models\".\"player_position_game_fielding_stats\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:54.404264Z", "completed_at": "2023-12-09T18:55:54.407099Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:54.407756Z", "completed_at": "2023-12-09T18:55:54.407760Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00488591194152832, "adapter_response": {}, "message": null, "failures": null, "unique_id": "analysis.timeball.babip_by_count", "compiled": true, "compiled_code": "WITH players AS (\n    SELECT\n    s.pitcher_id as player_id,\n    s.count_balls,\n    s.count_strikes,\n    b.trajectory,\n    COUNT(*) as ab,\n    SUM(hits) as h,\n    h / ab AS avg\nFROM \"timeball\".\"main_models\".\"event_states_full\" s\nJOIN \"timeball\".\"main_models\".\"event_offense_stats\" o USING (event_key)\nJOIN \"timeball\".\"main_models\".\"calc_batted_ball_type\" b USING (event_key)\nWHERE balls_in_play = 1\n    AND sacrifice_hits = 0\n    AND season >= 1988\n    AND season NOT BETWEEN 2000 AND 2002\n    AND o.bunts = 0\n    AND count_balls + count_strikes IS NOT NULL\nGROUP BY 1, 2, 3, 4\n),\n\nodds AS (\n    SELECT\n        player_id,\n        count_balls,\n        count_strikes,\n        trajectory,\n        ab,\n        SUM(h) OVER w / SUM(ab) OVER w as avg_total,\n        avg - avg_total AS avg_diff,\n    FROM players\n    WINDOW w AS (PARTITION BY player_id, trajectory)\n),\n\nweighted AS (\n    SELECT\n        count_balls,\n        count_strikes,\n        trajectory,\n        SUM(ab) as ab,\n        SUM(avg_diff * ab) / SUM(ab) * 1000 as avg_diff\n    FROM odds\n    GROUP BY 1, 2, 3\n)\n\nSELECT * FROM weighted", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:54.409861Z", "completed_at": "2023-12-09T18:55:54.413265Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:54.413909Z", "completed_at": "2023-12-09T18:55:54.413912Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005398750305175781, "adapter_response": {}, "message": null, "failures": null, "unique_id": "analysis.timeball.calc_park_factor_hit_location", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n    WITH unique_park_seasons AS (\n        SELECT\n            park_id,\n            season,\n            home_league AS league\n        FROM \"timeball\".\"main_models\".\"game_start_info\"\n        WHERE game_type = 'RegularSeason'\n        GROUP BY 1, 2, 3\n        HAVING COUNT(*) > 25\n    ),\n\n    lines AS (\n        SELECT *\n        FROM \"timeball\".\"main_models\".\"event_offense_stats\"\n        WHERE batted_location_known = 1 AND hits = 1\n    ),\n\n    lines_agg AS (\n        SELECT\n            states.park_id,\n            states.season,\n            states.league,\n            states.batter_id,\n            states.pitcher_id,\n            ANY_VALUE(states.batter_hand) AS batter_hand,\n                SUM(lines.plate_appearances)::INT AS plate_appearances,\n                SUM(lines.batted_distance_plate)::INT AS batted_distance_plate,\n                SUM(lines.batted_distance_infield)::INT AS batted_distance_infield,\n                SUM(lines.batted_distance_outfield)::INT AS batted_distance_outfield,\n                SUM(lines.fielded_by_battery)::INT AS fielded_by_battery,\n                SUM(lines.fielded_by_infielder)::INT AS fielded_by_infielder,\n                SUM(lines.fielded_by_outfielder)::INT AS fielded_by_outfielder,\n                SUM(lines.batted_angle_left)::INT AS batted_angle_left,\n                SUM(lines.batted_angle_right)::INT AS batted_angle_right,\n                SUM(lines.batted_angle_middle)::INT AS batted_angle_middle,\n                SUM(lines.batted_location_left_field)::INT AS batted_location_left_field,\n                SUM(lines.batted_location_center_field)::INT AS batted_location_center_field,\n                SUM(lines.batted_location_right_field)::INT AS batted_location_right_field,\n        FROM \"timeball\".\"main_models\".\"event_states_full\" AS states\n        INNER JOIN lines USING (event_key)\n        -- Restrict to parks with decent sample\n        INNER JOIN unique_park_seasons USING (season, league, park_id)\n        WHERE states.game_type = 'RegularSeason'\n            AND NOT states.is_interleague\n            \n                AND states.batter_hand IN ('L', 'R')\n            \n        GROUP BY 1, 2, 3, 4, 5\n    ),\n\n    multi_year_range AS MATERIALIZED (\n        SELECT\n            la.park_id,\n            ups.season,\n            la.league,\n            la.batter_id,\n            la.pitcher_id,\n            batter_hand,\n                SUM(la.plate_appearances)::INT AS plate_appearances,\n                SUM(la.batted_distance_plate)::INT AS batted_distance_plate,\n                SUM(la.batted_distance_infield)::INT AS batted_distance_infield,\n                SUM(la.batted_distance_outfield)::INT AS batted_distance_outfield,\n                SUM(la.fielded_by_battery)::INT AS fielded_by_battery,\n                SUM(la.fielded_by_infielder)::INT AS fielded_by_infielder,\n                SUM(la.fielded_by_outfielder)::INT AS fielded_by_outfielder,\n                SUM(la.batted_angle_left)::INT AS batted_angle_left,\n                SUM(la.batted_angle_right)::INT AS batted_angle_right,\n                SUM(la.batted_angle_middle)::INT AS batted_angle_middle,\n                SUM(la.batted_location_left_field)::INT AS batted_location_left_field,\n                SUM(la.batted_location_center_field)::INT AS batted_location_center_field,\n                SUM(la.batted_location_right_field)::INT AS batted_location_right_field,\n        FROM lines_agg AS la\n        INNER JOIN unique_park_seasons AS ups\n            ON la.park_id = ups.park_id\n                AND la.league = ups.league\n                AND la.season BETWEEN ups.season - 2 AND ups.season\n        GROUP BY 1, 2, 3, 4, 5, 6\n    ),\n\n    averages AS MATERIALIZED (\n        SELECT\n            season,\n            league,\n            batter_hand,\n                SUM(batted_distance_plate) / SUM(plate_appearances) AS batted_distance_plate_rate,\n                SUM(batted_distance_infield) / SUM(plate_appearances) AS batted_distance_infield_rate,\n                SUM(batted_distance_outfield) / SUM(plate_appearances) AS batted_distance_outfield_rate,\n                SUM(fielded_by_battery) / SUM(plate_appearances) AS fielded_by_battery_rate,\n                SUM(fielded_by_infielder) / SUM(plate_appearances) AS fielded_by_infielder_rate,\n                SUM(fielded_by_outfielder) / SUM(plate_appearances) AS fielded_by_outfielder_rate,\n                SUM(batted_angle_left) / SUM(plate_appearances) AS batted_angle_left_rate,\n                SUM(batted_angle_right) / SUM(plate_appearances) AS batted_angle_right_rate,\n                SUM(batted_angle_middle) / SUM(plate_appearances) AS batted_angle_middle_rate,\n                SUM(batted_location_left_field) / SUM(plate_appearances) AS batted_location_left_field_rate,\n                SUM(batted_location_center_field) / SUM(plate_appearances) AS batted_location_center_field_rate,\n                SUM(batted_location_right_field) / SUM(plate_appearances) AS batted_location_right_field_rate,\n        FROM multi_year_range\n        GROUP BY 1, 2, 3\n    ),\n\n    -- Give each park pair a batter-pitcher matchup at the league average\n    -- with 1000 PA per park\n    with_priors AS (\n        SELECT *\n        FROM multi_year_range\n        UNION ALL BY NAME\n        SELECT\n            unique_park_seasons.park_id,\n            season,\n            league,\n            'MARK' AS batter_id,\n            'PRIOR' AS pitcher_id,\n            batter_hand,\n            1000 AS plate_appearances,\n                averages.batted_distance_plate_rate * 1000 AS batted_distance_plate,\n                averages.batted_distance_infield_rate * 1000 AS batted_distance_infield,\n                averages.batted_distance_outfield_rate * 1000 AS batted_distance_outfield,\n                averages.fielded_by_battery_rate * 1000 AS fielded_by_battery,\n                averages.fielded_by_infielder_rate * 1000 AS fielded_by_infielder,\n                averages.fielded_by_outfielder_rate * 1000 AS fielded_by_outfielder,\n                averages.batted_angle_left_rate * 1000 AS batted_angle_left,\n                averages.batted_angle_right_rate * 1000 AS batted_angle_right,\n                averages.batted_angle_middle_rate * 1000 AS batted_angle_middle,\n                averages.batted_location_left_field_rate * 1000 AS batted_location_left_field,\n                averages.batted_location_center_field_rate * 1000 AS batted_location_center_field,\n                averages.batted_location_right_field_rate * 1000 AS batted_location_right_field,\n        FROM averages\n        INNER JOIN unique_park_seasons USING (season, league)\n    ),\n\n    self_joined AS (\n        SELECT\n            this.park_id AS this_park_id,\n            other.park_id AS other_park_id,\n            this.season,\n            this.league,  \n            this.batter_id,\n            this.pitcher_id,\n            this.batter_hand,\n                this.plate_appearances AS this_plate_appearances,\n                other.plate_appearances AS other_plate_appearances,\n                this.batted_distance_plate AS this_batted_distance_plate,\n                other.batted_distance_plate AS other_batted_distance_plate,\n                this.batted_distance_infield AS this_batted_distance_infield,\n                other.batted_distance_infield AS other_batted_distance_infield,\n                this.batted_distance_outfield AS this_batted_distance_outfield,\n                other.batted_distance_outfield AS other_batted_distance_outfield,\n                this.fielded_by_battery AS this_fielded_by_battery,\n                other.fielded_by_battery AS other_fielded_by_battery,\n                this.fielded_by_infielder AS this_fielded_by_infielder,\n                other.fielded_by_infielder AS other_fielded_by_infielder,\n                this.fielded_by_outfielder AS this_fielded_by_outfielder,\n                other.fielded_by_outfielder AS other_fielded_by_outfielder,\n                this.batted_angle_left AS this_batted_angle_left,\n                other.batted_angle_left AS other_batted_angle_left,\n                this.batted_angle_right AS this_batted_angle_right,\n                other.batted_angle_right AS other_batted_angle_right,\n                this.batted_angle_middle AS this_batted_angle_middle,\n                other.batted_angle_middle AS other_batted_angle_middle,\n                this.batted_location_left_field AS this_batted_location_left_field,\n                other.batted_location_left_field AS other_batted_location_left_field,\n                this.batted_location_center_field AS this_batted_location_center_field,\n                other.batted_location_center_field AS other_batted_location_center_field,\n                this.batted_location_right_field AS this_batted_location_right_field,\n                other.batted_location_right_field AS other_batted_location_right_field,\n            SQRT(LEAST(this_plate_appearances, other_plate_appearances)) AS sample_size,\n            SUM(sample_size) OVER (PARTITION BY this.park_id, other.park_id, this.season, this.league) AS sum_sample_size,\n        FROM with_priors AS this\n        INNER JOIN with_priors AS other\n            ON this.park_id != other.park_id\n                AND this.season = other.season\n                AND this.batter_id = other.batter_id\n                AND this.pitcher_id = other.pitcher_id\n                \n                    AND this.batter_hand = other.batter_hand\n                \n    ),\n\n    rate_calculation AS (\n        SELECT\n            *,\n                this_batted_distance_plate / this_plate_appearances AS this_batted_distance_plate_rate,\n                other_batted_distance_plate / other_plate_appearances AS other_batted_distance_plate_rate,\n                this_batted_distance_infield / this_plate_appearances AS this_batted_distance_infield_rate,\n                other_batted_distance_infield / other_plate_appearances AS other_batted_distance_infield_rate,\n                this_batted_distance_outfield / this_plate_appearances AS this_batted_distance_outfield_rate,\n                other_batted_distance_outfield / other_plate_appearances AS other_batted_distance_outfield_rate,\n                this_fielded_by_battery / this_plate_appearances AS this_fielded_by_battery_rate,\n                other_fielded_by_battery / other_plate_appearances AS other_fielded_by_battery_rate,\n                this_fielded_by_infielder / this_plate_appearances AS this_fielded_by_infielder_rate,\n                other_fielded_by_infielder / other_plate_appearances AS other_fielded_by_infielder_rate,\n                this_fielded_by_outfielder / this_plate_appearances AS this_fielded_by_outfielder_rate,\n                other_fielded_by_outfielder / other_plate_appearances AS other_fielded_by_outfielder_rate,\n                this_batted_angle_left / this_plate_appearances AS this_batted_angle_left_rate,\n                other_batted_angle_left / other_plate_appearances AS other_batted_angle_left_rate,\n                this_batted_angle_right / this_plate_appearances AS this_batted_angle_right_rate,\n                other_batted_angle_right / other_plate_appearances AS other_batted_angle_right_rate,\n                this_batted_angle_middle / this_plate_appearances AS this_batted_angle_middle_rate,\n                other_batted_angle_middle / other_plate_appearances AS other_batted_angle_middle_rate,\n                this_batted_location_left_field / this_plate_appearances AS this_batted_location_left_field_rate,\n                other_batted_location_left_field / other_plate_appearances AS other_batted_location_left_field_rate,\n                this_batted_location_center_field / this_plate_appearances AS this_batted_location_center_field_rate,\n                other_batted_location_center_field / other_plate_appearances AS other_batted_location_center_field_rate,\n                this_batted_location_right_field / this_plate_appearances AS this_batted_location_right_field_rate,\n                other_batted_location_right_field / other_plate_appearances AS other_batted_location_right_field_rate,\n            -- Find the park pair with the highest sample size, and upweight all other pairs to match\n            MAX(sum_sample_size) OVER (PARTITION BY this_park_id, season, league) AS scaling_factor,\n            sample_size * (scaling_factor / sum_sample_size) AS sample_weight\n        FROM self_joined\n    ),\n\n    weighted_average AS (\n        SELECT\n            this_park_id AS park_id,\n            season,\n            league,\n            batter_hand,\n            SUM(sample_size) AS sqrt_sample_size,\n                SUM(this_batted_distance_plate_rate * sample_weight)\n                / SUM(sample_weight) AS avg_this_batted_distance_plate_rate,\n                SUM(other_batted_distance_plate_rate * sample_weight)\n                / SUM(sample_weight) AS avg_other_batted_distance_plate_rate,\n                avg_this_batted_distance_plate_rate\n                / (1 - avg_this_batted_distance_plate_rate) AS this_batted_distance_plate_odds,\n                avg_other_batted_distance_plate_rate\n                / (1 - avg_other_batted_distance_plate_rate) AS other_batted_distance_plate_odds,\n                this_batted_distance_plate_odds\n                / other_batted_distance_plate_odds AS batted_distance_plate_odds_park_factor,\n                avg_this_batted_distance_plate_rate / avg_other_batted_distance_plate_rate AS batted_distance_plate_rate_park_factor,\n                SUM(this_batted_distance_infield_rate * sample_weight)\n                / SUM(sample_weight) AS avg_this_batted_distance_infield_rate,\n                SUM(other_batted_distance_infield_rate * sample_weight)\n                / SUM(sample_weight) AS avg_other_batted_distance_infield_rate,\n                avg_this_batted_distance_infield_rate\n                / (1 - avg_this_batted_distance_infield_rate) AS this_batted_distance_infield_odds,\n                avg_other_batted_distance_infield_rate\n                / (1 - avg_other_batted_distance_infield_rate) AS other_batted_distance_infield_odds,\n                this_batted_distance_infield_odds\n                / other_batted_distance_infield_odds AS batted_distance_infield_odds_park_factor,\n                avg_this_batted_distance_infield_rate / avg_other_batted_distance_infield_rate AS batted_distance_infield_rate_park_factor,\n                SUM(this_batted_distance_outfield_rate * sample_weight)\n                / SUM(sample_weight) AS avg_this_batted_distance_outfield_rate,\n                SUM(other_batted_distance_outfield_rate * sample_weight)\n                / SUM(sample_weight) AS avg_other_batted_distance_outfield_rate,\n                avg_this_batted_distance_outfield_rate\n                / (1 - avg_this_batted_distance_outfield_rate) AS this_batted_distance_outfield_odds,\n                avg_other_batted_distance_outfield_rate\n                / (1 - avg_other_batted_distance_outfield_rate) AS other_batted_distance_outfield_odds,\n                this_batted_distance_outfield_odds\n                / other_batted_distance_outfield_odds AS batted_distance_outfield_odds_park_factor,\n                avg_this_batted_distance_outfield_rate / avg_other_batted_distance_outfield_rate AS batted_distance_outfield_rate_park_factor,\n                SUM(this_fielded_by_battery_rate * sample_weight)\n                / SUM(sample_weight) AS avg_this_fielded_by_battery_rate,\n                SUM(other_fielded_by_battery_rate * sample_weight)\n                / SUM(sample_weight) AS avg_other_fielded_by_battery_rate,\n                avg_this_fielded_by_battery_rate\n                / (1 - avg_this_fielded_by_battery_rate) AS this_fielded_by_battery_odds,\n                avg_other_fielded_by_battery_rate\n                / (1 - avg_other_fielded_by_battery_rate) AS other_fielded_by_battery_odds,\n                this_fielded_by_battery_odds\n                / other_fielded_by_battery_odds AS fielded_by_battery_odds_park_factor,\n                avg_this_fielded_by_battery_rate / avg_other_fielded_by_battery_rate AS fielded_by_battery_rate_park_factor,\n                SUM(this_fielded_by_infielder_rate * sample_weight)\n                / SUM(sample_weight) AS avg_this_fielded_by_infielder_rate,\n                SUM(other_fielded_by_infielder_rate * sample_weight)\n                / SUM(sample_weight) AS avg_other_fielded_by_infielder_rate,\n                avg_this_fielded_by_infielder_rate\n                / (1 - avg_this_fielded_by_infielder_rate) AS this_fielded_by_infielder_odds,\n                avg_other_fielded_by_infielder_rate\n                / (1 - avg_other_fielded_by_infielder_rate) AS other_fielded_by_infielder_odds,\n                this_fielded_by_infielder_odds\n                / other_fielded_by_infielder_odds AS fielded_by_infielder_odds_park_factor,\n                avg_this_fielded_by_infielder_rate / avg_other_fielded_by_infielder_rate AS fielded_by_infielder_rate_park_factor,\n                SUM(this_fielded_by_outfielder_rate * sample_weight)\n                / SUM(sample_weight) AS avg_this_fielded_by_outfielder_rate,\n                SUM(other_fielded_by_outfielder_rate * sample_weight)\n                / SUM(sample_weight) AS avg_other_fielded_by_outfielder_rate,\n                avg_this_fielded_by_outfielder_rate\n                / (1 - avg_this_fielded_by_outfielder_rate) AS this_fielded_by_outfielder_odds,\n                avg_other_fielded_by_outfielder_rate\n                / (1 - avg_other_fielded_by_outfielder_rate) AS other_fielded_by_outfielder_odds,\n                this_fielded_by_outfielder_odds\n                / other_fielded_by_outfielder_odds AS fielded_by_outfielder_odds_park_factor,\n                avg_this_fielded_by_outfielder_rate / avg_other_fielded_by_outfielder_rate AS fielded_by_outfielder_rate_park_factor,\n                SUM(this_batted_angle_left_rate * sample_weight)\n                / SUM(sample_weight) AS avg_this_batted_angle_left_rate,\n                SUM(other_batted_angle_left_rate * sample_weight)\n                / SUM(sample_weight) AS avg_other_batted_angle_left_rate,\n                avg_this_batted_angle_left_rate\n                / (1 - avg_this_batted_angle_left_rate) AS this_batted_angle_left_odds,\n                avg_other_batted_angle_left_rate\n                / (1 - avg_other_batted_angle_left_rate) AS other_batted_angle_left_odds,\n                this_batted_angle_left_odds\n                / other_batted_angle_left_odds AS batted_angle_left_odds_park_factor,\n                avg_this_batted_angle_left_rate / avg_other_batted_angle_left_rate AS batted_angle_left_rate_park_factor,\n                SUM(this_batted_angle_right_rate * sample_weight)\n                / SUM(sample_weight) AS avg_this_batted_angle_right_rate,\n                SUM(other_batted_angle_right_rate * sample_weight)\n                / SUM(sample_weight) AS avg_other_batted_angle_right_rate,\n                avg_this_batted_angle_right_rate\n                / (1 - avg_this_batted_angle_right_rate) AS this_batted_angle_right_odds,\n                avg_other_batted_angle_right_rate\n                / (1 - avg_other_batted_angle_right_rate) AS other_batted_angle_right_odds,\n                this_batted_angle_right_odds\n                / other_batted_angle_right_odds AS batted_angle_right_odds_park_factor,\n                avg_this_batted_angle_right_rate / avg_other_batted_angle_right_rate AS batted_angle_right_rate_park_factor,\n                SUM(this_batted_angle_middle_rate * sample_weight)\n                / SUM(sample_weight) AS avg_this_batted_angle_middle_rate,\n                SUM(other_batted_angle_middle_rate * sample_weight)\n                / SUM(sample_weight) AS avg_other_batted_angle_middle_rate,\n                avg_this_batted_angle_middle_rate\n                / (1 - avg_this_batted_angle_middle_rate) AS this_batted_angle_middle_odds,\n                avg_other_batted_angle_middle_rate\n                / (1 - avg_other_batted_angle_middle_rate) AS other_batted_angle_middle_odds,\n                this_batted_angle_middle_odds\n                / other_batted_angle_middle_odds AS batted_angle_middle_odds_park_factor,\n                avg_this_batted_angle_middle_rate / avg_other_batted_angle_middle_rate AS batted_angle_middle_rate_park_factor,\n                SUM(this_batted_location_left_field_rate * sample_weight)\n                / SUM(sample_weight) AS avg_this_batted_location_left_field_rate,\n                SUM(other_batted_location_left_field_rate * sample_weight)\n                / SUM(sample_weight) AS avg_other_batted_location_left_field_rate,\n                avg_this_batted_location_left_field_rate\n                / (1 - avg_this_batted_location_left_field_rate) AS this_batted_location_left_field_odds,\n                avg_other_batted_location_left_field_rate\n                / (1 - avg_other_batted_location_left_field_rate) AS other_batted_location_left_field_odds,\n                this_batted_location_left_field_odds\n                / other_batted_location_left_field_odds AS batted_location_left_field_odds_park_factor,\n                avg_this_batted_location_left_field_rate / avg_other_batted_location_left_field_rate AS batted_location_left_field_rate_park_factor,\n                SUM(this_batted_location_center_field_rate * sample_weight)\n                / SUM(sample_weight) AS avg_this_batted_location_center_field_rate,\n                SUM(other_batted_location_center_field_rate * sample_weight)\n                / SUM(sample_weight) AS avg_other_batted_location_center_field_rate,\n                avg_this_batted_location_center_field_rate\n                / (1 - avg_this_batted_location_center_field_rate) AS this_batted_location_center_field_odds,\n                avg_other_batted_location_center_field_rate\n                / (1 - avg_other_batted_location_center_field_rate) AS other_batted_location_center_field_odds,\n                this_batted_location_center_field_odds\n                / other_batted_location_center_field_odds AS batted_location_center_field_odds_park_factor,\n                avg_this_batted_location_center_field_rate / avg_other_batted_location_center_field_rate AS batted_location_center_field_rate_park_factor,\n                SUM(this_batted_location_right_field_rate * sample_weight)\n                / SUM(sample_weight) AS avg_this_batted_location_right_field_rate,\n                SUM(other_batted_location_right_field_rate * sample_weight)\n                / SUM(sample_weight) AS avg_other_batted_location_right_field_rate,\n                avg_this_batted_location_right_field_rate\n                / (1 - avg_this_batted_location_right_field_rate) AS this_batted_location_right_field_odds,\n                avg_other_batted_location_right_field_rate\n                / (1 - avg_other_batted_location_right_field_rate) AS other_batted_location_right_field_odds,\n                this_batted_location_right_field_odds\n                / other_batted_location_right_field_odds AS batted_location_right_field_odds_park_factor,\n                avg_this_batted_location_right_field_rate / avg_other_batted_location_right_field_rate AS batted_location_right_field_rate_park_factor,\n        FROM rate_calculation\n        GROUP BY 1, 2, 3, 4\n    ),\n\n    final AS (\n        SELECT\n            park_id,\n            season,\n            league,\n            batter_hand,\n            ROUND(sqrt_sample_size, 0) AS sqrt_sample_size,\n                \n                    ROUND(batted_distance_plate_odds_park_factor, 2) AS batted_distance_plate_park_factor,\n                \n                \n                    ROUND(batted_distance_infield_odds_park_factor, 2) AS batted_distance_infield_park_factor,\n                \n                \n                    ROUND(batted_distance_outfield_odds_park_factor, 2) AS batted_distance_outfield_park_factor,\n                \n                \n                    ROUND(fielded_by_battery_odds_park_factor, 2) AS fielded_by_battery_park_factor,\n                \n                \n                    ROUND(fielded_by_infielder_odds_park_factor, 2) AS fielded_by_infielder_park_factor,\n                \n                \n                    ROUND(fielded_by_outfielder_odds_park_factor, 2) AS fielded_by_outfielder_park_factor,\n                \n                \n                    ROUND(batted_angle_left_odds_park_factor, 2) AS batted_angle_left_park_factor,\n                \n                \n                    ROUND(batted_angle_right_odds_park_factor, 2) AS batted_angle_right_park_factor,\n                \n                \n                    ROUND(batted_angle_middle_odds_park_factor, 2) AS batted_angle_middle_park_factor,\n                \n                \n                    ROUND(batted_location_left_field_odds_park_factor, 2) AS batted_location_left_field_park_factor,\n                \n                \n                    ROUND(batted_location_center_field_odds_park_factor, 2) AS batted_location_center_field_park_factor,\n                \n                \n                    ROUND(batted_location_right_field_odds_park_factor, 2) AS batted_location_right_field_park_factor,\n                \n        FROM weighted_average\n    )\n\n    SELECT * FROM final\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:54.415978Z", "completed_at": "2023-12-09T18:55:54.419218Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:54.419866Z", "completed_at": "2023-12-09T18:55:54.419869Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005216121673583984, "adapter_response": {}, "message": null, "failures": null, "unique_id": "analysis.timeball.calc_park_factor_in_play", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n    WITH unique_park_seasons AS (\n        SELECT\n            park_id,\n            season,\n            home_league AS league\n        FROM \"timeball\".\"main_models\".\"game_start_info\"\n        WHERE game_type = 'RegularSeason'\n        GROUP BY 1, 2, 3\n        HAVING COUNT(*) > 25\n    ),\n\n    lines AS (\n        SELECT *\n        FROM \"timeball\".\"main_models\".\"event_offense_stats\"\n        WHERE balls_in_play = 1\n    ),\n\n    lines_agg AS (\n        SELECT\n            states.park_id,\n            states.season,\n            states.league,\n            states.batter_id,\n            states.pitcher_id,\n            ANY_VALUE(states.batter_hand) AS batter_hand,\n                SUM(lines.balls_in_play)::INT AS balls_in_play,\n                SUM(lines.hits)::INT AS hits,\n                SUM(lines.singles)::INT AS singles,\n                SUM(lines.doubles)::INT AS doubles,\n                SUM(lines.triples)::INT AS triples,\n                SUM(lines.reached_on_errors)::INT AS reached_on_errors,\n                SUM(lines.batting_outs)::INT AS batting_outs,\n        FROM \"timeball\".\"main_models\".\"event_states_full\" AS states\n        INNER JOIN lines USING (event_key)\n        -- Restrict to parks with decent sample\n        INNER JOIN unique_park_seasons USING (season, league, park_id)\n        WHERE states.game_type = 'RegularSeason'\n            AND NOT states.is_interleague\n            \n        GROUP BY 1, 2, 3, 4, 5\n    ),\n\n    multi_year_range AS MATERIALIZED (\n        SELECT\n            la.park_id,\n            ups.season,\n            la.league,\n            la.batter_id,\n            la.pitcher_id,\n            \n                SUM(la.balls_in_play)::INT AS balls_in_play,\n                SUM(la.hits)::INT AS hits,\n                SUM(la.singles)::INT AS singles,\n                SUM(la.doubles)::INT AS doubles,\n                SUM(la.triples)::INT AS triples,\n                SUM(la.reached_on_errors)::INT AS reached_on_errors,\n                SUM(la.batting_outs)::INT AS batting_outs,\n        FROM lines_agg AS la\n        INNER JOIN unique_park_seasons AS ups\n            ON la.park_id = ups.park_id\n                AND la.league = ups.league\n                AND la.season BETWEEN ups.season - 2 AND ups.season\n        GROUP BY 1, 2, 3, 4, 5\n    ),\n\n    averages AS MATERIALIZED (\n        SELECT\n            season,\n            league,\n            \n                SUM(hits) / SUM(balls_in_play) AS hits_rate,\n                SUM(singles) / SUM(balls_in_play) AS singles_rate,\n                SUM(doubles) / SUM(balls_in_play) AS doubles_rate,\n                SUM(triples) / SUM(balls_in_play) AS triples_rate,\n                SUM(reached_on_errors) / SUM(balls_in_play) AS reached_on_errors_rate,\n                SUM(batting_outs) / SUM(balls_in_play) AS batting_outs_rate,\n        FROM multi_year_range\n        GROUP BY 1, 2\n    ),\n\n    -- Give each park pair a batter-pitcher matchup at the league average\n    -- with 1000 PA per park\n    with_priors AS (\n        SELECT *\n        FROM multi_year_range\n        UNION ALL BY NAME\n        SELECT\n            unique_park_seasons.park_id,\n            season,\n            league,\n            'MARK' AS batter_id,\n            'PRIOR' AS pitcher_id,\n            \n            1000 AS balls_in_play,\n                averages.hits_rate * 1000 AS hits,\n                averages.singles_rate * 1000 AS singles,\n                averages.doubles_rate * 1000 AS doubles,\n                averages.triples_rate * 1000 AS triples,\n                averages.reached_on_errors_rate * 1000 AS reached_on_errors,\n                averages.batting_outs_rate * 1000 AS batting_outs,\n        FROM averages\n        INNER JOIN unique_park_seasons USING (season, league)\n    ),\n\n    self_joined AS (\n        SELECT\n            this.park_id AS this_park_id,\n            other.park_id AS other_park_id,\n            this.season,\n            this.league,  \n            this.batter_id,\n            this.pitcher_id,\n            \n                this.balls_in_play AS this_balls_in_play,\n                other.balls_in_play AS other_balls_in_play,\n                this.hits AS this_hits,\n                other.hits AS other_hits,\n                this.singles AS this_singles,\n                other.singles AS other_singles,\n                this.doubles AS this_doubles,\n                other.doubles AS other_doubles,\n                this.triples AS this_triples,\n                other.triples AS other_triples,\n                this.reached_on_errors AS this_reached_on_errors,\n                other.reached_on_errors AS other_reached_on_errors,\n                this.batting_outs AS this_batting_outs,\n                other.batting_outs AS other_batting_outs,\n            SQRT(LEAST(this_balls_in_play, other_balls_in_play)) AS sample_size,\n            SUM(sample_size) OVER (PARTITION BY this.park_id, other.park_id, this.season, this.league) AS sum_sample_size,\n        FROM with_priors AS this\n        INNER JOIN with_priors AS other\n            ON this.park_id != other.park_id\n                AND this.season = other.season\n                AND this.batter_id = other.batter_id\n                AND this.pitcher_id = other.pitcher_id\n                \n    ),\n\n    rate_calculation AS (\n        SELECT\n            *,\n                this_hits / this_balls_in_play AS this_hits_rate,\n                other_hits / other_balls_in_play AS other_hits_rate,\n                this_singles / this_balls_in_play AS this_singles_rate,\n                other_singles / other_balls_in_play AS other_singles_rate,\n                this_doubles / this_balls_in_play AS this_doubles_rate,\n                other_doubles / other_balls_in_play AS other_doubles_rate,\n                this_triples / this_balls_in_play AS this_triples_rate,\n                other_triples / other_balls_in_play AS other_triples_rate,\n                this_reached_on_errors / this_balls_in_play AS this_reached_on_errors_rate,\n                other_reached_on_errors / other_balls_in_play AS other_reached_on_errors_rate,\n                this_batting_outs / this_balls_in_play AS this_batting_outs_rate,\n                other_batting_outs / other_balls_in_play AS other_batting_outs_rate,\n            -- Find the park pair with the highest sample size, and upweight all other pairs to match\n            MAX(sum_sample_size) OVER (PARTITION BY this_park_id, season, league) AS scaling_factor,\n            sample_size * (scaling_factor / sum_sample_size) AS sample_weight\n        FROM self_joined\n    ),\n\n    weighted_average AS (\n        SELECT\n            this_park_id AS park_id,\n            season,\n            league,\n            \n            SUM(sample_size) AS sqrt_sample_size,\n                SUM(this_hits_rate * sample_weight)\n                / SUM(sample_weight) AS avg_this_hits_rate,\n                SUM(other_hits_rate * sample_weight)\n                / SUM(sample_weight) AS avg_other_hits_rate,\n                avg_this_hits_rate\n                / (1 - avg_this_hits_rate) AS this_hits_odds,\n                avg_other_hits_rate\n                / (1 - avg_other_hits_rate) AS other_hits_odds,\n                this_hits_odds\n                / other_hits_odds AS hits_odds_park_factor,\n                avg_this_hits_rate / avg_other_hits_rate AS hits_rate_park_factor,\n                SUM(this_singles_rate * sample_weight)\n                / SUM(sample_weight) AS avg_this_singles_rate,\n                SUM(other_singles_rate * sample_weight)\n                / SUM(sample_weight) AS avg_other_singles_rate,\n                avg_this_singles_rate\n                / (1 - avg_this_singles_rate) AS this_singles_odds,\n                avg_other_singles_rate\n                / (1 - avg_other_singles_rate) AS other_singles_odds,\n                this_singles_odds\n                / other_singles_odds AS singles_odds_park_factor,\n                avg_this_singles_rate / avg_other_singles_rate AS singles_rate_park_factor,\n                SUM(this_doubles_rate * sample_weight)\n                / SUM(sample_weight) AS avg_this_doubles_rate,\n                SUM(other_doubles_rate * sample_weight)\n                / SUM(sample_weight) AS avg_other_doubles_rate,\n                avg_this_doubles_rate\n                / (1 - avg_this_doubles_rate) AS this_doubles_odds,\n                avg_other_doubles_rate\n                / (1 - avg_other_doubles_rate) AS other_doubles_odds,\n                this_doubles_odds\n                / other_doubles_odds AS doubles_odds_park_factor,\n                avg_this_doubles_rate / avg_other_doubles_rate AS doubles_rate_park_factor,\n                SUM(this_triples_rate * sample_weight)\n                / SUM(sample_weight) AS avg_this_triples_rate,\n                SUM(other_triples_rate * sample_weight)\n                / SUM(sample_weight) AS avg_other_triples_rate,\n                avg_this_triples_rate\n                / (1 - avg_this_triples_rate) AS this_triples_odds,\n                avg_other_triples_rate\n                / (1 - avg_other_triples_rate) AS other_triples_odds,\n                this_triples_odds\n                / other_triples_odds AS triples_odds_park_factor,\n                avg_this_triples_rate / avg_other_triples_rate AS triples_rate_park_factor,\n                SUM(this_reached_on_errors_rate * sample_weight)\n                / SUM(sample_weight) AS avg_this_reached_on_errors_rate,\n                SUM(other_reached_on_errors_rate * sample_weight)\n                / SUM(sample_weight) AS avg_other_reached_on_errors_rate,\n                avg_this_reached_on_errors_rate\n                / (1 - avg_this_reached_on_errors_rate) AS this_reached_on_errors_odds,\n                avg_other_reached_on_errors_rate\n                / (1 - avg_other_reached_on_errors_rate) AS other_reached_on_errors_odds,\n                this_reached_on_errors_odds\n                / other_reached_on_errors_odds AS reached_on_errors_odds_park_factor,\n                avg_this_reached_on_errors_rate / avg_other_reached_on_errors_rate AS reached_on_errors_rate_park_factor,\n                SUM(this_batting_outs_rate * sample_weight)\n                / SUM(sample_weight) AS avg_this_batting_outs_rate,\n                SUM(other_batting_outs_rate * sample_weight)\n                / SUM(sample_weight) AS avg_other_batting_outs_rate,\n                avg_this_batting_outs_rate\n                / (1 - avg_this_batting_outs_rate) AS this_batting_outs_odds,\n                avg_other_batting_outs_rate\n                / (1 - avg_other_batting_outs_rate) AS other_batting_outs_odds,\n                this_batting_outs_odds\n                / other_batting_outs_odds AS batting_outs_odds_park_factor,\n                avg_this_batting_outs_rate / avg_other_batting_outs_rate AS batting_outs_rate_park_factor,\n        FROM rate_calculation\n        GROUP BY 1, 2, 3\n    ),\n\n    final AS (\n        SELECT\n            park_id,\n            season,\n            league,\n            \n            ROUND(sqrt_sample_size, 0) AS sqrt_sample_size,\n                \n                    ROUND(hits_odds_park_factor, 2) AS hits_park_factor,\n                \n                \n                    ROUND(singles_odds_park_factor, 2) AS singles_park_factor,\n                \n                \n                    ROUND(doubles_odds_park_factor, 2) AS doubles_park_factor,\n                \n                \n                    ROUND(triples_odds_park_factor, 2) AS triples_park_factor,\n                \n                \n                    ROUND(reached_on_errors_odds_park_factor, 2) AS reached_on_errors_park_factor,\n                \n                \n                    ROUND(batting_outs_odds_park_factor, 2) AS batting_outs_park_factor,\n                \n        FROM weighted_average\n    )\n\n    SELECT * FROM final\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:54.421932Z", "completed_at": "2023-12-09T18:55:54.426176Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:54.426823Z", "completed_at": "2023-12-09T18:55:54.426826Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006239175796508789, "adapter_response": {}, "message": null, "failures": null, "unique_id": "analysis.timeball.calc_park_factor_out_location", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n    WITH unique_park_seasons AS (\n        SELECT\n            park_id,\n            season,\n            home_league AS league\n        FROM \"timeball\".\"main_models\".\"game_start_info\"\n        WHERE game_type = 'RegularSeason'\n        GROUP BY 1, 2, 3\n        HAVING COUNT(*) > 25\n    ),\n\n    lines AS (\n        SELECT *\n        FROM \"timeball\".\"main_models\".\"event_offense_stats\"\n        WHERE batted_location_known = 1 AND batting_outs > 0\n    ),\n\n    lines_agg AS (\n        SELECT\n            states.park_id,\n            states.season,\n            states.league,\n            states.batter_id,\n            states.pitcher_id,\n            ANY_VALUE(states.batter_hand) AS batter_hand,\n                SUM(lines.plate_appearances)::INT AS plate_appearances,\n                SUM(lines.batted_distance_plate)::INT AS batted_distance_plate,\n                SUM(lines.batted_distance_infield)::INT AS batted_distance_infield,\n                SUM(lines.batted_distance_outfield)::INT AS batted_distance_outfield,\n                SUM(lines.fielded_by_battery)::INT AS fielded_by_battery,\n                SUM(lines.fielded_by_infielder)::INT AS fielded_by_infielder,\n                SUM(lines.fielded_by_outfielder)::INT AS fielded_by_outfielder,\n                SUM(lines.batted_angle_left)::INT AS batted_angle_left,\n                SUM(lines.batted_angle_right)::INT AS batted_angle_right,\n                SUM(lines.batted_angle_middle)::INT AS batted_angle_middle,\n                SUM(lines.batted_location_plate)::INT AS batted_location_plate,\n                SUM(lines.batted_location_right_infield)::INT AS batted_location_right_infield,\n                SUM(lines.batted_location_middle_infield)::INT AS batted_location_middle_infield,\n                SUM(lines.batted_location_left_infield)::INT AS batted_location_left_infield,\n                SUM(lines.batted_location_left_field)::INT AS batted_location_left_field,\n                SUM(lines.batted_location_center_field)::INT AS batted_location_center_field,\n                SUM(lines.batted_location_right_field)::INT AS batted_location_right_field,\n        FROM \"timeball\".\"main_models\".\"event_states_full\" AS states\n        INNER JOIN lines USING (event_key)\n        -- Restrict to parks with decent sample\n        INNER JOIN unique_park_seasons USING (season, league, park_id)\n        WHERE states.game_type = 'RegularSeason'\n            AND NOT states.is_interleague\n            \n                AND states.batter_hand IN ('L', 'R')\n            \n        GROUP BY 1, 2, 3, 4, 5\n    ),\n\n    multi_year_range AS MATERIALIZED (\n        SELECT\n            la.park_id,\n            ups.season,\n            la.league,\n            la.batter_id,\n            la.pitcher_id,\n            batter_hand,\n                SUM(la.plate_appearances)::INT AS plate_appearances,\n                SUM(la.batted_distance_plate)::INT AS batted_distance_plate,\n                SUM(la.batted_distance_infield)::INT AS batted_distance_infield,\n                SUM(la.batted_distance_outfield)::INT AS batted_distance_outfield,\n                SUM(la.fielded_by_battery)::INT AS fielded_by_battery,\n                SUM(la.fielded_by_infielder)::INT AS fielded_by_infielder,\n                SUM(la.fielded_by_outfielder)::INT AS fielded_by_outfielder,\n                SUM(la.batted_angle_left)::INT AS batted_angle_left,\n                SUM(la.batted_angle_right)::INT AS batted_angle_right,\n                SUM(la.batted_angle_middle)::INT AS batted_angle_middle,\n                SUM(la.batted_location_plate)::INT AS batted_location_plate,\n                SUM(la.batted_location_right_infield)::INT AS batted_location_right_infield,\n                SUM(la.batted_location_middle_infield)::INT AS batted_location_middle_infield,\n                SUM(la.batted_location_left_infield)::INT AS batted_location_left_infield,\n                SUM(la.batted_location_left_field)::INT AS batted_location_left_field,\n                SUM(la.batted_location_center_field)::INT AS batted_location_center_field,\n                SUM(la.batted_location_right_field)::INT AS batted_location_right_field,\n        FROM lines_agg AS la\n        INNER JOIN unique_park_seasons AS ups\n            ON la.park_id = ups.park_id\n                AND la.league = ups.league\n                AND la.season BETWEEN ups.season - 2 AND ups.season\n        GROUP BY 1, 2, 3, 4, 5, 6\n    ),\n\n    averages AS MATERIALIZED (\n        SELECT\n            season,\n            league,\n            batter_hand,\n                SUM(batted_distance_plate) / SUM(plate_appearances) AS batted_distance_plate_rate,\n                SUM(batted_distance_infield) / SUM(plate_appearances) AS batted_distance_infield_rate,\n                SUM(batted_distance_outfield) / SUM(plate_appearances) AS batted_distance_outfield_rate,\n                SUM(fielded_by_battery) / SUM(plate_appearances) AS fielded_by_battery_rate,\n                SUM(fielded_by_infielder) / SUM(plate_appearances) AS fielded_by_infielder_rate,\n                SUM(fielded_by_outfielder) / SUM(plate_appearances) AS fielded_by_outfielder_rate,\n                SUM(batted_angle_left) / SUM(plate_appearances) AS batted_angle_left_rate,\n                SUM(batted_angle_right) / SUM(plate_appearances) AS batted_angle_right_rate,\n                SUM(batted_angle_middle) / SUM(plate_appearances) AS batted_angle_middle_rate,\n                SUM(batted_location_plate) / SUM(plate_appearances) AS batted_location_plate_rate,\n                SUM(batted_location_right_infield) / SUM(plate_appearances) AS batted_location_right_infield_rate,\n                SUM(batted_location_middle_infield) / SUM(plate_appearances) AS batted_location_middle_infield_rate,\n                SUM(batted_location_left_infield) / SUM(plate_appearances) AS batted_location_left_infield_rate,\n                SUM(batted_location_left_field) / SUM(plate_appearances) AS batted_location_left_field_rate,\n                SUM(batted_location_center_field) / SUM(plate_appearances) AS batted_location_center_field_rate,\n                SUM(batted_location_right_field) / SUM(plate_appearances) AS batted_location_right_field_rate,\n        FROM multi_year_range\n        GROUP BY 1, 2, 3\n    ),\n\n    -- Give each park pair a batter-pitcher matchup at the league average\n    -- with 1000 PA per park\n    with_priors AS (\n        SELECT *\n        FROM multi_year_range\n        UNION ALL BY NAME\n        SELECT\n            unique_park_seasons.park_id,\n            season,\n            league,\n            'MARK' AS batter_id,\n            'PRIOR' AS pitcher_id,\n            batter_hand,\n            1000 AS plate_appearances,\n                averages.batted_distance_plate_rate * 1000 AS batted_distance_plate,\n                averages.batted_distance_infield_rate * 1000 AS batted_distance_infield,\n                averages.batted_distance_outfield_rate * 1000 AS batted_distance_outfield,\n                averages.fielded_by_battery_rate * 1000 AS fielded_by_battery,\n                averages.fielded_by_infielder_rate * 1000 AS fielded_by_infielder,\n                averages.fielded_by_outfielder_rate * 1000 AS fielded_by_outfielder,\n                averages.batted_angle_left_rate * 1000 AS batted_angle_left,\n                averages.batted_angle_right_rate * 1000 AS batted_angle_right,\n                averages.batted_angle_middle_rate * 1000 AS batted_angle_middle,\n                averages.batted_location_plate_rate * 1000 AS batted_location_plate,\n                averages.batted_location_right_infield_rate * 1000 AS batted_location_right_infield,\n                averages.batted_location_middle_infield_rate * 1000 AS batted_location_middle_infield,\n                averages.batted_location_left_infield_rate * 1000 AS batted_location_left_infield,\n                averages.batted_location_left_field_rate * 1000 AS batted_location_left_field,\n                averages.batted_location_center_field_rate * 1000 AS batted_location_center_field,\n                averages.batted_location_right_field_rate * 1000 AS batted_location_right_field,\n        FROM averages\n        INNER JOIN unique_park_seasons USING (season, league)\n    ),\n\n    self_joined AS (\n        SELECT\n            this.park_id AS this_park_id,\n            other.park_id AS other_park_id,\n            this.season,\n            this.league,  \n            this.batter_id,\n            this.pitcher_id,\n            this.batter_hand,\n                this.plate_appearances AS this_plate_appearances,\n                other.plate_appearances AS other_plate_appearances,\n                this.batted_distance_plate AS this_batted_distance_plate,\n                other.batted_distance_plate AS other_batted_distance_plate,\n                this.batted_distance_infield AS this_batted_distance_infield,\n                other.batted_distance_infield AS other_batted_distance_infield,\n                this.batted_distance_outfield AS this_batted_distance_outfield,\n                other.batted_distance_outfield AS other_batted_distance_outfield,\n                this.fielded_by_battery AS this_fielded_by_battery,\n                other.fielded_by_battery AS other_fielded_by_battery,\n                this.fielded_by_infielder AS this_fielded_by_infielder,\n                other.fielded_by_infielder AS other_fielded_by_infielder,\n                this.fielded_by_outfielder AS this_fielded_by_outfielder,\n                other.fielded_by_outfielder AS other_fielded_by_outfielder,\n                this.batted_angle_left AS this_batted_angle_left,\n                other.batted_angle_left AS other_batted_angle_left,\n                this.batted_angle_right AS this_batted_angle_right,\n                other.batted_angle_right AS other_batted_angle_right,\n                this.batted_angle_middle AS this_batted_angle_middle,\n                other.batted_angle_middle AS other_batted_angle_middle,\n                this.batted_location_plate AS this_batted_location_plate,\n                other.batted_location_plate AS other_batted_location_plate,\n                this.batted_location_right_infield AS this_batted_location_right_infield,\n                other.batted_location_right_infield AS other_batted_location_right_infield,\n                this.batted_location_middle_infield AS this_batted_location_middle_infield,\n                other.batted_location_middle_infield AS other_batted_location_middle_infield,\n                this.batted_location_left_infield AS this_batted_location_left_infield,\n                other.batted_location_left_infield AS other_batted_location_left_infield,\n                this.batted_location_left_field AS this_batted_location_left_field,\n                other.batted_location_left_field AS other_batted_location_left_field,\n                this.batted_location_center_field AS this_batted_location_center_field,\n                other.batted_location_center_field AS other_batted_location_center_field,\n                this.batted_location_right_field AS this_batted_location_right_field,\n                other.batted_location_right_field AS other_batted_location_right_field,\n            SQRT(LEAST(this_plate_appearances, other_plate_appearances)) AS sample_size,\n            SUM(sample_size) OVER (PARTITION BY this.park_id, other.park_id, this.season, this.league) AS sum_sample_size,\n        FROM with_priors AS this\n        INNER JOIN with_priors AS other\n            ON this.park_id != other.park_id\n                AND this.season = other.season\n                AND this.batter_id = other.batter_id\n                AND this.pitcher_id = other.pitcher_id\n                \n                    AND this.batter_hand = other.batter_hand\n                \n    ),\n\n    rate_calculation AS (\n        SELECT\n            *,\n                this_batted_distance_plate / this_plate_appearances AS this_batted_distance_plate_rate,\n                other_batted_distance_plate / other_plate_appearances AS other_batted_distance_plate_rate,\n                this_batted_distance_infield / this_plate_appearances AS this_batted_distance_infield_rate,\n                other_batted_distance_infield / other_plate_appearances AS other_batted_distance_infield_rate,\n                this_batted_distance_outfield / this_plate_appearances AS this_batted_distance_outfield_rate,\n                other_batted_distance_outfield / other_plate_appearances AS other_batted_distance_outfield_rate,\n                this_fielded_by_battery / this_plate_appearances AS this_fielded_by_battery_rate,\n                other_fielded_by_battery / other_plate_appearances AS other_fielded_by_battery_rate,\n                this_fielded_by_infielder / this_plate_appearances AS this_fielded_by_infielder_rate,\n                other_fielded_by_infielder / other_plate_appearances AS other_fielded_by_infielder_rate,\n                this_fielded_by_outfielder / this_plate_appearances AS this_fielded_by_outfielder_rate,\n                other_fielded_by_outfielder / other_plate_appearances AS other_fielded_by_outfielder_rate,\n                this_batted_angle_left / this_plate_appearances AS this_batted_angle_left_rate,\n                other_batted_angle_left / other_plate_appearances AS other_batted_angle_left_rate,\n                this_batted_angle_right / this_plate_appearances AS this_batted_angle_right_rate,\n                other_batted_angle_right / other_plate_appearances AS other_batted_angle_right_rate,\n                this_batted_angle_middle / this_plate_appearances AS this_batted_angle_middle_rate,\n                other_batted_angle_middle / other_plate_appearances AS other_batted_angle_middle_rate,\n                this_batted_location_plate / this_plate_appearances AS this_batted_location_plate_rate,\n                other_batted_location_plate / other_plate_appearances AS other_batted_location_plate_rate,\n                this_batted_location_right_infield / this_plate_appearances AS this_batted_location_right_infield_rate,\n                other_batted_location_right_infield / other_plate_appearances AS other_batted_location_right_infield_rate,\n                this_batted_location_middle_infield / this_plate_appearances AS this_batted_location_middle_infield_rate,\n                other_batted_location_middle_infield / other_plate_appearances AS other_batted_location_middle_infield_rate,\n                this_batted_location_left_infield / this_plate_appearances AS this_batted_location_left_infield_rate,\n                other_batted_location_left_infield / other_plate_appearances AS other_batted_location_left_infield_rate,\n                this_batted_location_left_field / this_plate_appearances AS this_batted_location_left_field_rate,\n                other_batted_location_left_field / other_plate_appearances AS other_batted_location_left_field_rate,\n                this_batted_location_center_field / this_plate_appearances AS this_batted_location_center_field_rate,\n                other_batted_location_center_field / other_plate_appearances AS other_batted_location_center_field_rate,\n                this_batted_location_right_field / this_plate_appearances AS this_batted_location_right_field_rate,\n                other_batted_location_right_field / other_plate_appearances AS other_batted_location_right_field_rate,\n            -- Find the park pair with the highest sample size, and upweight all other pairs to match\n            MAX(sum_sample_size) OVER (PARTITION BY this_park_id, season, league) AS scaling_factor,\n            sample_size * (scaling_factor / sum_sample_size) AS sample_weight\n        FROM self_joined\n    ),\n\n    weighted_average AS (\n        SELECT\n            this_park_id AS park_id,\n            season,\n            league,\n            batter_hand,\n            SUM(sample_size) AS sqrt_sample_size,\n                SUM(this_batted_distance_plate_rate * sample_weight)\n                / SUM(sample_weight) AS avg_this_batted_distance_plate_rate,\n                SUM(other_batted_distance_plate_rate * sample_weight)\n                / SUM(sample_weight) AS avg_other_batted_distance_plate_rate,\n                avg_this_batted_distance_plate_rate\n                / (1 - avg_this_batted_distance_plate_rate) AS this_batted_distance_plate_odds,\n                avg_other_batted_distance_plate_rate\n                / (1 - avg_other_batted_distance_plate_rate) AS other_batted_distance_plate_odds,\n                this_batted_distance_plate_odds\n                / other_batted_distance_plate_odds AS batted_distance_plate_odds_park_factor,\n                avg_this_batted_distance_plate_rate / avg_other_batted_distance_plate_rate AS batted_distance_plate_rate_park_factor,\n                SUM(this_batted_distance_infield_rate * sample_weight)\n                / SUM(sample_weight) AS avg_this_batted_distance_infield_rate,\n                SUM(other_batted_distance_infield_rate * sample_weight)\n                / SUM(sample_weight) AS avg_other_batted_distance_infield_rate,\n                avg_this_batted_distance_infield_rate\n                / (1 - avg_this_batted_distance_infield_rate) AS this_batted_distance_infield_odds,\n                avg_other_batted_distance_infield_rate\n                / (1 - avg_other_batted_distance_infield_rate) AS other_batted_distance_infield_odds,\n                this_batted_distance_infield_odds\n                / other_batted_distance_infield_odds AS batted_distance_infield_odds_park_factor,\n                avg_this_batted_distance_infield_rate / avg_other_batted_distance_infield_rate AS batted_distance_infield_rate_park_factor,\n                SUM(this_batted_distance_outfield_rate * sample_weight)\n                / SUM(sample_weight) AS avg_this_batted_distance_outfield_rate,\n                SUM(other_batted_distance_outfield_rate * sample_weight)\n                / SUM(sample_weight) AS avg_other_batted_distance_outfield_rate,\n                avg_this_batted_distance_outfield_rate\n                / (1 - avg_this_batted_distance_outfield_rate) AS this_batted_distance_outfield_odds,\n                avg_other_batted_distance_outfield_rate\n                / (1 - avg_other_batted_distance_outfield_rate) AS other_batted_distance_outfield_odds,\n                this_batted_distance_outfield_odds\n                / other_batted_distance_outfield_odds AS batted_distance_outfield_odds_park_factor,\n                avg_this_batted_distance_outfield_rate / avg_other_batted_distance_outfield_rate AS batted_distance_outfield_rate_park_factor,\n                SUM(this_fielded_by_battery_rate * sample_weight)\n                / SUM(sample_weight) AS avg_this_fielded_by_battery_rate,\n                SUM(other_fielded_by_battery_rate * sample_weight)\n                / SUM(sample_weight) AS avg_other_fielded_by_battery_rate,\n                avg_this_fielded_by_battery_rate\n                / (1 - avg_this_fielded_by_battery_rate) AS this_fielded_by_battery_odds,\n                avg_other_fielded_by_battery_rate\n                / (1 - avg_other_fielded_by_battery_rate) AS other_fielded_by_battery_odds,\n                this_fielded_by_battery_odds\n                / other_fielded_by_battery_odds AS fielded_by_battery_odds_park_factor,\n                avg_this_fielded_by_battery_rate / avg_other_fielded_by_battery_rate AS fielded_by_battery_rate_park_factor,\n                SUM(this_fielded_by_infielder_rate * sample_weight)\n                / SUM(sample_weight) AS avg_this_fielded_by_infielder_rate,\n                SUM(other_fielded_by_infielder_rate * sample_weight)\n                / SUM(sample_weight) AS avg_other_fielded_by_infielder_rate,\n                avg_this_fielded_by_infielder_rate\n                / (1 - avg_this_fielded_by_infielder_rate) AS this_fielded_by_infielder_odds,\n                avg_other_fielded_by_infielder_rate\n                / (1 - avg_other_fielded_by_infielder_rate) AS other_fielded_by_infielder_odds,\n                this_fielded_by_infielder_odds\n                / other_fielded_by_infielder_odds AS fielded_by_infielder_odds_park_factor,\n                avg_this_fielded_by_infielder_rate / avg_other_fielded_by_infielder_rate AS fielded_by_infielder_rate_park_factor,\n                SUM(this_fielded_by_outfielder_rate * sample_weight)\n                / SUM(sample_weight) AS avg_this_fielded_by_outfielder_rate,\n                SUM(other_fielded_by_outfielder_rate * sample_weight)\n                / SUM(sample_weight) AS avg_other_fielded_by_outfielder_rate,\n                avg_this_fielded_by_outfielder_rate\n                / (1 - avg_this_fielded_by_outfielder_rate) AS this_fielded_by_outfielder_odds,\n                avg_other_fielded_by_outfielder_rate\n                / (1 - avg_other_fielded_by_outfielder_rate) AS other_fielded_by_outfielder_odds,\n                this_fielded_by_outfielder_odds\n                / other_fielded_by_outfielder_odds AS fielded_by_outfielder_odds_park_factor,\n                avg_this_fielded_by_outfielder_rate / avg_other_fielded_by_outfielder_rate AS fielded_by_outfielder_rate_park_factor,\n                SUM(this_batted_angle_left_rate * sample_weight)\n                / SUM(sample_weight) AS avg_this_batted_angle_left_rate,\n                SUM(other_batted_angle_left_rate * sample_weight)\n                / SUM(sample_weight) AS avg_other_batted_angle_left_rate,\n                avg_this_batted_angle_left_rate\n                / (1 - avg_this_batted_angle_left_rate) AS this_batted_angle_left_odds,\n                avg_other_batted_angle_left_rate\n                / (1 - avg_other_batted_angle_left_rate) AS other_batted_angle_left_odds,\n                this_batted_angle_left_odds\n                / other_batted_angle_left_odds AS batted_angle_left_odds_park_factor,\n                avg_this_batted_angle_left_rate / avg_other_batted_angle_left_rate AS batted_angle_left_rate_park_factor,\n                SUM(this_batted_angle_right_rate * sample_weight)\n                / SUM(sample_weight) AS avg_this_batted_angle_right_rate,\n                SUM(other_batted_angle_right_rate * sample_weight)\n                / SUM(sample_weight) AS avg_other_batted_angle_right_rate,\n                avg_this_batted_angle_right_rate\n                / (1 - avg_this_batted_angle_right_rate) AS this_batted_angle_right_odds,\n                avg_other_batted_angle_right_rate\n                / (1 - avg_other_batted_angle_right_rate) AS other_batted_angle_right_odds,\n                this_batted_angle_right_odds\n                / other_batted_angle_right_odds AS batted_angle_right_odds_park_factor,\n                avg_this_batted_angle_right_rate / avg_other_batted_angle_right_rate AS batted_angle_right_rate_park_factor,\n                SUM(this_batted_angle_middle_rate * sample_weight)\n                / SUM(sample_weight) AS avg_this_batted_angle_middle_rate,\n                SUM(other_batted_angle_middle_rate * sample_weight)\n                / SUM(sample_weight) AS avg_other_batted_angle_middle_rate,\n                avg_this_batted_angle_middle_rate\n                / (1 - avg_this_batted_angle_middle_rate) AS this_batted_angle_middle_odds,\n                avg_other_batted_angle_middle_rate\n                / (1 - avg_other_batted_angle_middle_rate) AS other_batted_angle_middle_odds,\n                this_batted_angle_middle_odds\n                / other_batted_angle_middle_odds AS batted_angle_middle_odds_park_factor,\n                avg_this_batted_angle_middle_rate / avg_other_batted_angle_middle_rate AS batted_angle_middle_rate_park_factor,\n                SUM(this_batted_location_plate_rate * sample_weight)\n                / SUM(sample_weight) AS avg_this_batted_location_plate_rate,\n                SUM(other_batted_location_plate_rate * sample_weight)\n                / SUM(sample_weight) AS avg_other_batted_location_plate_rate,\n                avg_this_batted_location_plate_rate\n                / (1 - avg_this_batted_location_plate_rate) AS this_batted_location_plate_odds,\n                avg_other_batted_location_plate_rate\n                / (1 - avg_other_batted_location_plate_rate) AS other_batted_location_plate_odds,\n                this_batted_location_plate_odds\n                / other_batted_location_plate_odds AS batted_location_plate_odds_park_factor,\n                avg_this_batted_location_plate_rate / avg_other_batted_location_plate_rate AS batted_location_plate_rate_park_factor,\n                SUM(this_batted_location_right_infield_rate * sample_weight)\n                / SUM(sample_weight) AS avg_this_batted_location_right_infield_rate,\n                SUM(other_batted_location_right_infield_rate * sample_weight)\n                / SUM(sample_weight) AS avg_other_batted_location_right_infield_rate,\n                avg_this_batted_location_right_infield_rate\n                / (1 - avg_this_batted_location_right_infield_rate) AS this_batted_location_right_infield_odds,\n                avg_other_batted_location_right_infield_rate\n                / (1 - avg_other_batted_location_right_infield_rate) AS other_batted_location_right_infield_odds,\n                this_batted_location_right_infield_odds\n                / other_batted_location_right_infield_odds AS batted_location_right_infield_odds_park_factor,\n                avg_this_batted_location_right_infield_rate / avg_other_batted_location_right_infield_rate AS batted_location_right_infield_rate_park_factor,\n                SUM(this_batted_location_middle_infield_rate * sample_weight)\n                / SUM(sample_weight) AS avg_this_batted_location_middle_infield_rate,\n                SUM(other_batted_location_middle_infield_rate * sample_weight)\n                / SUM(sample_weight) AS avg_other_batted_location_middle_infield_rate,\n                avg_this_batted_location_middle_infield_rate\n                / (1 - avg_this_batted_location_middle_infield_rate) AS this_batted_location_middle_infield_odds,\n                avg_other_batted_location_middle_infield_rate\n                / (1 - avg_other_batted_location_middle_infield_rate) AS other_batted_location_middle_infield_odds,\n                this_batted_location_middle_infield_odds\n                / other_batted_location_middle_infield_odds AS batted_location_middle_infield_odds_park_factor,\n                avg_this_batted_location_middle_infield_rate / avg_other_batted_location_middle_infield_rate AS batted_location_middle_infield_rate_park_factor,\n                SUM(this_batted_location_left_infield_rate * sample_weight)\n                / SUM(sample_weight) AS avg_this_batted_location_left_infield_rate,\n                SUM(other_batted_location_left_infield_rate * sample_weight)\n                / SUM(sample_weight) AS avg_other_batted_location_left_infield_rate,\n                avg_this_batted_location_left_infield_rate\n                / (1 - avg_this_batted_location_left_infield_rate) AS this_batted_location_left_infield_odds,\n                avg_other_batted_location_left_infield_rate\n                / (1 - avg_other_batted_location_left_infield_rate) AS other_batted_location_left_infield_odds,\n                this_batted_location_left_infield_odds\n                / other_batted_location_left_infield_odds AS batted_location_left_infield_odds_park_factor,\n                avg_this_batted_location_left_infield_rate / avg_other_batted_location_left_infield_rate AS batted_location_left_infield_rate_park_factor,\n                SUM(this_batted_location_left_field_rate * sample_weight)\n                / SUM(sample_weight) AS avg_this_batted_location_left_field_rate,\n                SUM(other_batted_location_left_field_rate * sample_weight)\n                / SUM(sample_weight) AS avg_other_batted_location_left_field_rate,\n                avg_this_batted_location_left_field_rate\n                / (1 - avg_this_batted_location_left_field_rate) AS this_batted_location_left_field_odds,\n                avg_other_batted_location_left_field_rate\n                / (1 - avg_other_batted_location_left_field_rate) AS other_batted_location_left_field_odds,\n                this_batted_location_left_field_odds\n                / other_batted_location_left_field_odds AS batted_location_left_field_odds_park_factor,\n                avg_this_batted_location_left_field_rate / avg_other_batted_location_left_field_rate AS batted_location_left_field_rate_park_factor,\n                SUM(this_batted_location_center_field_rate * sample_weight)\n                / SUM(sample_weight) AS avg_this_batted_location_center_field_rate,\n                SUM(other_batted_location_center_field_rate * sample_weight)\n                / SUM(sample_weight) AS avg_other_batted_location_center_field_rate,\n                avg_this_batted_location_center_field_rate\n                / (1 - avg_this_batted_location_center_field_rate) AS this_batted_location_center_field_odds,\n                avg_other_batted_location_center_field_rate\n                / (1 - avg_other_batted_location_center_field_rate) AS other_batted_location_center_field_odds,\n                this_batted_location_center_field_odds\n                / other_batted_location_center_field_odds AS batted_location_center_field_odds_park_factor,\n                avg_this_batted_location_center_field_rate / avg_other_batted_location_center_field_rate AS batted_location_center_field_rate_park_factor,\n                SUM(this_batted_location_right_field_rate * sample_weight)\n                / SUM(sample_weight) AS avg_this_batted_location_right_field_rate,\n                SUM(other_batted_location_right_field_rate * sample_weight)\n                / SUM(sample_weight) AS avg_other_batted_location_right_field_rate,\n                avg_this_batted_location_right_field_rate\n                / (1 - avg_this_batted_location_right_field_rate) AS this_batted_location_right_field_odds,\n                avg_other_batted_location_right_field_rate\n                / (1 - avg_other_batted_location_right_field_rate) AS other_batted_location_right_field_odds,\n                this_batted_location_right_field_odds\n                / other_batted_location_right_field_odds AS batted_location_right_field_odds_park_factor,\n                avg_this_batted_location_right_field_rate / avg_other_batted_location_right_field_rate AS batted_location_right_field_rate_park_factor,\n        FROM rate_calculation\n        GROUP BY 1, 2, 3, 4\n    ),\n\n    final AS (\n        SELECT\n            park_id,\n            season,\n            league,\n            batter_hand,\n            ROUND(sqrt_sample_size, 0) AS sqrt_sample_size,\n                \n                    ROUND(batted_distance_plate_odds_park_factor, 2) AS batted_distance_plate_park_factor,\n                \n                \n                    ROUND(batted_distance_infield_odds_park_factor, 2) AS batted_distance_infield_park_factor,\n                \n                \n                    ROUND(batted_distance_outfield_odds_park_factor, 2) AS batted_distance_outfield_park_factor,\n                \n                \n                    ROUND(fielded_by_battery_odds_park_factor, 2) AS fielded_by_battery_park_factor,\n                \n                \n                    ROUND(fielded_by_infielder_odds_park_factor, 2) AS fielded_by_infielder_park_factor,\n                \n                \n                    ROUND(fielded_by_outfielder_odds_park_factor, 2) AS fielded_by_outfielder_park_factor,\n                \n                \n                    ROUND(batted_angle_left_odds_park_factor, 2) AS batted_angle_left_park_factor,\n                \n                \n                    ROUND(batted_angle_right_odds_park_factor, 2) AS batted_angle_right_park_factor,\n                \n                \n                    ROUND(batted_angle_middle_odds_park_factor, 2) AS batted_angle_middle_park_factor,\n                \n                \n                    ROUND(batted_location_plate_odds_park_factor, 2) AS batted_location_plate_park_factor,\n                \n                \n                    ROUND(batted_location_right_infield_odds_park_factor, 2) AS batted_location_right_infield_park_factor,\n                \n                \n                    ROUND(batted_location_middle_infield_odds_park_factor, 2) AS batted_location_middle_infield_park_factor,\n                \n                \n                    ROUND(batted_location_left_infield_odds_park_factor, 2) AS batted_location_left_infield_park_factor,\n                \n                \n                    ROUND(batted_location_left_field_odds_park_factor, 2) AS batted_location_left_field_park_factor,\n                \n                \n                    ROUND(batted_location_center_field_odds_park_factor, 2) AS batted_location_center_field_park_factor,\n                \n                \n                    ROUND(batted_location_right_field_odds_park_factor, 2) AS batted_location_right_field_park_factor,\n                \n        FROM weighted_average\n    )\n\n    SELECT * FROM final\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:54.428922Z", "completed_at": "2023-12-09T18:55:54.432198Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:54.432841Z", "completed_at": "2023-12-09T18:55:54.432845Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0052530765533447266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "analysis.timeball.calc_park_factor_outs", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n    WITH unique_park_seasons AS (\n        SELECT\n            park_id,\n            season,\n            home_league AS league\n        FROM \"timeball\".\"main_models\".\"game_start_info\"\n        WHERE game_type = 'RegularSeason'\n        GROUP BY 1, 2, 3\n        HAVING COUNT(*) > 25\n    ),\n\n    lines AS (\n        SELECT *\n        FROM \"timeball\".\"main_models\".\"event_offense_stats\"\n        WHERE 1=1\n    ),\n\n    lines_agg AS (\n        SELECT\n            states.park_id,\n            states.season,\n            states.league,\n            states.batter_id,\n            states.pitcher_id,\n            ANY_VALUE(states.batter_hand) AS batter_hand,\n                SUM(lines.batting_outs)::INT AS batting_outs,\n                SUM(lines.singles)::INT AS singles,\n                SUM(lines.doubles)::INT AS doubles,\n                SUM(lines.triples)::INT AS triples,\n                SUM(lines.home_runs)::INT AS home_runs,\n                SUM(lines.strikeouts)::INT AS strikeouts,\n                SUM(lines.reached_on_errors)::INT AS reached_on_errors,\n                SUM(lines.walks)::INT AS walks,\n                SUM(lines.plate_appearances)::INT AS plate_appearances,\n                SUM(lines.runs)::INT AS runs,\n                SUM(lines.balls_in_play)::INT AS balls_in_play,\n        FROM \"timeball\".\"main_models\".\"event_states_full\" AS states\n        INNER JOIN lines USING (event_key)\n        -- Restrict to parks with decent sample\n        INNER JOIN unique_park_seasons USING (season, league, park_id)\n        WHERE states.game_type = 'RegularSeason'\n            AND NOT states.is_interleague\n            \n        GROUP BY 1, 2, 3, 4, 5\n    ),\n\n    multi_year_range AS MATERIALIZED (\n        SELECT\n            la.park_id,\n            ups.season,\n            la.league,\n            la.batter_id,\n            la.pitcher_id,\n            \n                SUM(la.batting_outs)::INT AS batting_outs,\n                SUM(la.singles)::INT AS singles,\n                SUM(la.doubles)::INT AS doubles,\n                SUM(la.triples)::INT AS triples,\n                SUM(la.home_runs)::INT AS home_runs,\n                SUM(la.strikeouts)::INT AS strikeouts,\n                SUM(la.reached_on_errors)::INT AS reached_on_errors,\n                SUM(la.walks)::INT AS walks,\n                SUM(la.plate_appearances)::INT AS plate_appearances,\n                SUM(la.runs)::INT AS runs,\n                SUM(la.balls_in_play)::INT AS balls_in_play,\n        FROM lines_agg AS la\n        INNER JOIN unique_park_seasons AS ups\n            ON la.park_id = ups.park_id\n                AND la.league = ups.league\n                AND la.season BETWEEN ups.season - 2 AND ups.season\n        GROUP BY 1, 2, 3, 4, 5\n    ),\n\n    averages AS MATERIALIZED (\n        SELECT\n            season,\n            league,\n            \n                SUM(singles) / SUM(batting_outs) AS singles_rate,\n                SUM(doubles) / SUM(batting_outs) AS doubles_rate,\n                SUM(triples) / SUM(batting_outs) AS triples_rate,\n                SUM(home_runs) / SUM(batting_outs) AS home_runs_rate,\n                SUM(strikeouts) / SUM(batting_outs) AS strikeouts_rate,\n                SUM(reached_on_errors) / SUM(batting_outs) AS reached_on_errors_rate,\n                SUM(walks) / SUM(batting_outs) AS walks_rate,\n                SUM(plate_appearances) / SUM(batting_outs) AS plate_appearances_rate,\n                SUM(runs) / SUM(batting_outs) AS runs_rate,\n                SUM(balls_in_play) / SUM(batting_outs) AS balls_in_play_rate,\n        FROM multi_year_range\n        GROUP BY 1, 2\n    ),\n\n    -- Give each park pair a batter-pitcher matchup at the league average\n    -- with 1000 PA per park\n    with_priors AS (\n        SELECT *\n        FROM multi_year_range\n        UNION ALL BY NAME\n        SELECT\n            unique_park_seasons.park_id,\n            season,\n            league,\n            'MARK' AS batter_id,\n            'PRIOR' AS pitcher_id,\n            \n            1000 AS batting_outs,\n                averages.singles_rate * 1000 AS singles,\n                averages.doubles_rate * 1000 AS doubles,\n                averages.triples_rate * 1000 AS triples,\n                averages.home_runs_rate * 1000 AS home_runs,\n                averages.strikeouts_rate * 1000 AS strikeouts,\n                averages.reached_on_errors_rate * 1000 AS reached_on_errors,\n                averages.walks_rate * 1000 AS walks,\n                averages.plate_appearances_rate * 1000 AS plate_appearances,\n                averages.runs_rate * 1000 AS runs,\n                averages.balls_in_play_rate * 1000 AS balls_in_play,\n        FROM averages\n        INNER JOIN unique_park_seasons USING (season, league)\n    ),\n\n    self_joined AS (\n        SELECT\n            this.park_id AS this_park_id,\n            other.park_id AS other_park_id,\n            this.season,\n            this.league,  \n            this.batter_id,\n            this.pitcher_id,\n            \n                this.batting_outs AS this_batting_outs,\n                other.batting_outs AS other_batting_outs,\n                this.singles AS this_singles,\n                other.singles AS other_singles,\n                this.doubles AS this_doubles,\n                other.doubles AS other_doubles,\n                this.triples AS this_triples,\n                other.triples AS other_triples,\n                this.home_runs AS this_home_runs,\n                other.home_runs AS other_home_runs,\n                this.strikeouts AS this_strikeouts,\n                other.strikeouts AS other_strikeouts,\n                this.reached_on_errors AS this_reached_on_errors,\n                other.reached_on_errors AS other_reached_on_errors,\n                this.walks AS this_walks,\n                other.walks AS other_walks,\n                this.plate_appearances AS this_plate_appearances,\n                other.plate_appearances AS other_plate_appearances,\n                this.runs AS this_runs,\n                other.runs AS other_runs,\n                this.balls_in_play AS this_balls_in_play,\n                other.balls_in_play AS other_balls_in_play,\n            SQRT(LEAST(this_batting_outs, other_batting_outs)) AS sample_size,\n            SUM(sample_size) OVER (PARTITION BY this.park_id, other.park_id, this.season, this.league) AS sum_sample_size,\n        FROM with_priors AS this\n        INNER JOIN with_priors AS other\n            ON this.park_id != other.park_id\n                AND this.season = other.season\n                AND this.batter_id = other.batter_id\n                AND this.pitcher_id = other.pitcher_id\n                \n    ),\n\n    rate_calculation AS (\n        SELECT\n            *,\n                this_singles / this_batting_outs AS this_singles_rate,\n                other_singles / other_batting_outs AS other_singles_rate,\n                this_doubles / this_batting_outs AS this_doubles_rate,\n                other_doubles / other_batting_outs AS other_doubles_rate,\n                this_triples / this_batting_outs AS this_triples_rate,\n                other_triples / other_batting_outs AS other_triples_rate,\n                this_home_runs / this_batting_outs AS this_home_runs_rate,\n                other_home_runs / other_batting_outs AS other_home_runs_rate,\n                this_strikeouts / this_batting_outs AS this_strikeouts_rate,\n                other_strikeouts / other_batting_outs AS other_strikeouts_rate,\n                this_reached_on_errors / this_batting_outs AS this_reached_on_errors_rate,\n                other_reached_on_errors / other_batting_outs AS other_reached_on_errors_rate,\n                this_walks / this_batting_outs AS this_walks_rate,\n                other_walks / other_batting_outs AS other_walks_rate,\n                this_plate_appearances / this_batting_outs AS this_plate_appearances_rate,\n                other_plate_appearances / other_batting_outs AS other_plate_appearances_rate,\n                this_runs / this_batting_outs AS this_runs_rate,\n                other_runs / other_batting_outs AS other_runs_rate,\n                this_balls_in_play / this_batting_outs AS this_balls_in_play_rate,\n                other_balls_in_play / other_batting_outs AS other_balls_in_play_rate,\n            -- Find the park pair with the highest sample size, and upweight all other pairs to match\n            MAX(sum_sample_size) OVER (PARTITION BY this_park_id, season, league) AS scaling_factor,\n            sample_size * (scaling_factor / sum_sample_size) AS sample_weight\n        FROM self_joined\n    ),\n\n    weighted_average AS (\n        SELECT\n            this_park_id AS park_id,\n            season,\n            league,\n            \n            SUM(sample_size) AS sqrt_sample_size,\n                SUM(this_singles_rate * sample_weight)\n                / SUM(sample_weight) AS avg_this_singles_rate,\n                SUM(other_singles_rate * sample_weight)\n                / SUM(sample_weight) AS avg_other_singles_rate,\n                avg_this_singles_rate\n                / (1 - avg_this_singles_rate) AS this_singles_odds,\n                avg_other_singles_rate\n                / (1 - avg_other_singles_rate) AS other_singles_odds,\n                this_singles_odds\n                / other_singles_odds AS singles_odds_park_factor,\n                avg_this_singles_rate / avg_other_singles_rate AS singles_rate_park_factor,\n                SUM(this_doubles_rate * sample_weight)\n                / SUM(sample_weight) AS avg_this_doubles_rate,\n                SUM(other_doubles_rate * sample_weight)\n                / SUM(sample_weight) AS avg_other_doubles_rate,\n                avg_this_doubles_rate\n                / (1 - avg_this_doubles_rate) AS this_doubles_odds,\n                avg_other_doubles_rate\n                / (1 - avg_other_doubles_rate) AS other_doubles_odds,\n                this_doubles_odds\n                / other_doubles_odds AS doubles_odds_park_factor,\n                avg_this_doubles_rate / avg_other_doubles_rate AS doubles_rate_park_factor,\n                SUM(this_triples_rate * sample_weight)\n                / SUM(sample_weight) AS avg_this_triples_rate,\n                SUM(other_triples_rate * sample_weight)\n                / SUM(sample_weight) AS avg_other_triples_rate,\n                avg_this_triples_rate\n                / (1 - avg_this_triples_rate) AS this_triples_odds,\n                avg_other_triples_rate\n                / (1 - avg_other_triples_rate) AS other_triples_odds,\n                this_triples_odds\n                / other_triples_odds AS triples_odds_park_factor,\n                avg_this_triples_rate / avg_other_triples_rate AS triples_rate_park_factor,\n                SUM(this_home_runs_rate * sample_weight)\n                / SUM(sample_weight) AS avg_this_home_runs_rate,\n                SUM(other_home_runs_rate * sample_weight)\n                / SUM(sample_weight) AS avg_other_home_runs_rate,\n                avg_this_home_runs_rate\n                / (1 - avg_this_home_runs_rate) AS this_home_runs_odds,\n                avg_other_home_runs_rate\n                / (1 - avg_other_home_runs_rate) AS other_home_runs_odds,\n                this_home_runs_odds\n                / other_home_runs_odds AS home_runs_odds_park_factor,\n                avg_this_home_runs_rate / avg_other_home_runs_rate AS home_runs_rate_park_factor,\n                SUM(this_strikeouts_rate * sample_weight)\n                / SUM(sample_weight) AS avg_this_strikeouts_rate,\n                SUM(other_strikeouts_rate * sample_weight)\n                / SUM(sample_weight) AS avg_other_strikeouts_rate,\n                avg_this_strikeouts_rate\n                / (1 - avg_this_strikeouts_rate) AS this_strikeouts_odds,\n                avg_other_strikeouts_rate\n                / (1 - avg_other_strikeouts_rate) AS other_strikeouts_odds,\n                this_strikeouts_odds\n                / other_strikeouts_odds AS strikeouts_odds_park_factor,\n                avg_this_strikeouts_rate / avg_other_strikeouts_rate AS strikeouts_rate_park_factor,\n                SUM(this_reached_on_errors_rate * sample_weight)\n                / SUM(sample_weight) AS avg_this_reached_on_errors_rate,\n                SUM(other_reached_on_errors_rate * sample_weight)\n                / SUM(sample_weight) AS avg_other_reached_on_errors_rate,\n                avg_this_reached_on_errors_rate\n                / (1 - avg_this_reached_on_errors_rate) AS this_reached_on_errors_odds,\n                avg_other_reached_on_errors_rate\n                / (1 - avg_other_reached_on_errors_rate) AS other_reached_on_errors_odds,\n                this_reached_on_errors_odds\n                / other_reached_on_errors_odds AS reached_on_errors_odds_park_factor,\n                avg_this_reached_on_errors_rate / avg_other_reached_on_errors_rate AS reached_on_errors_rate_park_factor,\n                SUM(this_walks_rate * sample_weight)\n                / SUM(sample_weight) AS avg_this_walks_rate,\n                SUM(other_walks_rate * sample_weight)\n                / SUM(sample_weight) AS avg_other_walks_rate,\n                avg_this_walks_rate\n                / (1 - avg_this_walks_rate) AS this_walks_odds,\n                avg_other_walks_rate\n                / (1 - avg_other_walks_rate) AS other_walks_odds,\n                this_walks_odds\n                / other_walks_odds AS walks_odds_park_factor,\n                avg_this_walks_rate / avg_other_walks_rate AS walks_rate_park_factor,\n                SUM(this_plate_appearances_rate * sample_weight)\n                / SUM(sample_weight) AS avg_this_plate_appearances_rate,\n                SUM(other_plate_appearances_rate * sample_weight)\n                / SUM(sample_weight) AS avg_other_plate_appearances_rate,\n                avg_this_plate_appearances_rate\n                / (1 - avg_this_plate_appearances_rate) AS this_plate_appearances_odds,\n                avg_other_plate_appearances_rate\n                / (1 - avg_other_plate_appearances_rate) AS other_plate_appearances_odds,\n                this_plate_appearances_odds\n                / other_plate_appearances_odds AS plate_appearances_odds_park_factor,\n                avg_this_plate_appearances_rate / avg_other_plate_appearances_rate AS plate_appearances_rate_park_factor,\n                SUM(this_runs_rate * sample_weight)\n                / SUM(sample_weight) AS avg_this_runs_rate,\n                SUM(other_runs_rate * sample_weight)\n                / SUM(sample_weight) AS avg_other_runs_rate,\n                avg_this_runs_rate\n                / (1 - avg_this_runs_rate) AS this_runs_odds,\n                avg_other_runs_rate\n                / (1 - avg_other_runs_rate) AS other_runs_odds,\n                this_runs_odds\n                / other_runs_odds AS runs_odds_park_factor,\n                avg_this_runs_rate / avg_other_runs_rate AS runs_rate_park_factor,\n                SUM(this_balls_in_play_rate * sample_weight)\n                / SUM(sample_weight) AS avg_this_balls_in_play_rate,\n                SUM(other_balls_in_play_rate * sample_weight)\n                / SUM(sample_weight) AS avg_other_balls_in_play_rate,\n                avg_this_balls_in_play_rate\n                / (1 - avg_this_balls_in_play_rate) AS this_balls_in_play_odds,\n                avg_other_balls_in_play_rate\n                / (1 - avg_other_balls_in_play_rate) AS other_balls_in_play_odds,\n                this_balls_in_play_odds\n                / other_balls_in_play_odds AS balls_in_play_odds_park_factor,\n                avg_this_balls_in_play_rate / avg_other_balls_in_play_rate AS balls_in_play_rate_park_factor,\n        FROM rate_calculation\n        GROUP BY 1, 2, 3\n    ),\n\n    final AS (\n        SELECT\n            park_id,\n            season,\n            league,\n            \n            ROUND(sqrt_sample_size, 0) AS sqrt_sample_size,\n                \n                    ROUND(singles_rate_park_factor, 2) AS singles_park_factor,\n                \n                \n                    ROUND(doubles_rate_park_factor, 2) AS doubles_park_factor,\n                \n                \n                    ROUND(triples_rate_park_factor, 2) AS triples_park_factor,\n                \n                \n                    ROUND(home_runs_rate_park_factor, 2) AS home_runs_park_factor,\n                \n                \n                    ROUND(strikeouts_rate_park_factor, 2) AS strikeouts_park_factor,\n                \n                \n                    ROUND(reached_on_errors_rate_park_factor, 2) AS reached_on_errors_park_factor,\n                \n                \n                    ROUND(walks_rate_park_factor, 2) AS walks_park_factor,\n                \n                \n                    ROUND(plate_appearances_rate_park_factor, 2) AS plate_appearances_park_factor,\n                \n                \n                    ROUND(runs_rate_park_factor, 2) AS runs_park_factor,\n                \n                \n                    ROUND(balls_in_play_rate_park_factor, 2) AS balls_in_play_park_factor,\n                \n        FROM weighted_average\n    )\n\n    SELECT * FROM final\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:54.434913Z", "completed_at": "2023-12-09T18:55:54.438084Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:54.438728Z", "completed_at": "2023-12-09T18:55:54.438732Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00516200065612793, "adapter_response": {}, "message": null, "failures": null, "unique_id": "analysis.timeball.calc_park_factor_plate_appearances", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n    WITH unique_park_seasons AS (\n        SELECT\n            park_id,\n            season,\n            home_league AS league\n        FROM \"timeball\".\"main_models\".\"game_start_info\"\n        WHERE game_type = 'RegularSeason'\n        GROUP BY 1, 2, 3\n        HAVING COUNT(*) > 25\n    ),\n\n    lines AS (\n        SELECT *\n        FROM \"timeball\".\"main_models\".\"event_offense_stats\"\n        WHERE 1=1\n    ),\n\n    lines_agg AS (\n        SELECT\n            states.park_id,\n            states.season,\n            states.league,\n            states.batter_id,\n            states.pitcher_id,\n            ANY_VALUE(states.batter_hand) AS batter_hand,\n                SUM(lines.plate_appearances)::INT AS plate_appearances,\n                SUM(lines.singles)::INT AS singles,\n                SUM(lines.doubles)::INT AS doubles,\n                SUM(lines.triples)::INT AS triples,\n                SUM(lines.home_runs)::INT AS home_runs,\n                SUM(lines.strikeouts)::INT AS strikeouts,\n                SUM(lines.reached_on_errors)::INT AS reached_on_errors,\n                SUM(lines.walks)::INT AS walks,\n                SUM(lines.batting_outs)::INT AS batting_outs,\n                SUM(lines.runs)::INT AS runs,\n                SUM(lines.balls_in_play)::INT AS balls_in_play,\n        FROM \"timeball\".\"main_models\".\"event_states_full\" AS states\n        INNER JOIN lines USING (event_key)\n        -- Restrict to parks with decent sample\n        INNER JOIN unique_park_seasons USING (season, league, park_id)\n        WHERE states.game_type = 'RegularSeason'\n            AND NOT states.is_interleague\n            \n        GROUP BY 1, 2, 3, 4, 5\n    ),\n\n    multi_year_range AS MATERIALIZED (\n        SELECT\n            la.park_id,\n            ups.season,\n            la.league,\n            la.batter_id,\n            la.pitcher_id,\n            \n                SUM(la.plate_appearances)::INT AS plate_appearances,\n                SUM(la.singles)::INT AS singles,\n                SUM(la.doubles)::INT AS doubles,\n                SUM(la.triples)::INT AS triples,\n                SUM(la.home_runs)::INT AS home_runs,\n                SUM(la.strikeouts)::INT AS strikeouts,\n                SUM(la.reached_on_errors)::INT AS reached_on_errors,\n                SUM(la.walks)::INT AS walks,\n                SUM(la.batting_outs)::INT AS batting_outs,\n                SUM(la.runs)::INT AS runs,\n                SUM(la.balls_in_play)::INT AS balls_in_play,\n        FROM lines_agg AS la\n        INNER JOIN unique_park_seasons AS ups\n            ON la.park_id = ups.park_id\n                AND la.league = ups.league\n                AND la.season BETWEEN ups.season - 2 AND ups.season\n        GROUP BY 1, 2, 3, 4, 5\n    ),\n\n    averages AS MATERIALIZED (\n        SELECT\n            season,\n            league,\n            \n                SUM(singles) / SUM(plate_appearances) AS singles_rate,\n                SUM(doubles) / SUM(plate_appearances) AS doubles_rate,\n                SUM(triples) / SUM(plate_appearances) AS triples_rate,\n                SUM(home_runs) / SUM(plate_appearances) AS home_runs_rate,\n                SUM(strikeouts) / SUM(plate_appearances) AS strikeouts_rate,\n                SUM(reached_on_errors) / SUM(plate_appearances) AS reached_on_errors_rate,\n                SUM(walks) / SUM(plate_appearances) AS walks_rate,\n                SUM(batting_outs) / SUM(plate_appearances) AS batting_outs_rate,\n                SUM(runs) / SUM(plate_appearances) AS runs_rate,\n                SUM(balls_in_play) / SUM(plate_appearances) AS balls_in_play_rate,\n        FROM multi_year_range\n        GROUP BY 1, 2\n    ),\n\n    -- Give each park pair a batter-pitcher matchup at the league average\n    -- with 1000 PA per park\n    with_priors AS (\n        SELECT *\n        FROM multi_year_range\n        UNION ALL BY NAME\n        SELECT\n            unique_park_seasons.park_id,\n            season,\n            league,\n            'MARK' AS batter_id,\n            'PRIOR' AS pitcher_id,\n            \n            1000 AS plate_appearances,\n                averages.singles_rate * 1000 AS singles,\n                averages.doubles_rate * 1000 AS doubles,\n                averages.triples_rate * 1000 AS triples,\n                averages.home_runs_rate * 1000 AS home_runs,\n                averages.strikeouts_rate * 1000 AS strikeouts,\n                averages.reached_on_errors_rate * 1000 AS reached_on_errors,\n                averages.walks_rate * 1000 AS walks,\n                averages.batting_outs_rate * 1000 AS batting_outs,\n                averages.runs_rate * 1000 AS runs,\n                averages.balls_in_play_rate * 1000 AS balls_in_play,\n        FROM averages\n        INNER JOIN unique_park_seasons USING (season, league)\n    ),\n\n    self_joined AS (\n        SELECT\n            this.park_id AS this_park_id,\n            other.park_id AS other_park_id,\n            this.season,\n            this.league,  \n            this.batter_id,\n            this.pitcher_id,\n            \n                this.plate_appearances AS this_plate_appearances,\n                other.plate_appearances AS other_plate_appearances,\n                this.singles AS this_singles,\n                other.singles AS other_singles,\n                this.doubles AS this_doubles,\n                other.doubles AS other_doubles,\n                this.triples AS this_triples,\n                other.triples AS other_triples,\n                this.home_runs AS this_home_runs,\n                other.home_runs AS other_home_runs,\n                this.strikeouts AS this_strikeouts,\n                other.strikeouts AS other_strikeouts,\n                this.reached_on_errors AS this_reached_on_errors,\n                other.reached_on_errors AS other_reached_on_errors,\n                this.walks AS this_walks,\n                other.walks AS other_walks,\n                this.batting_outs AS this_batting_outs,\n                other.batting_outs AS other_batting_outs,\n                this.runs AS this_runs,\n                other.runs AS other_runs,\n                this.balls_in_play AS this_balls_in_play,\n                other.balls_in_play AS other_balls_in_play,\n            SQRT(LEAST(this_plate_appearances, other_plate_appearances)) AS sample_size,\n            SUM(sample_size) OVER (PARTITION BY this.park_id, other.park_id, this.season, this.league) AS sum_sample_size,\n        FROM with_priors AS this\n        INNER JOIN with_priors AS other\n            ON this.park_id != other.park_id\n                AND this.season = other.season\n                AND this.batter_id = other.batter_id\n                AND this.pitcher_id = other.pitcher_id\n                \n    ),\n\n    rate_calculation AS (\n        SELECT\n            *,\n                this_singles / this_plate_appearances AS this_singles_rate,\n                other_singles / other_plate_appearances AS other_singles_rate,\n                this_doubles / this_plate_appearances AS this_doubles_rate,\n                other_doubles / other_plate_appearances AS other_doubles_rate,\n                this_triples / this_plate_appearances AS this_triples_rate,\n                other_triples / other_plate_appearances AS other_triples_rate,\n                this_home_runs / this_plate_appearances AS this_home_runs_rate,\n                other_home_runs / other_plate_appearances AS other_home_runs_rate,\n                this_strikeouts / this_plate_appearances AS this_strikeouts_rate,\n                other_strikeouts / other_plate_appearances AS other_strikeouts_rate,\n                this_reached_on_errors / this_plate_appearances AS this_reached_on_errors_rate,\n                other_reached_on_errors / other_plate_appearances AS other_reached_on_errors_rate,\n                this_walks / this_plate_appearances AS this_walks_rate,\n                other_walks / other_plate_appearances AS other_walks_rate,\n                this_batting_outs / this_plate_appearances AS this_batting_outs_rate,\n                other_batting_outs / other_plate_appearances AS other_batting_outs_rate,\n                this_runs / this_plate_appearances AS this_runs_rate,\n                other_runs / other_plate_appearances AS other_runs_rate,\n                this_balls_in_play / this_plate_appearances AS this_balls_in_play_rate,\n                other_balls_in_play / other_plate_appearances AS other_balls_in_play_rate,\n            -- Find the park pair with the highest sample size, and upweight all other pairs to match\n            MAX(sum_sample_size) OVER (PARTITION BY this_park_id, season, league) AS scaling_factor,\n            sample_size * (scaling_factor / sum_sample_size) AS sample_weight\n        FROM self_joined\n    ),\n\n    weighted_average AS (\n        SELECT\n            this_park_id AS park_id,\n            season,\n            league,\n            \n            SUM(sample_size) AS sqrt_sample_size,\n                SUM(this_singles_rate * sample_weight)\n                / SUM(sample_weight) AS avg_this_singles_rate,\n                SUM(other_singles_rate * sample_weight)\n                / SUM(sample_weight) AS avg_other_singles_rate,\n                avg_this_singles_rate\n                / (1 - avg_this_singles_rate) AS this_singles_odds,\n                avg_other_singles_rate\n                / (1 - avg_other_singles_rate) AS other_singles_odds,\n                this_singles_odds\n                / other_singles_odds AS singles_odds_park_factor,\n                avg_this_singles_rate / avg_other_singles_rate AS singles_rate_park_factor,\n                SUM(this_doubles_rate * sample_weight)\n                / SUM(sample_weight) AS avg_this_doubles_rate,\n                SUM(other_doubles_rate * sample_weight)\n                / SUM(sample_weight) AS avg_other_doubles_rate,\n                avg_this_doubles_rate\n                / (1 - avg_this_doubles_rate) AS this_doubles_odds,\n                avg_other_doubles_rate\n                / (1 - avg_other_doubles_rate) AS other_doubles_odds,\n                this_doubles_odds\n                / other_doubles_odds AS doubles_odds_park_factor,\n                avg_this_doubles_rate / avg_other_doubles_rate AS doubles_rate_park_factor,\n                SUM(this_triples_rate * sample_weight)\n                / SUM(sample_weight) AS avg_this_triples_rate,\n                SUM(other_triples_rate * sample_weight)\n                / SUM(sample_weight) AS avg_other_triples_rate,\n                avg_this_triples_rate\n                / (1 - avg_this_triples_rate) AS this_triples_odds,\n                avg_other_triples_rate\n                / (1 - avg_other_triples_rate) AS other_triples_odds,\n                this_triples_odds\n                / other_triples_odds AS triples_odds_park_factor,\n                avg_this_triples_rate / avg_other_triples_rate AS triples_rate_park_factor,\n                SUM(this_home_runs_rate * sample_weight)\n                / SUM(sample_weight) AS avg_this_home_runs_rate,\n                SUM(other_home_runs_rate * sample_weight)\n                / SUM(sample_weight) AS avg_other_home_runs_rate,\n                avg_this_home_runs_rate\n                / (1 - avg_this_home_runs_rate) AS this_home_runs_odds,\n                avg_other_home_runs_rate\n                / (1 - avg_other_home_runs_rate) AS other_home_runs_odds,\n                this_home_runs_odds\n                / other_home_runs_odds AS home_runs_odds_park_factor,\n                avg_this_home_runs_rate / avg_other_home_runs_rate AS home_runs_rate_park_factor,\n                SUM(this_strikeouts_rate * sample_weight)\n                / SUM(sample_weight) AS avg_this_strikeouts_rate,\n                SUM(other_strikeouts_rate * sample_weight)\n                / SUM(sample_weight) AS avg_other_strikeouts_rate,\n                avg_this_strikeouts_rate\n                / (1 - avg_this_strikeouts_rate) AS this_strikeouts_odds,\n                avg_other_strikeouts_rate\n                / (1 - avg_other_strikeouts_rate) AS other_strikeouts_odds,\n                this_strikeouts_odds\n                / other_strikeouts_odds AS strikeouts_odds_park_factor,\n                avg_this_strikeouts_rate / avg_other_strikeouts_rate AS strikeouts_rate_park_factor,\n                SUM(this_reached_on_errors_rate * sample_weight)\n                / SUM(sample_weight) AS avg_this_reached_on_errors_rate,\n                SUM(other_reached_on_errors_rate * sample_weight)\n                / SUM(sample_weight) AS avg_other_reached_on_errors_rate,\n                avg_this_reached_on_errors_rate\n                / (1 - avg_this_reached_on_errors_rate) AS this_reached_on_errors_odds,\n                avg_other_reached_on_errors_rate\n                / (1 - avg_other_reached_on_errors_rate) AS other_reached_on_errors_odds,\n                this_reached_on_errors_odds\n                / other_reached_on_errors_odds AS reached_on_errors_odds_park_factor,\n                avg_this_reached_on_errors_rate / avg_other_reached_on_errors_rate AS reached_on_errors_rate_park_factor,\n                SUM(this_walks_rate * sample_weight)\n                / SUM(sample_weight) AS avg_this_walks_rate,\n                SUM(other_walks_rate * sample_weight)\n                / SUM(sample_weight) AS avg_other_walks_rate,\n                avg_this_walks_rate\n                / (1 - avg_this_walks_rate) AS this_walks_odds,\n                avg_other_walks_rate\n                / (1 - avg_other_walks_rate) AS other_walks_odds,\n                this_walks_odds\n                / other_walks_odds AS walks_odds_park_factor,\n                avg_this_walks_rate / avg_other_walks_rate AS walks_rate_park_factor,\n                SUM(this_batting_outs_rate * sample_weight)\n                / SUM(sample_weight) AS avg_this_batting_outs_rate,\n                SUM(other_batting_outs_rate * sample_weight)\n                / SUM(sample_weight) AS avg_other_batting_outs_rate,\n                avg_this_batting_outs_rate\n                / (1 - avg_this_batting_outs_rate) AS this_batting_outs_odds,\n                avg_other_batting_outs_rate\n                / (1 - avg_other_batting_outs_rate) AS other_batting_outs_odds,\n                this_batting_outs_odds\n                / other_batting_outs_odds AS batting_outs_odds_park_factor,\n                avg_this_batting_outs_rate / avg_other_batting_outs_rate AS batting_outs_rate_park_factor,\n                SUM(this_runs_rate * sample_weight)\n                / SUM(sample_weight) AS avg_this_runs_rate,\n                SUM(other_runs_rate * sample_weight)\n                / SUM(sample_weight) AS avg_other_runs_rate,\n                avg_this_runs_rate\n                / (1 - avg_this_runs_rate) AS this_runs_odds,\n                avg_other_runs_rate\n                / (1 - avg_other_runs_rate) AS other_runs_odds,\n                this_runs_odds\n                / other_runs_odds AS runs_odds_park_factor,\n                avg_this_runs_rate / avg_other_runs_rate AS runs_rate_park_factor,\n                SUM(this_balls_in_play_rate * sample_weight)\n                / SUM(sample_weight) AS avg_this_balls_in_play_rate,\n                SUM(other_balls_in_play_rate * sample_weight)\n                / SUM(sample_weight) AS avg_other_balls_in_play_rate,\n                avg_this_balls_in_play_rate\n                / (1 - avg_this_balls_in_play_rate) AS this_balls_in_play_odds,\n                avg_other_balls_in_play_rate\n                / (1 - avg_other_balls_in_play_rate) AS other_balls_in_play_odds,\n                this_balls_in_play_odds\n                / other_balls_in_play_odds AS balls_in_play_odds_park_factor,\n                avg_this_balls_in_play_rate / avg_other_balls_in_play_rate AS balls_in_play_rate_park_factor,\n        FROM rate_calculation\n        GROUP BY 1, 2, 3\n    ),\n\n    final AS (\n        SELECT\n            park_id,\n            season,\n            league,\n            \n            ROUND(sqrt_sample_size, 0) AS sqrt_sample_size,\n                \n                    ROUND(singles_odds_park_factor, 2) AS singles_park_factor,\n                \n                \n                    ROUND(doubles_odds_park_factor, 2) AS doubles_park_factor,\n                \n                \n                    ROUND(triples_odds_park_factor, 2) AS triples_park_factor,\n                \n                \n                    ROUND(home_runs_odds_park_factor, 2) AS home_runs_park_factor,\n                \n                \n                    ROUND(strikeouts_odds_park_factor, 2) AS strikeouts_park_factor,\n                \n                \n                    ROUND(reached_on_errors_odds_park_factor, 2) AS reached_on_errors_park_factor,\n                \n                \n                    ROUND(walks_odds_park_factor, 2) AS walks_park_factor,\n                \n                \n                    ROUND(batting_outs_odds_park_factor, 2) AS batting_outs_park_factor,\n                \n                \n                    ROUND(runs_odds_park_factor, 2) AS runs_park_factor,\n                \n                \n                    ROUND(balls_in_play_odds_park_factor, 2) AS balls_in_play_park_factor,\n                \n        FROM weighted_average\n    )\n\n    SELECT * FROM final\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:54.440815Z", "completed_at": "2023-12-09T18:55:54.443993Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:54.444634Z", "completed_at": "2023-12-09T18:55:54.444637Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005151987075805664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "analysis.timeball.calc_park_factor_trajectory_outs", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n    WITH unique_park_seasons AS (\n        SELECT\n            park_id,\n            season,\n            home_league AS league\n        FROM \"timeball\".\"main_models\".\"game_start_info\"\n        WHERE game_type = 'RegularSeason'\n        GROUP BY 1, 2, 3\n        HAVING COUNT(*) > 25\n    ),\n\n    lines AS (\n        SELECT *\n        FROM \"timeball\".\"main_models\".\"event_offense_stats\"\n        WHERE trajectory_known = 1 AND batting_outs > 0\n    ),\n\n    lines_agg AS (\n        SELECT\n            states.park_id,\n            states.season,\n            states.league,\n            states.batter_id,\n            states.pitcher_id,\n            ANY_VALUE(states.batter_hand) AS batter_hand,\n                SUM(lines.plate_appearances)::INT AS plate_appearances,\n                SUM(lines.trajectory_broad_air_ball)::INT AS trajectory_broad_air_ball,\n                SUM(lines.trajectory_ground_ball)::INT AS trajectory_ground_ball,\n                SUM(lines.trajectory_fly_ball)::INT AS trajectory_fly_ball,\n                SUM(lines.trajectory_line_drive)::INT AS trajectory_line_drive,\n                SUM(lines.trajectory_pop_up)::INT AS trajectory_pop_up,\n        FROM \"timeball\".\"main_models\".\"event_states_full\" AS states\n        INNER JOIN lines USING (event_key)\n        -- Restrict to parks with decent sample\n        INNER JOIN unique_park_seasons USING (season, league, park_id)\n        WHERE states.game_type = 'RegularSeason'\n            AND NOT states.is_interleague\n            \n        GROUP BY 1, 2, 3, 4, 5\n    ),\n\n    multi_year_range AS MATERIALIZED (\n        SELECT\n            la.park_id,\n            ups.season,\n            la.league,\n            la.batter_id,\n            la.pitcher_id,\n            \n                SUM(la.plate_appearances)::INT AS plate_appearances,\n                SUM(la.trajectory_broad_air_ball)::INT AS trajectory_broad_air_ball,\n                SUM(la.trajectory_ground_ball)::INT AS trajectory_ground_ball,\n                SUM(la.trajectory_fly_ball)::INT AS trajectory_fly_ball,\n                SUM(la.trajectory_line_drive)::INT AS trajectory_line_drive,\n                SUM(la.trajectory_pop_up)::INT AS trajectory_pop_up,\n        FROM lines_agg AS la\n        INNER JOIN unique_park_seasons AS ups\n            ON la.park_id = ups.park_id\n                AND la.league = ups.league\n                AND la.season BETWEEN ups.season - 2 AND ups.season\n        GROUP BY 1, 2, 3, 4, 5\n    ),\n\n    averages AS MATERIALIZED (\n        SELECT\n            season,\n            league,\n            \n                SUM(trajectory_broad_air_ball) / SUM(plate_appearances) AS trajectory_broad_air_ball_rate,\n                SUM(trajectory_ground_ball) / SUM(plate_appearances) AS trajectory_ground_ball_rate,\n                SUM(trajectory_fly_ball) / SUM(plate_appearances) AS trajectory_fly_ball_rate,\n                SUM(trajectory_line_drive) / SUM(plate_appearances) AS trajectory_line_drive_rate,\n                SUM(trajectory_pop_up) / SUM(plate_appearances) AS trajectory_pop_up_rate,\n        FROM multi_year_range\n        GROUP BY 1, 2\n    ),\n\n    -- Give each park pair a batter-pitcher matchup at the league average\n    -- with 1000 PA per park\n    with_priors AS (\n        SELECT *\n        FROM multi_year_range\n        UNION ALL BY NAME\n        SELECT\n            unique_park_seasons.park_id,\n            season,\n            league,\n            'MARK' AS batter_id,\n            'PRIOR' AS pitcher_id,\n            \n            1000 AS plate_appearances,\n                averages.trajectory_broad_air_ball_rate * 1000 AS trajectory_broad_air_ball,\n                averages.trajectory_ground_ball_rate * 1000 AS trajectory_ground_ball,\n                averages.trajectory_fly_ball_rate * 1000 AS trajectory_fly_ball,\n                averages.trajectory_line_drive_rate * 1000 AS trajectory_line_drive,\n                averages.trajectory_pop_up_rate * 1000 AS trajectory_pop_up,\n        FROM averages\n        INNER JOIN unique_park_seasons USING (season, league)\n    ),\n\n    self_joined AS (\n        SELECT\n            this.park_id AS this_park_id,\n            other.park_id AS other_park_id,\n            this.season,\n            this.league,  \n            this.batter_id,\n            this.pitcher_id,\n            \n                this.plate_appearances AS this_plate_appearances,\n                other.plate_appearances AS other_plate_appearances,\n                this.trajectory_broad_air_ball AS this_trajectory_broad_air_ball,\n                other.trajectory_broad_air_ball AS other_trajectory_broad_air_ball,\n                this.trajectory_ground_ball AS this_trajectory_ground_ball,\n                other.trajectory_ground_ball AS other_trajectory_ground_ball,\n                this.trajectory_fly_ball AS this_trajectory_fly_ball,\n                other.trajectory_fly_ball AS other_trajectory_fly_ball,\n                this.trajectory_line_drive AS this_trajectory_line_drive,\n                other.trajectory_line_drive AS other_trajectory_line_drive,\n                this.trajectory_pop_up AS this_trajectory_pop_up,\n                other.trajectory_pop_up AS other_trajectory_pop_up,\n            SQRT(LEAST(this_plate_appearances, other_plate_appearances)) AS sample_size,\n            SUM(sample_size) OVER (PARTITION BY this.park_id, other.park_id, this.season, this.league) AS sum_sample_size,\n        FROM with_priors AS this\n        INNER JOIN with_priors AS other\n            ON this.park_id != other.park_id\n                AND this.season = other.season\n                AND this.batter_id = other.batter_id\n                AND this.pitcher_id = other.pitcher_id\n                \n    ),\n\n    rate_calculation AS (\n        SELECT\n            *,\n                this_trajectory_broad_air_ball / this_plate_appearances AS this_trajectory_broad_air_ball_rate,\n                other_trajectory_broad_air_ball / other_plate_appearances AS other_trajectory_broad_air_ball_rate,\n                this_trajectory_ground_ball / this_plate_appearances AS this_trajectory_ground_ball_rate,\n                other_trajectory_ground_ball / other_plate_appearances AS other_trajectory_ground_ball_rate,\n                this_trajectory_fly_ball / this_plate_appearances AS this_trajectory_fly_ball_rate,\n                other_trajectory_fly_ball / other_plate_appearances AS other_trajectory_fly_ball_rate,\n                this_trajectory_line_drive / this_plate_appearances AS this_trajectory_line_drive_rate,\n                other_trajectory_line_drive / other_plate_appearances AS other_trajectory_line_drive_rate,\n                this_trajectory_pop_up / this_plate_appearances AS this_trajectory_pop_up_rate,\n                other_trajectory_pop_up / other_plate_appearances AS other_trajectory_pop_up_rate,\n            -- Find the park pair with the highest sample size, and upweight all other pairs to match\n            MAX(sum_sample_size) OVER (PARTITION BY this_park_id, season, league) AS scaling_factor,\n            sample_size * (scaling_factor / sum_sample_size) AS sample_weight\n        FROM self_joined\n    ),\n\n    weighted_average AS (\n        SELECT\n            this_park_id AS park_id,\n            season,\n            league,\n            \n            SUM(sample_size) AS sqrt_sample_size,\n                SUM(this_trajectory_broad_air_ball_rate * sample_weight)\n                / SUM(sample_weight) AS avg_this_trajectory_broad_air_ball_rate,\n                SUM(other_trajectory_broad_air_ball_rate * sample_weight)\n                / SUM(sample_weight) AS avg_other_trajectory_broad_air_ball_rate,\n                avg_this_trajectory_broad_air_ball_rate\n                / (1 - avg_this_trajectory_broad_air_ball_rate) AS this_trajectory_broad_air_ball_odds,\n                avg_other_trajectory_broad_air_ball_rate\n                / (1 - avg_other_trajectory_broad_air_ball_rate) AS other_trajectory_broad_air_ball_odds,\n                this_trajectory_broad_air_ball_odds\n                / other_trajectory_broad_air_ball_odds AS trajectory_broad_air_ball_odds_park_factor,\n                avg_this_trajectory_broad_air_ball_rate / avg_other_trajectory_broad_air_ball_rate AS trajectory_broad_air_ball_rate_park_factor,\n                SUM(this_trajectory_ground_ball_rate * sample_weight)\n                / SUM(sample_weight) AS avg_this_trajectory_ground_ball_rate,\n                SUM(other_trajectory_ground_ball_rate * sample_weight)\n                / SUM(sample_weight) AS avg_other_trajectory_ground_ball_rate,\n                avg_this_trajectory_ground_ball_rate\n                / (1 - avg_this_trajectory_ground_ball_rate) AS this_trajectory_ground_ball_odds,\n                avg_other_trajectory_ground_ball_rate\n                / (1 - avg_other_trajectory_ground_ball_rate) AS other_trajectory_ground_ball_odds,\n                this_trajectory_ground_ball_odds\n                / other_trajectory_ground_ball_odds AS trajectory_ground_ball_odds_park_factor,\n                avg_this_trajectory_ground_ball_rate / avg_other_trajectory_ground_ball_rate AS trajectory_ground_ball_rate_park_factor,\n                SUM(this_trajectory_fly_ball_rate * sample_weight)\n                / SUM(sample_weight) AS avg_this_trajectory_fly_ball_rate,\n                SUM(other_trajectory_fly_ball_rate * sample_weight)\n                / SUM(sample_weight) AS avg_other_trajectory_fly_ball_rate,\n                avg_this_trajectory_fly_ball_rate\n                / (1 - avg_this_trajectory_fly_ball_rate) AS this_trajectory_fly_ball_odds,\n                avg_other_trajectory_fly_ball_rate\n                / (1 - avg_other_trajectory_fly_ball_rate) AS other_trajectory_fly_ball_odds,\n                this_trajectory_fly_ball_odds\n                / other_trajectory_fly_ball_odds AS trajectory_fly_ball_odds_park_factor,\n                avg_this_trajectory_fly_ball_rate / avg_other_trajectory_fly_ball_rate AS trajectory_fly_ball_rate_park_factor,\n                SUM(this_trajectory_line_drive_rate * sample_weight)\n                / SUM(sample_weight) AS avg_this_trajectory_line_drive_rate,\n                SUM(other_trajectory_line_drive_rate * sample_weight)\n                / SUM(sample_weight) AS avg_other_trajectory_line_drive_rate,\n                avg_this_trajectory_line_drive_rate\n                / (1 - avg_this_trajectory_line_drive_rate) AS this_trajectory_line_drive_odds,\n                avg_other_trajectory_line_drive_rate\n                / (1 - avg_other_trajectory_line_drive_rate) AS other_trajectory_line_drive_odds,\n                this_trajectory_line_drive_odds\n                / other_trajectory_line_drive_odds AS trajectory_line_drive_odds_park_factor,\n                avg_this_trajectory_line_drive_rate / avg_other_trajectory_line_drive_rate AS trajectory_line_drive_rate_park_factor,\n                SUM(this_trajectory_pop_up_rate * sample_weight)\n                / SUM(sample_weight) AS avg_this_trajectory_pop_up_rate,\n                SUM(other_trajectory_pop_up_rate * sample_weight)\n                / SUM(sample_weight) AS avg_other_trajectory_pop_up_rate,\n                avg_this_trajectory_pop_up_rate\n                / (1 - avg_this_trajectory_pop_up_rate) AS this_trajectory_pop_up_odds,\n                avg_other_trajectory_pop_up_rate\n                / (1 - avg_other_trajectory_pop_up_rate) AS other_trajectory_pop_up_odds,\n                this_trajectory_pop_up_odds\n                / other_trajectory_pop_up_odds AS trajectory_pop_up_odds_park_factor,\n                avg_this_trajectory_pop_up_rate / avg_other_trajectory_pop_up_rate AS trajectory_pop_up_rate_park_factor,\n        FROM rate_calculation\n        GROUP BY 1, 2, 3\n    ),\n\n    final AS (\n        SELECT\n            park_id,\n            season,\n            league,\n            \n            ROUND(sqrt_sample_size, 0) AS sqrt_sample_size,\n                \n                    ROUND(trajectory_broad_air_ball_odds_park_factor, 2) AS trajectory_broad_air_ball_park_factor,\n                \n                \n                    ROUND(trajectory_ground_ball_odds_park_factor, 2) AS trajectory_ground_ball_park_factor,\n                \n                \n                    ROUND(trajectory_fly_ball_odds_park_factor, 2) AS trajectory_fly_ball_park_factor,\n                \n                \n                    ROUND(trajectory_line_drive_odds_park_factor, 2) AS trajectory_line_drive_park_factor,\n                \n                \n                    ROUND(trajectory_pop_up_odds_park_factor, 2) AS trajectory_pop_up_park_factor,\n                \n        FROM weighted_average\n    )\n\n    SELECT * FROM final\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:54.446699Z", "completed_at": "2023-12-09T18:55:54.449671Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:54.450302Z", "completed_at": "2023-12-09T18:55:54.450305Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004928112030029297, "adapter_response": {}, "message": null, "failures": null, "unique_id": "analysis.timeball.fielder_location_shares", "compiled": true, "compiled_code": "WITH t AS (\n    SELECT\n        p.batter_hand,\n        p.season > 2010 AS is_shift_era,\n        p.base_state_start AS base_state,\n        p.outs_start < 2 AS under_two_outs,\n        c.recorded_location,\n        c.recorded_location_angle,\n        c.recorded_location_depth,\n        c.trajectory,\n        c.batted_to_fielder,\n        ANY_VALUE(trajectory_broad_classification) AS trajectory_broad_classification,\n        COUNT(*) AS at_bats,\n        COUNT_IF(e.hits = 1) AS hits,\n    FROM \"timeball\".\"main_models\".\"event_offense_stats\" AS e\n    INNER JOIN \"timeball\".\"main_models\".\"calc_batted_ball_type\" AS c USING (event_key, game_id)\n    INNER JOIN \"timeball\".\"main_models\".\"event_states_full\" p USING (event_key, game_id)\n    WHERE c.batted_to_fielder > 0\n        AND c.recorded_location != 'Unknown'\n        AND p.batter_hand IS NOT NULL\n        AND (p.season BETWEEN 1989 AND 1999 OR p.season >= 2000)\n        AND e.trajectory_known = 1\n        AND e.sacrifice_hits = 0\n        AND p.batter_fielding_position != 1\n        GROUP BY 1, 2, 3, 4, 5, 6, 7, 8, 9\n), \n\nt2 AS (\n    SELECT DISTINCT ON (batter_hand, is_shift_era, base_state, under_two_outs, recorded_location, recorded_location_angle, recorded_location_depth, batted_to_fielder, trajectory)\n        batter_hand,\n        is_shift_era,\n        base_state,\n        under_two_outs\n        recorded_location,\n        recorded_location_angle,\n        recorded_location_depth,\n        batted_to_fielder,\n        trajectory,\n        trajectory_broad_classification,\n        SUM(at_bats) AS at_bats,\n        SUM(hits)/SUM(at_bats) AS batting_average,\n    FROM t\n    GROUP BY 1, 2, 3, 4, 5, 6, 7, 8, 9\n    WINDOW\n        s1 AS (PARTITION BY batter_hand, is_shift_era, base_state, under_two_outs, recorded_location, recorded_location_angle, recorded_location_depth, batted_to_fielder, trajectory),\n        s2 AS (PARTITION BY batter_hand, recorded_location, recorded_location_angle, recorded_location_depth, batted_to_fielder, trajectory),\n        s3 AS (PARTITION BY batter_hand, recorded_location, recorded_location_angle, recorded_location_depth, batted_to_fielder),\n        s4 AS (PARTITION BY batter_hand, recorded_location, recorded_location_angle, recorded_location_depth),\n        s5 AS (PARTITION BY batter_hand, recorded_location, recorded_location_angle),\n        s6 AS (PARTITION BY batter_hand, recorded_location)\n)\n\nSELECT * FROM t2\nORDER BY at_bats DESC", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:54.452346Z", "completed_at": "2023-12-09T18:55:54.455652Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:54.456293Z", "completed_at": "2023-12-09T18:55:54.456297Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005269050598144531, "adapter_response": {}, "message": null, "failures": null, "unique_id": "analysis.timeball.ground_ball_blame", "compiled": true, "compiled_code": "WITH base AS (\n    SELECT DISTINCT ON (s.batter_hand, is_shift_era, base_state, under_two_outs, c.recorded_location, c.recorded_location_angle, c.batted_to_fielder)\n        s.batter_hand,\n        s.season >= 2010 AS is_shift_era,\n        s.base_state_start AS base_state,\n        s.outs_start < 2 AS under_two_outs,\n        c.recorded_location,\n        c.recorded_location_angle,\n        c.batted_to_fielder,\n        -- Number of balls fielded by this fielder at this location\n        COUNT(*) OVER fielder_at_location AS ground_balls,\n        -- E.g 64% of the time an infielder fields a ball at ThirdShortstop, it's to the third baseman\n        ground_balls / COUNT(*) OVER fielder_group_at_location AS share_within_group,\n        -- E.g. 65% of all ground balls fielded by the left fielder come through ThirdShortstop\n        ground_balls / COUNT(*) OVER fielder_all AS share_within_fielder,\n        SUM(e.hits) OVER location_all / COUNT(*) OVER location_all AS batting_average_at_location,\n        SUM(e.hits) OVER fielder_at_location / ground_balls AS batting_average,\n        ground_balls / COUNT(*) OVER location_all AS batting_average_sample_weight,\n    FROM \"timeball\".\"main_models\".\"event_offense_stats\" AS e\n    INNER JOIN \"timeball\".\"main_models\".\"calc_batted_ball_type\" AS c USING (event_key)\n    INNER JOIN \"timeball\".\"main_models\".\"event_states_full\" AS s USING (event_key)\n    WHERE c.trajectory = 'GroundBall'\n        AND e.plate_appearances = 1\n        AND c.recorded_location != 'Unknown'\n        -- These are the only seasons in the current data where location/trajectory data\n        -- is widely available and unaffected by selection bias.\n        -- 2000-2019 coverage should improve substantially in a future Retrosheet release.\n        AND (\n            season BETWEEN 1989 AND 1999\n            OR season >= 2020\n        )\n        -- Remove balls without fielder info and balls fielded by catchers,\n        -- since a catcher would never plausibly have a chance at a ball that\n        -- would go to the outfield. \n        AND c.batted_to_fielder NOT IN (0, 2)\n        -- Remove any shallow locations, since those balls shouldn't be fielded by outfielders\n        -- (Presence in the data is rare, and likely either\n        -- a miscode or an extremely unusual fielding configuration).\n        -- We keep 'Pitcher' (the mound) in the data, since it may include deflections\n        AND c.recorded_location_depth != 'Shallow'\n        AND c.recorded_location NOT IN ('Catcher', 'CatcherFirst', 'CatcherThird', 'PitcherFirst', 'PitcherThird')\n        -- Exclude infield hits for a couple reasons: they are disproportionately soft ground balls\n        -- that would not have reached the outfield, and the fielder picking up the ball is often not the one\n        -- who had a real chance (e.g. shortstop covering behind third baseman).\n    WINDOW\n        fielder_at_location AS (\n            PARTITION BY s.batter_hand, is_shift_era, base_state, under_two_outs,\n            c.recorded_location, c.recorded_location_angle, c.batted_to_fielder\n        ),\n        fielder_group_at_location AS (\n            PARTITION BY s.batter_hand, is_shift_era, base_state, under_two_outs,\n            c.recorded_location, c.recorded_location_angle, e.fielded_by_outfielder\n        ),\n        fielder_all AS (\n            PARTITION BY s.batter_hand, is_shift_era, base_state, under_two_outs,\n            c.batted_to_fielder\n        ),\n        location_all AS (\n            PARTITION BY s.batter_hand, is_shift_era, base_state, under_two_outs,\n            c.recorded_location, c.recorded_location_angle\n        )\n),\n\njoined AS (\n    SELECT\n        batter_hand,\n        is_shift_era,\n        base_state,\n        under_two_outs,\n        recorded_location,\n        recorded_location_angle,\n        outfield.batting_average_sample_weight,\n        outfield.batting_average_at_location,\n        infield.batting_average AS infield_hit_rate,\n        outfield.batted_to_fielder AS outfield_position,\n        infield.batted_to_fielder AS infield_position,\n        -- If 65% of balls to the left fielder come from the ThirdShortstop location,\n        -- and 64% of infielder-fielded balls in ThirdShortstop are handled by the third baseman,\n        -- then we infer that 65 * 64 = 41.6% ground balls to the left fielder are balls\n        -- that came through ThirdShortstop that \"should\" have been fielded by the third baseman.\n        -- Summing up all outfield-infield-location combinations, as we do in the final subquery,\n        -- gives each outfielder a full 100%, divided among the infielders accordingly.\n        outfield.share_within_fielder * infield.share_within_group AS share,\n        -- We can use the same method to determine the share of balls lost by a given infielder\n        -- that were fielded by a given outfielder.\n        infield.share_within_fielder * outfield.share_within_group AS inverse_share,\n    FROM base AS outfield\n    INNER JOIN base AS infield USING (batter_hand, is_shift_era, base_state, under_two_outs, recorded_location, recorded_location_angle)\n    WHERE outfield.batted_to_fielder > 6\n        AND infield.batted_to_fielder BETWEEN 1 AND 6\n),\n\nfinal AS (\n    SELECT\n        batter_hand,\n        is_shift_era,\n        base_state,\n        under_two_outs,\n        outfield_position,\n        infield_position,\n        SUM(share) AS share,\n        SUM(inverse_share) AS inverse_share,\n        SUM(batting_average_at_location * batting_average_sample_weight) / SUM(batting_average_sample_weight) AS batting_average,\n    FROM joined\n    GROUP BY 1, 2, 3, 4, 5, 6\n)\n\nSELECT * FROM final", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:54.458356Z", "completed_at": "2023-12-09T18:55:54.461128Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:54.463618Z", "completed_at": "2023-12-09T18:55:54.463621Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006596088409423828, "adapter_response": {}, "message": null, "failures": null, "unique_id": "analysis.timeball.hit_vs_out_spray", "compiled": true, "compiled_code": "WITH t AS (\nSELECT\n    p.batter_hand,\n    c.recorded_location,\n    c.recorded_location_angle,\n    c.recorded_location_depth,\n    COUNT(*) AS at_bats,\n    SUM(hits) AS hits,\n    SUM(1 - hits) AS outs,\n    SUM(hits) / COUNT(*) AS avg,\nFROM \"timeball\".\"main_models\".\"event_offense_stats\"\nINNER JOIN \"timeball\".\"main_models\".\"calc_batted_ball_type\" AS c USING (game_id, event_key)\nINNER JOIN \"timeball\".\"main_models\".\"event_states_full\" p USING (game_id, event_key)\nWHERE trajectory_known\n    AND bunts = 0\n    AND balls_in_play = 1\n\nGROUP BY 1, 2, 3, 4\n)\n\nSELECT\n    batter_hand,\n    recorded_location,\n    recorded_location_angle,\n    recorded_location_depth,\n    at_bats,\n    avg,\n    hits / SUM(hits) OVER (PARTITION BY batter_hand) AS hit_share,\n    outs / SUM(outs) OVER (PARTITION BY batter_hand) AS out_share,\nFROM t\nORDER BY SUM(at_bats) OVER (PARTITION BY recorded_location) DESC, batter_hand", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:54.465673Z", "completed_at": "2023-12-09T18:55:54.468542Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:54.469181Z", "completed_at": "2023-12-09T18:55:54.469185Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004825115203857422, "adapter_response": {}, "message": null, "failures": null, "unique_id": "analysis.timeball.hit_vs_out_spray_air", "compiled": true, "compiled_code": "WITH t AS (\nSELECT\n    p.batter_hand,\n    c.batted_to_fielder,\n    --c.recorded_location_angle,\n    COUNT(*) AS at_bats,\n    SUM(hits) AS hits,\n    SUM(1 - hits) AS outs,\n    SUM(hits) / COUNT(*) AS avg,\n\nINNER JOIN \"timeball\".\"main_models\".\"calc_batted_ball_type\" AS c USING (game_id)\nINNER JOIN \"timeball\".\"main_models\".\"event_offense_stats\" AS e USING (event_key)\nINNER JOIN \"timeball\".\"main_models\".\"event_states_full\" p USING (event_key)\nWHERE g.has_batted_to_fielder AND g.has_trajectory\n    AND trajectory_broad_air_ball = 1\n    AND bunts = 0\n    AND balls_in_play = 1\n    AND fielded_by_outfielder = 1\nGROUP BY 1, 2\n)\n\nSELECT\n    batter_hand,\n    batted_to_fielder,\n    at_bats,\n    avg,\n    hits / SUM(hits) OVER (PARTITION BY batter_hand) AS hit_share,\n    outs / SUM(outs) OVER (PARTITION BY batter_hand) AS out_share,\nFROM t\nORDER BY SUM(at_bats) OVER (PARTITION BY batted_to_fielder) DESC, batter_hand", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:54.471247Z", "completed_at": "2023-12-09T18:55:54.473967Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:54.474604Z", "completed_at": "2023-12-09T18:55:54.474608Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004706859588623047, "adapter_response": {}, "message": null, "failures": null, "unique_id": "analysis.timeball.outfield_hits", "compiled": true, "compiled_code": "WITH t AS (\n    SELECT\n        p.batter_hand,\n        p.pitcher_hand,\n        c.batted_to_fielder,\n        e.total_bases,\n        COUNT(*) AS hits,\n        SUM(trajectory_ground_ball)/COUNT(*) AS hit_gb_rate\n\nINNER JOIN \"timeball\".\"main_models\".\"calc_batted_ball_type\" AS c USING (game_id)\nINNER JOIN \"timeball\".\"main_models\".\"event_offense_stats\" AS e USING (event_key)\nINNER JOIN \"timeball\".\"main_models\".\"event_states_full\" p USING (event_key)\nWHERE g.has_batted_to_fielder AND g.has_trajectory\n    AND e.hits = 1\n    AND e.fielded_by_outfielder = 1\n    AND e.bunts = 0\nGROUP BY 1, 2, 3, 4\n)\n\nSELECT * FROM t", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:54.476654Z", "completed_at": "2023-12-09T18:55:54.479416Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:54.480074Z", "completed_at": "2023-12-09T18:55:54.480077Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00473785400390625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "analysis.timeball.scorekeeper_tendencies_batter", "compiled": true, "compiled_code": "WITH overall_rates AS (\n    SELECT\n        substring(game_id, 4, 4)::int AS season,\n        team_id,\n        COUNT(*) AS total_singles,\n        COUNT_IF(batted_location_known)/total_singles AS total_singles_location_rate,\n        COUNT_IF(trajectory_broad_known)/total_singles AS total_singles_trajectory_rate,\n        COUNT_IF(trajectory_ground_ball)/COUNT_IF(trajectory_broad_known) AS total_ground_ball_rate,\n        COUNT_IF(trajectory_line_drive)/COUNT_IF(trajectory_broad_air_ball) AS total_line_drive_rate,\n    FROM \"timeball\".\"main_models\".\"event_offense_stats\" e\n    WHERE singles = 1\n        AND bunts = 0\n    AND season < 2003\n    GROUP BY 1, 2\n),\n\nfinal AS (\n    SELECT\n        season,\n        player_id,\n        o.team_id,\n        COUNT(*) AS hits_in_play,\n        COUNT_IF(batted_location_known)/hits_in_play AS hits_location_rate,\n        COUNT_IF(trajectory_broad_known)/hits_in_play AS hits_trajectory_rate,\n        COUNT_IF(trajectory_ground_ball)/COUNT_IF(trajectory_broad_known) AS ground_ball_rate,\n        COUNT_IF(trajectory_line_drive)/COUNT_IF(trajectory_broad_air_ball) AS line_drive_rate,\n        hits_location_rate - ANY_VALUE(total_singles_location_rate) AS location_rate_diff,\n        hits_trajectory_rate - ANY_VALUE(total_singles_trajectory_rate) AS trajectory_rate_diff,\n        ground_ball_rate - ANY_VALUE(total_ground_ball_rate) AS ground_ball_rate_diff,\n        line_drive_rate - ANY_VALUE(total_line_drive_rate) AS line_drive_rate_diff\n    FROM \"timeball\".\"main_models\".\"event_offense_stats\" e\n    INNER JOIN overall_rates o\n        ON o.season = substring(e.game_id, 4, 4)::int\n        AND o.team_id = e.team_id\n    WHERE balls_in_play = 1\n        AND singles = 1\n        AND bunts = 0\n    GROUP BY 1, 2, 3\n)\n\nSELECT * FROM final\nWHERE player_id LIKE 'youne%'", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:54.482168Z", "completed_at": "2023-12-09T18:55:54.485538Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:54.486220Z", "completed_at": "2023-12-09T18:55:54.486225Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005433082580566406, "adapter_response": {}, "message": null, "failures": null, "unique_id": "analysis.timeball.scorekeeper_tendencies_contact", "compiled": true, "compiled_code": "WITH final AS (\n    SELECT\n        cleaned_scorer AS scorer,\n        substring(game_id, 4, 4)::int // 10 * 10 AS decade,\n        SUM(hits) AS n,\n        SUM(trajectory_broad_known * hits) AS hits_trajectory_known,\n        SUM(trajectory_broad_unknown * hits) AS hits_trajectory_unknown,\n        hits_trajectory_known / COUNT_IF(hits) AS trajectory_known_hit_rate,\n        SUM((scorer_more_common_team_id = batting_team_id)::int * trajectory_broad_known * hits) / SUM((scorer_more_common_team_id = batting_team_id)::int * hits) AS trajectory_known_affiliated_team_hit_rate,\n        SUM((scorer_more_common_team_id != batting_team_id)::int * trajectory_broad_known * hits) / SUM((scorer_more_common_team_id != batting_team_id)::int * hits) AS trajectory_known_opposing_team_hit_rate,\n        SUM(singles * trajectory_broad_known) / SUM(singles) AS trajectory_known_single_rate,\n        SUM(doubles * trajectory_broad_known) / SUM(doubles) AS trajectory_known_double_rate,\n        SUM(triples * trajectory_broad_known) / SUM(triples) AS trajectory_known_triple_rate,\n        SUM(trajectory_ground_ball * hits * balls_in_play) / SUM(trajectory_broad_known * hits * balls_in_play) AS hit_ground_ball_rate,\n        SUM(trajectory_ground_ball * (1 - hits)) / SUM(trajectory_broad_known * (1 - hits)) AS out_ground_ball_rate,\n        SUM(trajectory_line_drive * hits * balls_in_play) / SUM(trajectory_broad_air_ball * hits * balls_in_play) AS air_hit_line_drive_rate,\n        SUM(trajectory_line_drive * (1 - hits)) / SUM(trajectory_broad_air_ball * (1 - hits)) AS air_out_line_drive_rate,\n        SUM(trajectory_pop_up * hits) / SUM(trajectory_broad_air_ball * hits) AS air_hit_popup_rate,\n        SUM(trajectory_pop_up * (1 - hits)) / SUM(trajectory_broad_air_ball * (1 - hits)) AS air_out_popup_rate,\n        SUM(CASE WHEN batted_trajectory = 'Fly' THEN 1 ELSE 0 END * hits * balls_in_play) / SUM(trajectory_broad_air_ball * hits * balls_in_play) AS air_hit_explicit_fly_rate,\n        SUM(CASE WHEN batted_trajectory = 'Fly' THEN 1 ELSE 0 END * (1 - hits)) / SUM(trajectory_broad_air_ball * (1 - hits)) AS air_out_explicit_fly_rate,\n        SUM(home_runs * trajectory_line_drive) / SUM(home_runs) AS home_run_line_drive_rate,\n    FROM \"timeball\".\"main_models\".\"event_offense_stats\" s\n    LEFT JOIN \"timeball\".\"main_models\".\"stg_events\" AS e USING (game_id, event_key)\n    LEFT JOIN \"timeball\".\"main_models\".\"game_scorekeeping\" k USING (game_id)\n    WHERE balls_batted = 1\n    GROUP BY 1, 2\n)\n\nSELECT * FROM final", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:54.488509Z", "completed_at": "2023-12-09T18:55:54.496847Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:54.497590Z", "completed_at": "2023-12-09T18:55:54.497595Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01058197021484375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.timeball.calc_park_factors_advanced", "compiled": true, "compiled_code": "\n\n\n\n\nWITH unique_park_seasons AS (\n    SELECT\n        park_id,\n        season,\n        home_league AS league\n    FROM \"timeball\".\"main_models\".\"game_start_info\"\n    WHERE game_type = 'RegularSeason'\n    GROUP BY 1, 2, 3\n    HAVING COUNT(*) > 25\n),\n\nbatting_agg AS (\n    SELECT\n        states.park_id,\n        states.season,\n        states.league,\n        states.batter_id,\n        states.pitcher_id,\n            SUM(batting.plate_appearances)::INT AS plate_appearances,\n            SUM(batting.singles)::INT AS singles,\n            SUM(batting.doubles)::INT AS doubles,\n            SUM(batting.triples)::INT AS triples,\n            SUM(batting.home_runs)::INT AS home_runs,\n            SUM(batting.strikeouts)::INT AS strikeouts,\n            SUM(batting.walks)::INT AS walks,\n            SUM(batting.batting_outs)::INT AS batting_outs,\n            SUM(batting.runs)::INT AS runs,\n            SUM(batting.balls_in_play)::INT AS balls_in_play,\n            SUM(batting.trajectory_fly_ball)::INT AS trajectory_fly_ball,\n            SUM(batting.trajectory_ground_ball)::INT AS trajectory_ground_ball,\n            SUM(batting.trajectory_line_drive)::INT AS trajectory_line_drive,\n            SUM(batting.trajectory_pop_up)::INT AS trajectory_pop_up,\n            SUM(batting.trajectory_unknown)::INT AS trajectory_unknown,\n            SUM(batting.batted_distance_infield)::INT AS batted_distance_infield,\n            SUM(batting.batted_distance_outfield)::INT AS batted_distance_outfield,\n            SUM(batting.batted_distance_unknown)::INT AS batted_distance_unknown,\n            SUM(batting.batted_angle_left)::INT AS batted_angle_left,\n            SUM(batting.batted_angle_right)::INT AS batted_angle_right,\n            SUM(batting.batted_angle_middle)::INT AS batted_angle_middle,\n    FROM \"timeball\".\"main_models\".\"event_states_full\" AS states\n    INNER JOIN \"timeball\".\"main_models\".\"event_offense_stats\" AS batting USING (event_key)\n    -- Restrict to parks with decent sample\n    INNER JOIN unique_park_seasons USING (season, league, park_id)\n    WHERE states.game_type = 'RegularSeason'\n        AND NOT states.is_interleague\n    GROUP BY 1, 2, 3, 4, 5\n),\n\nmulti_year_range AS MATERIALIZED (\n    SELECT\n        park_id,\n        season,\n        league,\n        batter_id,\n        pitcher_id,\n            SUM(plate_appearances)\n                OVER (\n                    PARTITION BY park_id, batter_id, pitcher_id, league\n                    ORDER BY season\n                    RANGE BETWEEN 2 PRECEDING AND CURRENT ROW\n            )::INT\n            AS plate_appearances,\n            SUM(singles)\n                OVER (\n                    PARTITION BY park_id, batter_id, pitcher_id, league\n                    ORDER BY season\n                    RANGE BETWEEN 2 PRECEDING AND CURRENT ROW\n            )::INT\n            AS singles,\n            SUM(doubles)\n                OVER (\n                    PARTITION BY park_id, batter_id, pitcher_id, league\n                    ORDER BY season\n                    RANGE BETWEEN 2 PRECEDING AND CURRENT ROW\n            )::INT\n            AS doubles,\n            SUM(triples)\n                OVER (\n                    PARTITION BY park_id, batter_id, pitcher_id, league\n                    ORDER BY season\n                    RANGE BETWEEN 2 PRECEDING AND CURRENT ROW\n            )::INT\n            AS triples,\n            SUM(home_runs)\n                OVER (\n                    PARTITION BY park_id, batter_id, pitcher_id, league\n                    ORDER BY season\n                    RANGE BETWEEN 2 PRECEDING AND CURRENT ROW\n            )::INT\n            AS home_runs,\n            SUM(strikeouts)\n                OVER (\n                    PARTITION BY park_id, batter_id, pitcher_id, league\n                    ORDER BY season\n                    RANGE BETWEEN 2 PRECEDING AND CURRENT ROW\n            )::INT\n            AS strikeouts,\n            SUM(walks)\n                OVER (\n                    PARTITION BY park_id, batter_id, pitcher_id, league\n                    ORDER BY season\n                    RANGE BETWEEN 2 PRECEDING AND CURRENT ROW\n            )::INT\n            AS walks,\n            SUM(batting_outs)\n                OVER (\n                    PARTITION BY park_id, batter_id, pitcher_id, league\n                    ORDER BY season\n                    RANGE BETWEEN 2 PRECEDING AND CURRENT ROW\n            )::INT\n            AS batting_outs,\n            SUM(runs)\n                OVER (\n                    PARTITION BY park_id, batter_id, pitcher_id, league\n                    ORDER BY season\n                    RANGE BETWEEN 2 PRECEDING AND CURRENT ROW\n            )::INT\n            AS runs,\n            SUM(balls_in_play)\n                OVER (\n                    PARTITION BY park_id, batter_id, pitcher_id, league\n                    ORDER BY season\n                    RANGE BETWEEN 2 PRECEDING AND CURRENT ROW\n            )::INT\n            AS balls_in_play,\n            SUM(trajectory_fly_ball)\n                OVER (\n                    PARTITION BY park_id, batter_id, pitcher_id, league\n                    ORDER BY season\n                    RANGE BETWEEN 2 PRECEDING AND CURRENT ROW\n            )::INT\n            AS trajectory_fly_ball,\n            SUM(trajectory_ground_ball)\n                OVER (\n                    PARTITION BY park_id, batter_id, pitcher_id, league\n                    ORDER BY season\n                    RANGE BETWEEN 2 PRECEDING AND CURRENT ROW\n            )::INT\n            AS trajectory_ground_ball,\n            SUM(trajectory_line_drive)\n                OVER (\n                    PARTITION BY park_id, batter_id, pitcher_id, league\n                    ORDER BY season\n                    RANGE BETWEEN 2 PRECEDING AND CURRENT ROW\n            )::INT\n            AS trajectory_line_drive,\n            SUM(trajectory_pop_up)\n                OVER (\n                    PARTITION BY park_id, batter_id, pitcher_id, league\n                    ORDER BY season\n                    RANGE BETWEEN 2 PRECEDING AND CURRENT ROW\n            )::INT\n            AS trajectory_pop_up,\n            SUM(trajectory_unknown)\n                OVER (\n                    PARTITION BY park_id, batter_id, pitcher_id, league\n                    ORDER BY season\n                    RANGE BETWEEN 2 PRECEDING AND CURRENT ROW\n            )::INT\n            AS trajectory_unknown,\n            SUM(batted_distance_infield)\n                OVER (\n                    PARTITION BY park_id, batter_id, pitcher_id, league\n                    ORDER BY season\n                    RANGE BETWEEN 2 PRECEDING AND CURRENT ROW\n            )::INT\n            AS batted_distance_infield,\n            SUM(batted_distance_outfield)\n                OVER (\n                    PARTITION BY park_id, batter_id, pitcher_id, league\n                    ORDER BY season\n                    RANGE BETWEEN 2 PRECEDING AND CURRENT ROW\n            )::INT\n            AS batted_distance_outfield,\n            SUM(batted_distance_unknown)\n                OVER (\n                    PARTITION BY park_id, batter_id, pitcher_id, league\n                    ORDER BY season\n                    RANGE BETWEEN 2 PRECEDING AND CURRENT ROW\n            )::INT\n            AS batted_distance_unknown,\n            SUM(batted_angle_left)\n                OVER (\n                    PARTITION BY park_id, batter_id, pitcher_id, league\n                    ORDER BY season\n                    RANGE BETWEEN 2 PRECEDING AND CURRENT ROW\n            )::INT\n            AS batted_angle_left,\n            SUM(batted_angle_right)\n                OVER (\n                    PARTITION BY park_id, batter_id, pitcher_id, league\n                    ORDER BY season\n                    RANGE BETWEEN 2 PRECEDING AND CURRENT ROW\n            )::INT\n            AS batted_angle_right,\n            SUM(batted_angle_middle)\n                OVER (\n                    PARTITION BY park_id, batter_id, pitcher_id, league\n                    ORDER BY season\n                    RANGE BETWEEN 2 PRECEDING AND CURRENT ROW\n            )::INT\n            AS batted_angle_middle,\n    FROM batting_agg\n),\n\naverages AS MATERIALIZED (\n    SELECT\n        season,\n        league,\n            SUM(singles) / SUM(plate_appearances) AS avg_singles_per_pa,\n            SUM(doubles) / SUM(plate_appearances) AS avg_doubles_per_pa,\n            SUM(triples) / SUM(plate_appearances) AS avg_triples_per_pa,\n            SUM(home_runs) / SUM(plate_appearances) AS avg_home_runs_per_pa,\n            SUM(strikeouts) / SUM(plate_appearances) AS avg_strikeouts_per_pa,\n            SUM(walks) / SUM(plate_appearances) AS avg_walks_per_pa,\n            SUM(batting_outs) / SUM(plate_appearances) AS avg_batting_outs_per_pa,\n            SUM(runs) / SUM(plate_appearances) AS avg_runs_per_pa,\n            SUM(balls_in_play) / SUM(plate_appearances) AS avg_balls_in_play_per_pa,\n            SUM(trajectory_fly_ball) / SUM(plate_appearances) AS avg_trajectory_fly_ball_per_pa,\n            SUM(trajectory_ground_ball) / SUM(plate_appearances) AS avg_trajectory_ground_ball_per_pa,\n            SUM(trajectory_line_drive) / SUM(plate_appearances) AS avg_trajectory_line_drive_per_pa,\n            SUM(trajectory_pop_up) / SUM(plate_appearances) AS avg_trajectory_pop_up_per_pa,\n            SUM(trajectory_unknown) / SUM(plate_appearances) AS avg_trajectory_unknown_per_pa,\n            SUM(batted_distance_infield) / SUM(plate_appearances) AS avg_batted_distance_infield_per_pa,\n            SUM(batted_distance_outfield) / SUM(plate_appearances) AS avg_batted_distance_outfield_per_pa,\n            SUM(batted_distance_unknown) / SUM(plate_appearances) AS avg_batted_distance_unknown_per_pa,\n            SUM(batted_angle_left) / SUM(plate_appearances) AS avg_batted_angle_left_per_pa,\n            SUM(batted_angle_right) / SUM(plate_appearances) AS avg_batted_angle_right_per_pa,\n            SUM(batted_angle_middle) / SUM(plate_appearances) AS avg_batted_angle_middle_per_pa,\n    FROM multi_year_range\n    GROUP BY 1, 2\n),\n\n-- Give each park pair a batter-pitcher matchup at the league average\n-- with 1000::SMALLINT PA per park\nwith_priors AS (\n    SELECT *\n    FROM multi_year_range\n    UNION ALL\n    SELECT\n        unique_park_seasons.park_id,\n        season,\n        league,\n        'MARK' AS batter_id,\n        'PRIOR' AS pitcher_id,\n        1000::SMALLINT AS plate_appearances,\n            averages.avg_singles_per_pa * 1000::SMALLINT AS singles,\n            averages.avg_doubles_per_pa * 1000::SMALLINT AS doubles,\n            averages.avg_triples_per_pa * 1000::SMALLINT AS triples,\n            averages.avg_home_runs_per_pa * 1000::SMALLINT AS home_runs,\n            averages.avg_strikeouts_per_pa * 1000::SMALLINT AS strikeouts,\n            averages.avg_walks_per_pa * 1000::SMALLINT AS walks,\n            averages.avg_batting_outs_per_pa * 1000::SMALLINT AS batting_outs,\n            averages.avg_runs_per_pa * 1000::SMALLINT AS runs,\n            averages.avg_balls_in_play_per_pa * 1000::SMALLINT AS balls_in_play,\n            averages.avg_trajectory_fly_ball_per_pa * 1000::SMALLINT AS trajectory_fly_ball,\n            averages.avg_trajectory_ground_ball_per_pa * 1000::SMALLINT AS trajectory_ground_ball,\n            averages.avg_trajectory_line_drive_per_pa * 1000::SMALLINT AS trajectory_line_drive,\n            averages.avg_trajectory_pop_up_per_pa * 1000::SMALLINT AS trajectory_pop_up,\n            averages.avg_trajectory_unknown_per_pa * 1000::SMALLINT AS trajectory_unknown,\n            averages.avg_batted_distance_infield_per_pa * 1000::SMALLINT AS batted_distance_infield,\n            averages.avg_batted_distance_outfield_per_pa * 1000::SMALLINT AS batted_distance_outfield,\n            averages.avg_batted_distance_unknown_per_pa * 1000::SMALLINT AS batted_distance_unknown,\n            averages.avg_batted_angle_left_per_pa * 1000::SMALLINT AS batted_angle_left,\n            averages.avg_batted_angle_right_per_pa * 1000::SMALLINT AS batted_angle_right,\n            averages.avg_batted_angle_middle_per_pa * 1000::SMALLINT AS batted_angle_middle,\n    FROM averages\n    INNER JOIN unique_park_seasons USING (season, league)\n),\n\nself_joined AS (\n    SELECT\n        this.park_id AS this_park_id,\n        other.park_id AS other_park_id,\n        this.season,\n        this.league,  \n        this.batter_id,\n        this.pitcher_id,\n            this.plate_appearances AS this_plate_appearances,\n            other.plate_appearances AS other_plate_appearances,\n            this.singles AS this_singles,\n            other.singles AS other_singles,\n            this.doubles AS this_doubles,\n            other.doubles AS other_doubles,\n            this.triples AS this_triples,\n            other.triples AS other_triples,\n            this.home_runs AS this_home_runs,\n            other.home_runs AS other_home_runs,\n            this.strikeouts AS this_strikeouts,\n            other.strikeouts AS other_strikeouts,\n            this.walks AS this_walks,\n            other.walks AS other_walks,\n            this.batting_outs AS this_batting_outs,\n            other.batting_outs AS other_batting_outs,\n            this.runs AS this_runs,\n            other.runs AS other_runs,\n            this.balls_in_play AS this_balls_in_play,\n            other.balls_in_play AS other_balls_in_play,\n            this.trajectory_fly_ball AS this_trajectory_fly_ball,\n            other.trajectory_fly_ball AS other_trajectory_fly_ball,\n            this.trajectory_ground_ball AS this_trajectory_ground_ball,\n            other.trajectory_ground_ball AS other_trajectory_ground_ball,\n            this.trajectory_line_drive AS this_trajectory_line_drive,\n            other.trajectory_line_drive AS other_trajectory_line_drive,\n            this.trajectory_pop_up AS this_trajectory_pop_up,\n            other.trajectory_pop_up AS other_trajectory_pop_up,\n            this.trajectory_unknown AS this_trajectory_unknown,\n            other.trajectory_unknown AS other_trajectory_unknown,\n            this.batted_distance_infield AS this_batted_distance_infield,\n            other.batted_distance_infield AS other_batted_distance_infield,\n            this.batted_distance_outfield AS this_batted_distance_outfield,\n            other.batted_distance_outfield AS other_batted_distance_outfield,\n            this.batted_distance_unknown AS this_batted_distance_unknown,\n            other.batted_distance_unknown AS other_batted_distance_unknown,\n            this.batted_angle_left AS this_batted_angle_left,\n            other.batted_angle_left AS other_batted_angle_left,\n            this.batted_angle_right AS this_batted_angle_right,\n            other.batted_angle_right AS other_batted_angle_right,\n            this.batted_angle_middle AS this_batted_angle_middle,\n            other.batted_angle_middle AS other_batted_angle_middle,\n        SQRT(LEAST(this_plate_appearances, other_plate_appearances)) AS sample_size,\n        SUM(sample_size) OVER (PARTITION BY this.park_id, other.park_id, this.season, this.league) AS sum_sample_size,\n    FROM with_priors AS this\n    INNER JOIN with_priors AS other\n        ON this.park_id != other.park_id\n            AND this.season = other.season\n            AND this.batter_id = other.batter_id\n            AND this.pitcher_id = other.pitcher_id\n),\n\nrate_calculation AS (\n    SELECT\n        *,\n            this_singles / this_plate_appearances AS this_singles_per_pa,\n            other_singles / other_plate_appearances AS other_singles_per_pa,\n            this_doubles / this_plate_appearances AS this_doubles_per_pa,\n            other_doubles / other_plate_appearances AS other_doubles_per_pa,\n            this_triples / this_plate_appearances AS this_triples_per_pa,\n            other_triples / other_plate_appearances AS other_triples_per_pa,\n            this_home_runs / this_plate_appearances AS this_home_runs_per_pa,\n            other_home_runs / other_plate_appearances AS other_home_runs_per_pa,\n            this_strikeouts / this_plate_appearances AS this_strikeouts_per_pa,\n            other_strikeouts / other_plate_appearances AS other_strikeouts_per_pa,\n            this_walks / this_plate_appearances AS this_walks_per_pa,\n            other_walks / other_plate_appearances AS other_walks_per_pa,\n            this_batting_outs / this_plate_appearances AS this_batting_outs_per_pa,\n            other_batting_outs / other_plate_appearances AS other_batting_outs_per_pa,\n            this_runs / this_plate_appearances AS this_runs_per_pa,\n            other_runs / other_plate_appearances AS other_runs_per_pa,\n            this_balls_in_play / this_plate_appearances AS this_balls_in_play_per_pa,\n            other_balls_in_play / other_plate_appearances AS other_balls_in_play_per_pa,\n            this_trajectory_fly_ball / this_plate_appearances AS this_trajectory_fly_ball_per_pa,\n            other_trajectory_fly_ball / other_plate_appearances AS other_trajectory_fly_ball_per_pa,\n            this_trajectory_ground_ball / this_plate_appearances AS this_trajectory_ground_ball_per_pa,\n            other_trajectory_ground_ball / other_plate_appearances AS other_trajectory_ground_ball_per_pa,\n            this_trajectory_line_drive / this_plate_appearances AS this_trajectory_line_drive_per_pa,\n            other_trajectory_line_drive / other_plate_appearances AS other_trajectory_line_drive_per_pa,\n            this_trajectory_pop_up / this_plate_appearances AS this_trajectory_pop_up_per_pa,\n            other_trajectory_pop_up / other_plate_appearances AS other_trajectory_pop_up_per_pa,\n            this_trajectory_unknown / this_plate_appearances AS this_trajectory_unknown_per_pa,\n            other_trajectory_unknown / other_plate_appearances AS other_trajectory_unknown_per_pa,\n            this_batted_distance_infield / this_plate_appearances AS this_batted_distance_infield_per_pa,\n            other_batted_distance_infield / other_plate_appearances AS other_batted_distance_infield_per_pa,\n            this_batted_distance_outfield / this_plate_appearances AS this_batted_distance_outfield_per_pa,\n            other_batted_distance_outfield / other_plate_appearances AS other_batted_distance_outfield_per_pa,\n            this_batted_distance_unknown / this_plate_appearances AS this_batted_distance_unknown_per_pa,\n            other_batted_distance_unknown / other_plate_appearances AS other_batted_distance_unknown_per_pa,\n            this_batted_angle_left / this_plate_appearances AS this_batted_angle_left_per_pa,\n            other_batted_angle_left / other_plate_appearances AS other_batted_angle_left_per_pa,\n            this_batted_angle_right / this_plate_appearances AS this_batted_angle_right_per_pa,\n            other_batted_angle_right / other_plate_appearances AS other_batted_angle_right_per_pa,\n            this_batted_angle_middle / this_plate_appearances AS this_batted_angle_middle_per_pa,\n            other_batted_angle_middle / other_plate_appearances AS other_batted_angle_middle_per_pa,\n        -- Find the park pair with the highest sample size, and upweight all other pairs to match\n        MAX(sum_sample_size) OVER (PARTITION BY this_park_id, season, league) AS scaling_factor,\n        sample_size * (scaling_factor / sum_sample_size) AS sample_weight\n    FROM self_joined\n),\n\nweighted_average AS (\n    SELECT\n        this_park_id AS park_id,\n        season,\n        league,\n        SUM(sample_size) AS sqrt_sample_size,\n            SUM(this_singles_per_pa * sample_weight)\n            / SUM(sample_weight) AS avg_this_singles_per_pa,\n            SUM(other_singles_per_pa * sample_weight)\n            / SUM(sample_weight) AS avg_other_singles_per_pa,\n            avg_this_singles_per_pa\n            / (1 - avg_this_singles_per_pa) AS this_singles_odds,\n            avg_other_singles_per_pa\n            / (1 - avg_other_singles_per_pa) AS other_singles_odds,\n            this_singles_odds\n            / other_singles_odds AS singles_park_factor,\n            SUM(this_doubles_per_pa * sample_weight)\n            / SUM(sample_weight) AS avg_this_doubles_per_pa,\n            SUM(other_doubles_per_pa * sample_weight)\n            / SUM(sample_weight) AS avg_other_doubles_per_pa,\n            avg_this_doubles_per_pa\n            / (1 - avg_this_doubles_per_pa) AS this_doubles_odds,\n            avg_other_doubles_per_pa\n            / (1 - avg_other_doubles_per_pa) AS other_doubles_odds,\n            this_doubles_odds\n            / other_doubles_odds AS doubles_park_factor,\n            SUM(this_triples_per_pa * sample_weight)\n            / SUM(sample_weight) AS avg_this_triples_per_pa,\n            SUM(other_triples_per_pa * sample_weight)\n            / SUM(sample_weight) AS avg_other_triples_per_pa,\n            avg_this_triples_per_pa\n            / (1 - avg_this_triples_per_pa) AS this_triples_odds,\n            avg_other_triples_per_pa\n            / (1 - avg_other_triples_per_pa) AS other_triples_odds,\n            this_triples_odds\n            / other_triples_odds AS triples_park_factor,\n            SUM(this_home_runs_per_pa * sample_weight)\n            / SUM(sample_weight) AS avg_this_home_runs_per_pa,\n            SUM(other_home_runs_per_pa * sample_weight)\n            / SUM(sample_weight) AS avg_other_home_runs_per_pa,\n            avg_this_home_runs_per_pa\n            / (1 - avg_this_home_runs_per_pa) AS this_home_runs_odds,\n            avg_other_home_runs_per_pa\n            / (1 - avg_other_home_runs_per_pa) AS other_home_runs_odds,\n            this_home_runs_odds\n            / other_home_runs_odds AS home_runs_park_factor,\n            SUM(this_strikeouts_per_pa * sample_weight)\n            / SUM(sample_weight) AS avg_this_strikeouts_per_pa,\n            SUM(other_strikeouts_per_pa * sample_weight)\n            / SUM(sample_weight) AS avg_other_strikeouts_per_pa,\n            avg_this_strikeouts_per_pa\n            / (1 - avg_this_strikeouts_per_pa) AS this_strikeouts_odds,\n            avg_other_strikeouts_per_pa\n            / (1 - avg_other_strikeouts_per_pa) AS other_strikeouts_odds,\n            this_strikeouts_odds\n            / other_strikeouts_odds AS strikeouts_park_factor,\n            SUM(this_walks_per_pa * sample_weight)\n            / SUM(sample_weight) AS avg_this_walks_per_pa,\n            SUM(other_walks_per_pa * sample_weight)\n            / SUM(sample_weight) AS avg_other_walks_per_pa,\n            avg_this_walks_per_pa\n            / (1 - avg_this_walks_per_pa) AS this_walks_odds,\n            avg_other_walks_per_pa\n            / (1 - avg_other_walks_per_pa) AS other_walks_odds,\n            this_walks_odds\n            / other_walks_odds AS walks_park_factor,\n            SUM(this_batting_outs_per_pa * sample_weight)\n            / SUM(sample_weight) AS avg_this_batting_outs_per_pa,\n            SUM(other_batting_outs_per_pa * sample_weight)\n            / SUM(sample_weight) AS avg_other_batting_outs_per_pa,\n            avg_this_batting_outs_per_pa\n            / (1 - avg_this_batting_outs_per_pa) AS this_batting_outs_odds,\n            avg_other_batting_outs_per_pa\n            / (1 - avg_other_batting_outs_per_pa) AS other_batting_outs_odds,\n            this_batting_outs_odds\n            / other_batting_outs_odds AS batting_outs_park_factor,\n            SUM(this_runs_per_pa * sample_weight)\n            / SUM(sample_weight) AS avg_this_runs_per_pa,\n            SUM(other_runs_per_pa * sample_weight)\n            / SUM(sample_weight) AS avg_other_runs_per_pa,\n            avg_this_runs_per_pa\n            / (1 - avg_this_runs_per_pa) AS this_runs_odds,\n            avg_other_runs_per_pa\n            / (1 - avg_other_runs_per_pa) AS other_runs_odds,\n            this_runs_odds\n            / other_runs_odds AS runs_park_factor,\n            SUM(this_balls_in_play_per_pa * sample_weight)\n            / SUM(sample_weight) AS avg_this_balls_in_play_per_pa,\n            SUM(other_balls_in_play_per_pa * sample_weight)\n            / SUM(sample_weight) AS avg_other_balls_in_play_per_pa,\n            avg_this_balls_in_play_per_pa\n            / (1 - avg_this_balls_in_play_per_pa) AS this_balls_in_play_odds,\n            avg_other_balls_in_play_per_pa\n            / (1 - avg_other_balls_in_play_per_pa) AS other_balls_in_play_odds,\n            this_balls_in_play_odds\n            / other_balls_in_play_odds AS balls_in_play_park_factor,\n            SUM(this_trajectory_fly_ball_per_pa * sample_weight)\n            / SUM(sample_weight) AS avg_this_trajectory_fly_ball_per_pa,\n            SUM(other_trajectory_fly_ball_per_pa * sample_weight)\n            / SUM(sample_weight) AS avg_other_trajectory_fly_ball_per_pa,\n            avg_this_trajectory_fly_ball_per_pa\n            / (1 - avg_this_trajectory_fly_ball_per_pa) AS this_trajectory_fly_ball_odds,\n            avg_other_trajectory_fly_ball_per_pa\n            / (1 - avg_other_trajectory_fly_ball_per_pa) AS other_trajectory_fly_ball_odds,\n            this_trajectory_fly_ball_odds\n            / other_trajectory_fly_ball_odds AS trajectory_fly_ball_park_factor,\n            SUM(this_trajectory_ground_ball_per_pa * sample_weight)\n            / SUM(sample_weight) AS avg_this_trajectory_ground_ball_per_pa,\n            SUM(other_trajectory_ground_ball_per_pa * sample_weight)\n            / SUM(sample_weight) AS avg_other_trajectory_ground_ball_per_pa,\n            avg_this_trajectory_ground_ball_per_pa\n            / (1 - avg_this_trajectory_ground_ball_per_pa) AS this_trajectory_ground_ball_odds,\n            avg_other_trajectory_ground_ball_per_pa\n            / (1 - avg_other_trajectory_ground_ball_per_pa) AS other_trajectory_ground_ball_odds,\n            this_trajectory_ground_ball_odds\n            / other_trajectory_ground_ball_odds AS trajectory_ground_ball_park_factor,\n            SUM(this_trajectory_line_drive_per_pa * sample_weight)\n            / SUM(sample_weight) AS avg_this_trajectory_line_drive_per_pa,\n            SUM(other_trajectory_line_drive_per_pa * sample_weight)\n            / SUM(sample_weight) AS avg_other_trajectory_line_drive_per_pa,\n            avg_this_trajectory_line_drive_per_pa\n            / (1 - avg_this_trajectory_line_drive_per_pa) AS this_trajectory_line_drive_odds,\n            avg_other_trajectory_line_drive_per_pa\n            / (1 - avg_other_trajectory_line_drive_per_pa) AS other_trajectory_line_drive_odds,\n            this_trajectory_line_drive_odds\n            / other_trajectory_line_drive_odds AS trajectory_line_drive_park_factor,\n            SUM(this_trajectory_pop_up_per_pa * sample_weight)\n            / SUM(sample_weight) AS avg_this_trajectory_pop_up_per_pa,\n            SUM(other_trajectory_pop_up_per_pa * sample_weight)\n            / SUM(sample_weight) AS avg_other_trajectory_pop_up_per_pa,\n            avg_this_trajectory_pop_up_per_pa\n            / (1 - avg_this_trajectory_pop_up_per_pa) AS this_trajectory_pop_up_odds,\n            avg_other_trajectory_pop_up_per_pa\n            / (1 - avg_other_trajectory_pop_up_per_pa) AS other_trajectory_pop_up_odds,\n            this_trajectory_pop_up_odds\n            / other_trajectory_pop_up_odds AS trajectory_pop_up_park_factor,\n            SUM(this_trajectory_unknown_per_pa * sample_weight)\n            / SUM(sample_weight) AS avg_this_trajectory_unknown_per_pa,\n            SUM(other_trajectory_unknown_per_pa * sample_weight)\n            / SUM(sample_weight) AS avg_other_trajectory_unknown_per_pa,\n            avg_this_trajectory_unknown_per_pa\n            / (1 - avg_this_trajectory_unknown_per_pa) AS this_trajectory_unknown_odds,\n            avg_other_trajectory_unknown_per_pa\n            / (1 - avg_other_trajectory_unknown_per_pa) AS other_trajectory_unknown_odds,\n            this_trajectory_unknown_odds\n            / other_trajectory_unknown_odds AS trajectory_unknown_park_factor,\n            SUM(this_batted_distance_infield_per_pa * sample_weight)\n            / SUM(sample_weight) AS avg_this_batted_distance_infield_per_pa,\n            SUM(other_batted_distance_infield_per_pa * sample_weight)\n            / SUM(sample_weight) AS avg_other_batted_distance_infield_per_pa,\n            avg_this_batted_distance_infield_per_pa\n            / (1 - avg_this_batted_distance_infield_per_pa) AS this_batted_distance_infield_odds,\n            avg_other_batted_distance_infield_per_pa\n            / (1 - avg_other_batted_distance_infield_per_pa) AS other_batted_distance_infield_odds,\n            this_batted_distance_infield_odds\n            / other_batted_distance_infield_odds AS batted_distance_infield_park_factor,\n            SUM(this_batted_distance_outfield_per_pa * sample_weight)\n            / SUM(sample_weight) AS avg_this_batted_distance_outfield_per_pa,\n            SUM(other_batted_distance_outfield_per_pa * sample_weight)\n            / SUM(sample_weight) AS avg_other_batted_distance_outfield_per_pa,\n            avg_this_batted_distance_outfield_per_pa\n            / (1 - avg_this_batted_distance_outfield_per_pa) AS this_batted_distance_outfield_odds,\n            avg_other_batted_distance_outfield_per_pa\n            / (1 - avg_other_batted_distance_outfield_per_pa) AS other_batted_distance_outfield_odds,\n            this_batted_distance_outfield_odds\n            / other_batted_distance_outfield_odds AS batted_distance_outfield_park_factor,\n            SUM(this_batted_distance_unknown_per_pa * sample_weight)\n            / SUM(sample_weight) AS avg_this_batted_distance_unknown_per_pa,\n            SUM(other_batted_distance_unknown_per_pa * sample_weight)\n            / SUM(sample_weight) AS avg_other_batted_distance_unknown_per_pa,\n            avg_this_batted_distance_unknown_per_pa\n            / (1 - avg_this_batted_distance_unknown_per_pa) AS this_batted_distance_unknown_odds,\n            avg_other_batted_distance_unknown_per_pa\n            / (1 - avg_other_batted_distance_unknown_per_pa) AS other_batted_distance_unknown_odds,\n            this_batted_distance_unknown_odds\n            / other_batted_distance_unknown_odds AS batted_distance_unknown_park_factor,\n            SUM(this_batted_angle_left_per_pa * sample_weight)\n            / SUM(sample_weight) AS avg_this_batted_angle_left_per_pa,\n            SUM(other_batted_angle_left_per_pa * sample_weight)\n            / SUM(sample_weight) AS avg_other_batted_angle_left_per_pa,\n            avg_this_batted_angle_left_per_pa\n            / (1 - avg_this_batted_angle_left_per_pa) AS this_batted_angle_left_odds,\n            avg_other_batted_angle_left_per_pa\n            / (1 - avg_other_batted_angle_left_per_pa) AS other_batted_angle_left_odds,\n            this_batted_angle_left_odds\n            / other_batted_angle_left_odds AS batted_angle_left_park_factor,\n            SUM(this_batted_angle_right_per_pa * sample_weight)\n            / SUM(sample_weight) AS avg_this_batted_angle_right_per_pa,\n            SUM(other_batted_angle_right_per_pa * sample_weight)\n            / SUM(sample_weight) AS avg_other_batted_angle_right_per_pa,\n            avg_this_batted_angle_right_per_pa\n            / (1 - avg_this_batted_angle_right_per_pa) AS this_batted_angle_right_odds,\n            avg_other_batted_angle_right_per_pa\n            / (1 - avg_other_batted_angle_right_per_pa) AS other_batted_angle_right_odds,\n            this_batted_angle_right_odds\n            / other_batted_angle_right_odds AS batted_angle_right_park_factor,\n            SUM(this_batted_angle_middle_per_pa * sample_weight)\n            / SUM(sample_weight) AS avg_this_batted_angle_middle_per_pa,\n            SUM(other_batted_angle_middle_per_pa * sample_weight)\n            / SUM(sample_weight) AS avg_other_batted_angle_middle_per_pa,\n            avg_this_batted_angle_middle_per_pa\n            / (1 - avg_this_batted_angle_middle_per_pa) AS this_batted_angle_middle_odds,\n            avg_other_batted_angle_middle_per_pa\n            / (1 - avg_other_batted_angle_middle_per_pa) AS other_batted_angle_middle_odds,\n            this_batted_angle_middle_odds\n            / other_batted_angle_middle_odds AS batted_angle_middle_park_factor,\n    FROM rate_calculation\n    GROUP BY 1, 2, 3\n),\n\nfinal AS (\n    SELECT\n        park_id,\n        season,\n        league,\n        ROUND(sqrt_sample_size, 0) AS sqrt_sample_size,\n            ROUND(singles_park_factor, 2) AS singles_park_factor,\n            ROUND(doubles_park_factor, 2) AS doubles_park_factor,\n            ROUND(triples_park_factor, 2) AS triples_park_factor,\n            ROUND(home_runs_park_factor, 2) AS home_runs_park_factor,\n            ROUND(strikeouts_park_factor, 2) AS strikeouts_park_factor,\n            ROUND(walks_park_factor, 2) AS walks_park_factor,\n            ROUND(batting_outs_park_factor, 2) AS batting_outs_park_factor,\n            ROUND(runs_park_factor, 2) AS runs_park_factor,\n            ROUND(balls_in_play_park_factor, 2) AS balls_in_play_park_factor,\n            ROUND(trajectory_fly_ball_park_factor, 2) AS trajectory_fly_ball_park_factor,\n            ROUND(trajectory_ground_ball_park_factor, 2) AS trajectory_ground_ball_park_factor,\n            ROUND(trajectory_line_drive_park_factor, 2) AS trajectory_line_drive_park_factor,\n            ROUND(trajectory_pop_up_park_factor, 2) AS trajectory_pop_up_park_factor,\n            ROUND(trajectory_unknown_park_factor, 2) AS trajectory_unknown_park_factor,\n            ROUND(batted_distance_infield_park_factor, 2) AS batted_distance_infield_park_factor,\n            ROUND(batted_distance_outfield_park_factor, 2) AS batted_distance_outfield_park_factor,\n            ROUND(batted_distance_unknown_park_factor, 2) AS batted_distance_unknown_park_factor,\n            ROUND(batted_angle_left_park_factor, 2) AS batted_angle_left_park_factor,\n            ROUND(batted_angle_right_park_factor, 2) AS batted_angle_right_park_factor,\n            ROUND(batted_angle_middle_park_factor, 2) AS batted_angle_middle_park_factor,\n    FROM weighted_average\n)\n\nSELECT * FROM final", "relation_name": "\"timeball\".\"main_models\".\"calc_park_factors_advanced\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:54.499946Z", "completed_at": "2023-12-09T18:55:54.505137Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:54.505815Z", "completed_at": "2023-12-09T18:55:54.505819Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007339000701904297, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.timeball.player_game_offense_stats", "compiled": true, "compiled_code": "\nWITH box_score AS (\n    SELECT\n        CASE WHEN bat.side = 'Home' THEN games.home_team_id ELSE games.away_team_id END AS team_id,\n        bat.*\n    FROM \"timeball\".\"main_models\".\"stg_box_score_batting_lines\" AS bat\n    -- This join ensures that we only get the box score lines for games that\n    -- do not have an event file.\n    INNER JOIN \"timeball\".\"main_models\".\"game_start_info\" AS games USING (game_id)\n    WHERE games.source_type = 'BoxScore'\n),\n\nfinal AS (\n    SELECT\n        game_id,\n        team_id,\n        player_id,\n        \n            SUM(plate_appearances)::UTINYINT AS plate_appearances,\n        \n            SUM(at_bats)::UTINYINT AS at_bats,\n        \n            SUM(hits)::UTINYINT AS hits,\n        \n            SUM(singles)::UTINYINT AS singles,\n        \n            SUM(doubles)::UTINYINT AS doubles,\n        \n            SUM(triples)::UTINYINT AS triples,\n        \n            SUM(home_runs)::UTINYINT AS home_runs,\n        \n            SUM(total_bases)::UTINYINT AS total_bases,\n        \n            SUM(strikeouts)::UTINYINT AS strikeouts,\n        \n            SUM(walks)::UTINYINT AS walks,\n        \n            SUM(intentional_walks)::UTINYINT AS intentional_walks,\n        \n            SUM(hit_by_pitches)::UTINYINT AS hit_by_pitches,\n        \n            SUM(sacrifice_hits)::UTINYINT AS sacrifice_hits,\n        \n            SUM(sacrifice_flies)::UTINYINT AS sacrifice_flies,\n        \n            SUM(reached_on_errors)::UTINYINT AS reached_on_errors,\n        \n            SUM(reached_on_interferences)::UTINYINT AS reached_on_interferences,\n        \n            SUM(inside_the_park_home_runs)::UTINYINT AS inside_the_park_home_runs,\n        \n            SUM(ground_rule_doubles)::UTINYINT AS ground_rule_doubles,\n        \n            SUM(infield_hits)::UTINYINT AS infield_hits,\n        \n            SUM(on_base_opportunities)::UTINYINT AS on_base_opportunities,\n        \n            SUM(on_base_successes)::UTINYINT AS on_base_successes,\n        \n            SUM(runs_batted_in)::UTINYINT AS runs_batted_in,\n        \n            SUM(grounded_into_double_plays)::UTINYINT AS grounded_into_double_plays,\n        \n            SUM(double_plays)::UTINYINT AS double_plays,\n        \n            SUM(triple_plays)::UTINYINT AS triple_plays,\n        \n            SUM(batting_outs)::UTINYINT AS batting_outs,\n        \n            SUM(balls_in_play)::UTINYINT AS balls_in_play,\n        \n            SUM(balls_batted)::UTINYINT AS balls_batted,\n        \n            SUM(trajectory_fly_ball)::UTINYINT AS trajectory_fly_ball,\n        \n            SUM(trajectory_ground_ball)::UTINYINT AS trajectory_ground_ball,\n        \n            SUM(trajectory_line_drive)::UTINYINT AS trajectory_line_drive,\n        \n            SUM(trajectory_pop_up)::UTINYINT AS trajectory_pop_up,\n        \n            SUM(trajectory_unknown)::UTINYINT AS trajectory_unknown,\n        \n            SUM(trajectory_known)::UTINYINT AS trajectory_known,\n        \n            SUM(trajectory_broad_air_ball)::UTINYINT AS trajectory_broad_air_ball,\n        \n            SUM(trajectory_broad_ground_ball)::UTINYINT AS trajectory_broad_ground_ball,\n        \n            SUM(trajectory_broad_unknown)::UTINYINT AS trajectory_broad_unknown,\n        \n            SUM(trajectory_broad_known)::UTINYINT AS trajectory_broad_known,\n        \n            SUM(bunts)::UTINYINT AS bunts,\n        \n            SUM(batted_distance_plate)::UTINYINT AS batted_distance_plate,\n        \n            SUM(batted_distance_infield)::UTINYINT AS batted_distance_infield,\n        \n            SUM(batted_distance_outfield)::UTINYINT AS batted_distance_outfield,\n        \n            SUM(batted_distance_unknown)::UTINYINT AS batted_distance_unknown,\n        \n            SUM(batted_distance_known)::UTINYINT AS batted_distance_known,\n        \n            SUM(fielded_by_battery)::UTINYINT AS fielded_by_battery,\n        \n            SUM(fielded_by_infielder)::UTINYINT AS fielded_by_infielder,\n        \n            SUM(fielded_by_outfielder)::UTINYINT AS fielded_by_outfielder,\n        \n            SUM(fielded_by_known)::UTINYINT AS fielded_by_known,\n        \n            SUM(fielded_by_unknown)::UTINYINT AS fielded_by_unknown,\n        \n            SUM(batted_angle_left)::UTINYINT AS batted_angle_left,\n        \n            SUM(batted_angle_right)::UTINYINT AS batted_angle_right,\n        \n            SUM(batted_angle_middle)::UTINYINT AS batted_angle_middle,\n        \n            SUM(batted_angle_unknown)::UTINYINT AS batted_angle_unknown,\n        \n            SUM(batted_angle_known)::UTINYINT AS batted_angle_known,\n        \n            SUM(batted_location_plate)::UTINYINT AS batted_location_plate,\n        \n            SUM(batted_location_right_infield)::UTINYINT AS batted_location_right_infield,\n        \n            SUM(batted_location_middle_infield)::UTINYINT AS batted_location_middle_infield,\n        \n            SUM(batted_location_left_infield)::UTINYINT AS batted_location_left_infield,\n        \n            SUM(batted_location_left_field)::UTINYINT AS batted_location_left_field,\n        \n            SUM(batted_location_center_field)::UTINYINT AS batted_location_center_field,\n        \n            SUM(batted_location_right_field)::UTINYINT AS batted_location_right_field,\n        \n            SUM(batted_location_unknown)::UTINYINT AS batted_location_unknown,\n        \n            SUM(batted_location_known)::UTINYINT AS batted_location_known,\n        \n            SUM(batted_balls_pulled)::UTINYINT AS batted_balls_pulled,\n        \n            SUM(batted_balls_opposite_field)::UTINYINT AS batted_balls_opposite_field,\n        \n            SUM(runs)::UTINYINT AS runs,\n        \n            SUM(times_reached_base)::UTINYINT AS times_reached_base,\n        \n            SUM(times_lead_runner)::UTINYINT AS times_lead_runner,\n        \n            SUM(times_force_on_runner)::UTINYINT AS times_force_on_runner,\n        \n            SUM(times_next_base_empty)::UTINYINT AS times_next_base_empty,\n        \n            SUM(stolen_base_opportunities)::UTINYINT AS stolen_base_opportunities,\n        \n            SUM(stolen_base_opportunities_second)::UTINYINT AS stolen_base_opportunities_second,\n        \n            SUM(stolen_base_opportunities_third)::UTINYINT AS stolen_base_opportunities_third,\n        \n            SUM(stolen_base_opportunities_home)::UTINYINT AS stolen_base_opportunities_home,\n        \n            SUM(stolen_bases)::UTINYINT AS stolen_bases,\n        \n            SUM(stolen_bases_second)::UTINYINT AS stolen_bases_second,\n        \n            SUM(stolen_bases_third)::UTINYINT AS stolen_bases_third,\n        \n            SUM(stolen_bases_home)::UTINYINT AS stolen_bases_home,\n        \n            SUM(caught_stealing)::UTINYINT AS caught_stealing,\n        \n            SUM(caught_stealing_second)::UTINYINT AS caught_stealing_second,\n        \n            SUM(caught_stealing_third)::UTINYINT AS caught_stealing_third,\n        \n            SUM(caught_stealing_home)::UTINYINT AS caught_stealing_home,\n        \n            SUM(picked_off)::UTINYINT AS picked_off,\n        \n            SUM(picked_off_first)::UTINYINT AS picked_off_first,\n        \n            SUM(picked_off_second)::UTINYINT AS picked_off_second,\n        \n            SUM(picked_off_third)::UTINYINT AS picked_off_third,\n        \n            SUM(picked_off_caught_stealing)::UTINYINT AS picked_off_caught_stealing,\n        \n            SUM(outs_on_basepaths)::UTINYINT AS outs_on_basepaths,\n        \n            SUM(unforced_outs_on_basepaths)::UTINYINT AS unforced_outs_on_basepaths,\n        \n            SUM(outs_avoided_on_errors)::UTINYINT AS outs_avoided_on_errors,\n        \n            SUM(advances_on_wild_pitches)::UTINYINT AS advances_on_wild_pitches,\n        \n            SUM(advances_on_passed_balls)::UTINYINT AS advances_on_passed_balls,\n        \n            SUM(advances_on_balks)::UTINYINT AS advances_on_balks,\n        \n            SUM(advances_on_unspecified_plays)::UTINYINT AS advances_on_unspecified_plays,\n        \n            SUM(advances_on_defensive_indifference)::UTINYINT AS advances_on_defensive_indifference,\n        \n            SUM(advances_on_errors)::UTINYINT AS advances_on_errors,\n        \n            SUM(plate_appearances_while_on_base)::UTINYINT AS plate_appearances_while_on_base,\n        \n            SUM(balls_in_play_while_running)::UTINYINT AS balls_in_play_while_running,\n        \n            SUM(balls_in_play_while_on_base)::UTINYINT AS balls_in_play_while_on_base,\n        \n            SUM(batter_total_bases_while_running)::UTINYINT AS batter_total_bases_while_running,\n        \n            SUM(batter_total_bases_while_on_base)::UTINYINT AS batter_total_bases_while_on_base,\n        \n            SUM(extra_base_chances)::UTINYINT AS extra_base_chances,\n        \n            SUM(extra_base_advance_attempts)::UTINYINT AS extra_base_advance_attempts,\n        \n            SUM(extra_bases_taken)::UTINYINT AS extra_bases_taken,\n        \n            SUM(bases_advanced)::UTINYINT AS bases_advanced,\n        \n            SUM(bases_advanced_on_balls_in_play)::UTINYINT AS bases_advanced_on_balls_in_play,\n        \n            SUM(surplus_bases_advanced_on_balls_in_play)::INT1 AS surplus_bases_advanced_on_balls_in_play,\n        \n            SUM(outs_on_extra_base_advance_attempts)::UTINYINT AS outs_on_extra_base_advance_attempts,\n        \n            SUM(pitches)::UTINYINT AS pitches,\n        \n            SUM(swings)::UTINYINT AS swings,\n        \n            SUM(swings_with_contact)::UTINYINT AS swings_with_contact,\n        \n            SUM(strikes)::UTINYINT AS strikes,\n        \n            SUM(strikes_called)::UTINYINT AS strikes_called,\n        \n            SUM(strikes_swinging)::UTINYINT AS strikes_swinging,\n        \n            SUM(strikes_foul)::UTINYINT AS strikes_foul,\n        \n            SUM(strikes_foul_tip)::UTINYINT AS strikes_foul_tip,\n        \n            SUM(strikes_in_play)::UTINYINT AS strikes_in_play,\n        \n            SUM(strikes_unknown)::UTINYINT AS strikes_unknown,\n        \n            SUM(balls)::UTINYINT AS balls,\n        \n            SUM(balls_called)::UTINYINT AS balls_called,\n        \n            SUM(balls_intentional)::UTINYINT AS balls_intentional,\n        \n            SUM(balls_automatic)::UTINYINT AS balls_automatic,\n        \n            SUM(unknown_pitches)::UTINYINT AS unknown_pitches,\n        \n            SUM(pitchouts)::UTINYINT AS pitchouts,\n        \n            SUM(pitcher_pickoff_attempts)::UTINYINT AS pitcher_pickoff_attempts,\n        \n            SUM(catcher_pickoff_attempts)::UTINYINT AS catcher_pickoff_attempts,\n        \n            SUM(pitches_blocked_by_catcher)::UTINYINT AS pitches_blocked_by_catcher,\n        \n            SUM(pitches_with_runners_going)::UTINYINT AS pitches_with_runners_going,\n        \n            SUM(passed_balls)::UTINYINT AS passed_balls,\n        \n            SUM(wild_pitches)::UTINYINT AS wild_pitches,\n        \n            SUM(balks)::UTINYINT AS balks,\n        \n            SUM(left_on_base)::UTINYINT AS left_on_base,\n        \n            SUM(left_on_base_with_two_outs)::UTINYINT AS left_on_base_with_two_outs,\n        \n    FROM \"timeball\".\"main_models\".\"event_offense_stats\"\n    GROUP BY 1, 2, 3\n    UNION ALL BY NAME\n    SELECT\n        game_id,\n        team_id,\n        batter_id AS player_id,\n        at_bats,\n        runs,\n        hits,\n        doubles,\n        triples,\n        home_runs,\n        runs_batted_in,\n        strikeouts,\n        walks,\n        intentional_walks,\n        hit_by_pitches,\n        sacrifice_hits,\n        sacrifice_flies,\n        NULL AS reached_on_errors,\n        NULL AS reached_on_interferences,\n        grounded_into_double_plays,\n        NULL AS double_plays,\n        NULL AS triple_plays,\n        singles,\n        total_bases,\n        plate_appearances,\n        on_base_opportunities,\n        on_base_successes,\n        batting_outs,\n        stolen_bases,\n        caught_stealing,\n    FROM box_score\n)\n\nSELECT * FROM final", "relation_name": "\"timeball\".\"main_models\".\"player_game_offense_stats\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:54.508190Z", "completed_at": "2023-12-09T18:55:54.511348Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:54.512003Z", "completed_at": "2023-12-09T18:55:54.512006Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00527501106262207, "adapter_response": {}, "message": null, "failures": null, "unique_id": "analysis.timeball.gb_babip_correlations", "compiled": true, "compiled_code": "WITH t AS (SELECT\n    player_id,\n    BOOL_OR(throws = 'R')::INT AS is_righty,\n    SUM(trajectory_ground_ball) AS gb,\n    SUM(strikeouts)/SUM(batters_faced) AS k_rate,\n    SUM(walks)/SUM(batters_faced) AS bb_rate,\n    SUM(balls_in_play)/SUM(batters_faced) AS bip_rate,\n    SUM(trajectory_ground_ball)/SUM(trajectory_known) AS gb_rate,\n    SUM(trajectory_broad_air_ball)/SUM(trajectory_known) AS air_ball_rate,\n    SUM(trajectory_line_drive)/SUM(trajectory_broad_air_ball) AS ld_rate,\n    SUM(trajectory_pop_up)/SUM(trajectory_broad_air_ball) AS pu_rate,\n    SUM(home_runs)/SUM(trajectory_broad_air_ball) AS hr_rate,\n    k_rate / bb_rate AS kbb,\n    SUM(trajectory_ground_ball * batted_balls_pulled)/gb AS pulled_gb,\n    SUM(trajectory_ground_ball * batted_balls_opposite_field)/gb AS oppo_gb,\n    SUM(trajectory_ground_ball * batted_angle_middle)/gb AS middle_gb,\n    SUM(trajectory_broad_air_ball * batted_balls_pulled)/SUM(trajectory_broad_air_ball) AS pulled_air,\n    SUM(trajectory_broad_air_ball * batted_balls_opposite_field)/SUM(trajectory_broad_air_ball) AS oppo_air,\n    SUM(trajectory_broad_air_ball * batted_angle_middle)/SUM(trajectory_broad_air_ball) AS middle_air,\n    SUM(trajectory_ground_ball * fielded_by_battery)/gb AS weak_grounders,\n    SUM(trajectory_ground_ball * hits)/gb AS gb_hit_rate,\n    SUM(infield_hits)/gb AS infield_hit_rate,\nFROM  \"timeball\".\"main_models\".\"event_pitching_stats\"\nINNER JOIN \"timeball\".\"main_models\".\"game_start_info\" g USING (game_id)\nINNER JOIN \"timeball\".\"main_models\".\"people\" USING (player_id)\nWHERE g.season > 1988\n    -- trajectory type is missing not at random in these years\n    AND season NOT BETWEEN 2000 AND 2001\n    AND (trajectory_known OR NOT balls_batted)\n    AND (fielded_by_known OR NOT balls_batted)\n    AND batters_faced = 1\n    AND bunts = 0\nGROUP BY 1\nHAVING gb > 500\n)\nSELECT COUNT(*),\n    CORR(is_righty, gb_hit_rate) AS righty_corr,\n    CORR(weak_grounders, gb_hit_rate) AS weak_corr,\n    CORR(kbb, gb_hit_rate) AS kbb_corr,\n    CORR(k_rate, gb_hit_rate) AS k_corr,\n    CORR(bb_rate, gb_hit_rate) AS bb_corr,\n    CORR(pulled_gb, gb_hit_rate) AS pulled_gb_corr,\n    CORR(oppo_gb, gb_hit_rate) AS oppo_gb_corr,\n    CORR(middle_gb, gb_hit_rate) AS middle_gb_corr,\n    CORR(infield_hit_rate, gb_hit_rate) AS infield_corr,\n    CORR(pulled_air, gb_hit_rate) AS pulled_air_corr,\n    CORR(oppo_air, gb_hit_rate) AS oppo_air_corr,\n    CORR(middle_air, gb_hit_rate) AS middle_air_corr,\n    CORR(bip_rate, gb_hit_rate) AS bip_rate_corr,\n    CORR(gb_rate, gb_hit_rate) AS gb_rate_corr,\n    CORR(ld_rate, gb_hit_rate) AS ld_rate_corr,\n    CORR(pu_rate, gb_hit_rate) AS pu_rate_corr,\n    CORR(hr_rate, gb_hit_rate) AS hr_rate_corr,\n    CORR(air_ball_rate, gb_hit_rate) AS air_ball_rate_corr\nFROM t", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:54.514128Z", "completed_at": "2023-12-09T18:55:54.516855Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:54.517483Z", "completed_at": "2023-12-09T18:55:54.517487Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004698276519775391, "adapter_response": {}, "message": null, "failures": null, "unique_id": "analysis.timeball.ground_ball_hits", "compiled": true, "compiled_code": "WITH t AS (\n    SELECT\n    player_id,\n    COUNT(*) as ab,\n    SUM(hits) AS hits,\n    SUM(hits * fielded_by_outfielder) AS of_hits,\n    SUM(hits)/COUNT(*) AS hit_rate,\n    SUM(hits * fielded_by_infielder)/COUNT(*) AS if_hit_rate,\n    of_hits/COUNT(*) AS of_hit_rate,\nFROM \"timeball\".\"main_models\".\"event_pitching_stats\" e\nJOIN \"timeball\".\"main_models\".\"stg_games\" USING (game_id)\nWHERE at_bats = 1\n    AND trajectory_ground_ball = 1\n    AND fielded_by_known = 1\n    AND season BETWEEN 1993 AND 1999\nGROUP BY 1 \nHAVING COUNT(*) > 100\nORDER BY 5 DESC\n)\n-- IF/OF variance contributes roughly evenly for hitters,\n-- but pitcher variance explained much more by OF\n-- Inference: infield hit BABIP should be ignored for pitchers but not hitters\n-- SELECT regr_r2(hit_rate, if_hit_rate), regr_r2(hit_rate, of_hit_rate)\n-- FROM t #}", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:54.519568Z", "completed_at": "2023-12-09T18:55:54.522204Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:54.522837Z", "completed_at": "2023-12-09T18:55:54.522840Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004608154296875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "analysis.timeball.most_blown_save_rbi", "compiled": true, "compiled_code": "SELECT  \n    o.player_id,\n    COUNT(*)\nFROM \"timeball\".\"main_models\".\"event_offense_stats\" AS o\nWHERE runs_batted_in > 0\n    AND event_key IN (SELECT event_key FROM \"timeball\".\"main_models\".\"event_pitching_flags\" WHERE blown_save_flag)\nGROUP BY 1", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:54.525006Z", "completed_at": "2023-12-09T18:55:54.533971Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:54.534646Z", "completed_at": "2023-12-09T18:55:54.534650Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.011062860488891602, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.timeball.player_game_pitching_stats", "compiled": true, "compiled_code": "\nWITH event_agg AS (\n    SELECT\n        game_id,\n        player_id,\n        MIN(team_id) AS team_id,\n        \n                \n            \n            SUM(batters_faced)::UTINYINT AS batters_faced,\n        \n                \n            \n            SUM(outs_recorded)::UTINYINT AS outs_recorded,\n        \n                \n            \n            SUM(inherited_runners_scored)::UTINYINT AS inherited_runners_scored,\n        \n                \n            \n            SUM(bequeathed_runners_scored)::UTINYINT AS bequeathed_runners_scored,\n        \n                \n            \n            SUM(team_unearned_runs)::UTINYINT AS team_unearned_runs,\n        \n                \n            \n            SUM(plate_appearances)::UTINYINT AS plate_appearances,\n        \n                \n            \n            SUM(at_bats)::UTINYINT AS at_bats,\n        \n                \n            \n            SUM(hits)::UTINYINT AS hits,\n        \n                \n            \n            SUM(singles)::UTINYINT AS singles,\n        \n                \n            \n            SUM(doubles)::UTINYINT AS doubles,\n        \n                \n            \n            SUM(triples)::UTINYINT AS triples,\n        \n                \n            \n            SUM(home_runs)::UTINYINT AS home_runs,\n        \n                \n            \n            SUM(total_bases)::UTINYINT AS total_bases,\n        \n                \n            \n            SUM(strikeouts)::UTINYINT AS strikeouts,\n        \n                \n            \n            SUM(walks)::UTINYINT AS walks,\n        \n                \n            \n            SUM(intentional_walks)::UTINYINT AS intentional_walks,\n        \n                \n            \n            SUM(hit_by_pitches)::UTINYINT AS hit_by_pitches,\n        \n                \n            \n            SUM(sacrifice_hits)::UTINYINT AS sacrifice_hits,\n        \n                \n            \n            SUM(sacrifice_flies)::UTINYINT AS sacrifice_flies,\n        \n                \n            \n            SUM(reached_on_errors)::UTINYINT AS reached_on_errors,\n        \n                \n            \n            SUM(reached_on_interferences)::UTINYINT AS reached_on_interferences,\n        \n                \n            \n            SUM(inside_the_park_home_runs)::UTINYINT AS inside_the_park_home_runs,\n        \n                \n            \n            SUM(ground_rule_doubles)::UTINYINT AS ground_rule_doubles,\n        \n                \n            \n            SUM(infield_hits)::UTINYINT AS infield_hits,\n        \n                \n            \n            SUM(on_base_opportunities)::UTINYINT AS on_base_opportunities,\n        \n                \n            \n            SUM(on_base_successes)::UTINYINT AS on_base_successes,\n        \n                \n            \n            SUM(grounded_into_double_plays)::UTINYINT AS grounded_into_double_plays,\n        \n                \n            \n            SUM(double_plays)::UTINYINT AS double_plays,\n        \n                \n            \n            SUM(triple_plays)::UTINYINT AS triple_plays,\n        \n                \n            \n            SUM(batting_outs)::UTINYINT AS batting_outs,\n        \n                \n            \n            SUM(balls_in_play)::UTINYINT AS balls_in_play,\n        \n                \n            \n            SUM(balls_batted)::UTINYINT AS balls_batted,\n        \n                \n            \n            SUM(trajectory_fly_ball)::UTINYINT AS trajectory_fly_ball,\n        \n                \n            \n            SUM(trajectory_ground_ball)::UTINYINT AS trajectory_ground_ball,\n        \n                \n            \n            SUM(trajectory_line_drive)::UTINYINT AS trajectory_line_drive,\n        \n                \n            \n            SUM(trajectory_pop_up)::UTINYINT AS trajectory_pop_up,\n        \n                \n            \n            SUM(trajectory_unknown)::UTINYINT AS trajectory_unknown,\n        \n                \n            \n            SUM(trajectory_known)::UTINYINT AS trajectory_known,\n        \n                \n            \n            SUM(trajectory_broad_air_ball)::UTINYINT AS trajectory_broad_air_ball,\n        \n                \n            \n            SUM(trajectory_broad_ground_ball)::UTINYINT AS trajectory_broad_ground_ball,\n        \n                \n            \n            SUM(trajectory_broad_unknown)::UTINYINT AS trajectory_broad_unknown,\n        \n                \n            \n            SUM(trajectory_broad_known)::UTINYINT AS trajectory_broad_known,\n        \n                \n            \n            SUM(bunts)::UTINYINT AS bunts,\n        \n                \n            \n            SUM(batted_distance_plate)::UTINYINT AS batted_distance_plate,\n        \n                \n            \n            SUM(batted_distance_infield)::UTINYINT AS batted_distance_infield,\n        \n                \n            \n            SUM(batted_distance_outfield)::UTINYINT AS batted_distance_outfield,\n        \n                \n            \n            SUM(batted_distance_unknown)::UTINYINT AS batted_distance_unknown,\n        \n                \n            \n            SUM(batted_distance_known)::UTINYINT AS batted_distance_known,\n        \n                \n            \n            SUM(fielded_by_battery)::UTINYINT AS fielded_by_battery,\n        \n                \n            \n            SUM(fielded_by_infielder)::UTINYINT AS fielded_by_infielder,\n        \n                \n            \n            SUM(fielded_by_outfielder)::UTINYINT AS fielded_by_outfielder,\n        \n                \n            \n            SUM(fielded_by_known)::UTINYINT AS fielded_by_known,\n        \n                \n            \n            SUM(fielded_by_unknown)::UTINYINT AS fielded_by_unknown,\n        \n                \n            \n            SUM(batted_angle_left)::UTINYINT AS batted_angle_left,\n        \n                \n            \n            SUM(batted_angle_right)::UTINYINT AS batted_angle_right,\n        \n                \n            \n            SUM(batted_angle_middle)::UTINYINT AS batted_angle_middle,\n        \n                \n            \n            SUM(batted_angle_unknown)::UTINYINT AS batted_angle_unknown,\n        \n                \n            \n            SUM(batted_angle_known)::UTINYINT AS batted_angle_known,\n        \n                \n            \n            SUM(batted_location_plate)::UTINYINT AS batted_location_plate,\n        \n                \n            \n            SUM(batted_location_right_infield)::UTINYINT AS batted_location_right_infield,\n        \n                \n            \n            SUM(batted_location_middle_infield)::UTINYINT AS batted_location_middle_infield,\n        \n                \n            \n            SUM(batted_location_left_infield)::UTINYINT AS batted_location_left_infield,\n        \n                \n            \n            SUM(batted_location_left_field)::UTINYINT AS batted_location_left_field,\n        \n                \n            \n            SUM(batted_location_center_field)::UTINYINT AS batted_location_center_field,\n        \n                \n            \n            SUM(batted_location_right_field)::UTINYINT AS batted_location_right_field,\n        \n                \n            \n            SUM(batted_location_unknown)::UTINYINT AS batted_location_unknown,\n        \n                \n            \n            SUM(batted_location_known)::UTINYINT AS batted_location_known,\n        \n                \n            \n            SUM(batted_balls_pulled)::UTINYINT AS batted_balls_pulled,\n        \n                \n            \n            SUM(batted_balls_opposite_field)::UTINYINT AS batted_balls_opposite_field,\n        \n                \n            \n            SUM(runs)::UTINYINT AS runs,\n        \n                \n            \n            SUM(times_reached_base)::UTINYINT AS times_reached_base,\n        \n                \n            \n            SUM(stolen_base_opportunities)::UTINYINT AS stolen_base_opportunities,\n        \n                \n            \n            SUM(stolen_base_opportunities_second)::UTINYINT AS stolen_base_opportunities_second,\n        \n                \n            \n            SUM(stolen_base_opportunities_third)::UTINYINT AS stolen_base_opportunities_third,\n        \n                \n            \n            SUM(stolen_base_opportunities_home)::UTINYINT AS stolen_base_opportunities_home,\n        \n                \n            \n            SUM(stolen_bases)::UTINYINT AS stolen_bases,\n        \n                \n            \n            SUM(stolen_bases_second)::UTINYINT AS stolen_bases_second,\n        \n                \n            \n            SUM(stolen_bases_third)::UTINYINT AS stolen_bases_third,\n        \n                \n            \n            SUM(stolen_bases_home)::UTINYINT AS stolen_bases_home,\n        \n                \n            \n            SUM(caught_stealing)::UTINYINT AS caught_stealing,\n        \n                \n            \n            SUM(caught_stealing_second)::UTINYINT AS caught_stealing_second,\n        \n                \n            \n            SUM(caught_stealing_third)::UTINYINT AS caught_stealing_third,\n        \n                \n            \n            SUM(caught_stealing_home)::UTINYINT AS caught_stealing_home,\n        \n                \n            \n            SUM(picked_off)::UTINYINT AS picked_off,\n        \n                \n            \n            SUM(picked_off_first)::UTINYINT AS picked_off_first,\n        \n                \n            \n            SUM(picked_off_second)::UTINYINT AS picked_off_second,\n        \n                \n            \n            SUM(picked_off_third)::UTINYINT AS picked_off_third,\n        \n                \n            \n            SUM(picked_off_caught_stealing)::UTINYINT AS picked_off_caught_stealing,\n        \n                \n            \n            SUM(outs_on_basepaths)::UTINYINT AS outs_on_basepaths,\n        \n                \n            \n            SUM(unforced_outs_on_basepaths)::UTINYINT AS unforced_outs_on_basepaths,\n        \n                \n            \n            SUM(outs_avoided_on_errors)::UTINYINT AS outs_avoided_on_errors,\n        \n                \n            \n            SUM(advances_on_wild_pitches)::UTINYINT AS advances_on_wild_pitches,\n        \n                \n            \n            SUM(advances_on_passed_balls)::UTINYINT AS advances_on_passed_balls,\n        \n                \n            \n            SUM(advances_on_balks)::UTINYINT AS advances_on_balks,\n        \n                \n            \n            SUM(advances_on_unspecified_plays)::UTINYINT AS advances_on_unspecified_plays,\n        \n                \n            \n            SUM(advances_on_defensive_indifference)::UTINYINT AS advances_on_defensive_indifference,\n        \n                \n            \n            SUM(advances_on_errors)::UTINYINT AS advances_on_errors,\n        \n                \n            \n            SUM(extra_base_chances)::UTINYINT AS extra_base_chances,\n        \n                \n            \n            SUM(extra_base_advance_attempts)::UTINYINT AS extra_base_advance_attempts,\n        \n                \n            \n            SUM(extra_bases_taken)::UTINYINT AS extra_bases_taken,\n        \n                \n            \n            SUM(bases_advanced)::INT2 AS bases_advanced,\n        \n                \n            \n            SUM(bases_advanced_on_balls_in_play)::INT2 AS bases_advanced_on_balls_in_play,\n        \n                \n            \n            SUM(surplus_bases_advanced_on_balls_in_play)::INT2 AS surplus_bases_advanced_on_balls_in_play,\n        \n                \n            \n            SUM(outs_on_extra_base_advance_attempts)::UTINYINT AS outs_on_extra_base_advance_attempts,\n        \n                \n            \n            SUM(pitches)::USMALLINT AS pitches,\n        \n                \n            \n            SUM(swings)::UTINYINT AS swings,\n        \n                \n            \n            SUM(swings_with_contact)::UTINYINT AS swings_with_contact,\n        \n                \n            \n            SUM(strikes)::UTINYINT AS strikes,\n        \n                \n            \n            SUM(strikes_called)::UTINYINT AS strikes_called,\n        \n                \n            \n            SUM(strikes_swinging)::UTINYINT AS strikes_swinging,\n        \n                \n            \n            SUM(strikes_foul)::UTINYINT AS strikes_foul,\n        \n                \n            \n            SUM(strikes_foul_tip)::UTINYINT AS strikes_foul_tip,\n        \n                \n            \n            SUM(strikes_in_play)::UTINYINT AS strikes_in_play,\n        \n                \n            \n            SUM(strikes_unknown)::UTINYINT AS strikes_unknown,\n        \n                \n            \n            SUM(balls)::UTINYINT AS balls,\n        \n                \n            \n            SUM(balls_called)::UTINYINT AS balls_called,\n        \n                \n            \n            SUM(balls_intentional)::UTINYINT AS balls_intentional,\n        \n                \n            \n            SUM(balls_automatic)::UTINYINT AS balls_automatic,\n        \n                \n            \n            SUM(unknown_pitches)::UTINYINT AS unknown_pitches,\n        \n                \n            \n            SUM(pitchouts)::UTINYINT AS pitchouts,\n        \n                \n            \n            SUM(pitcher_pickoff_attempts)::UTINYINT AS pitcher_pickoff_attempts,\n        \n                \n            \n            SUM(catcher_pickoff_attempts)::UTINYINT AS catcher_pickoff_attempts,\n        \n                \n            \n            SUM(pitches_blocked_by_catcher)::USMALLINT AS pitches_blocked_by_catcher,\n        \n                \n            \n            SUM(pitches_with_runners_going)::USMALLINT AS pitches_with_runners_going,\n        \n                \n            \n            SUM(passed_balls)::UTINYINT AS passed_balls,\n        \n                \n            \n            SUM(wild_pitches)::UTINYINT AS wild_pitches,\n        \n                \n            \n            SUM(balks)::UTINYINT AS balks,\n        \n                \n            \n            SUM(left_on_base)::UTINYINT AS left_on_base,\n        \n                \n            \n            SUM(left_on_base_with_two_outs)::UTINYINT AS left_on_base_with_two_outs,\n        \n    FROM \"timeball\".\"main_models\".\"event_pitching_stats\"\n    GROUP BY 1, 2\n),\n\nflag_agg AS (\n  SELECT\n        game_id,\n        pitcher_id AS player_id,\n        -- Some of these are SUM/COUNT because a pitcher could record separate appearances during the game\n        -- so, theoretically, a pitcher could blow multiple saves in the same game\n        BOOL_OR(starting_pitcher_flag)::UTINYINT AS games_started,\n        SUM(inherited_runners)::UTINYINT AS inherited_runners,\n        -- TODO: A bequeathed runner appears to be defined as the number of runners left on base\n        -- when a pitcher leaves the game, regardless of whether those runners were inherited\n        -- from a previous pitcher. This causes a double-counting issue, which we'll have to\n        -- address either by applying bequeathed runner scoring to multiple pitchers\n        -- or a bequeathal to a single pitcher.\n        SUM(bequeathed_runners)::UTINYINT AS bequeathed_runners,\n        BOOL_OR(new_relief_pitcher_flag)::UTINYINT AS games_relieved,\n        BOOL_OR(pitcher_finish_flag)::UTINYINT AS games_finished,\n        COUNT_IF(save_situation_start_flag)::UTINYINT AS save_situations_entered,\n        COUNT_IF(hold_flag)::UTINYINT AS holds,\n        COUNT_IF(blown_save_flag)::UTINYINT AS blown_saves,\n        -- This could differ from save info in the game-level table if e.g.\n        -- the scorekeeper decided to award a win by judgement\n        BOOL_OR(save_flag)::UTINYINT AS saves_by_rule,\n    FROM \"timeball\".\"main_models\".\"event_pitching_flags\"\n    GROUP BY 1, 2  \n),\n\nevents_with_flags AS (\n    SELECT\n        event_agg.*,\n        flag_agg.* EXCLUDE (game_id, player_id),\n    FROM event_agg\n    LEFT JOIN flag_agg USING (game_id, player_id)\n),\n\nbox_agg AS (\n    SELECT\n        game_id,\n        stats.pitcher_id AS player_id,\n        ANY_VALUE(CASE WHEN stats.side = 'Home' THEN games.home_team_id ELSE games.away_team_id END) AS team_id,\n        SUM(stats.outs_recorded)::UTINYINT AS outs_recorded,\n        SUM(stats.batters_faced)::UTINYINT AS batters_faced,\n        SUM(stats.hits)::UTINYINT AS hits,\n        SUM(stats.doubles)::UTINYINT AS doubles,\n        SUM(stats.triples)::UTINYINT AS triples,\n        SUM(stats.home_runs)::UTINYINT AS home_runs,\n        SUM(stats.runs)::UTINYINT AS runs,\n        SUM(stats.earned_runs)::UTINYINT AS earned_runs,\n        SUM(stats.walks)::UTINYINT AS walks,\n        SUM(stats.intentional_walks)::UTINYINT AS intentional_walks,\n        SUM(stats.strikeouts)::UTINYINT AS strikeouts,\n        SUM(stats.hit_by_pitches)::UTINYINT AS hit_by_pitches,\n        SUM(stats.wild_pitches)::UTINYINT AS wild_pitches,\n        SUM(stats.balks)::UTINYINT AS balks,\n        SUM(stats.sacrifice_hits)::UTINYINT AS sacrifice_hits,\n        SUM(stats.sacrifice_flies)::UTINYINT AS sacrifice_flies,\n        SUM(stats.singles)::UTINYINT AS singles,\n        SUM(stats.total_bases)::UTINYINT AS total_bases,\n        SUM(stats.on_base_opportunities)::UTINYINT AS on_base_opportunities,\n        SUM(stats.on_base_successes)::UTINYINT AS on_base_successes,\n        SUM(stats.games_started)::UTINYINT AS games_started,\n        SUM(stats.games_relieved)::UTINYINT AS games_relieved,\n        SUM(stats.games_finished)::UTINYINT AS games_finished,\n    FROM \"timeball\".\"main_models\".\"stg_box_score_pitching_lines\" AS stats\n    -- This join ensures that we only get the box score lines for games that\n    -- do not have an event file.\n    INNER JOIN \"timeball\".\"main_models\".\"stg_games\" AS games USING (game_id)\n    WHERE games.source_type = 'BoxScore'\n    GROUP BY 1, 2\n),\n\nunioned AS (\n    SELECT * FROM events_with_flags\n    UNION ALL BY NAME\n    SELECT * FROM box_agg\n),\n\nwith_game_info AS (\n    SELECT\n        game_id,\n        player_id,\n        unioned.team_id,\n        ROUND(unioned.outs_recorded / 3, 4)::DECIMAL(6, 4) AS innings_pitched,\n        CASE WHEN player_id = games.winning_pitcher_id THEN 1 ELSE 0 END::UTINYINT AS wins,\n        CASE WHEN player_id = games.losing_pitcher_id THEN 1 ELSE 0 END::UTINYINT AS losses,\n        CASE WHEN player_id = games.save_pitcher_id THEN 1 ELSE 0 END::UTINYINT AS saves,\n        -- Box score will have ER directly, but event data will need the join\n        COALESCE(earned_runs.earned_runs, unioned.earned_runs)::UTINYINT AS earned_runs,\n        unioned.* EXCLUDE (game_id, player_id, team_id, earned_runs),\n        (saves + unioned.blown_saves)::UTINYINT AS save_opportunities,\n    FROM unioned\n    LEFT JOIN \"timeball\".\"main_models\".\"stg_games\" AS games USING (game_id)\n    LEFT JOIN \"timeball\".\"main_models\".\"stg_game_earned_runs\" AS earned_runs USING (game_id, player_id)\n),\n\nfinal AS (\n    SELECT\n        *,\n        CASE WHEN COUNT(*) OVER team_game = 1\n                THEN 1\n            ELSE 0\n        END::UTINYINT AS complete_games,\n        -- It's possible to record a shutout without a complete game\n        -- if no other pitchers record outs (see Ernie Shore)\n        CASE WHEN SUM(runs) OVER team_game = 0\n                AND SUM(outs_recorded) OVER team_game = outs_recorded\n                THEN 1\n            ELSE 0\n        END::UTINYINT AS shutouts,\n        CASE WHEN games_started = 1 AND outs_recorded >= 18 AND earned_runs <= 3 THEN 1 ELSE 0 END::UTINYINT AS quality_starts,\n        CASE WHEN games_started = 1 AND quality_starts = 0 AND wins = 1 THEN 1 ELSE 0 END::UTINYINT AS cheap_wins,\n        CASE WHEN quality_starts = 1 AND losses = 1 THEN 1 ELSE 0 END::UTINYINT AS tough_losses,\n        CASE WHEN games_started = 1 AND wins + losses = 0 THEN 1 ELSE 0 END::UTINYINT AS no_decisions,\n        CASE WHEN complete_games = 1 AND hits = 0 AND outs_recorded >= 27 THEN 1 ELSE 0 END::UTINYINT AS no_hitters,\n        -- Easy to calculate perfect games for games with event files, but box scores don't have ROEs.\n        -- The logic here would be broken if a batter reached on an error and then was out on the bases,\n        -- but no such event happened in prior to the event data era (maybe ever?)\n        (\n        CASE WHEN no_hitters = 1 AND (times_reached_base = 0\n                OR (outs_recorded >= batters_faced AND COALESCE(walks, 0) + COALESCE(hit_by_pitches, 0) = 0) \n                ) THEN 1 \n            ELSE 0 END)::UTINYINT AS perfect_games, \n    FROM with_game_info\n    WINDOW team_game AS (PARTITION BY team_id, game_id)\n)\n\nSELECT * FROM final", "relation_name": "\"timeball\".\"main_models\".\"player_game_pitching_stats\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:54.536864Z", "completed_at": "2023-12-09T18:55:54.540840Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:54.541508Z", "completed_at": "2023-12-09T18:55:54.541512Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0060117244720458984, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.timeball.game_results", "compiled": true, "compiled_code": "\nWITH event_and_box_results AS (\n    SELECT\n        game_id,\n        games.date,\n        games.duration_minutes,\n        games.winning_pitcher_id,\n        games.losing_pitcher_id,\n        games.save_pitcher_id,\n        games.game_winning_rbi_player_id,\n        line_scores.home_runs_scored,\n        line_scores.away_runs_scored,\n        line_scores.home_line_score,\n        line_scores.away_line_score,\n        line_scores.duration_outs,\n    FROM \"timeball\".\"main_models\".\"stg_games\" AS games\n    LEFT JOIN \"timeball\".\"main_models\".\"game_line_scores\" AS line_scores USING (game_id)\n\n),\n\ngamelog_results AS (\n    SELECT\n        game_id,\n        date,\n        duration_minutes,\n        home_runs_scored,\n        away_runs_scored,\n        away_line_score,\n        home_line_score,\n    FROM \"timeball\".\"main_models\".\"stg_gamelog\"\n    WHERE game_id NOT IN (SELECT game_id FROM event_and_box_results)\n),\n\nunioned AS (\n    SELECT *\n    FROM gamelog_results\n    UNION ALL BY NAME\n    SELECT *\n    FROM event_and_box_results\n),\n\nfinal AS (\n    SELECT\n        game_id,\n        start_info.season,\n        start_info.game_type,\n        COALESCE(suspensions.date_resumed, unioned.date) AS game_finish_date,\n        start_info.home_team_id,\n        start_info.away_team_id,\n        CASE\n            WHEN forfeits.winning_side = 'Home'\n                THEN start_info.home_team_id\n            WHEN forfeits.winning_side = 'Away'\n                THEN start_info.away_team_id\n            WHEN unioned.home_runs_scored > unioned.away_runs_scored\n                THEN start_info.home_team_id\n            WHEN unioned.home_runs_scored < unioned.away_runs_scored\n                THEN start_info.away_team_id\n        END AS winning_team_id,\n        CASE\n            WHEN winning_team_id = start_info.home_team_id\n                THEN start_info.away_team_id\n            WHEN winning_team_id = start_info.away_team_id\n                THEN start_info.home_team_id\n        END AS losing_team_id,\n        CASE\n            WHEN winning_team_id = start_info.home_team_id\n                THEN unioned.home_runs_scored\n            WHEN winning_team_id = start_info.away_team_id\n                THEN unioned.away_runs_scored\n        END::UTINYINT AS winning_team_score,\n        CASE\n            WHEN winning_team_id = start_info.home_team_id\n                THEN unioned.away_runs_scored\n            WHEN winning_team_id = start_info.away_team_id\n                THEN unioned.home_runs_scored\n        END::UTINYINT AS losing_team_score,\n        CASE\n            WHEN winning_team_id = start_info.home_team_id\n                THEN 'Home'\n            WHEN winning_team_id = start_info.away_team_id\n                THEN 'Away'\n        END::SIDE AS winning_side,\n        CASE\n            WHEN winning_team_id = start_info.home_team_id\n                THEN 'Away'\n            WHEN winning_team_id = start_info.away_team_id\n                THEN 'Home'\n        END::SIDE AS losing_side,\n        forfeits.game_id IS NOT NULL AS forfeit_flag,\n        suspensions.game_id IS NOT NULL AS suspension_flag,\n        winning_team_id IS NULL AS tie_flag,\n        unioned.winning_pitcher_id,\n        unioned.losing_pitcher_id,\n        unioned.save_pitcher_id,\n        unioned.game_winning_rbi_player_id,\n        unioned.home_runs_scored::UTINYINT AS home_runs_scored,\n        unioned.away_runs_scored::UTINYINT AS away_runs_scored,\n        unioned.away_line_score,\n        unioned.home_line_score,\n        unioned.duration_minutes::USMALLINT AS duration_minutes,\n        unioned.duration_outs,\n        -- We'll assume for now that games without recorded outs are 9 innings by default\n        COALESCE(unioned.duration_outs BETWEEN 51 AND 54, TRUE) AS is_nine_inning_game,\n        COALESCE(unioned.duration_outs > 54, FALSE) AS is_extra_inning_game,\n        COALESCE(unioned.duration_outs < 51, FALSE) AS is_shortened_game,\n    FROM unioned\n    INNER JOIN \"timeball\".\"main_models\".\"game_start_info\" AS start_info USING (game_id)\n    LEFT JOIN \"timeball\".\"main_models\".\"game_suspensions\" AS suspensions USING (game_id)\n    LEFT JOIN \"timeball\".\"main_models\".\"game_forfeits\" AS forfeits USING (game_id)\n)\n\nSELECT * FROM final", "relation_name": "\"timeball\".\"main_models\".\"game_results\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:54.543708Z", "completed_at": "2023-12-09T18:55:54.547228Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:54.547879Z", "completed_at": "2023-12-09T18:55:54.547882Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005663156509399414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.timeball.event_transition_values", "compiled": true, "compiled_code": "\nWITH final AS (\n    SELECT\n        states.event_key,\n        states.run_expectancy_start_key,\n        states.run_expectancy_end_key,\n        states.win_expectancy_start_key,\n        states.win_expectancy_end_key,\n        states.season,\n        states.league,\n        states.game_type,\n        states.inning_start,\n        states.frame_start,\n        states.truncated_home_margin_start,\n        states.batting_side,\n        states.base_state_start,\n        states.outs_start,\n        states.inning_end,\n        states.frame_end,\n        states.truncated_home_margin_end,\n        states.base_state_end,\n        states.outs_end,\n        states.runs_on_play,\n        states.game_end_flag,\n        ROUND(\n            states.runs_on_play\n            + COALESCE(runs_end.avg_runs_scored, 0)\n            - runs_start.avg_runs_scored,\n            3\n        ) AS expected_runs_change,\n        ROUND(\n            CASE\n                WHEN states.game_end_flag AND states.truncated_home_margin_end > 0\n                    THEN 1 - wins_start.home_win_rate\n                WHEN states.game_end_flag AND states.truncated_home_margin_end < 0\n                    THEN 0 - wins_start.home_win_rate\n                WHEN states.game_end_flag\n                    THEN NULL\n                ELSE wins_end.home_win_rate - wins_start.home_win_rate\n            END,\n            3\n        ) AS expected_home_win_change,\n        CASE WHEN states.batting_side = 'Home' THEN expected_home_win_change\n            ELSE -expected_home_win_change\n        END AS expected_batting_win_change\n    FROM \"timeball\".\"main_models\".\"event_states_full\" AS states\n    LEFT JOIN \"timeball\".\"main_models\".\"run_expectancy_matrix\" AS runs_start\n        ON runs_start.run_expectancy_key = states.run_expectancy_start_key\n    LEFT JOIN \"timeball\".\"main_models\".\"run_expectancy_matrix\" AS runs_end\n        ON runs_end.run_expectancy_key = states.run_expectancy_end_key\n    LEFT JOIN \"timeball\".\"main_models\".\"win_expectancy_matrix\" AS wins_start\n        ON wins_start.win_expectancy_key = states.win_expectancy_start_key\n    LEFT JOIN \"timeball\".\"main_models\".\"win_expectancy_matrix\" AS wins_end\n        ON wins_end.win_expectancy_key = states.win_expectancy_end_key\n    WHERE states.game_type = 'RegularSeason'\n        -- We can include plays from called games, but not the very last one\n        AND NOT (states.game_end_flag AND states.truncated_home_margin_end = 0)\n)\n\nSELECT * FROM final", "relation_name": "\"timeball\".\"main_models\".\"event_transition_values\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:54.550215Z", "completed_at": "2023-12-09T18:55:54.553235Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:54.553884Z", "completed_at": "2023-12-09T18:55:54.553887Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005055904388427734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "analysis.timeball.box_event_fielding_discrepancies", "compiled": true, "compiled_code": "WITH incomplete_games AS (\n    SELECT game_id,\n        SUM(unknown_putouts) AS unknown_putouts\n    FROM \"timeball\".\"main_models\".\"event_fielding_stats\"\n    WHERE unknown_putouts > 0\n    GROUP BY 1\n),\n\nt AS (\n    SELECT game_id,\n        team_id,\n        SUM(ABS(CASE WHEN i.game_id IS NOT NULL\n                    THEN LEAST(surplus_box_putouts, 0)\n                ELSE surplus_box_putouts\n            END\n        )) AS putout_discrepancy,\n        SUM(ABS(CASE WHEN i.game_id IS NOT NULL\n                    THEN LEAST(surplus_box_assists, 0)\n                ELSE surplus_box_assists\n            END\n        )) AS assist_discrepancy,\n        SUM(ABS(surplus_box_errors)) AS error_discrepancy,\n        putout_discrepancy + assist_discrepancy + error_discrepancy AS total,\n        ANY_VALUE(COALESCE(i.unknown_putouts, 0)) AS unknown_putouts\n    FROM \"timeball\".\"main_models\".\"player_position_game_fielding_stats\"\n    LEFT JOIN incomplete_games i USING (game_id)\n    GROUP BY 1, 2\n    HAVING total > 0\n)\n\nSELECT t.*,\n    filename,\n    line_number,\n    scorer,\n    park_id,\n    scoring_method,\n    inputter,\n    translator,\n    date_inputted\nFROM t\nINNER JOIN \"timeball\".\"main_models\".\"stg_games\" AS g USING (game_id)\nINNER JOIN \"timeball\".\"main_models\".\"stg_event_audit\" AS e USING (game_id)\nWHERE e.event_id = 1\nORDER BY total DESC", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:54.556020Z", "completed_at": "2023-12-09T18:55:54.560006Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:54.560682Z", "completed_at": "2023-12-09T18:55:54.560685Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006039142608642578, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.timeball.player_position_team_season_fielding_stats", "compiled": true, "compiled_code": "\nWITH databank AS (\n    SELECT\n        field.season,\n        field.team_id,\n        people.retrosheet_player_id AS player_id,\n        COALESCE(field.fielding_position, 0) AS fielding_position,\n        ANY_VALUE('RegularSeason') AS game_type,\n        ANY_VALUE(field.fielding_position_category) AS fielding_position_category,\n        SUM(field.games)::USMALLINT AS games,\n        SUM(field.games_started)::USMALLINT AS games_started,\n        CASE WHEN ANY_VALUE(field.fielding_position_category) = 'OF'\n                THEN COALESCE(SUM(of_games.games_left_field), 0)\n            ELSE 0\n        END::USMALLINT AS games_left_field,\n        CASE WHEN ANY_VALUE(field.fielding_position_category) = 'OF'\n                THEN COALESCE(SUM(of_games.games_center_field), 0)\n            ELSE 0\n        END::USMALLINT AS games_center_field,\n        CASE WHEN ANY_VALUE(field.fielding_position_category) = 'OF'\n                THEN COALESCE(SUM(of_games.games_right_field), 0)\n            ELSE 0\n        END::USMALLINT AS games_right_field,\n        SUM(field.outs_played)::USMALLINT AS outs_played,\n        SUM(field.putouts)::USMALLINT AS putouts,\n        SUM(field.assists)::USMALLINT AS assists,\n        SUM(field.errors)::USMALLINT AS errors,\n        SUM(field.double_plays)::USMALLINT AS double_plays,\n        SUM(field.passed_balls)::USMALLINT AS passed_balls,\n        SUM(field.stolen_bases)::USMALLINT AS stolen_bases,\n        SUM(field.caught_stealing)::USMALLINT AS caught_stealing,\n    FROM \"timeball\".\"main_models\".\"stg_databank_fielding\" AS field\n    LEFT JOIN \"timeball\".\"main_models\".\"stg_databank_fielding_of\" AS of_games USING (databank_player_id, season, stint)\n    INNER JOIN \"timeball\".\"main_models\".\"stg_people\" AS people USING (databank_player_id)\n    -- We'd need to do something different for partial coverage seasons but\n    -- currently box scores are all or nothing for a given year\n    WHERE field.season NOT IN (SELECT DISTINCT season FROM \"timeball\".\"main_models\".\"stg_games\")\n    GROUP BY 1, 2, 3, 4\n),\n\ngame_agg AS (\n    SELECT\n        games.season,\n        stats.team_id,\n        stats.player_id,\n        stats.fielding_position,\n        games.game_type,\n        ANY_VALUE(CASE\n            WHEN stats.fielding_position = 1 THEN 'P'\n            WHEN stats.fielding_position = 2 THEN 'C'\n            WHEN stats.fielding_position BETWEEN 3 AND 6 THEN 'IF'\n            WHEN stats.fielding_position BETWEEN 7 AND 9 THEN 'OF'\n            WHEN stats.fielding_position = 10 THEN 'DH'\n        END) AS fielding_position_category,\n        COUNT(*)::USMALLINT AS games,\n        SUM(stats.games_started)::USMALLINT AS games_started,\n        SUM(stats.outs_played)::USMALLINT AS outs_played,\n        SUM(stats.plate_appearances_in_field)::USMALLINT AS plate_appearances_in_field,\n        SUM(stats.plate_appearances_in_field_with_ball_in_play)::USMALLINT AS plate_appearances_in_field_with_ball_in_play,\n        SUM(stats.putouts)::USMALLINT AS putouts,\n        SUM(stats.assists)::USMALLINT AS assists,\n        SUM(stats.errors)::USMALLINT AS errors,\n        SUM(stats.fielders_choices)::USMALLINT AS fielders_choices,\n        SUM(stats.reaching_errors)::USMALLINT AS reaching_errors,\n        SUM(stats.double_plays)::USMALLINT AS double_plays,\n        SUM(stats.triple_plays)::USMALLINT AS triple_plays,\n        SUM(stats.ground_ball_double_plays)::USMALLINT AS ground_ball_double_plays,\n        SUM(stats.passed_balls)::USMALLINT AS passed_balls,\n        SUM(stats.balls_hit_to)::USMALLINT AS balls_hit_to,\n        SUM(stats.stolen_bases)::USMALLINT AS stolen_bases,\n        SUM(stats.caught_stealing)::USMALLINT AS caught_stealing,\n        SUM(stats.unknown_putouts_while_fielding)::USMALLINT AS unknown_putouts_while_fielding,\n        SUM(stats.assisted_putouts)::USMALLINT AS assisted_putouts,\n        SUM(stats.in_play_putouts)::USMALLINT AS in_play_putouts,\n        SUM(stats.in_play_assists)::USMALLINT AS in_play_assists,\n        SUM(stats.pickoffs)::USMALLINT AS pickoffs,\n        SUM(stats.double_plays_started)::USMALLINT AS double_plays_started,\n        SUM(stats.ground_ball_double_plays_started)::USMALLINT AS ground_ball_double_plays_started,\n        COUNT_IF(stats.fielding_position = 7)::USMALLINT AS games_left_field,\n        COUNT_IF(stats.fielding_position = 8)::USMALLINT AS games_center_field,\n        COUNT_IF(stats.fielding_position = 9)::USMALLINT AS games_right_field,\n    FROM \"timeball\".\"main_models\".\"stg_games\" AS games\n    INNER JOIN \"timeball\".\"main_models\".\"player_position_game_fielding_stats\" AS stats USING (game_id)\n    GROUP BY 1, 2, 3, 4, 5\n),\n\nfinal AS (\n    SELECT * FROM game_agg\n    UNION ALL BY NAME\n    SELECT * FROM databank\n)\n\nSELECT * FROM final", "relation_name": "\"timeball\".\"main_models\".\"player_position_team_season_fielding_stats\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:54.562932Z", "completed_at": "2023-12-09T18:55:54.567140Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:54.567800Z", "completed_at": "2023-12-09T18:55:54.567803Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006268978118896484, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.timeball.team_game_fielding_stats", "compiled": true, "compiled_code": "\n-- We don't need to merge in box score data for this like we do with\n-- player-level data, because the event-level data will contain all\n-- info even if it isn't credited to a specific player.\nWITH game_event_agg AS (\n    SELECT\n        team_id,\n        game_id,\n        SUM(outs_played)::UTINYINT AS outs_played,\n        SUM(plate_appearances_in_field)::UTINYINT AS plate_appearances_in_field,\n        SUM(plate_appearances_in_field_with_ball_in_play)::UTINYINT AS plate_appearances_in_field_with_ball_in_play,\n        SUM(putouts)::UTINYINT AS putouts,\n        SUM(assists)::UTINYINT AS assists,\n        SUM(errors)::UTINYINT AS errors,\n        SUM(stolen_bases)::UTINYINT AS stolen_bases,\n        SUM(caught_stealing)::UTINYINT AS caught_stealing,\n        SUM(pickoffs)::UTINYINT AS pickoffs,\n        SUM(double_plays)::UTINYINT AS double_plays,\n        SUM(triple_plays)::UTINYINT AS triple_plays,\n        SUM(ground_ball_double_plays)::UTINYINT AS ground_ball_double_plays,\n        SUM(reaching_errors)::UTINYINT AS reaching_errors,\n        SUM(unknown_putouts)::UTINYINT AS unknown_putouts,\n        SUM(incomplete_events)::UTINYINT AS incomplete_events,\n    FROM \"timeball\".\"main_models\".\"event_fielding_stats\"\n    GROUP BY 1, 2\n),\n\ngame_info AS (\n    SELECT\n        season,\n        game_id,\n        team_id,\n        team_side AS side\n    FROM \"timeball\".\"main_models\".\"team_game_start_info\"\n),\n\nbox_sb AS (\n    SELECT\n        game_id,\n        CASE WHEN running_side = 'Away' THEN 'Home' ELSE 'Away' END AS side,\n        COUNT(*) AS stolen_bases\n    FROM \"timeball\".\"main_models\".\"stg_box_score_stolen_bases\"\n    GROUP BY 1, 2\n),\n\nbox_cs AS (\n    SELECT\n        game_id,\n        CASE WHEN running_side = 'Away' THEN 'Home' ELSE 'Away' END AS side,\n        COUNT(*) AS caught_stealing\n    FROM \"timeball\".\"main_models\".\"stg_box_score_caught_stealing\"\n    GROUP BY 1, 2\n),\n\nbox_dp AS (\n    SELECT\n        game_id,\n        defense_side AS side,\n        COUNT(*) AS double_plays\n    FROM \"timeball\".\"main_models\".\"stg_box_score_double_plays\"\n    GROUP BY 1, 2\n),\n\nbox_tp AS (\n    SELECT\n        game_id,\n        defense_side AS side,\n        COUNT(*) AS triple_plays\n    FROM \"timeball\".\"main_models\".\"stg_box_score_triple_plays\"\n    GROUP BY 1, 2\n),\n\nplayers AS (\n    SELECT\n        game_id,\n        team_id,\n        -- outs_played can't be summed directly,\n        -- use putouts to dedupe (usually the same anyway)\n        SUM(putouts) AS outs_played,\n        SUM(putouts) AS putouts,\n        SUM(assists) AS assists,\n        SUM(errors) AS errors,\n        SUM(fielders_choices)::UTINYINT AS fielders_choices,\n        SUM(assisted_putouts)::UTINYINT AS assisted_putouts,\n        SUM(in_play_putouts)::UTINYINT AS in_play_putouts,\n        SUM(in_play_assists)::UTINYINT AS in_play_assists,\n        SUM(passed_balls)::UTINYINT AS passed_balls,\n    FROM \"timeball\".\"main_models\".\"player_position_game_fielding_stats\"\n    GROUP BY 1, 2\n),\n\nfinal AS (\n    SELECT\n        game_info.season,\n        game_id,\n        team_id,\n        COALESCE(t.outs_played, g.outs_played, p.outs_played)::UTINYINT AS outs_played,\n        -- At the moment, there are some box score accounts that are less reliable\n        -- than their PBP counterparts for fielding. The largest of the options here\n        -- is the most likely to be consistent and correct.\n        -- TODO: Revisit after NLB data quality improvements\n        GREATEST(t.putouts, p.putouts, g.putouts)::UTINYINT AS putouts,\n        GREATEST(t.assists, p.assists, g.assists)::UTINYINT AS assists,\n        GREATEST(t.errors, p.errors, g.errors)::UTINYINT AS errors,\n        p.fielders_choices,\n        p.assisted_putouts,\n        p.in_play_putouts,\n        p.in_play_assists,\n        COALESCE(t.passed_balls, p.passed_balls)::UTINYINT AS passed_balls,\n        -- We trust PBP events over box events\n        COALESCE(g.stolen_bases, box_sb.stolen_bases, 0)::UTINYINT AS stolen_bases,\n        COALESCE(g.caught_stealing, box_cs.caught_stealing, 0)::UTINYINT AS caught_stealing,\n        COALESCE(g.double_plays, box_dp.double_plays, 0)::UTINYINT AS double_plays,\n        COALESCE(g.triple_plays, box_tp.triple_plays, 0)::UTINYINT AS triple_plays,\n        g.pickoffs,\n        g.plate_appearances_in_field,\n        g.plate_appearances_in_field_with_ball_in_play,\n        g.ground_ball_double_plays,\n        g.reaching_errors,\n        g.unknown_putouts,\n        g.incomplete_events\n    FROM players AS p\n    INNER JOIN game_info USING (game_id, team_id)\n    LEFT JOIN game_event_agg AS g USING (game_id, team_id)\n    LEFT JOIN \"timeball\".\"main_models\".\"stg_box_score_team_fielding_lines\" AS t USING (game_id, side)\n    LEFT JOIN box_sb USING (game_id, side)\n    LEFT JOIN box_cs USING (game_id, side)\n    LEFT JOIN box_dp USING (game_id, side)\n    LEFT JOIN box_tp USING (game_id, side)\n)\n\nSELECT * FROM final", "relation_name": "\"timeball\".\"main_models\".\"team_game_fielding_stats\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:54.570001Z", "completed_at": "2023-12-09T18:55:54.573847Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:54.574525Z", "completed_at": "2023-12-09T18:55:54.574528Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006073951721191406, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.dbt_utils_not_null_proportion_player_position_game_fielding_stats_0_93__caught_stealing.5f9f3af801", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\nwith validation as (\n  select\n    \n    sum(case when caught_stealing is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from \"timeball\".\"main_models\".\"player_position_game_fielding_stats\"\n  \n),\nvalidation_errors as (\n  select\n    \n    not_null_proportion\n  from validation\n  where not_null_proportion < 0.93 or not_null_proportion > 1\n)\nselect\n  *\nfrom validation_errors\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:54.576857Z", "completed_at": "2023-12-09T18:55:54.580519Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:54.581183Z", "completed_at": "2023-12-09T18:55:54.581187Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005697011947631836, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.dbt_utils_not_null_proportion_player_position_game_fielding_stats_0_93__stolen_bases.d6787fbb17", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\nwith validation as (\n  select\n    \n    sum(case when stolen_bases is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from \"timeball\".\"main_models\".\"player_position_game_fielding_stats\"\n  \n),\nvalidation_errors as (\n  select\n    \n    not_null_proportion\n  from validation\n  where not_null_proportion < 0.93 or not_null_proportion > 1\n)\nselect\n  *\nfrom validation_errors\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:54.583312Z", "completed_at": "2023-12-09T18:55:54.586960Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:54.587621Z", "completed_at": "2023-12-09T18:55:54.587625Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005670785903930664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.dbt_utils_not_null_proportion_player_position_game_fielding_stats_0_995__assists.a29066a509", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\nwith validation as (\n  select\n    \n    sum(case when assists is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from \"timeball\".\"main_models\".\"player_position_game_fielding_stats\"\n  \n),\nvalidation_errors as (\n  select\n    \n    not_null_proportion\n  from validation\n  where not_null_proportion < 0.995 or not_null_proportion > 1\n)\nselect\n  *\nfrom validation_errors\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:54.589736Z", "completed_at": "2023-12-09T18:55:54.593383Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:54.594046Z", "completed_at": "2023-12-09T18:55:54.594049Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005675077438354492, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.dbt_utils_not_null_proportion_player_position_game_fielding_stats_0_995__double_plays.5724973f8f", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\nwith validation as (\n  select\n    \n    sum(case when double_plays is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from \"timeball\".\"main_models\".\"player_position_game_fielding_stats\"\n  \n),\nvalidation_errors as (\n  select\n    \n    not_null_proportion\n  from validation\n  where not_null_proportion < 0.995 or not_null_proportion > 1\n)\nselect\n  *\nfrom validation_errors\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:54.596160Z", "completed_at": "2023-12-09T18:55:54.601659Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:54.602324Z", "completed_at": "2023-12-09T18:55:54.602328Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0075342655181884766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.dbt_utils_not_null_proportion_player_position_game_fielding_stats_0_995__errors.8eea9cbcc8", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\nwith validation as (\n  select\n    \n    sum(case when errors is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from \"timeball\".\"main_models\".\"player_position_game_fielding_stats\"\n  \n),\nvalidation_errors as (\n  select\n    \n    not_null_proportion\n  from validation\n  where not_null_proportion < 0.995 or not_null_proportion > 1\n)\nselect\n  *\nfrom validation_errors\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:54.604449Z", "completed_at": "2023-12-09T18:55:54.608259Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:54.608918Z", "completed_at": "2023-12-09T18:55:54.608922Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005819082260131836, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.dbt_utils_not_null_proportion_player_position_game_fielding_stats_0_995__outs_played.8bb7eb59b4", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\nwith validation as (\n  select\n    \n    sum(case when outs_played is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from \"timeball\".\"main_models\".\"player_position_game_fielding_stats\"\n  \n),\nvalidation_errors as (\n  select\n    \n    not_null_proportion\n  from validation\n  where not_null_proportion < 0.995 or not_null_proportion > 1\n)\nselect\n  *\nfrom validation_errors\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:54.611024Z", "completed_at": "2023-12-09T18:55:54.614871Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:54.615564Z", "completed_at": "2023-12-09T18:55:54.615569Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005935192108154297, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.dbt_utils_not_null_proportion_player_position_game_fielding_stats_0_995__putouts.9e00a6ab61", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\nwith validation as (\n  select\n    \n    sum(case when putouts is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from \"timeball\".\"main_models\".\"player_position_game_fielding_stats\"\n  \n),\nvalidation_errors as (\n  select\n    \n    not_null_proportion\n  from validation\n  where not_null_proportion < 0.995 or not_null_proportion > 1\n)\nselect\n  *\nfrom validation_errors\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:54.617809Z", "completed_at": "2023-12-09T18:55:54.621958Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:54.622641Z", "completed_at": "2023-12-09T18:55:54.622645Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006242990493774414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.dbt_utils_not_null_proportion_player_position_game_fielding_stats_0_995__triple_plays.534ecb7a2b", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\nwith validation as (\n  select\n    \n    sum(case when triple_plays is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from \"timeball\".\"main_models\".\"player_position_game_fielding_stats\"\n  \n),\nvalidation_errors as (\n  select\n    \n    not_null_proportion\n  from validation\n  where not_null_proportion < 0.995 or not_null_proportion > 1\n)\nselect\n  *\nfrom validation_errors\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:54.624864Z", "completed_at": "2023-12-09T18:55:54.629614Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:54.630284Z", "completed_at": "2023-12-09T18:55:54.630289Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00685882568359375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.timeball.player_team_season_offense_stats", "compiled": true, "compiled_code": "\nWITH databank AS (\n    SELECT\n        bat.season,\n        bat.team_id,\n        people.retrosheet_player_id AS player_id,\n        'RegularSeason' AS game_type,\n        SUM(bat.games)::SMALLINT AS games,\n        SUM(bat.at_bats)::SMALLINT AS at_bats,\n        SUM(bat.runs)::SMALLINT AS runs,\n        SUM(bat.hits)::SMALLINT AS hits,\n        SUM(bat.doubles)::SMALLINT AS doubles,\n        SUM(bat.triples)::SMALLINT AS triples,\n        SUM(bat.home_runs)::SMALLINT AS home_runs,\n        SUM(bat.runs_batted_in)::SMALLINT AS runs_batted_in,\n        SUM(bat.stolen_bases)::SMALLINT AS stolen_bases,\n        SUM(bat.caught_stealing)::SMALLINT AS caught_stealing,\n        SUM(bat.walks)::SMALLINT AS walks,\n        SUM(bat.strikeouts)::SMALLINT AS strikeouts,\n        SUM(bat.intentional_walks)::SMALLINT AS intentional_walks,\n        SUM(bat.hit_by_pitches)::SMALLINT AS hit_by_pitches,\n        SUM(bat.sacrifice_hits)::SMALLINT AS sacrifice_hits,\n        SUM(bat.sacrifice_flies)::SMALLINT AS sacrifice_flies,\n        SUM(bat.grounded_into_double_plays)::SMALLINT AS grounded_into_double_plays,\n        SUM(bat.singles)::SMALLINT AS singles,\n        SUM(bat.total_bases)::SMALLINT AS total_bases,\n        SUM(bat.plate_appearances)::SMALLINT AS plate_appearances,\n        SUM(bat.on_base_opportunities)::SMALLINT AS on_base_opportunities,\n        SUM(bat.on_base_successes)::SMALLINT AS on_base_successes,\n    FROM \"timeball\".\"main_models\".\"stg_databank_batting\" AS bat\n    INNER JOIN \"timeball\".\"main_models\".\"stg_people\" AS people USING (databank_player_id)\n    WHERE bat.season NOT IN (SELECT DISTINCT season FROM \"timeball\".\"main_models\".\"stg_games\")\n    GROUP BY 1, 2, 3\n),\n\ndatabank_running AS (\n    SELECT\n        season,\n        player_id,\n        team_id,\n        SUM(stolen_bases)::SMALLINT AS stolen_bases,\n        SUM(caught_stealing)::SMALLINT AS caught_stealing,\n    FROM \"timeball\".\"main_models\".\"stg_databank_batting\"\n    -- TODO: Add var to indicate final databank override year\n    WHERE season < 1920\n    GROUP BY 1, 2, 3\n),\n\nretrosheet AS (\n    SELECT\n        games.season,\n        stats.team_id,\n        stats.player_id,\n        games.game_type,\n        COUNT(*) AS games,\n        SUM(plate_appearances)::SMALLINT AS plate_appearances,\n        SUM(at_bats)::SMALLINT AS at_bats,\n        SUM(hits)::SMALLINT AS hits,\n        SUM(singles)::SMALLINT AS singles,\n        SUM(doubles)::SMALLINT AS doubles,\n        SUM(triples)::SMALLINT AS triples,\n        SUM(home_runs)::SMALLINT AS home_runs,\n        SUM(total_bases)::SMALLINT AS total_bases,\n        SUM(strikeouts)::SMALLINT AS strikeouts,\n        SUM(walks)::SMALLINT AS walks,\n        SUM(intentional_walks)::SMALLINT AS intentional_walks,\n        SUM(hit_by_pitches)::SMALLINT AS hit_by_pitches,\n        SUM(sacrifice_hits)::SMALLINT AS sacrifice_hits,\n        SUM(sacrifice_flies)::SMALLINT AS sacrifice_flies,\n        SUM(reached_on_errors)::SMALLINT AS reached_on_errors,\n        SUM(reached_on_interferences)::SMALLINT AS reached_on_interferences,\n        SUM(inside_the_park_home_runs)::SMALLINT AS inside_the_park_home_runs,\n        SUM(ground_rule_doubles)::SMALLINT AS ground_rule_doubles,\n        SUM(infield_hits)::SMALLINT AS infield_hits,\n        SUM(on_base_opportunities)::SMALLINT AS on_base_opportunities,\n        SUM(on_base_successes)::SMALLINT AS on_base_successes,\n        SUM(runs_batted_in)::SMALLINT AS runs_batted_in,\n        SUM(grounded_into_double_plays)::SMALLINT AS grounded_into_double_plays,\n        SUM(double_plays)::SMALLINT AS double_plays,\n        SUM(triple_plays)::SMALLINT AS triple_plays,\n        SUM(batting_outs)::SMALLINT AS batting_outs,\n        SUM(balls_in_play)::SMALLINT AS balls_in_play,\n        SUM(balls_batted)::SMALLINT AS balls_batted,\n        SUM(trajectory_fly_ball)::SMALLINT AS trajectory_fly_ball,\n        SUM(trajectory_ground_ball)::SMALLINT AS trajectory_ground_ball,\n        SUM(trajectory_line_drive)::SMALLINT AS trajectory_line_drive,\n        SUM(trajectory_pop_up)::SMALLINT AS trajectory_pop_up,\n        SUM(trajectory_unknown)::SMALLINT AS trajectory_unknown,\n        SUM(trajectory_known)::SMALLINT AS trajectory_known,\n        SUM(trajectory_broad_air_ball)::SMALLINT AS trajectory_broad_air_ball,\n        SUM(trajectory_broad_ground_ball)::SMALLINT AS trajectory_broad_ground_ball,\n        SUM(trajectory_broad_unknown)::SMALLINT AS trajectory_broad_unknown,\n        SUM(trajectory_broad_known)::SMALLINT AS trajectory_broad_known,\n        SUM(bunts)::SMALLINT AS bunts,\n        SUM(batted_distance_plate)::SMALLINT AS batted_distance_plate,\n        SUM(batted_distance_infield)::SMALLINT AS batted_distance_infield,\n        SUM(batted_distance_outfield)::SMALLINT AS batted_distance_outfield,\n        SUM(batted_distance_unknown)::SMALLINT AS batted_distance_unknown,\n        SUM(batted_distance_known)::SMALLINT AS batted_distance_known,\n        SUM(fielded_by_battery)::SMALLINT AS fielded_by_battery,\n        SUM(fielded_by_infielder)::SMALLINT AS fielded_by_infielder,\n        SUM(fielded_by_outfielder)::SMALLINT AS fielded_by_outfielder,\n        SUM(fielded_by_known)::SMALLINT AS fielded_by_known,\n        SUM(fielded_by_unknown)::SMALLINT AS fielded_by_unknown,\n        SUM(batted_angle_left)::SMALLINT AS batted_angle_left,\n        SUM(batted_angle_right)::SMALLINT AS batted_angle_right,\n        SUM(batted_angle_middle)::SMALLINT AS batted_angle_middle,\n        SUM(batted_angle_unknown)::SMALLINT AS batted_angle_unknown,\n        SUM(batted_angle_known)::SMALLINT AS batted_angle_known,\n        SUM(batted_location_plate)::SMALLINT AS batted_location_plate,\n        SUM(batted_location_right_infield)::SMALLINT AS batted_location_right_infield,\n        SUM(batted_location_middle_infield)::SMALLINT AS batted_location_middle_infield,\n        SUM(batted_location_left_infield)::SMALLINT AS batted_location_left_infield,\n        SUM(batted_location_left_field)::SMALLINT AS batted_location_left_field,\n        SUM(batted_location_center_field)::SMALLINT AS batted_location_center_field,\n        SUM(batted_location_right_field)::SMALLINT AS batted_location_right_field,\n        SUM(batted_location_unknown)::SMALLINT AS batted_location_unknown,\n        SUM(batted_location_known)::SMALLINT AS batted_location_known,\n        SUM(batted_balls_pulled)::SMALLINT AS batted_balls_pulled,\n        SUM(batted_balls_opposite_field)::SMALLINT AS batted_balls_opposite_field,\n        SUM(runs)::SMALLINT AS runs,\n        SUM(times_reached_base)::SMALLINT AS times_reached_base,\n        SUM(times_lead_runner)::SMALLINT AS times_lead_runner,\n        SUM(times_force_on_runner)::SMALLINT AS times_force_on_runner,\n        SUM(times_next_base_empty)::SMALLINT AS times_next_base_empty,\n        SUM(stolen_base_opportunities)::SMALLINT AS stolen_base_opportunities,\n        SUM(stolen_base_opportunities_second)::SMALLINT AS stolen_base_opportunities_second,\n        SUM(stolen_base_opportunities_third)::SMALLINT AS stolen_base_opportunities_third,\n        SUM(stolen_base_opportunities_home)::SMALLINT AS stolen_base_opportunities_home,\n        SUM(stolen_bases)::SMALLINT AS stolen_bases,\n        SUM(stolen_bases_second)::SMALLINT AS stolen_bases_second,\n        SUM(stolen_bases_third)::SMALLINT AS stolen_bases_third,\n        SUM(stolen_bases_home)::SMALLINT AS stolen_bases_home,\n        SUM(caught_stealing)::SMALLINT AS caught_stealing,\n        SUM(caught_stealing_second)::SMALLINT AS caught_stealing_second,\n        SUM(caught_stealing_third)::SMALLINT AS caught_stealing_third,\n        SUM(caught_stealing_home)::SMALLINT AS caught_stealing_home,\n        SUM(picked_off)::SMALLINT AS picked_off,\n        SUM(picked_off_first)::SMALLINT AS picked_off_first,\n        SUM(picked_off_second)::SMALLINT AS picked_off_second,\n        SUM(picked_off_third)::SMALLINT AS picked_off_third,\n        SUM(picked_off_caught_stealing)::SMALLINT AS picked_off_caught_stealing,\n        SUM(outs_on_basepaths)::SMALLINT AS outs_on_basepaths,\n        SUM(unforced_outs_on_basepaths)::SMALLINT AS unforced_outs_on_basepaths,\n        SUM(outs_avoided_on_errors)::SMALLINT AS outs_avoided_on_errors,\n        SUM(advances_on_wild_pitches)::SMALLINT AS advances_on_wild_pitches,\n        SUM(advances_on_passed_balls)::SMALLINT AS advances_on_passed_balls,\n        SUM(advances_on_balks)::SMALLINT AS advances_on_balks,\n        SUM(advances_on_unspecified_plays)::SMALLINT AS advances_on_unspecified_plays,\n        SUM(advances_on_defensive_indifference)::SMALLINT AS advances_on_defensive_indifference,\n        SUM(advances_on_errors)::SMALLINT AS advances_on_errors,\n        SUM(plate_appearances_while_on_base)::SMALLINT AS plate_appearances_while_on_base,\n        SUM(balls_in_play_while_running)::SMALLINT AS balls_in_play_while_running,\n        SUM(balls_in_play_while_on_base)::SMALLINT AS balls_in_play_while_on_base,\n        SUM(batter_total_bases_while_running)::SMALLINT AS batter_total_bases_while_running,\n        SUM(batter_total_bases_while_on_base)::SMALLINT AS batter_total_bases_while_on_base,\n        SUM(extra_base_chances)::SMALLINT AS extra_base_chances,\n        SUM(extra_base_advance_attempts)::SMALLINT AS extra_base_advance_attempts,\n        SUM(extra_bases_taken)::SMALLINT AS extra_bases_taken,\n        SUM(bases_advanced)::SMALLINT AS bases_advanced,\n        SUM(bases_advanced_on_balls_in_play)::SMALLINT AS bases_advanced_on_balls_in_play,\n        SUM(surplus_bases_advanced_on_balls_in_play)::SMALLINT AS surplus_bases_advanced_on_balls_in_play,\n        SUM(outs_on_extra_base_advance_attempts)::SMALLINT AS outs_on_extra_base_advance_attempts,\n        SUM(pitches)::SMALLINT AS pitches,\n        SUM(swings)::SMALLINT AS swings,\n        SUM(swings_with_contact)::SMALLINT AS swings_with_contact,\n        SUM(strikes)::SMALLINT AS strikes,\n        SUM(strikes_called)::SMALLINT AS strikes_called,\n        SUM(strikes_swinging)::SMALLINT AS strikes_swinging,\n        SUM(strikes_foul)::SMALLINT AS strikes_foul,\n        SUM(strikes_foul_tip)::SMALLINT AS strikes_foul_tip,\n        SUM(strikes_in_play)::SMALLINT AS strikes_in_play,\n        SUM(strikes_unknown)::SMALLINT AS strikes_unknown,\n        SUM(balls)::SMALLINT AS balls,\n        SUM(balls_called)::SMALLINT AS balls_called,\n        SUM(balls_intentional)::SMALLINT AS balls_intentional,\n        SUM(balls_automatic)::SMALLINT AS balls_automatic,\n        SUM(unknown_pitches)::SMALLINT AS unknown_pitches,\n        SUM(pitchouts)::SMALLINT AS pitchouts,\n        SUM(pitcher_pickoff_attempts)::SMALLINT AS pitcher_pickoff_attempts,\n        SUM(catcher_pickoff_attempts)::SMALLINT AS catcher_pickoff_attempts,\n        SUM(pitches_blocked_by_catcher)::SMALLINT AS pitches_blocked_by_catcher,\n        SUM(pitches_with_runners_going)::SMALLINT AS pitches_with_runners_going,\n        SUM(passed_balls)::SMALLINT AS passed_balls,\n        SUM(wild_pitches)::SMALLINT AS wild_pitches,\n        SUM(balks)::SMALLINT AS balks,\n        SUM(left_on_base)::SMALLINT AS left_on_base,\n        SUM(left_on_base_with_two_outs)::SMALLINT AS left_on_base_with_two_outs,\n        \n    FROM \"timeball\".\"main_models\".\"stg_games\" AS games\n    INNER JOIN \"timeball\".\"main_models\".\"player_game_offense_stats\" AS stats USING (game_id)\n    GROUP BY 1, 2, 3, 4\n),\n\nunioned AS (\n    SELECT * FROM retrosheet\n    UNION ALL BY NAME\n    SELECT * FROM databank\n),\n\nfinal AS (\n    SELECT\n        u.* REPLACE (\n            CASE WHEN u.game_type = 'RegularSeason'\n                    THEN COALESCE(d.stolen_bases, u.stolen_bases)\n                ELSE u.stolen_bases\n            END AS stolen_bases,\n            CASE WHEN u.game_type = 'RegularSeason'\n                    THEN COALESCE(d.caught_stealing, u.caught_stealing)\n                ELSE u.caught_stealing\n            END AS caught_stealing\n        )\n    FROM unioned AS u\n    LEFT JOIN databank_running AS d USING (season, player_id, team_id)\n)\n\nSELECT * FROM final", "relation_name": "\"timeball\".\"main_models\".\"player_team_season_offense_stats\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:54.632782Z", "completed_at": "2023-12-09T18:55:54.637884Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:54.638579Z", "completed_at": "2023-12-09T18:55:54.638584Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00737309455871582, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.timeball.team_game_offense_stats", "compiled": true, "compiled_code": "\nWITH initial_sum AS (\n    SELECT\n        game_id,\n        team_id,\n        \n            SUM(plate_appearances)::USMALLINT AS plate_appearances,\n        \n            SUM(at_bats)::USMALLINT AS at_bats,\n        \n            SUM(hits)::USMALLINT AS hits,\n        \n            SUM(singles)::USMALLINT AS singles,\n        \n            SUM(doubles)::USMALLINT AS doubles,\n        \n            SUM(triples)::USMALLINT AS triples,\n        \n            SUM(home_runs)::USMALLINT AS home_runs,\n        \n            SUM(total_bases)::USMALLINT AS total_bases,\n        \n            SUM(strikeouts)::USMALLINT AS strikeouts,\n        \n            SUM(walks)::USMALLINT AS walks,\n        \n            SUM(intentional_walks)::USMALLINT AS intentional_walks,\n        \n            SUM(hit_by_pitches)::USMALLINT AS hit_by_pitches,\n        \n            SUM(sacrifice_hits)::USMALLINT AS sacrifice_hits,\n        \n            SUM(sacrifice_flies)::USMALLINT AS sacrifice_flies,\n        \n            SUM(reached_on_errors)::USMALLINT AS reached_on_errors,\n        \n            SUM(reached_on_interferences)::USMALLINT AS reached_on_interferences,\n        \n            SUM(inside_the_park_home_runs)::USMALLINT AS inside_the_park_home_runs,\n        \n            SUM(ground_rule_doubles)::USMALLINT AS ground_rule_doubles,\n        \n            SUM(infield_hits)::USMALLINT AS infield_hits,\n        \n            SUM(on_base_opportunities)::USMALLINT AS on_base_opportunities,\n        \n            SUM(on_base_successes)::USMALLINT AS on_base_successes,\n        \n            SUM(runs_batted_in)::USMALLINT AS runs_batted_in,\n        \n            SUM(grounded_into_double_plays)::USMALLINT AS grounded_into_double_plays,\n        \n            SUM(double_plays)::USMALLINT AS double_plays,\n        \n            SUM(triple_plays)::USMALLINT AS triple_plays,\n        \n            SUM(batting_outs)::USMALLINT AS batting_outs,\n        \n            SUM(balls_in_play)::USMALLINT AS balls_in_play,\n        \n            SUM(balls_batted)::USMALLINT AS balls_batted,\n        \n            SUM(trajectory_fly_ball)::USMALLINT AS trajectory_fly_ball,\n        \n            SUM(trajectory_ground_ball)::USMALLINT AS trajectory_ground_ball,\n        \n            SUM(trajectory_line_drive)::USMALLINT AS trajectory_line_drive,\n        \n            SUM(trajectory_pop_up)::USMALLINT AS trajectory_pop_up,\n        \n            SUM(trajectory_unknown)::USMALLINT AS trajectory_unknown,\n        \n            SUM(trajectory_known)::USMALLINT AS trajectory_known,\n        \n            SUM(trajectory_broad_air_ball)::USMALLINT AS trajectory_broad_air_ball,\n        \n            SUM(trajectory_broad_ground_ball)::USMALLINT AS trajectory_broad_ground_ball,\n        \n            SUM(trajectory_broad_unknown)::USMALLINT AS trajectory_broad_unknown,\n        \n            SUM(trajectory_broad_known)::USMALLINT AS trajectory_broad_known,\n        \n            SUM(bunts)::USMALLINT AS bunts,\n        \n            SUM(batted_distance_plate)::USMALLINT AS batted_distance_plate,\n        \n            SUM(batted_distance_infield)::USMALLINT AS batted_distance_infield,\n        \n            SUM(batted_distance_outfield)::USMALLINT AS batted_distance_outfield,\n        \n            SUM(batted_distance_unknown)::USMALLINT AS batted_distance_unknown,\n        \n            SUM(batted_distance_known)::USMALLINT AS batted_distance_known,\n        \n            SUM(fielded_by_battery)::USMALLINT AS fielded_by_battery,\n        \n            SUM(fielded_by_infielder)::USMALLINT AS fielded_by_infielder,\n        \n            SUM(fielded_by_outfielder)::USMALLINT AS fielded_by_outfielder,\n        \n            SUM(fielded_by_known)::USMALLINT AS fielded_by_known,\n        \n            SUM(fielded_by_unknown)::USMALLINT AS fielded_by_unknown,\n        \n            SUM(batted_angle_left)::USMALLINT AS batted_angle_left,\n        \n            SUM(batted_angle_right)::USMALLINT AS batted_angle_right,\n        \n            SUM(batted_angle_middle)::USMALLINT AS batted_angle_middle,\n        \n            SUM(batted_angle_unknown)::USMALLINT AS batted_angle_unknown,\n        \n            SUM(batted_angle_known)::USMALLINT AS batted_angle_known,\n        \n            SUM(batted_location_plate)::USMALLINT AS batted_location_plate,\n        \n            SUM(batted_location_right_infield)::USMALLINT AS batted_location_right_infield,\n        \n            SUM(batted_location_middle_infield)::USMALLINT AS batted_location_middle_infield,\n        \n            SUM(batted_location_left_infield)::USMALLINT AS batted_location_left_infield,\n        \n            SUM(batted_location_left_field)::USMALLINT AS batted_location_left_field,\n        \n            SUM(batted_location_center_field)::USMALLINT AS batted_location_center_field,\n        \n            SUM(batted_location_right_field)::USMALLINT AS batted_location_right_field,\n        \n            SUM(batted_location_unknown)::USMALLINT AS batted_location_unknown,\n        \n            SUM(batted_location_known)::USMALLINT AS batted_location_known,\n        \n            SUM(batted_balls_pulled)::USMALLINT AS batted_balls_pulled,\n        \n            SUM(batted_balls_opposite_field)::USMALLINT AS batted_balls_opposite_field,\n        \n            SUM(runs)::USMALLINT AS runs,\n        \n            SUM(times_reached_base)::USMALLINT AS times_reached_base,\n        \n            SUM(times_lead_runner)::USMALLINT AS times_lead_runner,\n        \n            SUM(times_force_on_runner)::USMALLINT AS times_force_on_runner,\n        \n            SUM(times_next_base_empty)::USMALLINT AS times_next_base_empty,\n        \n            SUM(stolen_base_opportunities)::USMALLINT AS stolen_base_opportunities,\n        \n            SUM(stolen_base_opportunities_second)::USMALLINT AS stolen_base_opportunities_second,\n        \n            SUM(stolen_base_opportunities_third)::USMALLINT AS stolen_base_opportunities_third,\n        \n            SUM(stolen_base_opportunities_home)::USMALLINT AS stolen_base_opportunities_home,\n        \n            SUM(stolen_bases)::USMALLINT AS stolen_bases,\n        \n            SUM(stolen_bases_second)::USMALLINT AS stolen_bases_second,\n        \n            SUM(stolen_bases_third)::USMALLINT AS stolen_bases_third,\n        \n            SUM(stolen_bases_home)::USMALLINT AS stolen_bases_home,\n        \n            SUM(caught_stealing)::USMALLINT AS caught_stealing,\n        \n            SUM(caught_stealing_second)::USMALLINT AS caught_stealing_second,\n        \n            SUM(caught_stealing_third)::USMALLINT AS caught_stealing_third,\n        \n            SUM(caught_stealing_home)::USMALLINT AS caught_stealing_home,\n        \n            SUM(picked_off)::USMALLINT AS picked_off,\n        \n            SUM(picked_off_first)::USMALLINT AS picked_off_first,\n        \n            SUM(picked_off_second)::USMALLINT AS picked_off_second,\n        \n            SUM(picked_off_third)::USMALLINT AS picked_off_third,\n        \n            SUM(picked_off_caught_stealing)::USMALLINT AS picked_off_caught_stealing,\n        \n            SUM(outs_on_basepaths)::USMALLINT AS outs_on_basepaths,\n        \n            SUM(unforced_outs_on_basepaths)::USMALLINT AS unforced_outs_on_basepaths,\n        \n            SUM(outs_avoided_on_errors)::USMALLINT AS outs_avoided_on_errors,\n        \n            SUM(advances_on_wild_pitches)::USMALLINT AS advances_on_wild_pitches,\n        \n            SUM(advances_on_passed_balls)::USMALLINT AS advances_on_passed_balls,\n        \n            SUM(advances_on_balks)::USMALLINT AS advances_on_balks,\n        \n            SUM(advances_on_unspecified_plays)::USMALLINT AS advances_on_unspecified_plays,\n        \n            SUM(advances_on_defensive_indifference)::USMALLINT AS advances_on_defensive_indifference,\n        \n            SUM(advances_on_errors)::USMALLINT AS advances_on_errors,\n        \n            SUM(plate_appearances_while_on_base)::USMALLINT AS plate_appearances_while_on_base,\n        \n            SUM(balls_in_play_while_running)::USMALLINT AS balls_in_play_while_running,\n        \n            SUM(balls_in_play_while_on_base)::USMALLINT AS balls_in_play_while_on_base,\n        \n            SUM(batter_total_bases_while_running)::USMALLINT AS batter_total_bases_while_running,\n        \n            SUM(batter_total_bases_while_on_base)::USMALLINT AS batter_total_bases_while_on_base,\n        \n            SUM(extra_base_chances)::USMALLINT AS extra_base_chances,\n        \n            SUM(extra_base_advance_attempts)::USMALLINT AS extra_base_advance_attempts,\n        \n            SUM(extra_bases_taken)::USMALLINT AS extra_bases_taken,\n        \n            SUM(bases_advanced)::USMALLINT AS bases_advanced,\n        \n            SUM(bases_advanced_on_balls_in_play)::USMALLINT AS bases_advanced_on_balls_in_play,\n        \n            SUM(surplus_bases_advanced_on_balls_in_play)::INT1 AS surplus_bases_advanced_on_balls_in_play,\n        \n            SUM(outs_on_extra_base_advance_attempts)::USMALLINT AS outs_on_extra_base_advance_attempts,\n        \n            SUM(pitches)::USMALLINT AS pitches,\n        \n            SUM(swings)::USMALLINT AS swings,\n        \n            SUM(swings_with_contact)::USMALLINT AS swings_with_contact,\n        \n            SUM(strikes)::USMALLINT AS strikes,\n        \n            SUM(strikes_called)::USMALLINT AS strikes_called,\n        \n            SUM(strikes_swinging)::USMALLINT AS strikes_swinging,\n        \n            SUM(strikes_foul)::USMALLINT AS strikes_foul,\n        \n            SUM(strikes_foul_tip)::USMALLINT AS strikes_foul_tip,\n        \n            SUM(strikes_in_play)::USMALLINT AS strikes_in_play,\n        \n            SUM(strikes_unknown)::USMALLINT AS strikes_unknown,\n        \n            SUM(balls)::USMALLINT AS balls,\n        \n            SUM(balls_called)::USMALLINT AS balls_called,\n        \n            SUM(balls_intentional)::USMALLINT AS balls_intentional,\n        \n            SUM(balls_automatic)::USMALLINT AS balls_automatic,\n        \n            SUM(unknown_pitches)::USMALLINT AS unknown_pitches,\n        \n            SUM(pitchouts)::USMALLINT AS pitchouts,\n        \n            SUM(pitcher_pickoff_attempts)::USMALLINT AS pitcher_pickoff_attempts,\n        \n            SUM(catcher_pickoff_attempts)::USMALLINT AS catcher_pickoff_attempts,\n        \n            SUM(pitches_blocked_by_catcher)::USMALLINT AS pitches_blocked_by_catcher,\n        \n            SUM(pitches_with_runners_going)::USMALLINT AS pitches_with_runners_going,\n        \n            SUM(passed_balls)::USMALLINT AS passed_balls,\n        \n            SUM(wild_pitches)::USMALLINT AS wild_pitches,\n        \n            SUM(balks)::USMALLINT AS balks,\n        \n            SUM(left_on_base)::USMALLINT AS left_on_base,\n        \n            SUM(left_on_base_with_two_outs)::USMALLINT AS left_on_base_with_two_outs,\n        \n    FROM \"timeball\".\"main_models\".\"player_game_offense_stats\"\n    GROUP BY 1, 2\n),\n\n-- A few definitions change when aggregated at the team level\nfinal AS (\n    SELECT \n        * REPLACE (\n            left_on_base_with_two_outs AS left_on_base,\n    )\n    FROM initial_sum\n)\n\nSELECT * FROM final", "relation_name": "\"timeball\".\"main_models\".\"team_game_offense_stats\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:54.641057Z", "completed_at": "2023-12-09T18:55:54.646611Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:54.647353Z", "completed_at": "2023-12-09T18:55:54.647358Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007870197296142578, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.timeball.player_team_season_pitching_stats", "compiled": true, "compiled_code": "\nWITH databank AS (\n    SELECT\n        pitch.season,\n        pitch.team_id,\n        people.retrosheet_player_id AS player_id,\n        'RegularSeason' AS game_type,\n        SUM(pitch.wins)::INT AS wins,\n        SUM(pitch.losses)::INT AS losses,\n        SUM(pitch.games)::INT AS games,\n        SUM(pitch.games_started)::INT AS games_started,\n        SUM(pitch.complete_games)::INT AS complete_games,\n        SUM(pitch.shutouts)::INT AS shutouts,\n        SUM(pitch.saves)::INT AS saves,\n        SUM(pitch.outs_recorded)::INT AS outs_recorded,\n        SUM(pitch.hits)::INT AS hits,\n        SUM(pitch.earned_runs)::INT AS earned_runs,\n        SUM(pitch.home_runs)::INT AS home_runs,\n        SUM(pitch.walks)::INT AS walks,\n        SUM(pitch.strikeouts)::INT AS strikeouts,\n        SUM(pitch.intentional_walks)::INT AS intentional_walks,\n        SUM(pitch.wild_pitches)::INT AS wild_pitches,\n        SUM(pitch.hit_by_pitches)::INT AS hit_by_pitches,\n        SUM(pitch.balks)::INT AS balks,\n        SUM(pitch.batters_faced)::INT AS batters_faced,\n        SUM(pitch.games_finished)::INT AS games_finished,\n        SUM(pitch.runs)::INT AS runs,\n        SUM(pitch.sacrifice_hits)::INT AS sacrifice_hits,\n        SUM(pitch.sacrifice_flies)::INT AS sacrifice_flies,\n        SUM(pitch.grounded_into_double_plays)::INT AS grounded_into_double_plays,\n    FROM \"timeball\".\"main_models\".\"stg_databank_pitching\" AS pitch\n    INNER JOIN \"timeball\".\"main_models\".\"stg_people\" AS people USING (databank_player_id)\n    -- We'd need to do something different for partial coverage seasons but\n    -- currently box scores are all or nothing for a given year\n    WHERE pitch.season NOT IN (SELECT DISTINCT season FROM \"timeball\".\"main_models\".\"stg_games\")\n    GROUP BY 1, 2, 3\n),\n\nretrosheet AS (\n    SELECT\n        games.season,\n        stats.team_id,\n        stats.player_id,\n        games.game_type,\n        COUNT(*)::INT AS games,\n        SUM(batters_faced)::INT AS batters_faced,\n        SUM(outs_recorded)::INT AS outs_recorded,\n        SUM(inherited_runners_scored)::INT AS inherited_runners_scored,\n        SUM(bequeathed_runners_scored)::INT AS bequeathed_runners_scored,\n        SUM(team_unearned_runs)::INT AS team_unearned_runs,\n        SUM(plate_appearances)::INT AS plate_appearances,\n        SUM(at_bats)::INT AS at_bats,\n        SUM(hits)::INT AS hits,\n        SUM(singles)::INT AS singles,\n        SUM(doubles)::INT AS doubles,\n        SUM(triples)::INT AS triples,\n        SUM(home_runs)::INT AS home_runs,\n        SUM(total_bases)::INT AS total_bases,\n        SUM(strikeouts)::INT AS strikeouts,\n        SUM(walks)::INT AS walks,\n        SUM(intentional_walks)::INT AS intentional_walks,\n        SUM(hit_by_pitches)::INT AS hit_by_pitches,\n        SUM(sacrifice_hits)::INT AS sacrifice_hits,\n        SUM(sacrifice_flies)::INT AS sacrifice_flies,\n        SUM(reached_on_errors)::INT AS reached_on_errors,\n        SUM(reached_on_interferences)::INT AS reached_on_interferences,\n        SUM(inside_the_park_home_runs)::INT AS inside_the_park_home_runs,\n        SUM(ground_rule_doubles)::INT AS ground_rule_doubles,\n        SUM(infield_hits)::INT AS infield_hits,\n        SUM(on_base_opportunities)::INT AS on_base_opportunities,\n        SUM(on_base_successes)::INT AS on_base_successes,\n        SUM(grounded_into_double_plays)::INT AS grounded_into_double_plays,\n        SUM(double_plays)::INT AS double_plays,\n        SUM(triple_plays)::INT AS triple_plays,\n        SUM(batting_outs)::INT AS batting_outs,\n        SUM(balls_in_play)::INT AS balls_in_play,\n        SUM(balls_batted)::INT AS balls_batted,\n        SUM(trajectory_fly_ball)::INT AS trajectory_fly_ball,\n        SUM(trajectory_ground_ball)::INT AS trajectory_ground_ball,\n        SUM(trajectory_line_drive)::INT AS trajectory_line_drive,\n        SUM(trajectory_pop_up)::INT AS trajectory_pop_up,\n        SUM(trajectory_unknown)::INT AS trajectory_unknown,\n        SUM(trajectory_known)::INT AS trajectory_known,\n        SUM(trajectory_broad_air_ball)::INT AS trajectory_broad_air_ball,\n        SUM(trajectory_broad_ground_ball)::INT AS trajectory_broad_ground_ball,\n        SUM(trajectory_broad_unknown)::INT AS trajectory_broad_unknown,\n        SUM(trajectory_broad_known)::INT AS trajectory_broad_known,\n        SUM(bunts)::INT AS bunts,\n        SUM(batted_distance_plate)::INT AS batted_distance_plate,\n        SUM(batted_distance_infield)::INT AS batted_distance_infield,\n        SUM(batted_distance_outfield)::INT AS batted_distance_outfield,\n        SUM(batted_distance_unknown)::INT AS batted_distance_unknown,\n        SUM(batted_distance_known)::INT AS batted_distance_known,\n        SUM(fielded_by_battery)::INT AS fielded_by_battery,\n        SUM(fielded_by_infielder)::INT AS fielded_by_infielder,\n        SUM(fielded_by_outfielder)::INT AS fielded_by_outfielder,\n        SUM(fielded_by_known)::INT AS fielded_by_known,\n        SUM(fielded_by_unknown)::INT AS fielded_by_unknown,\n        SUM(batted_angle_left)::INT AS batted_angle_left,\n        SUM(batted_angle_right)::INT AS batted_angle_right,\n        SUM(batted_angle_middle)::INT AS batted_angle_middle,\n        SUM(batted_angle_unknown)::INT AS batted_angle_unknown,\n        SUM(batted_angle_known)::INT AS batted_angle_known,\n        SUM(batted_location_plate)::INT AS batted_location_plate,\n        SUM(batted_location_right_infield)::INT AS batted_location_right_infield,\n        SUM(batted_location_middle_infield)::INT AS batted_location_middle_infield,\n        SUM(batted_location_left_infield)::INT AS batted_location_left_infield,\n        SUM(batted_location_left_field)::INT AS batted_location_left_field,\n        SUM(batted_location_center_field)::INT AS batted_location_center_field,\n        SUM(batted_location_right_field)::INT AS batted_location_right_field,\n        SUM(batted_location_unknown)::INT AS batted_location_unknown,\n        SUM(batted_location_known)::INT AS batted_location_known,\n        SUM(batted_balls_pulled)::INT AS batted_balls_pulled,\n        SUM(batted_balls_opposite_field)::INT AS batted_balls_opposite_field,\n        SUM(runs)::INT AS runs,\n        SUM(times_reached_base)::INT AS times_reached_base,\n        SUM(stolen_base_opportunities)::INT AS stolen_base_opportunities,\n        SUM(stolen_base_opportunities_second)::INT AS stolen_base_opportunities_second,\n        SUM(stolen_base_opportunities_third)::INT AS stolen_base_opportunities_third,\n        SUM(stolen_base_opportunities_home)::INT AS stolen_base_opportunities_home,\n        SUM(stolen_bases)::INT AS stolen_bases,\n        SUM(stolen_bases_second)::INT AS stolen_bases_second,\n        SUM(stolen_bases_third)::INT AS stolen_bases_third,\n        SUM(stolen_bases_home)::INT AS stolen_bases_home,\n        SUM(caught_stealing)::INT AS caught_stealing,\n        SUM(caught_stealing_second)::INT AS caught_stealing_second,\n        SUM(caught_stealing_third)::INT AS caught_stealing_third,\n        SUM(caught_stealing_home)::INT AS caught_stealing_home,\n        SUM(picked_off)::INT AS picked_off,\n        SUM(picked_off_first)::INT AS picked_off_first,\n        SUM(picked_off_second)::INT AS picked_off_second,\n        SUM(picked_off_third)::INT AS picked_off_third,\n        SUM(picked_off_caught_stealing)::INT AS picked_off_caught_stealing,\n        SUM(outs_on_basepaths)::INT AS outs_on_basepaths,\n        SUM(unforced_outs_on_basepaths)::INT AS unforced_outs_on_basepaths,\n        SUM(outs_avoided_on_errors)::INT AS outs_avoided_on_errors,\n        SUM(advances_on_wild_pitches)::INT AS advances_on_wild_pitches,\n        SUM(advances_on_passed_balls)::INT AS advances_on_passed_balls,\n        SUM(advances_on_balks)::INT AS advances_on_balks,\n        SUM(advances_on_unspecified_plays)::INT AS advances_on_unspecified_plays,\n        SUM(advances_on_defensive_indifference)::INT AS advances_on_defensive_indifference,\n        SUM(advances_on_errors)::INT AS advances_on_errors,\n        SUM(extra_base_chances)::INT AS extra_base_chances,\n        SUM(extra_base_advance_attempts)::INT AS extra_base_advance_attempts,\n        SUM(extra_bases_taken)::INT AS extra_bases_taken,\n        SUM(bases_advanced)::INT AS bases_advanced,\n        SUM(bases_advanced_on_balls_in_play)::INT AS bases_advanced_on_balls_in_play,\n        SUM(surplus_bases_advanced_on_balls_in_play)::INT AS surplus_bases_advanced_on_balls_in_play,\n        SUM(outs_on_extra_base_advance_attempts)::INT AS outs_on_extra_base_advance_attempts,\n        SUM(pitches)::INT AS pitches,\n        SUM(swings)::INT AS swings,\n        SUM(swings_with_contact)::INT AS swings_with_contact,\n        SUM(strikes)::INT AS strikes,\n        SUM(strikes_called)::INT AS strikes_called,\n        SUM(strikes_swinging)::INT AS strikes_swinging,\n        SUM(strikes_foul)::INT AS strikes_foul,\n        SUM(strikes_foul_tip)::INT AS strikes_foul_tip,\n        SUM(strikes_in_play)::INT AS strikes_in_play,\n        SUM(strikes_unknown)::INT AS strikes_unknown,\n        SUM(balls)::INT AS balls,\n        SUM(balls_called)::INT AS balls_called,\n        SUM(balls_intentional)::INT AS balls_intentional,\n        SUM(balls_automatic)::INT AS balls_automatic,\n        SUM(unknown_pitches)::INT AS unknown_pitches,\n        SUM(pitchouts)::INT AS pitchouts,\n        SUM(pitcher_pickoff_attempts)::INT AS pitcher_pickoff_attempts,\n        SUM(catcher_pickoff_attempts)::INT AS catcher_pickoff_attempts,\n        SUM(pitches_blocked_by_catcher)::INT AS pitches_blocked_by_catcher,\n        SUM(pitches_with_runners_going)::INT AS pitches_with_runners_going,\n        SUM(passed_balls)::INT AS passed_balls,\n        SUM(wild_pitches)::INT AS wild_pitches,\n        SUM(balks)::INT AS balks,\n        SUM(left_on_base)::INT AS left_on_base,\n        SUM(left_on_base_with_two_outs)::INT AS left_on_base_with_two_outs,\n        SUM(games_started)::INT AS games_started,\n        SUM(innings_pitched)::INT AS innings_pitched,\n        SUM(inherited_runners)::INT AS inherited_runners,\n        SUM(bequeathed_runners)::INT AS bequeathed_runners,\n        SUM(games_relieved)::INT AS games_relieved,\n        SUM(games_finished)::INT AS games_finished,\n        SUM(save_situations_entered)::INT AS save_situations_entered,\n        SUM(holds)::INT AS holds,\n        SUM(blown_saves)::INT AS blown_saves,\n        SUM(saves_by_rule)::INT AS saves_by_rule,\n        SUM(save_opportunities)::INT AS save_opportunities,\n        SUM(wins)::INT AS wins,\n        SUM(losses)::INT AS losses,\n        SUM(saves)::INT AS saves,\n        SUM(earned_runs)::INT AS earned_runs,\n        SUM(complete_games)::INT AS complete_games,\n        SUM(shutouts)::INT AS shutouts,\n        SUM(quality_starts)::INT AS quality_starts,\n        SUM(cheap_wins)::INT AS cheap_wins,\n        SUM(tough_losses)::INT AS tough_losses,\n        SUM(no_decisions)::INT AS no_decisions,\n        SUM(no_hitters)::INT AS no_hitters,\n        SUM(perfect_games)::INT AS perfect_games,\n        \n    FROM \"timeball\".\"main_models\".\"stg_games\" AS games\n    INNER JOIN \"timeball\".\"main_models\".\"player_game_pitching_stats\" AS stats USING (game_id)\n    GROUP BY 1, 2, 3, 4\n),\n\nreround_ip AS (\n    SELECT * REPLACE (\n        ROUND(outs_recorded / 3, 2) AS innings_pitched\n    )\n    FROM retrosheet\n)\n\nSELECT * FROM reround_ip\nUNION ALL BY NAME\nSELECT * FROM databank", "relation_name": "\"timeball\".\"main_models\".\"player_team_season_pitching_stats\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:54.649739Z", "completed_at": "2023-12-09T18:55:54.656899Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:54.657582Z", "completed_at": "2023-12-09T18:55:54.657586Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009263038635253906, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.timeball.team_game_pitching_stats", "compiled": true, "compiled_code": "\nWITH initial_sum AS (\n    SELECT\n        game_id,\n        team_id,\n        \n            SUM(batters_faced)::USMALLINT AS batters_faced,\n        \n            SUM(outs_recorded)::USMALLINT AS outs_recorded,\n        \n            SUM(inherited_runners_scored)::USMALLINT AS inherited_runners_scored,\n        \n            SUM(bequeathed_runners_scored)::USMALLINT AS bequeathed_runners_scored,\n        \n            SUM(team_unearned_runs)::USMALLINT AS team_unearned_runs,\n        \n            SUM(plate_appearances)::USMALLINT AS plate_appearances,\n        \n            SUM(at_bats)::USMALLINT AS at_bats,\n        \n            SUM(hits)::USMALLINT AS hits,\n        \n            SUM(singles)::USMALLINT AS singles,\n        \n            SUM(doubles)::USMALLINT AS doubles,\n        \n            SUM(triples)::USMALLINT AS triples,\n        \n            SUM(home_runs)::USMALLINT AS home_runs,\n        \n            SUM(total_bases)::USMALLINT AS total_bases,\n        \n            SUM(strikeouts)::USMALLINT AS strikeouts,\n        \n            SUM(walks)::USMALLINT AS walks,\n        \n            SUM(intentional_walks)::USMALLINT AS intentional_walks,\n        \n            SUM(hit_by_pitches)::USMALLINT AS hit_by_pitches,\n        \n            SUM(sacrifice_hits)::USMALLINT AS sacrifice_hits,\n        \n            SUM(sacrifice_flies)::USMALLINT AS sacrifice_flies,\n        \n            SUM(reached_on_errors)::USMALLINT AS reached_on_errors,\n        \n            SUM(reached_on_interferences)::USMALLINT AS reached_on_interferences,\n        \n            SUM(inside_the_park_home_runs)::USMALLINT AS inside_the_park_home_runs,\n        \n            SUM(ground_rule_doubles)::USMALLINT AS ground_rule_doubles,\n        \n            SUM(infield_hits)::USMALLINT AS infield_hits,\n        \n            SUM(on_base_opportunities)::USMALLINT AS on_base_opportunities,\n        \n            SUM(on_base_successes)::USMALLINT AS on_base_successes,\n        \n            SUM(grounded_into_double_plays)::USMALLINT AS grounded_into_double_plays,\n        \n            SUM(double_plays)::USMALLINT AS double_plays,\n        \n            SUM(triple_plays)::USMALLINT AS triple_plays,\n        \n            SUM(batting_outs)::USMALLINT AS batting_outs,\n        \n            SUM(balls_in_play)::USMALLINT AS balls_in_play,\n        \n            SUM(balls_batted)::USMALLINT AS balls_batted,\n        \n            SUM(trajectory_fly_ball)::USMALLINT AS trajectory_fly_ball,\n        \n            SUM(trajectory_ground_ball)::USMALLINT AS trajectory_ground_ball,\n        \n            SUM(trajectory_line_drive)::USMALLINT AS trajectory_line_drive,\n        \n            SUM(trajectory_pop_up)::USMALLINT AS trajectory_pop_up,\n        \n            SUM(trajectory_unknown)::USMALLINT AS trajectory_unknown,\n        \n            SUM(trajectory_known)::USMALLINT AS trajectory_known,\n        \n            SUM(trajectory_broad_air_ball)::USMALLINT AS trajectory_broad_air_ball,\n        \n            SUM(trajectory_broad_ground_ball)::USMALLINT AS trajectory_broad_ground_ball,\n        \n            SUM(trajectory_broad_unknown)::USMALLINT AS trajectory_broad_unknown,\n        \n            SUM(trajectory_broad_known)::USMALLINT AS trajectory_broad_known,\n        \n            SUM(bunts)::USMALLINT AS bunts,\n        \n            SUM(batted_distance_plate)::USMALLINT AS batted_distance_plate,\n        \n            SUM(batted_distance_infield)::USMALLINT AS batted_distance_infield,\n        \n            SUM(batted_distance_outfield)::USMALLINT AS batted_distance_outfield,\n        \n            SUM(batted_distance_unknown)::USMALLINT AS batted_distance_unknown,\n        \n            SUM(batted_distance_known)::USMALLINT AS batted_distance_known,\n        \n            SUM(fielded_by_battery)::USMALLINT AS fielded_by_battery,\n        \n            SUM(fielded_by_infielder)::USMALLINT AS fielded_by_infielder,\n        \n            SUM(fielded_by_outfielder)::USMALLINT AS fielded_by_outfielder,\n        \n            SUM(fielded_by_known)::USMALLINT AS fielded_by_known,\n        \n            SUM(fielded_by_unknown)::USMALLINT AS fielded_by_unknown,\n        \n            SUM(batted_angle_left)::USMALLINT AS batted_angle_left,\n        \n            SUM(batted_angle_right)::USMALLINT AS batted_angle_right,\n        \n            SUM(batted_angle_middle)::USMALLINT AS batted_angle_middle,\n        \n            SUM(batted_angle_unknown)::USMALLINT AS batted_angle_unknown,\n        \n            SUM(batted_angle_known)::USMALLINT AS batted_angle_known,\n        \n            SUM(batted_location_plate)::USMALLINT AS batted_location_plate,\n        \n            SUM(batted_location_right_infield)::USMALLINT AS batted_location_right_infield,\n        \n            SUM(batted_location_middle_infield)::USMALLINT AS batted_location_middle_infield,\n        \n            SUM(batted_location_left_infield)::USMALLINT AS batted_location_left_infield,\n        \n            SUM(batted_location_left_field)::USMALLINT AS batted_location_left_field,\n        \n            SUM(batted_location_center_field)::USMALLINT AS batted_location_center_field,\n        \n            SUM(batted_location_right_field)::USMALLINT AS batted_location_right_field,\n        \n            SUM(batted_location_unknown)::USMALLINT AS batted_location_unknown,\n        \n            SUM(batted_location_known)::USMALLINT AS batted_location_known,\n        \n            SUM(batted_balls_pulled)::USMALLINT AS batted_balls_pulled,\n        \n            SUM(batted_balls_opposite_field)::USMALLINT AS batted_balls_opposite_field,\n        \n            SUM(runs)::USMALLINT AS runs,\n        \n            SUM(times_reached_base)::USMALLINT AS times_reached_base,\n        \n            SUM(stolen_base_opportunities)::USMALLINT AS stolen_base_opportunities,\n        \n            SUM(stolen_base_opportunities_second)::USMALLINT AS stolen_base_opportunities_second,\n        \n            SUM(stolen_base_opportunities_third)::USMALLINT AS stolen_base_opportunities_third,\n        \n            SUM(stolen_base_opportunities_home)::USMALLINT AS stolen_base_opportunities_home,\n        \n            SUM(stolen_bases)::USMALLINT AS stolen_bases,\n        \n            SUM(stolen_bases_second)::USMALLINT AS stolen_bases_second,\n        \n            SUM(stolen_bases_third)::USMALLINT AS stolen_bases_third,\n        \n            SUM(stolen_bases_home)::USMALLINT AS stolen_bases_home,\n        \n            SUM(caught_stealing)::USMALLINT AS caught_stealing,\n        \n            SUM(caught_stealing_second)::USMALLINT AS caught_stealing_second,\n        \n            SUM(caught_stealing_third)::USMALLINT AS caught_stealing_third,\n        \n            SUM(caught_stealing_home)::USMALLINT AS caught_stealing_home,\n        \n            SUM(picked_off)::USMALLINT AS picked_off,\n        \n            SUM(picked_off_first)::USMALLINT AS picked_off_first,\n        \n            SUM(picked_off_second)::USMALLINT AS picked_off_second,\n        \n            SUM(picked_off_third)::USMALLINT AS picked_off_third,\n        \n            SUM(picked_off_caught_stealing)::USMALLINT AS picked_off_caught_stealing,\n        \n            SUM(outs_on_basepaths)::USMALLINT AS outs_on_basepaths,\n        \n            SUM(unforced_outs_on_basepaths)::USMALLINT AS unforced_outs_on_basepaths,\n        \n            SUM(outs_avoided_on_errors)::USMALLINT AS outs_avoided_on_errors,\n        \n            SUM(advances_on_wild_pitches)::USMALLINT AS advances_on_wild_pitches,\n        \n            SUM(advances_on_passed_balls)::USMALLINT AS advances_on_passed_balls,\n        \n            SUM(advances_on_balks)::USMALLINT AS advances_on_balks,\n        \n            SUM(advances_on_unspecified_plays)::USMALLINT AS advances_on_unspecified_plays,\n        \n            SUM(advances_on_defensive_indifference)::USMALLINT AS advances_on_defensive_indifference,\n        \n            SUM(advances_on_errors)::USMALLINT AS advances_on_errors,\n        \n            SUM(extra_base_chances)::USMALLINT AS extra_base_chances,\n        \n            SUM(extra_base_advance_attempts)::USMALLINT AS extra_base_advance_attempts,\n        \n            SUM(extra_bases_taken)::USMALLINT AS extra_bases_taken,\n        \n            SUM(bases_advanced)::USMALLINT AS bases_advanced,\n        \n            SUM(bases_advanced_on_balls_in_play)::USMALLINT AS bases_advanced_on_balls_in_play,\n        \n            SUM(surplus_bases_advanced_on_balls_in_play)::INT1 AS surplus_bases_advanced_on_balls_in_play,\n        \n            SUM(outs_on_extra_base_advance_attempts)::USMALLINT AS outs_on_extra_base_advance_attempts,\n        \n            SUM(pitches)::USMALLINT AS pitches,\n        \n            SUM(swings)::USMALLINT AS swings,\n        \n            SUM(swings_with_contact)::USMALLINT AS swings_with_contact,\n        \n            SUM(strikes)::USMALLINT AS strikes,\n        \n            SUM(strikes_called)::USMALLINT AS strikes_called,\n        \n            SUM(strikes_swinging)::USMALLINT AS strikes_swinging,\n        \n            SUM(strikes_foul)::USMALLINT AS strikes_foul,\n        \n            SUM(strikes_foul_tip)::USMALLINT AS strikes_foul_tip,\n        \n            SUM(strikes_in_play)::USMALLINT AS strikes_in_play,\n        \n            SUM(strikes_unknown)::USMALLINT AS strikes_unknown,\n        \n            SUM(balls)::USMALLINT AS balls,\n        \n            SUM(balls_called)::USMALLINT AS balls_called,\n        \n            SUM(balls_intentional)::USMALLINT AS balls_intentional,\n        \n            SUM(balls_automatic)::USMALLINT AS balls_automatic,\n        \n            SUM(unknown_pitches)::USMALLINT AS unknown_pitches,\n        \n            SUM(pitchouts)::USMALLINT AS pitchouts,\n        \n            SUM(pitcher_pickoff_attempts)::USMALLINT AS pitcher_pickoff_attempts,\n        \n            SUM(catcher_pickoff_attempts)::USMALLINT AS catcher_pickoff_attempts,\n        \n            SUM(pitches_blocked_by_catcher)::USMALLINT AS pitches_blocked_by_catcher,\n        \n            SUM(pitches_with_runners_going)::USMALLINT AS pitches_with_runners_going,\n        \n            SUM(passed_balls)::USMALLINT AS passed_balls,\n        \n            SUM(wild_pitches)::USMALLINT AS wild_pitches,\n        \n            SUM(balks)::USMALLINT AS balks,\n        \n            SUM(left_on_base)::USMALLINT AS left_on_base,\n        \n            SUM(left_on_base_with_two_outs)::USMALLINT AS left_on_base_with_two_outs,\n        \n            SUM(games_started)::USMALLINT AS games_started,\n        \n            SUM(innings_pitched)::USMALLINT AS innings_pitched,\n        \n            SUM(inherited_runners)::USMALLINT AS inherited_runners,\n        \n            SUM(bequeathed_runners)::USMALLINT AS bequeathed_runners,\n        \n            SUM(games_relieved)::USMALLINT AS games_relieved,\n        \n            SUM(games_finished)::USMALLINT AS games_finished,\n        \n            SUM(save_situations_entered)::USMALLINT AS save_situations_entered,\n        \n            SUM(holds)::USMALLINT AS holds,\n        \n            SUM(blown_saves)::USMALLINT AS blown_saves,\n        \n            SUM(saves_by_rule)::USMALLINT AS saves_by_rule,\n        \n            SUM(save_opportunities)::USMALLINT AS save_opportunities,\n        \n            SUM(wins)::USMALLINT AS wins,\n        \n            SUM(losses)::USMALLINT AS losses,\n        \n            SUM(saves)::USMALLINT AS saves,\n        \n            SUM(earned_runs)::USMALLINT AS earned_runs,\n        \n            SUM(complete_games)::USMALLINT AS complete_games,\n        \n            SUM(shutouts)::USMALLINT AS shutouts,\n        \n            SUM(quality_starts)::USMALLINT AS quality_starts,\n        \n            SUM(cheap_wins)::USMALLINT AS cheap_wins,\n        \n            SUM(tough_losses)::USMALLINT AS tough_losses,\n        \n            SUM(no_decisions)::USMALLINT AS no_decisions,\n        \n            SUM(no_hitters)::USMALLINT AS no_hitters,\n        \n            SUM(perfect_games)::USMALLINT AS perfect_games,\n        \n    FROM \"timeball\".\"main_models\".\"player_game_pitching_stats\"\n    GROUP BY 1, 2\n),\n\n-- A few definitions change when aggregated at the team level\nfinal AS (\n    SELECT\n        * REPLACE (\n            -- TODO: Investigate cases where team UER > team ER\n            GREATEST(0, earned_runs::INT - team_unearned_runs)::UTINYINT AS earned_runs,\n            left_on_base_with_two_outs::UTINYINT AS left_on_base,\n            -- Combined no-hitters and perfect games (latter hasn't happened yet)\n            (hits = 0 AND outs_recorded >= 27)::UTINYINT AS no_hitters,\n            (perfect_games = 1 OR outs_recorded >= 27 AND times_reached_base = 0)::UTINYINT AS perfect_games,\n            -- Just to avoid weird rounding stuff\n            ROUND(outs_recorded / 3, 4)::DECIMAL(6, 4) AS innings_pitched\n        ),\n        earned_runs AS individual_earned_runs\n    FROM initial_sum\n\n)\n\nSELECT * FROM final", "relation_name": "\"timeball\".\"main_models\".\"team_game_pitching_stats\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:54.659960Z", "completed_at": "2023-12-09T18:55:54.664194Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:54.665000Z", "completed_at": "2023-12-09T18:55:54.665004Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006596803665161133, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.timeball.ml_event_outcomes", "compiled": true, "compiled_code": "\nWITH pa_map AS (\n    SELECT\n        e.game_id,\n        e.season,\n        e.event_key,\n        e.outs_on_play,\n        e.batting_side,\n        SUM(e.runs_on_play) OVER rest_of_inning::FLOAT AS outcome_runs_following_num,\n        result_types.result_category AS pa_result,\n        result_types.is_in_play,\n        bb.trajectory,\n        bb.location_depth,\n        bb.location_side,\n    FROM \"timeball\".\"main_models\".\"stg_events\" AS e\n    LEFT JOIN \"timeball\".\"main_seeds\".\"seed_plate_appearance_result_types\" AS result_types USING (plate_appearance_result)\n    LEFT JOIN \"timeball\".\"main_models\".\"calc_batted_ball_type\" AS bb USING (event_key)\n    WINDOW\n        rest_of_inning AS (\n            PARTITION BY e.game_id, e.inning, e.frame\n            ORDER BY e.event_id\n            ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING\n        )\n),\n\nbaserunning_map AS (\n    SELECT\n        e.event_key,\n        LIST(\n            CASE \n                WHEN is_out THEN play_types.result_category_out\n                ELSE play_types.result_category_safe\n            END\n            ORDER BY play_types.priority\n        )[1] AS baserunning_result,\n    FROM \"timeball\".\"main_models\".\"stg_event_baserunners\" e\n    INNER JOIN \"timeball\".\"main_seeds\".\"seed_baserunning_play_types\" AS play_types USING (baserunning_play_type)\n    GROUP BY e.event_key\n),\n\njoined AS (\n    SELECT\n        event_key,\n        pa_map.season,\n        (pa_map.pa_result IS NOT NULL)::UTINYINT AS outcome_has_batting_bin,\n        COALESCE(pa_map.is_in_play, FALSE)::UTINYINT AS outcome_is_in_play_bin,\n        COALESCE(pa_map.pa_result, 'Other') AS outcome_plate_appearance_cat,\n        COALESCE(baserunning_map.baserunning_result, 'Other') AS outcome_baserunning_cat,\n        COALESCE(pa_map.trajectory, 'Other') AS outcome_batted_trajectory_cat,\n        COALESCE(pa_map.location_depth || '-' || pa_map.location_side, 'Other') AS outcome_batted_location_cat,\n        pa_map.outcome_runs_following_num,\n        COALESCE(game_end.winning_side = pa_map.batting_side, FALSE)::UTINYINT AS outcome_is_win_bin,\n        COALESCE(pa_map.trajectory != 'Unknown', FALSE)::UTINYINT AS has_known_contact,\n        COALESCE('Unknown' NOT IN (pa_map.location_depth, pa_map.location_side), FALSE)::UTINYINT AS has_known_location,\n        (game_end.winning_side IS NOT NULL)::UTINYINT AS is_full_game,\n        1 / (COUNT(*) OVER (PARTITION BY GREATEST(1913, pa_map.season)) / COUNT(*) OVER ()::FLOAT) AS season_sample_factor,\n    FROM pa_map\n    LEFT JOIN baserunning_map USING (event_key)\n    INNER JOIN \"timeball\".\"main_models\".\"game_results\" AS game_end USING (game_id)\n    WHERE pa_map.pa_result IS NOT NULL OR baserunning_map.baserunning_result IS NOT NULL\n),\n\nadd_weights AS (\n    SELECT\n        event_key,\n        outcome_has_batting_bin,\n        outcome_is_in_play_bin,\n        outcome_batted_trajectory_cat,\n        outcome_batted_location_cat,\n        outcome_plate_appearance_cat,\n        outcome_baserunning_cat,\n        outcome_runs_following_num,\n        outcome_is_win_bin,\n        season_sample_factor / AVG(season_sample_factor) OVER ()::FLOAT AS generic_sample_weight,\n        generic_sample_weight * outcome_has_batting_bin::FLOAT AS plate_appearance_sample_weight,\n        generic_sample_weight * outcome_has_batting_bin::FLOAT AS in_play_sample_weight,\n        generic_sample_weight * has_known_contact::FLOAT AS trajectory_sample_weight,\n        generic_sample_weight * has_known_location::FLOAT AS location_sample_weight,\n        generic_sample_weight * (1 - outcome_has_batting_bin)::FLOAT AS baserunning_play_sample_weight,\n        generic_sample_weight * is_full_game::FLOAT AS win_sample_weight,\n    FROM joined\n\n),\n\nfinal AS (\n    SELECT * REPLACE (\n        plate_appearance_sample_weight / AVG(plate_appearance_sample_weight) OVER ()::FLOAT AS plate_appearance_sample_weight,\n        in_play_sample_weight / AVG(in_play_sample_weight) OVER ()::FLOAT AS in_play_sample_weight,\n        trajectory_sample_weight / AVG(trajectory_sample_weight) OVER ()::FLOAT AS trajectory_sample_weight,\n        location_sample_weight / AVG(location_sample_weight) OVER ()::FLOAT AS location_sample_weight,\n        baserunning_play_sample_weight / AVG(baserunning_play_sample_weight) OVER ()::FLOAT AS baserunning_play_sample_weight,\n        win_sample_weight / AVG(win_sample_weight) OVER ()::FLOAT AS win_sample_weight,\n    )\n    FROM add_weights\n)\n\nSELECT *\nFROM final\nORDER BY RANDOM()", "relation_name": "\"timeball\".\"main_models\".\"ml_event_outcomes\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:54.667324Z", "completed_at": "2023-12-09T18:55:54.670187Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:54.670838Z", "completed_at": "2023-12-09T18:55:54.670842Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004920244216918945, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.timeball.leverage_index", "compiled": true, "compiled_code": "\nWITH trans AS (\n    SELECT\n        win_expectancy_start_key,\n        win_expectancy_end_key,\n        COUNT(*) AS sample_size,\n        -- We use the win key instead of the run key because we aren't\n        -- including league/time in the leverage calc\n        AVG(ABS(expected_home_win_change)) AS absolute_expected_home_win_change,\n        AVG(ABS(expected_runs_change)) AS absolute_expected_runs_change,\n    FROM \"timeball\".\"main_models\".\"event_transition_values\"\n    GROUP BY 1, 2\n),\n\nweighted AS (\n    SELECT\n        win_expectancy_start_key,\n        SUM(sample_size) AS agg_sample_size,\n        -- Weighted averages\n        SUM(absolute_expected_home_win_change * sample_size)\n        / SUM(sample_size) AS win_leverage_unscaled,\n        SUM(absolute_expected_runs_change * sample_size)\n        / SUM(sample_size) AS run_leverage_unscaled,\n        -- Note that this is a window function applied after the aggregation\n        SUM(win_leverage_unscaled * agg_sample_size) OVER ()\n        / SUM(agg_sample_size) OVER () AS avg_win_leverage_unscaled,\n        SUM(run_leverage_unscaled * agg_sample_size) OVER ()\n        / SUM(agg_sample_size) OVER () AS avg_run_leverage_unscaled,\n    FROM trans\n    GROUP BY 1\n),\n\nfinal AS (\n    SELECT\n        win_expectancy_start_key,\n        ROUND(win_leverage_unscaled, 3) AS win_leverage_unscaled,\n        ROUND(run_leverage_unscaled, 3) AS run_leverage_unscaled,\n        ROUND(win_leverage_unscaled / avg_win_leverage_unscaled, 2) AS win_leverage_index,\n        ROUND(run_leverage_unscaled / avg_run_leverage_unscaled, 2) AS run_leverage_index,\n        agg_sample_size\n    FROM weighted\n)\n\nSELECT * FROM final", "relation_name": "\"timeball\".\"main_models\".\"leverage_index\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:54.673067Z", "completed_at": "2023-12-09T18:55:54.676912Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:54.677588Z", "completed_at": "2023-12-09T18:55:54.677592Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005921125411987305, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.dbt_utils_not_null_proportion_event_transition_values_0_999__expected_batting_win_change.a7ac9d0c20", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\nwith validation as (\n  select\n    \n    sum(case when expected_batting_win_change is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from \"timeball\".\"main_models\".\"event_transition_values\"\n  \n),\nvalidation_errors as (\n  select\n    \n    not_null_proportion\n  from validation\n  where not_null_proportion < 0.999 or not_null_proportion > 1\n)\nselect\n  *\nfrom validation_errors\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:54.679722Z", "completed_at": "2023-12-09T18:55:54.683580Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:54.684254Z", "completed_at": "2023-12-09T18:55:54.684257Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005894184112548828, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.dbt_utils_not_null_proportion_event_transition_values_0_999__expected_home_win_change.c38533e897", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\nwith validation as (\n  select\n    \n    sum(case when expected_home_win_change is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from \"timeball\".\"main_models\".\"event_transition_values\"\n  \n),\nvalidation_errors as (\n  select\n    \n    not_null_proportion\n  from validation\n  where not_null_proportion < 0.999 or not_null_proportion > 1\n)\nselect\n  *\nfrom validation_errors\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:54.686394Z", "completed_at": "2023-12-09T18:55:54.690050Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:54.690722Z", "completed_at": "2023-12-09T18:55:54.690726Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0057070255279541016, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.timeball.dbt_utils_not_null_proportion_event_transition_values_0_999__expected_runs_change.1f88bb4978", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\nwith validation as (\n  select\n    \n    sum(case when expected_runs_change is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from \"timeball\".\"main_models\".\"event_transition_values\"\n  \n),\nvalidation_errors as (\n  select\n    \n    not_null_proportion\n  from validation\n  where not_null_proportion < 0.999 or not_null_proportion > 1\n)\nselect\n  *\nfrom validation_errors\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:54.692852Z", "completed_at": "2023-12-09T18:55:54.958229Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:54.958915Z", "completed_at": "2023-12-09T18:55:54.958920Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.3002500534057617, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.timeball.metrics_player_career_fielding", "compiled": true, "compiled_code": "-- Add extra context columns to get potential grouiping keys\n    WITH season AS (SELECT \n            s.*,\n                f.franchise_id,\n                f.league,\n                f.division,\n                f.location,\n                f.nickname,\n                f.alternative_nicknames,\n                f.date_start,\n                f.date_end,\n                f.city,\n                f.state,\n        FROM \"timeball\".\"main_models\".\"player_position_team_season_fielding_stats\" AS s\n        LEFT JOIN \"timeball\".\"main_seeds\".\"seed_franchises\" AS f\n            ON s.team_id = f.team_id\n            AND s.season BETWEEN EXTRACT(YEAR FROM f.date_start) AND COALESCE(EXTRACT(YEAR FROM f.date_end), 9999)\n    ),\n    event AS (SELECT \n            e.*,\n                g.opponent_id,\n                g.league,\n                g.opponent_league,\n                g.division,\n                g.opponent_division,\n                g.team_name,\n                g.opponent_name,\n                g.starting_pitcher_id,\n                g.opponent_starting_pitcher_id,\n                g.team_side,\n                g.date,\n                g.start_time,\n                g.season,\n                g.doubleheader_status,\n                g.time_of_day,\n                g.game_type,\n                g.bat_first_side,\n                g.sky,\n                g.field_condition,\n                g.precipitation,\n                g.wind_direction,\n                g.park_id,\n                g.temperature_fahrenheit,\n                g.attendance,\n                g.wind_speed_mph,\n                g.use_dh,\n                g.scorer,\n                g.scoring_method,\n                g.source_type,\n                g.umpire_home_id,\n                g.umpire_first_id,\n                g.umpire_second_id,\n                g.umpire_third_id,\n                g.umpire_left_id,\n                g.umpire_right_id,\n                g.filename,\n                g.is_regular_season,\n                g.is_postseason,\n                g.is_integrated,\n                g.is_negro_leagues,\n                g.is_segregated_white,\n                g.away_franchise_id,\n                g.home_franchise_id,\n                g.is_interleague,\n                g.lineup_map_away,\n                g.lineup_map_home,\n                g.fielding_map_away,\n                g.fielding_map_home,\n                g.series_id,\n                g.season_game_number,\n                g.series_game_number,\n                g.days_since_last_game,\n        FROM \"timeball\".\"main_models\".\"event_player_fielding_stats\" AS e\n        LEFT JOIN \"timeball\".\"main_models\".\"team_game_start_info\" AS g USING (team_id, game_id)\n    ),\n    -- Need to use the season table for basic stats/metrics to ensure full coverage...\n    basic_stats AS (\n        SELECT\n            player_id,\n            SUM(games) AS games,\n            SUM(outs_played) AS outs_played,\n            SUM(plate_appearances_in_field) AS plate_appearances_in_field,\n            SUM(plate_appearances_in_field_with_ball_in_play) AS plate_appearances_in_field_with_ball_in_play,\n            SUM(unknown_putouts_while_fielding) AS unknown_putouts_while_fielding,\n            SUM(balls_hit_to) AS balls_hit_to,\n            SUM(putouts) AS putouts,\n            SUM(assists) AS assists,\n            SUM(errors) AS errors,\n            SUM(fielders_choices) AS fielders_choices,\n            SUM(assisted_putouts) AS assisted_putouts,\n            SUM(in_play_putouts) AS in_play_putouts,\n            SUM(in_play_assists) AS in_play_assists,\n            SUM(reaching_errors) AS reaching_errors,\n            SUM(stolen_bases) AS stolen_bases,\n            SUM(caught_stealing) AS caught_stealing,\n            SUM(pickoffs) AS pickoffs,\n            SUM(passed_balls) AS passed_balls,\n            SUM(double_plays) AS double_plays,\n            SUM(triple_plays) AS triple_plays,\n            SUM(ground_ball_double_plays) AS ground_ball_double_plays,\n            SUM(double_plays_started) AS double_plays_started,\n            SUM(ground_ball_double_plays_started) AS ground_ball_double_plays_started,\n            SUM(putouts + assists) / SUM(putouts + assists + errors) AS fielding_percentage,\n            (SUM(putouts) + SUM(assists)) * 9 / SUM(outs_played * 3) AS range_factor,\n            ROUND(SUM(outs_played) / 3, 2) AS innings_played,FROM season\n        \n        WHERE game_type IN (SELECT game_type FROM \"timeball\".\"main_seeds\".\"seed_game_types\" WHERE is_regular_season)\n        \n        GROUP BY player_id\n    ),\n\n    --- ...but we need to use the event table for event-based metrics,\n    event_agg AS (\n        SELECT\n            player_id,\n            COUNT(DISTINCT game_id) AS games,FROM event\n        \n        WHERE game_id IN (SELECT game_id FROM \"timeball\".\"main_models\".\"game_start_info\" WHERE is_regular_season)\n        \n        GROUP BY player_id\n    ),\n\n    final AS (\n        SELECT\n            player_id,\n            basic_stats.outs_played::INT AS outs_played,\n            basic_stats.plate_appearances_in_field::INT AS plate_appearances_in_field,\n            basic_stats.plate_appearances_in_field_with_ball_in_play::INT AS plate_appearances_in_field_with_ball_in_play,\n            basic_stats.unknown_putouts_while_fielding::INT AS unknown_putouts_while_fielding,\n            basic_stats.balls_hit_to::INT AS balls_hit_to,\n            basic_stats.putouts::INT AS putouts,\n            basic_stats.assists::INT AS assists,\n            basic_stats.errors::INT AS errors,\n            basic_stats.fielders_choices::INT AS fielders_choices,\n            basic_stats.assisted_putouts::INT AS assisted_putouts,\n            basic_stats.in_play_putouts::INT AS in_play_putouts,\n            basic_stats.in_play_assists::INT AS in_play_assists,\n            basic_stats.reaching_errors::INT AS reaching_errors,\n            basic_stats.stolen_bases::INT AS stolen_bases,\n            basic_stats.caught_stealing::INT AS caught_stealing,\n            basic_stats.pickoffs::INT AS pickoffs,\n            basic_stats.passed_balls::INT AS passed_balls,\n            basic_stats.double_plays::INT AS double_plays,\n            basic_stats.triple_plays::INT AS triple_plays,\n            basic_stats.ground_ball_double_plays::INT AS ground_ball_double_plays,\n            basic_stats.double_plays_started::INT AS double_plays_started,\n            basic_stats.ground_ball_double_plays_started::INT AS ground_ball_double_plays_started,\n            basic_stats.fielding_percentage,\n            basic_stats.range_factor,\n            basic_stats.innings_played,COALESCE(event_agg.games / basic_stats.games, 0) AS event_coverage_rate,FROM basic_stats\n        LEFT JOIN event_agg USING (player_id)\n    )\n    \n    SELECT * FROM final\n", "relation_name": "\"timeball\".\"main_models\".\"metrics_player_career_fielding\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:54.994245Z", "completed_at": "2023-12-09T18:55:55.245916Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:55.246611Z", "completed_at": "2023-12-09T18:55:55.246616Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.28477907180786133, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.timeball.metrics_player_season_league_fielding", "compiled": true, "compiled_code": "-- Add extra context columns to get potential grouiping keys\n    WITH season AS (SELECT \n            s.*,\n                f.franchise_id,\n                f.league,\n                f.division,\n                f.location,\n                f.nickname,\n                f.alternative_nicknames,\n                f.date_start,\n                f.date_end,\n                f.city,\n                f.state,\n        FROM \"timeball\".\"main_models\".\"player_position_team_season_fielding_stats\" AS s\n        LEFT JOIN \"timeball\".\"main_seeds\".\"seed_franchises\" AS f\n            ON s.team_id = f.team_id\n            AND s.season BETWEEN EXTRACT(YEAR FROM f.date_start) AND COALESCE(EXTRACT(YEAR FROM f.date_end), 9999)\n    ),\n    event AS (SELECT \n            e.*,\n                g.opponent_id,\n                g.league,\n                g.opponent_league,\n                g.division,\n                g.opponent_division,\n                g.team_name,\n                g.opponent_name,\n                g.starting_pitcher_id,\n                g.opponent_starting_pitcher_id,\n                g.team_side,\n                g.date,\n                g.start_time,\n                g.season,\n                g.doubleheader_status,\n                g.time_of_day,\n                g.game_type,\n                g.bat_first_side,\n                g.sky,\n                g.field_condition,\n                g.precipitation,\n                g.wind_direction,\n                g.park_id,\n                g.temperature_fahrenheit,\n                g.attendance,\n                g.wind_speed_mph,\n                g.use_dh,\n                g.scorer,\n                g.scoring_method,\n                g.source_type,\n                g.umpire_home_id,\n                g.umpire_first_id,\n                g.umpire_second_id,\n                g.umpire_third_id,\n                g.umpire_left_id,\n                g.umpire_right_id,\n                g.filename,\n                g.is_regular_season,\n                g.is_postseason,\n                g.is_integrated,\n                g.is_negro_leagues,\n                g.is_segregated_white,\n                g.away_franchise_id,\n                g.home_franchise_id,\n                g.is_interleague,\n                g.lineup_map_away,\n                g.lineup_map_home,\n                g.fielding_map_away,\n                g.fielding_map_home,\n                g.series_id,\n                g.season_game_number,\n                g.series_game_number,\n                g.days_since_last_game,\n        FROM \"timeball\".\"main_models\".\"event_player_fielding_stats\" AS e\n        LEFT JOIN \"timeball\".\"main_models\".\"team_game_start_info\" AS g USING (team_id, game_id)\n    ),\n    -- Need to use the season table for basic stats/metrics to ensure full coverage...\n    basic_stats AS (\n        SELECT\n            player_id,\n            season,\n            league,\n            SUM(games) AS games,\n            SUM(outs_played) AS outs_played,\n            SUM(plate_appearances_in_field) AS plate_appearances_in_field,\n            SUM(plate_appearances_in_field_with_ball_in_play) AS plate_appearances_in_field_with_ball_in_play,\n            SUM(unknown_putouts_while_fielding) AS unknown_putouts_while_fielding,\n            SUM(balls_hit_to) AS balls_hit_to,\n            SUM(putouts) AS putouts,\n            SUM(assists) AS assists,\n            SUM(errors) AS errors,\n            SUM(fielders_choices) AS fielders_choices,\n            SUM(assisted_putouts) AS assisted_putouts,\n            SUM(in_play_putouts) AS in_play_putouts,\n            SUM(in_play_assists) AS in_play_assists,\n            SUM(reaching_errors) AS reaching_errors,\n            SUM(stolen_bases) AS stolen_bases,\n            SUM(caught_stealing) AS caught_stealing,\n            SUM(pickoffs) AS pickoffs,\n            SUM(passed_balls) AS passed_balls,\n            SUM(double_plays) AS double_plays,\n            SUM(triple_plays) AS triple_plays,\n            SUM(ground_ball_double_plays) AS ground_ball_double_plays,\n            SUM(double_plays_started) AS double_plays_started,\n            SUM(ground_ball_double_plays_started) AS ground_ball_double_plays_started,\n            SUM(putouts + assists) / SUM(putouts + assists + errors) AS fielding_percentage,\n            (SUM(putouts) + SUM(assists)) * 9 / SUM(outs_played * 3) AS range_factor,\n            ROUND(SUM(outs_played) / 3, 2) AS innings_played,FROM season\n        \n        WHERE game_type IN (SELECT game_type FROM \"timeball\".\"main_seeds\".\"seed_game_types\" WHERE is_regular_season)\n        \n        GROUP BY player_id, season, league\n    ),\n\n    --- ...but we need to use the event table for event-based metrics,\n    event_agg AS (\n        SELECT\n            player_id,\n            season,\n            league,\n            COUNT(DISTINCT game_id) AS games,FROM event\n        \n        WHERE game_id IN (SELECT game_id FROM \"timeball\".\"main_models\".\"game_start_info\" WHERE is_regular_season)\n        \n        GROUP BY player_id, season, league\n    ),\n\n    final AS (\n        SELECT\n            player_id,\n            season,\n            league,\n            basic_stats.outs_played::INT AS outs_played,\n            basic_stats.plate_appearances_in_field::INT AS plate_appearances_in_field,\n            basic_stats.plate_appearances_in_field_with_ball_in_play::INT AS plate_appearances_in_field_with_ball_in_play,\n            basic_stats.unknown_putouts_while_fielding::INT AS unknown_putouts_while_fielding,\n            basic_stats.balls_hit_to::INT AS balls_hit_to,\n            basic_stats.putouts::INT AS putouts,\n            basic_stats.assists::INT AS assists,\n            basic_stats.errors::INT AS errors,\n            basic_stats.fielders_choices::INT AS fielders_choices,\n            basic_stats.assisted_putouts::INT AS assisted_putouts,\n            basic_stats.in_play_putouts::INT AS in_play_putouts,\n            basic_stats.in_play_assists::INT AS in_play_assists,\n            basic_stats.reaching_errors::INT AS reaching_errors,\n            basic_stats.stolen_bases::INT AS stolen_bases,\n            basic_stats.caught_stealing::INT AS caught_stealing,\n            basic_stats.pickoffs::INT AS pickoffs,\n            basic_stats.passed_balls::INT AS passed_balls,\n            basic_stats.double_plays::INT AS double_plays,\n            basic_stats.triple_plays::INT AS triple_plays,\n            basic_stats.ground_ball_double_plays::INT AS ground_ball_double_plays,\n            basic_stats.double_plays_started::INT AS double_plays_started,\n            basic_stats.ground_ball_double_plays_started::INT AS ground_ball_double_plays_started,\n            basic_stats.fielding_percentage,\n            basic_stats.range_factor,\n            basic_stats.innings_played,COALESCE(event_agg.games / basic_stats.games, 0) AS event_coverage_rate,FROM basic_stats\n        LEFT JOIN event_agg USING (player_id, season, league)\n    )\n    \n    SELECT * FROM final\n", "relation_name": "\"timeball\".\"main_models\".\"metrics_player_season_league_fielding\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:55.279935Z", "completed_at": "2023-12-09T18:55:55.598084Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:55.598783Z", "completed_at": "2023-12-09T18:55:55.598787Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.35256505012512207, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.timeball.metrics_team_season_fielding", "compiled": true, "compiled_code": "-- Add extra context columns to get potential grouiping keys\n    WITH season AS (SELECT \n            s.*,\n                f.franchise_id,\n                f.league,\n                f.division,\n                f.location,\n                f.nickname,\n                f.alternative_nicknames,\n                f.date_start,\n                f.date_end,\n                f.city,\n                f.state,\n        FROM \"timeball\".\"main_models\".\"player_position_team_season_fielding_stats\" AS s\n        LEFT JOIN \"timeball\".\"main_seeds\".\"seed_franchises\" AS f\n            ON s.team_id = f.team_id\n            AND s.season BETWEEN EXTRACT(YEAR FROM f.date_start) AND COALESCE(EXTRACT(YEAR FROM f.date_end), 9999)\n    ),\n    event AS (SELECT \n            e.*,\n                g.opponent_id,\n                g.league,\n                g.opponent_league,\n                g.division,\n                g.opponent_division,\n                g.team_name,\n                g.opponent_name,\n                g.starting_pitcher_id,\n                g.opponent_starting_pitcher_id,\n                g.team_side,\n                g.date,\n                g.start_time,\n                g.season,\n                g.doubleheader_status,\n                g.time_of_day,\n                g.game_type,\n                g.bat_first_side,\n                g.sky,\n                g.field_condition,\n                g.precipitation,\n                g.wind_direction,\n                g.park_id,\n                g.temperature_fahrenheit,\n                g.attendance,\n                g.wind_speed_mph,\n                g.use_dh,\n                g.scorer,\n                g.scoring_method,\n                g.source_type,\n                g.umpire_home_id,\n                g.umpire_first_id,\n                g.umpire_second_id,\n                g.umpire_third_id,\n                g.umpire_left_id,\n                g.umpire_right_id,\n                g.filename,\n                g.is_regular_season,\n                g.is_postseason,\n                g.is_integrated,\n                g.is_negro_leagues,\n                g.is_segregated_white,\n                g.away_franchise_id,\n                g.home_franchise_id,\n                g.is_interleague,\n                g.lineup_map_away,\n                g.lineup_map_home,\n                g.fielding_map_away,\n                g.fielding_map_home,\n                g.series_id,\n                g.season_game_number,\n                g.series_game_number,\n                g.days_since_last_game,\n        FROM \"timeball\".\"main_models\".\"event_player_fielding_stats\" AS e\n        LEFT JOIN \"timeball\".\"main_models\".\"team_game_start_info\" AS g USING (team_id, game_id)\n    ),\n    -- Need to use the season table for basic stats/metrics to ensure full coverage...\n    basic_stats AS (\n        SELECT\n            team_id,\n            season,\n            SUM(games) AS games,\n            SUM(outs_played) AS outs_played,\n            SUM(plate_appearances_in_field) AS plate_appearances_in_field,\n            SUM(plate_appearances_in_field_with_ball_in_play) AS plate_appearances_in_field_with_ball_in_play,\n            SUM(unknown_putouts_while_fielding) AS unknown_putouts_while_fielding,\n            SUM(balls_hit_to) AS balls_hit_to,\n            SUM(putouts) AS putouts,\n            SUM(assists) AS assists,\n            SUM(errors) AS errors,\n            SUM(fielders_choices) AS fielders_choices,\n            SUM(assisted_putouts) AS assisted_putouts,\n            SUM(in_play_putouts) AS in_play_putouts,\n            SUM(in_play_assists) AS in_play_assists,\n            SUM(reaching_errors) AS reaching_errors,\n            SUM(stolen_bases) AS stolen_bases,\n            SUM(caught_stealing) AS caught_stealing,\n            SUM(pickoffs) AS pickoffs,\n            SUM(passed_balls) AS passed_balls,\n            SUM(double_plays) AS double_plays,\n            SUM(triple_plays) AS triple_plays,\n            SUM(ground_ball_double_plays) AS ground_ball_double_plays,\n            SUM(double_plays_started) AS double_plays_started,\n            SUM(ground_ball_double_plays_started) AS ground_ball_double_plays_started,\n            SUM(putouts + assists) / SUM(putouts + assists + errors) AS fielding_percentage,\n            (SUM(putouts) + SUM(assists)) * 9 / SUM(outs_played * 3) AS range_factor,\n            ROUND(SUM(outs_played) / 3, 2) AS innings_played,FROM season\n        \n        WHERE game_type IN (SELECT game_type FROM \"timeball\".\"main_seeds\".\"seed_game_types\" WHERE is_regular_season)\n        \n        GROUP BY team_id, season\n    ),\n\n    --- ...but we need to use the event table for event-based metrics,\n    event_agg AS (\n        SELECT\n            team_id,\n            season,\n            COUNT(DISTINCT game_id) AS games,FROM event\n        \n        WHERE game_id IN (SELECT game_id FROM \"timeball\".\"main_models\".\"game_start_info\" WHERE is_regular_season)\n        \n        GROUP BY team_id, season\n    ),\n\n    final AS (\n        SELECT\n            team_id,\n            season,\n            basic_stats.outs_played::INT AS outs_played,\n            basic_stats.plate_appearances_in_field::INT AS plate_appearances_in_field,\n            basic_stats.plate_appearances_in_field_with_ball_in_play::INT AS plate_appearances_in_field_with_ball_in_play,\n            basic_stats.unknown_putouts_while_fielding::INT AS unknown_putouts_while_fielding,\n            basic_stats.balls_hit_to::INT AS balls_hit_to,\n            basic_stats.putouts::INT AS putouts,\n            basic_stats.assists::INT AS assists,\n            basic_stats.errors::INT AS errors,\n            basic_stats.fielders_choices::INT AS fielders_choices,\n            basic_stats.assisted_putouts::INT AS assisted_putouts,\n            basic_stats.in_play_putouts::INT AS in_play_putouts,\n            basic_stats.in_play_assists::INT AS in_play_assists,\n            basic_stats.reaching_errors::INT AS reaching_errors,\n            basic_stats.stolen_bases::INT AS stolen_bases,\n            basic_stats.caught_stealing::INT AS caught_stealing,\n            basic_stats.pickoffs::INT AS pickoffs,\n            basic_stats.passed_balls::INT AS passed_balls,\n            basic_stats.double_plays::INT AS double_plays,\n            basic_stats.triple_plays::INT AS triple_plays,\n            basic_stats.ground_ball_double_plays::INT AS ground_ball_double_plays,\n            basic_stats.double_plays_started::INT AS double_plays_started,\n            basic_stats.ground_ball_double_plays_started::INT AS ground_ball_double_plays_started,\n            basic_stats.fielding_percentage,\n            basic_stats.range_factor,\n            basic_stats.innings_played,COALESCE(event_agg.games / basic_stats.games, 0) AS event_coverage_rate,FROM basic_stats\n        LEFT JOIN event_agg USING (team_id, season)\n    )\n    \n    SELECT * FROM final\n", "relation_name": "\"timeball\".\"main_models\".\"metrics_team_season_fielding\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:55.633643Z", "completed_at": "2023-12-09T18:55:55.637711Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:55.638404Z", "completed_at": "2023-12-09T18:55:55.638408Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006310939788818359, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.timeball.team_season_fielding_stats", "compiled": true, "compiled_code": "\nWITH game_agg AS (\n    SELECT\n        season,\n        team_id,\n        game_type,\n        COUNT(*) AS games\n    FROM \"timeball\".\"main_models\".\"team_game_start_info\"\n    GROUP BY 1, 2, 3\n),\n\n-- Need player-level data for seasons without box scores\ndatabank AS (\n    SELECT\n        season,\n        team_id,\n        ANY_VALUE('RegularSeason') AS game_type,\n        ANY_VALUE(game_agg.games)::USMALLINT AS games,\n        SUM(f.putouts)::USMALLINT AS outs_played,\n        SUM(f.putouts)::USMALLINT AS putouts,\n        SUM(f.assists)::USMALLINT AS assists,\n        SUM(f.errors)::USMALLINT AS errors,\n        SUM(f.passed_balls)::USMALLINT AS passed_balls,\n        -- These stats aren't duplicated because they only\n        -- appear for catchers, not pitchers\n        SUM(f.stolen_bases)::USMALLINT AS stolen_bases,\n        SUM(f.caught_stealing)::USMALLINT AS caught_stealing,\n    FROM \"timeball\".\"main_models\".\"player_position_team_season_fielding_stats\" AS f\n    INNER JOIN game_agg USING (season, team_id)\n    WHERE f.season NOT IN (SELECT DISTINCT season FROM \"timeball\".\"main_models\".\"game_start_info\")\n    GROUP BY 1, 2\n),\n\nretrosheet AS (\n    SELECT\n        games.season,\n        stats.team_id,\n        games.game_type,\n        COUNT(*)::USMALLINT AS games,\n        SUM(stats.outs_played)::USMALLINT AS outs_played,\n        SUM(stats.plate_appearances_in_field)::USMALLINT AS plate_appearances_in_field,\n        SUM(stats.plate_appearances_in_field_with_ball_in_play)::USMALLINT AS plate_appearances_in_field_with_ball_in_play,\n        SUM(stats.putouts)::USMALLINT AS putouts,\n        SUM(stats.assists)::USMALLINT AS assists,\n        SUM(stats.errors)::USMALLINT AS errors,\n        SUM(stats.fielders_choices)::USMALLINT AS fielders_choices,\n        SUM(stats.reaching_errors)::USMALLINT AS reaching_errors,\n        SUM(stats.stolen_bases)::USMALLINT AS stolen_bases,\n        SUM(stats.caught_stealing)::USMALLINT AS caught_stealing,\n        SUM(stats.pickoffs)::USMALLINT AS pickoffs,\n        SUM(stats.passed_balls)::USMALLINT AS passed_balls,\n        SUM(stats.double_plays)::USMALLINT AS double_plays,\n        SUM(stats.triple_plays)::USMALLINT AS triple_plays,\n        SUM(stats.ground_ball_double_plays)::USMALLINT AS ground_ball_double_plays\n    FROM \"timeball\".\"main_models\".\"game_start_info\" AS games\n    INNER JOIN \"timeball\".\"main_models\".\"team_game_fielding_stats\" AS stats USING (game_id)\n    GROUP BY 1, 2, 3\n),\n\nfinal AS (\n    SELECT * FROM databank\n    UNION ALL BY NAME\n    SELECT * FROM retrosheet\n)\n\nSELECT * FROM final", "relation_name": "\"timeball\".\"main_models\".\"team_season_fielding_stats\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:55.640621Z", "completed_at": "2023-12-09T18:55:55.644289Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:55.644954Z", "completed_at": "2023-12-09T18:55:55.644958Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005701780319213867, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.timeball.unknown_fielding_play_shares", "compiled": true, "compiled_code": "\nWITH incomplete_games AS (\n    SELECT\n        game_id,\n        team_id\n    FROM \"timeball\".\"main_models\".\"team_game_fielding_stats\"\n    WHERE unknown_putouts > 0\n),\n\nunassisted_putout_rates AS (\n    SELECT\n        f.fielding_position,\n        SUM(f.putouts) AS total,\n        SUM(f.putouts - f.assisted_putouts) AS unassisted,\n        unassisted / total AS unassisted_putout_rate\n    FROM \"timeball\".\"main_models\".\"calc_fielding_play_agg\" f\n    INNER JOIN \"timeball\".\"main_models\".\"stg_events\" AS e USING (event_key)\n    WHERE e.plate_appearance_result = 'InPlayOut'\n        AND e.batted_to_fielder > 0\n        AND e.outs_on_play = 1\n    GROUP BY 1\n),\n\nteam_totals AS (\n    SELECT\n        game_id,\n        team_id,\n        GREATEST(SUM(surplus_box_putouts), 0) AS total_surplus_putouts,\n        GREATEST(SUM(CASE WHEN fielding_position > 6 THEN surplus_box_putouts END), 0) AS surplus_of_putouts,\n        GREATEST(SUM(CASE WHEN fielding_position < 6 THEN surplus_box_assists END), 0) AS surplus_if_assists,\n        GREATEST(total_surplus_putouts - surplus_of_putouts - surplus_if_assists, 0) AS surplus_if_unassisted_putouts\n    FROM \"timeball\".\"main_models\".\"player_position_game_fielding_stats\"\n    INNER JOIN incomplete_games USING (game_id, team_id)\n    GROUP BY 1, 2\n),\n\n-- Outfielder shares: surplus putouts\n-- Infielder shares: surplus assists + surplus unassisted putouts\n-- Need to estimate the total number of surplus unassisted infield putouts\n-- method: total unknown putouts - OF surplus putouts - IF surplus assists\n-- Then we need to estimate the share that went to each infielder\n-- First adjust each number based historical rate of unassisted putouts\n-- on in-play outs at each position\n-- Then split based on the normalized total\ncalc_shares AS (\n    SELECT\n        p.*,\n        \n        CASE WHEN fielding_position <= 6 AND t.surplus_if_unassisted_putouts > 0\n                THEN p.surplus_box_putouts / t.surplus_if_unassisted_putouts\n            ELSE 0\n        END AS unadjusted_if_putout_rate,\n        GREATEST(unadjusted_if_putout_rate * r.unassisted_putout_rate, 0) AS adjusted_if_putout_rate,\n        COALESCE(adjusted_if_putout_rate / SUM(adjusted_if_putout_rate) OVER w, 0) AS if_putout_share,\n\n        GREATEST(\n            CASE WHEN fielding_position > 6\n                    THEN p.surplus_box_putouts\n                ELSE (if_putout_share * t.surplus_if_unassisted_putouts)\n            END, 0\n        ) AS estimated_unknown_plays_putouts,\n        GREATEST(\n            CASE WHEN fielding_position > 6\n                    THEN 0\n                ELSE p.surplus_box_assists\n            END, 0\n        ) AS estimated_unknown_plays_assists,\n        estimated_unknown_plays_putouts + estimated_unknown_plays_assists AS estimated_unknown_plays\n    FROM \"timeball\".\"main_models\".\"player_position_game_fielding_stats\" AS p\n    INNER JOIN team_totals AS t USING (game_id, team_id)\n    INNER JOIN unassisted_putout_rates AS r USING (fielding_position)\n    WINDOW w AS (PARTITION BY game_id, team_id)\n),\n\nfinal AS (\n    SELECT\n        game_id,\n        team_id,\n        fielding_position,\n        player_id,\n        estimated_unknown_plays,\n        SUM(estimated_unknown_plays) OVER w AS estimated_unknown_plays_team,\n        estimated_unknown_plays / estimated_unknown_plays_team AS play_share,\n        estimated_unknown_plays_assists / estimated_unknown_plays_team AS play_share_subset_assists,\n        estimated_unknown_plays_putouts / estimated_unknown_plays_team AS play_share_subset_putouts,\n    FROM calc_shares\n    WHERE estimated_unknown_plays > 0\n    WINDOW w AS (PARTITION BY game_id, team_id)\n)\n\nSELECT * FROM final", "relation_name": "\"timeball\".\"main_models\".\"unknown_fielding_play_shares\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:55.647089Z", "completed_at": "2023-12-09T18:55:55.917236Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:55.918086Z", "completed_at": "2023-12-09T18:55:55.918091Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.30513882637023926, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.timeball.metrics_player_career_offense", "compiled": true, "compiled_code": "-- Add extra context columns to get potential grouiping keys\n    WITH season AS (SELECT \n            s.*,\n                f.franchise_id,\n                f.league,\n                f.division,\n                f.location,\n                f.nickname,\n                f.alternative_nicknames,\n                f.date_start,\n                f.date_end,\n                f.city,\n                f.state,\n        FROM \"timeball\".\"main_models\".\"player_team_season_offense_stats\" AS s\n        LEFT JOIN \"timeball\".\"main_seeds\".\"seed_franchises\" AS f\n            ON s.team_id = f.team_id\n            AND s.season BETWEEN EXTRACT(YEAR FROM f.date_start) AND COALESCE(EXTRACT(YEAR FROM f.date_end), 9999)\n    ),\n    event AS (SELECT \n            e.*,\n                g.opponent_id,\n                g.league,\n                g.opponent_league,\n                g.division,\n                g.opponent_division,\n                g.team_name,\n                g.opponent_name,\n                g.starting_pitcher_id,\n                g.opponent_starting_pitcher_id,\n                g.team_side,\n                g.date,\n                g.start_time,\n                g.season,\n                g.doubleheader_status,\n                g.time_of_day,\n                g.game_type,\n                g.bat_first_side,\n                g.sky,\n                g.field_condition,\n                g.precipitation,\n                g.wind_direction,\n                g.park_id,\n                g.temperature_fahrenheit,\n                g.attendance,\n                g.wind_speed_mph,\n                g.use_dh,\n                g.scorer,\n                g.scoring_method,\n                g.source_type,\n                g.umpire_home_id,\n                g.umpire_first_id,\n                g.umpire_second_id,\n                g.umpire_third_id,\n                g.umpire_left_id,\n                g.umpire_right_id,\n                g.filename,\n                g.is_regular_season,\n                g.is_postseason,\n                g.is_integrated,\n                g.is_negro_leagues,\n                g.is_segregated_white,\n                g.away_franchise_id,\n                g.home_franchise_id,\n                g.is_interleague,\n                g.lineup_map_away,\n                g.lineup_map_home,\n                g.fielding_map_away,\n                g.fielding_map_home,\n                g.series_id,\n                g.season_game_number,\n                g.series_game_number,\n                g.days_since_last_game,\n        FROM \"timeball\".\"main_models\".\"event_offense_stats\" AS e\n        LEFT JOIN \"timeball\".\"main_models\".\"team_game_start_info\" AS g USING (team_id, game_id)\n    ),\n    -- Need to use the season table for basic stats/metrics to ensure full coverage...\n    basic_stats AS (\n        SELECT\n            player_id,\n            SUM(games) AS games,\n            SUM(plate_appearances) AS plate_appearances,\n            SUM(at_bats) AS at_bats,\n            SUM(hits) AS hits,\n            SUM(singles) AS singles,\n            SUM(doubles) AS doubles,\n            SUM(triples) AS triples,\n            SUM(home_runs) AS home_runs,\n            SUM(total_bases) AS total_bases,\n            SUM(strikeouts) AS strikeouts,\n            SUM(walks) AS walks,\n            SUM(intentional_walks) AS intentional_walks,\n            SUM(hit_by_pitches) AS hit_by_pitches,\n            SUM(sacrifice_hits) AS sacrifice_hits,\n            SUM(sacrifice_flies) AS sacrifice_flies,\n            SUM(reached_on_errors) AS reached_on_errors,\n            SUM(reached_on_interferences) AS reached_on_interferences,\n            SUM(inside_the_park_home_runs) AS inside_the_park_home_runs,\n            SUM(ground_rule_doubles) AS ground_rule_doubles,\n            SUM(infield_hits) AS infield_hits,\n            SUM(on_base_opportunities) AS on_base_opportunities,\n            SUM(on_base_successes) AS on_base_successes,\n            SUM(runs_batted_in) AS runs_batted_in,\n            SUM(grounded_into_double_plays) AS grounded_into_double_plays,\n            SUM(double_plays) AS double_plays,\n            SUM(triple_plays) AS triple_plays,\n            SUM(batting_outs) AS batting_outs,\n            SUM(balls_in_play) AS balls_in_play,\n            SUM(balls_batted) AS balls_batted,\n            SUM(trajectory_fly_ball) AS trajectory_fly_ball,\n            SUM(trajectory_ground_ball) AS trajectory_ground_ball,\n            SUM(trajectory_line_drive) AS trajectory_line_drive,\n            SUM(trajectory_pop_up) AS trajectory_pop_up,\n            SUM(trajectory_unknown) AS trajectory_unknown,\n            SUM(trajectory_known) AS trajectory_known,\n            SUM(trajectory_broad_air_ball) AS trajectory_broad_air_ball,\n            SUM(trajectory_broad_ground_ball) AS trajectory_broad_ground_ball,\n            SUM(trajectory_broad_unknown) AS trajectory_broad_unknown,\n            SUM(trajectory_broad_known) AS trajectory_broad_known,\n            SUM(bunts) AS bunts,\n            SUM(batted_distance_plate) AS batted_distance_plate,\n            SUM(batted_distance_infield) AS batted_distance_infield,\n            SUM(batted_distance_outfield) AS batted_distance_outfield,\n            SUM(batted_distance_unknown) AS batted_distance_unknown,\n            SUM(batted_distance_known) AS batted_distance_known,\n            SUM(fielded_by_battery) AS fielded_by_battery,\n            SUM(fielded_by_infielder) AS fielded_by_infielder,\n            SUM(fielded_by_outfielder) AS fielded_by_outfielder,\n            SUM(fielded_by_known) AS fielded_by_known,\n            SUM(fielded_by_unknown) AS fielded_by_unknown,\n            SUM(batted_angle_left) AS batted_angle_left,\n            SUM(batted_angle_right) AS batted_angle_right,\n            SUM(batted_angle_middle) AS batted_angle_middle,\n            SUM(batted_angle_unknown) AS batted_angle_unknown,\n            SUM(batted_angle_known) AS batted_angle_known,\n            SUM(batted_location_plate) AS batted_location_plate,\n            SUM(batted_location_right_infield) AS batted_location_right_infield,\n            SUM(batted_location_middle_infield) AS batted_location_middle_infield,\n            SUM(batted_location_left_infield) AS batted_location_left_infield,\n            SUM(batted_location_left_field) AS batted_location_left_field,\n            SUM(batted_location_center_field) AS batted_location_center_field,\n            SUM(batted_location_right_field) AS batted_location_right_field,\n            SUM(batted_location_unknown) AS batted_location_unknown,\n            SUM(batted_location_known) AS batted_location_known,\n            SUM(batted_balls_pulled) AS batted_balls_pulled,\n            SUM(batted_balls_opposite_field) AS batted_balls_opposite_field,\n            SUM(runs) AS runs,\n            SUM(times_reached_base) AS times_reached_base,\n            SUM(stolen_bases) AS stolen_bases,\n            SUM(caught_stealing) AS caught_stealing,\n            SUM(picked_off) AS picked_off,\n            SUM(picked_off_caught_stealing) AS picked_off_caught_stealing,\n            SUM(outs_on_basepaths) AS outs_on_basepaths,\n            SUM(unforced_outs_on_basepaths) AS unforced_outs_on_basepaths,\n            SUM(outs_avoided_on_errors) AS outs_avoided_on_errors,\n            SUM(advances_on_wild_pitches) AS advances_on_wild_pitches,\n            SUM(advances_on_passed_balls) AS advances_on_passed_balls,\n            SUM(advances_on_balks) AS advances_on_balks,\n            SUM(advances_on_unspecified_plays) AS advances_on_unspecified_plays,\n            SUM(advances_on_defensive_indifference) AS advances_on_defensive_indifference,\n            SUM(advances_on_errors) AS advances_on_errors,\n            SUM(plate_appearances_while_on_base) AS plate_appearances_while_on_base,\n            SUM(balls_in_play_while_running) AS balls_in_play_while_running,\n            SUM(balls_in_play_while_on_base) AS balls_in_play_while_on_base,\n            SUM(batter_total_bases_while_running) AS batter_total_bases_while_running,\n            SUM(batter_total_bases_while_on_base) AS batter_total_bases_while_on_base,\n            SUM(extra_base_advance_attempts) AS extra_base_advance_attempts,\n            SUM(bases_advanced) AS bases_advanced,\n            SUM(bases_advanced_on_balls_in_play) AS bases_advanced_on_balls_in_play,\n            SUM(surplus_bases_advanced_on_balls_in_play) AS surplus_bases_advanced_on_balls_in_play,\n            SUM(outs_on_extra_base_advance_attempts) AS outs_on_extra_base_advance_attempts,\n            SUM(pitches) AS pitches,\n            SUM(swings) AS swings,\n            SUM(swings_with_contact) AS swings_with_contact,\n            SUM(strikes) AS strikes,\n            SUM(strikes_called) AS strikes_called,\n            SUM(strikes_swinging) AS strikes_swinging,\n            SUM(strikes_foul) AS strikes_foul,\n            SUM(strikes_foul_tip) AS strikes_foul_tip,\n            SUM(strikes_in_play) AS strikes_in_play,\n            SUM(strikes_unknown) AS strikes_unknown,\n            SUM(balls) AS balls,\n            SUM(balls_called) AS balls_called,\n            SUM(balls_intentional) AS balls_intentional,\n            SUM(balls_automatic) AS balls_automatic,\n            SUM(unknown_pitches) AS unknown_pitches,\n            SUM(pitchouts) AS pitchouts,\n            SUM(pitcher_pickoff_attempts) AS pitcher_pickoff_attempts,\n            SUM(catcher_pickoff_attempts) AS catcher_pickoff_attempts,\n            SUM(pitches_blocked_by_catcher) AS pitches_blocked_by_catcher,\n            SUM(pitches_with_runners_going) AS pitches_with_runners_going,\n            SUM(passed_balls) AS passed_balls,\n            SUM(wild_pitches) AS wild_pitches,\n            SUM(balks) AS balks,\n            SUM(left_on_base) AS left_on_base,\n            SUM(left_on_base_with_two_outs) AS left_on_base_with_two_outs,\n            SUM(stolen_bases_second) AS stolen_bases_second,\n            SUM(stolen_bases_third) AS stolen_bases_third,\n            SUM(stolen_bases_home) AS stolen_bases_home,\n            SUM(caught_stealing_second) AS caught_stealing_second,\n            SUM(caught_stealing_third) AS caught_stealing_third,\n            SUM(caught_stealing_home) AS caught_stealing_home,\n            SUM(stolen_base_opportunities) AS stolen_base_opportunities,\n            SUM(stolen_base_opportunities_second) AS stolen_base_opportunities_second,\n            SUM(stolen_base_opportunities_third) AS stolen_base_opportunities_third,\n            SUM(stolen_base_opportunities_home) AS stolen_base_opportunities_home,\n            SUM(picked_off_first) AS picked_off_first,\n            SUM(picked_off_second) AS picked_off_second,\n            SUM(picked_off_third) AS picked_off_third,\n            SUM(times_force_on_runner) AS times_force_on_runner,\n            SUM(times_lead_runner) AS times_lead_runner,\n            SUM(times_next_base_empty) AS times_next_base_empty,\n            SUM(extra_base_chances) AS extra_base_chances,\n            SUM(extra_bases_taken) AS extra_bases_taken,\n            SUM(hits) / SUM(at_bats) AS batting_average,\n            SUM(on_base_successes) / SUM(on_base_opportunities) AS on_base_percentage,\n            SUM(total_bases) / SUM(at_bats) AS slugging_percentage,\n            SUM(on_base_successes) / SUM(on_base_opportunities) + SUM(total_bases) / SUM(at_bats) AS on_base_plus_slugging,\n            SUM(total_bases) / SUM(at_bats) - SUM(hits) / SUM(at_bats) AS isolated_power,\n            SUM(total_bases - hits + walks + stolen_bases - caught_stealing) / SUM(at_bats) AS secondary_average,\n            SUM(hits - home_runs) / (SUM(at_bats) - SUM(home_runs) - SUM(strikeouts) + SUM(COALESCE(sacrifice_flies, 0))) AS batting_average_on_balls_in_play,\n            SUM(home_runs) / SUM(plate_appearances) AS home_run_rate,\n            SUM(walks) / SUM(plate_appearances) AS walk_rate,\n            SUM(strikeouts) / SUM(plate_appearances) AS strikeout_rate,\n            SUM(stolen_bases) / SUM(stolen_bases + caught_stealing) AS stolen_base_percentage,FROM season\n        \n        WHERE game_type IN (SELECT game_type FROM \"timeball\".\"main_seeds\".\"seed_game_types\" WHERE is_regular_season)\n        \n        GROUP BY player_id\n    ),\n\n    --- ...but we need to use the event table for event-based metrics,\n    event_agg AS (\n        SELECT\n            player_id,\n            COUNT(DISTINCT game_id) AS games,\n            SUM(trajectory_known * balls_batted * (at_bats - hits)) / SUM(balls_batted * (at_bats - hits)) AS known_trajectory_rate_outs,\n            SUM(trajectory_known * balls_batted * hits) / SUM(balls_batted * hits) AS known_trajectory_rate_hits,\n            SUM(trajectory_known * balls_batted) / SUM(balls_batted) AS known_trajectory_rate,\n            SUM(trajectory_broad_known * balls_batted * (at_bats - hits)) / SUM(balls_batted * (at_bats - hits)) AS known_trajectory_broad_rate_outs,\n            SUM(trajectory_broad_known * balls_batted * hits) / SUM(balls_batted * hits) AS known_trajectory_broad_rate_hits,\n            SUM(trajectory_broad_known * balls_batted) / SUM(balls_batted) AS known_trajectory_broad_rate,\n            known_trajectory_rate_outs / known_trajectory_rate_hits AS known_trajectory_out_hit_ratio,\n            known_trajectory_broad_rate_outs / known_trajectory_broad_rate_hits AS known_trajectory_broad_out_hit_ratio,\n            SUM(trajectory_broad_air_ball * (at_bats - hits)) / SUM(trajectory_broad_known * (at_bats - hits)) AS air_ball_rate_outs,\n            SUM(trajectory_broad_ground_ball * (at_bats - hits)) / SUM(trajectory_broad_known * (at_bats - hits)) AS ground_ball_rate_outs,\n            ground_ball_rate_outs / air_ball_rate_outs AS ground_air_out_ratio,\n            SUM(trajectory_broad_air_ball * hits) / SUM(trajectory_broad_known * hits) AS air_ball_hit_rate,\n            SUM(trajectory_broad_ground_ball * hits) / SUM(trajectory_broad_known * hits) AS ground_ball_hit_rate,\n            ground_ball_hit_rate / air_ball_hit_rate AS ground_air_hit_ratio,\n            SUM(trajectory_fly_ball) / SUM(trajectory_known) AS fly_ball_rate,\n            SUM(trajectory_line_drive) / SUM(trajectory_known) AS line_drive_rate,\n            SUM(trajectory_pop_up) / SUM(trajectory_known) AS pop_up_rate,\n            SUM(trajectory_ground_ball) / SUM(trajectory_broad_known) AS ground_ball_rate,\n            SUM(trajectory_broad_air_ball * hits) * known_trajectory_broad_out_hit_ratio / (SUM(trajectory_broad_air_ball * hits) * known_trajectory_broad_out_hit_ratio + SUM(trajectory_broad_air_ball * (at_bats - hits))) AS coverage_weighted_air_ball_batting_average,\n            SUM(trajectory_ground_ball * hits) * known_trajectory_broad_out_hit_ratio / (SUM(trajectory_ground_ball * hits) * known_trajectory_broad_out_hit_ratio + SUM(trajectory_ground_ball * (at_bats - hits))) AS coverage_weighted_ground_ball_batting_average,\n            SUM(trajectory_fly_ball * hits) * known_trajectory_out_hit_ratio / (SUM(trajectory_fly_ball * hits) * known_trajectory_out_hit_ratio + SUM(trajectory_fly_ball * (at_bats - hits))) AS coverage_weighted_fly_ball_batting_average,\n            SUM(trajectory_line_drive * hits) * known_trajectory_out_hit_ratio / (SUM(trajectory_line_drive * hits) * known_trajectory_out_hit_ratio + SUM(trajectory_line_drive * (at_bats - hits))) AS coverage_weighted_line_drive_batting_average,\n            SUM(trajectory_pop_up * hits) * known_trajectory_out_hit_ratio / (SUM(trajectory_pop_up * hits) * known_trajectory_out_hit_ratio + SUM(trajectory_pop_up * (at_bats - hits))) AS coverage_weighted_pop_up_batting_average,\n            SUM(batted_angle_known * (at_bats - hits)) / SUM(balls_batted * (at_bats - hits)) AS known_angle_rate_outs,\n            SUM(batted_angle_known * hits) / SUM(hits) AS known_angle_rate_hits,\n            SUM(batted_angle_known) / SUM(balls_batted) AS known_angle_rate,\n            known_angle_rate_outs / known_angle_rate_hits AS known_angle_out_hit_ratio,\n            SUM(batted_angle_left * (at_bats - hits)) / SUM(batted_angle_known * (at_bats - hits)) AS angle_left_rate_outs,\n            SUM(batted_angle_left * hits) / SUM(batted_angle_known * hits) AS angle_left_rate_hits,\n            SUM(batted_angle_left) / SUM(batted_angle_known) AS angle_left_rate,\n            SUM(batted_angle_left * hits) * known_angle_out_hit_ratio / (SUM(batted_angle_left * hits) * known_angle_out_hit_ratio + SUM(batted_angle_left * (at_bats - hits))) AS coverage_weighted_angle_left_batting_average,\n            SUM(batted_angle_right * (at_bats - hits)) / SUM(batted_angle_known * (at_bats - hits)) AS angle_right_rate_outs,\n            SUM(batted_angle_right * hits) / SUM(batted_angle_known * hits) AS angle_right_rate_hits,\n            SUM(batted_angle_right) / SUM(batted_angle_known) AS angle_right_rate,\n            SUM(batted_angle_right * hits) * known_angle_out_hit_ratio / (SUM(batted_angle_right * hits) * known_angle_out_hit_ratio + SUM(batted_angle_right * (at_bats - hits))) AS coverage_weighted_angle_right_batting_average,\n            SUM(batted_angle_middle * (at_bats - hits)) / SUM(batted_angle_known * (at_bats - hits)) AS angle_middle_rate_outs,\n            SUM(batted_angle_middle * hits) / SUM(batted_angle_known * hits) AS angle_middle_rate_hits,\n            SUM(batted_angle_middle) / SUM(batted_angle_known) AS angle_middle_rate,\n            SUM(batted_angle_middle * hits) * known_angle_out_hit_ratio / (SUM(batted_angle_middle * hits) * known_angle_out_hit_ratio + SUM(batted_angle_middle * (at_bats - hits))) AS coverage_weighted_angle_middle_batting_average,\n            SUM(batted_balls_pulled * (at_bats - hits)) / SUM(batted_angle_known * (at_bats - hits)) AS pulled_rate_outs,\n            SUM(batted_balls_pulled * hits) / SUM(batted_angle_known * hits) AS pulled_rate_hits,\n            SUM(batted_balls_pulled) / SUM(batted_angle_known) AS pulled_rate,\n            SUM(batted_balls_pulled * hits) * known_angle_out_hit_ratio / (SUM(batted_balls_pulled * hits) * known_angle_out_hit_ratio + SUM(batted_balls_pulled * (at_bats - hits))) AS coverage_weighted_pulled_batting_average,\n            SUM(batted_balls_opposite_field * (at_bats - hits)) / SUM(batted_angle_known * (at_bats - hits)) AS opposite_field_rate_outs,\n            SUM(batted_balls_opposite_field * hits) / SUM(batted_angle_known * hits) AS opposite_field_rate_hits,\n            SUM(batted_balls_opposite_field) / SUM(batted_angle_known) AS opposite_field_rate,\n            SUM(batted_balls_opposite_field * hits) * known_angle_out_hit_ratio / (SUM(batted_balls_opposite_field * hits) * known_angle_out_hit_ratio + SUM(batted_balls_opposite_field * (at_bats - hits))) AS coverage_weighted_opposite_field_batting_average,\n            SUM(stolen_bases_second + caught_stealing_second) / SUM(stolen_base_opportunities_second) AS stolen_base_attempt_rate_second,\n            SUM(stolen_bases_third + caught_stealing_third) / SUM(stolen_base_opportunities_third) AS stolen_base_attempt_rate_third,\n            SUM(stolen_bases_home + caught_stealing_home) / SUM(stolen_base_opportunities_home) AS stolen_base_attempt_rate_home,\n            SUM(unforced_outs_on_basepaths) / SUM(times_reached_base) AS unforced_out_rate,\n            SUM(strikes) / SUM(pitches) AS pitch_strike_rate,\n            SUM(swings_with_contact) / SUM(pitches) AS pitch_contact_rate,\n            SUM(swings_with_contact + strikes_swinging) / SUM(pitches) AS pitch_swing_rate,\n            SUM(balls) / SUM(pitches) AS pitch_ball_rate,\n            SUM(strikes_swinging) / SUM(pitches) AS pitch_swing_and_miss_rate,\n            SUM(strikes_foul) / SUM(pitches) AS pitch_foul_rate,\n            SUM(strikes_called) / SUM(pitches) AS pitched_called_strike_rate,\n            COUNT_IF(pitches > 0) / SUM(plate_appearances) AS pitch_data_coverage_rate,FROM event\n        \n        WHERE game_id IN (SELECT game_id FROM \"timeball\".\"main_models\".\"game_start_info\" WHERE is_regular_season)\n        \n        GROUP BY player_id\n    ),\n\n    final AS (\n        SELECT\n            player_id,\n            basic_stats.plate_appearances::INT AS plate_appearances,\n            basic_stats.at_bats::INT AS at_bats,\n            basic_stats.hits::INT AS hits,\n            basic_stats.singles::INT AS singles,\n            basic_stats.doubles::INT AS doubles,\n            basic_stats.triples::INT AS triples,\n            basic_stats.home_runs::INT AS home_runs,\n            basic_stats.total_bases::INT AS total_bases,\n            basic_stats.strikeouts::INT AS strikeouts,\n            basic_stats.walks::INT AS walks,\n            basic_stats.intentional_walks::INT AS intentional_walks,\n            basic_stats.hit_by_pitches::INT AS hit_by_pitches,\n            basic_stats.sacrifice_hits::INT AS sacrifice_hits,\n            basic_stats.sacrifice_flies::INT AS sacrifice_flies,\n            basic_stats.reached_on_errors::INT AS reached_on_errors,\n            basic_stats.reached_on_interferences::INT AS reached_on_interferences,\n            basic_stats.inside_the_park_home_runs::INT AS inside_the_park_home_runs,\n            basic_stats.ground_rule_doubles::INT AS ground_rule_doubles,\n            basic_stats.infield_hits::INT AS infield_hits,\n            basic_stats.on_base_opportunities::INT AS on_base_opportunities,\n            basic_stats.on_base_successes::INT AS on_base_successes,\n            basic_stats.runs_batted_in::INT AS runs_batted_in,\n            basic_stats.grounded_into_double_plays::INT AS grounded_into_double_plays,\n            basic_stats.double_plays::INT AS double_plays,\n            basic_stats.triple_plays::INT AS triple_plays,\n            basic_stats.batting_outs::INT AS batting_outs,\n            basic_stats.balls_in_play::INT AS balls_in_play,\n            basic_stats.balls_batted::INT AS balls_batted,\n            basic_stats.trajectory_fly_ball::INT AS trajectory_fly_ball,\n            basic_stats.trajectory_ground_ball::INT AS trajectory_ground_ball,\n            basic_stats.trajectory_line_drive::INT AS trajectory_line_drive,\n            basic_stats.trajectory_pop_up::INT AS trajectory_pop_up,\n            basic_stats.trajectory_unknown::INT AS trajectory_unknown,\n            basic_stats.trajectory_known::INT AS trajectory_known,\n            basic_stats.trajectory_broad_air_ball::INT AS trajectory_broad_air_ball,\n            basic_stats.trajectory_broad_ground_ball::INT AS trajectory_broad_ground_ball,\n            basic_stats.trajectory_broad_unknown::INT AS trajectory_broad_unknown,\n            basic_stats.trajectory_broad_known::INT AS trajectory_broad_known,\n            basic_stats.bunts::INT AS bunts,\n            basic_stats.batted_distance_plate::INT AS batted_distance_plate,\n            basic_stats.batted_distance_infield::INT AS batted_distance_infield,\n            basic_stats.batted_distance_outfield::INT AS batted_distance_outfield,\n            basic_stats.batted_distance_unknown::INT AS batted_distance_unknown,\n            basic_stats.batted_distance_known::INT AS batted_distance_known,\n            basic_stats.fielded_by_battery::INT AS fielded_by_battery,\n            basic_stats.fielded_by_infielder::INT AS fielded_by_infielder,\n            basic_stats.fielded_by_outfielder::INT AS fielded_by_outfielder,\n            basic_stats.fielded_by_known::INT AS fielded_by_known,\n            basic_stats.fielded_by_unknown::INT AS fielded_by_unknown,\n            basic_stats.batted_angle_left::INT AS batted_angle_left,\n            basic_stats.batted_angle_right::INT AS batted_angle_right,\n            basic_stats.batted_angle_middle::INT AS batted_angle_middle,\n            basic_stats.batted_angle_unknown::INT AS batted_angle_unknown,\n            basic_stats.batted_angle_known::INT AS batted_angle_known,\n            basic_stats.batted_location_plate::INT AS batted_location_plate,\n            basic_stats.batted_location_right_infield::INT AS batted_location_right_infield,\n            basic_stats.batted_location_middle_infield::INT AS batted_location_middle_infield,\n            basic_stats.batted_location_left_infield::INT AS batted_location_left_infield,\n            basic_stats.batted_location_left_field::INT AS batted_location_left_field,\n            basic_stats.batted_location_center_field::INT AS batted_location_center_field,\n            basic_stats.batted_location_right_field::INT AS batted_location_right_field,\n            basic_stats.batted_location_unknown::INT AS batted_location_unknown,\n            basic_stats.batted_location_known::INT AS batted_location_known,\n            basic_stats.batted_balls_pulled::INT AS batted_balls_pulled,\n            basic_stats.batted_balls_opposite_field::INT AS batted_balls_opposite_field,\n            basic_stats.runs::INT AS runs,\n            basic_stats.times_reached_base::INT AS times_reached_base,\n            basic_stats.stolen_bases::INT AS stolen_bases,\n            basic_stats.caught_stealing::INT AS caught_stealing,\n            basic_stats.picked_off::INT AS picked_off,\n            basic_stats.picked_off_caught_stealing::INT AS picked_off_caught_stealing,\n            basic_stats.outs_on_basepaths::INT AS outs_on_basepaths,\n            basic_stats.unforced_outs_on_basepaths::INT AS unforced_outs_on_basepaths,\n            basic_stats.outs_avoided_on_errors::INT AS outs_avoided_on_errors,\n            basic_stats.advances_on_wild_pitches::INT AS advances_on_wild_pitches,\n            basic_stats.advances_on_passed_balls::INT AS advances_on_passed_balls,\n            basic_stats.advances_on_balks::INT AS advances_on_balks,\n            basic_stats.advances_on_unspecified_plays::INT AS advances_on_unspecified_plays,\n            basic_stats.advances_on_defensive_indifference::INT AS advances_on_defensive_indifference,\n            basic_stats.advances_on_errors::INT AS advances_on_errors,\n            basic_stats.plate_appearances_while_on_base::INT AS plate_appearances_while_on_base,\n            basic_stats.balls_in_play_while_running::INT AS balls_in_play_while_running,\n            basic_stats.balls_in_play_while_on_base::INT AS balls_in_play_while_on_base,\n            basic_stats.batter_total_bases_while_running::INT AS batter_total_bases_while_running,\n            basic_stats.batter_total_bases_while_on_base::INT AS batter_total_bases_while_on_base,\n            basic_stats.extra_base_advance_attempts::INT AS extra_base_advance_attempts,\n            basic_stats.bases_advanced::INT AS bases_advanced,\n            basic_stats.bases_advanced_on_balls_in_play::INT AS bases_advanced_on_balls_in_play,\n            basic_stats.surplus_bases_advanced_on_balls_in_play::INT AS surplus_bases_advanced_on_balls_in_play,\n            basic_stats.outs_on_extra_base_advance_attempts::INT AS outs_on_extra_base_advance_attempts,\n            basic_stats.pitches::INT AS pitches,\n            basic_stats.swings::INT AS swings,\n            basic_stats.swings_with_contact::INT AS swings_with_contact,\n            basic_stats.strikes::INT AS strikes,\n            basic_stats.strikes_called::INT AS strikes_called,\n            basic_stats.strikes_swinging::INT AS strikes_swinging,\n            basic_stats.strikes_foul::INT AS strikes_foul,\n            basic_stats.strikes_foul_tip::INT AS strikes_foul_tip,\n            basic_stats.strikes_in_play::INT AS strikes_in_play,\n            basic_stats.strikes_unknown::INT AS strikes_unknown,\n            basic_stats.balls::INT AS balls,\n            basic_stats.balls_called::INT AS balls_called,\n            basic_stats.balls_intentional::INT AS balls_intentional,\n            basic_stats.balls_automatic::INT AS balls_automatic,\n            basic_stats.unknown_pitches::INT AS unknown_pitches,\n            basic_stats.pitchouts::INT AS pitchouts,\n            basic_stats.pitcher_pickoff_attempts::INT AS pitcher_pickoff_attempts,\n            basic_stats.catcher_pickoff_attempts::INT AS catcher_pickoff_attempts,\n            basic_stats.pitches_blocked_by_catcher::INT AS pitches_blocked_by_catcher,\n            basic_stats.pitches_with_runners_going::INT AS pitches_with_runners_going,\n            basic_stats.passed_balls::INT AS passed_balls,\n            basic_stats.wild_pitches::INT AS wild_pitches,\n            basic_stats.balks::INT AS balks,\n            basic_stats.left_on_base::INT AS left_on_base,\n            basic_stats.left_on_base_with_two_outs::INT AS left_on_base_with_two_outs,\n            basic_stats.stolen_bases_second::INT AS stolen_bases_second,\n            basic_stats.stolen_bases_third::INT AS stolen_bases_third,\n            basic_stats.stolen_bases_home::INT AS stolen_bases_home,\n            basic_stats.caught_stealing_second::INT AS caught_stealing_second,\n            basic_stats.caught_stealing_third::INT AS caught_stealing_third,\n            basic_stats.caught_stealing_home::INT AS caught_stealing_home,\n            basic_stats.stolen_base_opportunities::INT AS stolen_base_opportunities,\n            basic_stats.stolen_base_opportunities_second::INT AS stolen_base_opportunities_second,\n            basic_stats.stolen_base_opportunities_third::INT AS stolen_base_opportunities_third,\n            basic_stats.stolen_base_opportunities_home::INT AS stolen_base_opportunities_home,\n            basic_stats.picked_off_first::INT AS picked_off_first,\n            basic_stats.picked_off_second::INT AS picked_off_second,\n            basic_stats.picked_off_third::INT AS picked_off_third,\n            basic_stats.times_force_on_runner::INT AS times_force_on_runner,\n            basic_stats.times_lead_runner::INT AS times_lead_runner,\n            basic_stats.times_next_base_empty::INT AS times_next_base_empty,\n            basic_stats.extra_base_chances::INT AS extra_base_chances,\n            basic_stats.extra_bases_taken::INT AS extra_bases_taken,\n            basic_stats.batting_average,\n            basic_stats.on_base_percentage,\n            basic_stats.slugging_percentage,\n            basic_stats.on_base_plus_slugging,\n            basic_stats.isolated_power,\n            basic_stats.secondary_average,\n            basic_stats.batting_average_on_balls_in_play,\n            basic_stats.home_run_rate,\n            basic_stats.walk_rate,\n            basic_stats.strikeout_rate,\n            basic_stats.stolen_base_percentage,COALESCE(event_agg.games / basic_stats.games, 0) AS event_coverage_rate,\n            event_agg.known_trajectory_rate_outs,\n            event_agg.known_trajectory_rate_hits,\n            event_agg.known_trajectory_rate,\n            event_agg.known_trajectory_broad_rate_outs,\n            event_agg.known_trajectory_broad_rate_hits,\n            event_agg.known_trajectory_broad_rate,\n            event_agg.known_trajectory_out_hit_ratio,\n            event_agg.known_trajectory_broad_out_hit_ratio,\n            event_agg.air_ball_rate_outs,\n            event_agg.ground_ball_rate_outs,\n            event_agg.ground_air_out_ratio,\n            event_agg.air_ball_hit_rate,\n            event_agg.ground_ball_hit_rate,\n            event_agg.ground_air_hit_ratio,\n            event_agg.fly_ball_rate,\n            event_agg.line_drive_rate,\n            event_agg.pop_up_rate,\n            event_agg.ground_ball_rate,\n            event_agg.coverage_weighted_air_ball_batting_average,\n            event_agg.coverage_weighted_ground_ball_batting_average,\n            event_agg.coverage_weighted_fly_ball_batting_average,\n            event_agg.coverage_weighted_line_drive_batting_average,\n            event_agg.coverage_weighted_pop_up_batting_average,\n            event_agg.known_angle_rate_outs,\n            event_agg.known_angle_rate_hits,\n            event_agg.known_angle_rate,\n            event_agg.known_angle_out_hit_ratio,\n            event_agg.angle_left_rate_outs,\n            event_agg.angle_left_rate_hits,\n            event_agg.angle_left_rate,\n            event_agg.coverage_weighted_angle_left_batting_average,\n            event_agg.angle_right_rate_outs,\n            event_agg.angle_right_rate_hits,\n            event_agg.angle_right_rate,\n            event_agg.coverage_weighted_angle_right_batting_average,\n            event_agg.angle_middle_rate_outs,\n            event_agg.angle_middle_rate_hits,\n            event_agg.angle_middle_rate,\n            event_agg.coverage_weighted_angle_middle_batting_average,\n            event_agg.pulled_rate_outs,\n            event_agg.pulled_rate_hits,\n            event_agg.pulled_rate,\n            event_agg.coverage_weighted_pulled_batting_average,\n            event_agg.opposite_field_rate_outs,\n            event_agg.opposite_field_rate_hits,\n            event_agg.opposite_field_rate,\n            event_agg.coverage_weighted_opposite_field_batting_average,\n            event_agg.stolen_base_attempt_rate_second,\n            event_agg.stolen_base_attempt_rate_third,\n            event_agg.stolen_base_attempt_rate_home,\n            event_agg.unforced_out_rate,\n            event_agg.pitch_strike_rate,\n            event_agg.pitch_contact_rate,\n            event_agg.pitch_swing_rate,\n            event_agg.pitch_ball_rate,\n            event_agg.pitch_swing_and_miss_rate,\n            event_agg.pitch_foul_rate,\n            event_agg.pitched_called_strike_rate,\n            event_agg.pitch_data_coverage_rate,FROM basic_stats\n        LEFT JOIN event_agg USING (player_id)\n    )\n    \n    SELECT * FROM final\n", "relation_name": "\"timeball\".\"main_models\".\"metrics_player_career_offense\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:55.953429Z", "completed_at": "2023-12-09T18:55:56.228966Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:56.229663Z", "completed_at": "2023-12-09T18:55:56.229668Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.3098728656768799, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.timeball.metrics_player_season_league_offense", "compiled": true, "compiled_code": "-- Add extra context columns to get potential grouiping keys\n    WITH season AS (SELECT \n            s.*,\n                f.franchise_id,\n                f.league,\n                f.division,\n                f.location,\n                f.nickname,\n                f.alternative_nicknames,\n                f.date_start,\n                f.date_end,\n                f.city,\n                f.state,\n        FROM \"timeball\".\"main_models\".\"player_team_season_offense_stats\" AS s\n        LEFT JOIN \"timeball\".\"main_seeds\".\"seed_franchises\" AS f\n            ON s.team_id = f.team_id\n            AND s.season BETWEEN EXTRACT(YEAR FROM f.date_start) AND COALESCE(EXTRACT(YEAR FROM f.date_end), 9999)\n    ),\n    event AS (SELECT \n            e.*,\n                g.opponent_id,\n                g.league,\n                g.opponent_league,\n                g.division,\n                g.opponent_division,\n                g.team_name,\n                g.opponent_name,\n                g.starting_pitcher_id,\n                g.opponent_starting_pitcher_id,\n                g.team_side,\n                g.date,\n                g.start_time,\n                g.season,\n                g.doubleheader_status,\n                g.time_of_day,\n                g.game_type,\n                g.bat_first_side,\n                g.sky,\n                g.field_condition,\n                g.precipitation,\n                g.wind_direction,\n                g.park_id,\n                g.temperature_fahrenheit,\n                g.attendance,\n                g.wind_speed_mph,\n                g.use_dh,\n                g.scorer,\n                g.scoring_method,\n                g.source_type,\n                g.umpire_home_id,\n                g.umpire_first_id,\n                g.umpire_second_id,\n                g.umpire_third_id,\n                g.umpire_left_id,\n                g.umpire_right_id,\n                g.filename,\n                g.is_regular_season,\n                g.is_postseason,\n                g.is_integrated,\n                g.is_negro_leagues,\n                g.is_segregated_white,\n                g.away_franchise_id,\n                g.home_franchise_id,\n                g.is_interleague,\n                g.lineup_map_away,\n                g.lineup_map_home,\n                g.fielding_map_away,\n                g.fielding_map_home,\n                g.series_id,\n                g.season_game_number,\n                g.series_game_number,\n                g.days_since_last_game,\n        FROM \"timeball\".\"main_models\".\"event_offense_stats\" AS e\n        LEFT JOIN \"timeball\".\"main_models\".\"team_game_start_info\" AS g USING (team_id, game_id)\n    ),\n    -- Need to use the season table for basic stats/metrics to ensure full coverage...\n    basic_stats AS (\n        SELECT\n            player_id,\n            season,\n            league,\n            SUM(games) AS games,\n            SUM(plate_appearances) AS plate_appearances,\n            SUM(at_bats) AS at_bats,\n            SUM(hits) AS hits,\n            SUM(singles) AS singles,\n            SUM(doubles) AS doubles,\n            SUM(triples) AS triples,\n            SUM(home_runs) AS home_runs,\n            SUM(total_bases) AS total_bases,\n            SUM(strikeouts) AS strikeouts,\n            SUM(walks) AS walks,\n            SUM(intentional_walks) AS intentional_walks,\n            SUM(hit_by_pitches) AS hit_by_pitches,\n            SUM(sacrifice_hits) AS sacrifice_hits,\n            SUM(sacrifice_flies) AS sacrifice_flies,\n            SUM(reached_on_errors) AS reached_on_errors,\n            SUM(reached_on_interferences) AS reached_on_interferences,\n            SUM(inside_the_park_home_runs) AS inside_the_park_home_runs,\n            SUM(ground_rule_doubles) AS ground_rule_doubles,\n            SUM(infield_hits) AS infield_hits,\n            SUM(on_base_opportunities) AS on_base_opportunities,\n            SUM(on_base_successes) AS on_base_successes,\n            SUM(runs_batted_in) AS runs_batted_in,\n            SUM(grounded_into_double_plays) AS grounded_into_double_plays,\n            SUM(double_plays) AS double_plays,\n            SUM(triple_plays) AS triple_plays,\n            SUM(batting_outs) AS batting_outs,\n            SUM(balls_in_play) AS balls_in_play,\n            SUM(balls_batted) AS balls_batted,\n            SUM(trajectory_fly_ball) AS trajectory_fly_ball,\n            SUM(trajectory_ground_ball) AS trajectory_ground_ball,\n            SUM(trajectory_line_drive) AS trajectory_line_drive,\n            SUM(trajectory_pop_up) AS trajectory_pop_up,\n            SUM(trajectory_unknown) AS trajectory_unknown,\n            SUM(trajectory_known) AS trajectory_known,\n            SUM(trajectory_broad_air_ball) AS trajectory_broad_air_ball,\n            SUM(trajectory_broad_ground_ball) AS trajectory_broad_ground_ball,\n            SUM(trajectory_broad_unknown) AS trajectory_broad_unknown,\n            SUM(trajectory_broad_known) AS trajectory_broad_known,\n            SUM(bunts) AS bunts,\n            SUM(batted_distance_plate) AS batted_distance_plate,\n            SUM(batted_distance_infield) AS batted_distance_infield,\n            SUM(batted_distance_outfield) AS batted_distance_outfield,\n            SUM(batted_distance_unknown) AS batted_distance_unknown,\n            SUM(batted_distance_known) AS batted_distance_known,\n            SUM(fielded_by_battery) AS fielded_by_battery,\n            SUM(fielded_by_infielder) AS fielded_by_infielder,\n            SUM(fielded_by_outfielder) AS fielded_by_outfielder,\n            SUM(fielded_by_known) AS fielded_by_known,\n            SUM(fielded_by_unknown) AS fielded_by_unknown,\n            SUM(batted_angle_left) AS batted_angle_left,\n            SUM(batted_angle_right) AS batted_angle_right,\n            SUM(batted_angle_middle) AS batted_angle_middle,\n            SUM(batted_angle_unknown) AS batted_angle_unknown,\n            SUM(batted_angle_known) AS batted_angle_known,\n            SUM(batted_location_plate) AS batted_location_plate,\n            SUM(batted_location_right_infield) AS batted_location_right_infield,\n            SUM(batted_location_middle_infield) AS batted_location_middle_infield,\n            SUM(batted_location_left_infield) AS batted_location_left_infield,\n            SUM(batted_location_left_field) AS batted_location_left_field,\n            SUM(batted_location_center_field) AS batted_location_center_field,\n            SUM(batted_location_right_field) AS batted_location_right_field,\n            SUM(batted_location_unknown) AS batted_location_unknown,\n            SUM(batted_location_known) AS batted_location_known,\n            SUM(batted_balls_pulled) AS batted_balls_pulled,\n            SUM(batted_balls_opposite_field) AS batted_balls_opposite_field,\n            SUM(runs) AS runs,\n            SUM(times_reached_base) AS times_reached_base,\n            SUM(stolen_bases) AS stolen_bases,\n            SUM(caught_stealing) AS caught_stealing,\n            SUM(picked_off) AS picked_off,\n            SUM(picked_off_caught_stealing) AS picked_off_caught_stealing,\n            SUM(outs_on_basepaths) AS outs_on_basepaths,\n            SUM(unforced_outs_on_basepaths) AS unforced_outs_on_basepaths,\n            SUM(outs_avoided_on_errors) AS outs_avoided_on_errors,\n            SUM(advances_on_wild_pitches) AS advances_on_wild_pitches,\n            SUM(advances_on_passed_balls) AS advances_on_passed_balls,\n            SUM(advances_on_balks) AS advances_on_balks,\n            SUM(advances_on_unspecified_plays) AS advances_on_unspecified_plays,\n            SUM(advances_on_defensive_indifference) AS advances_on_defensive_indifference,\n            SUM(advances_on_errors) AS advances_on_errors,\n            SUM(plate_appearances_while_on_base) AS plate_appearances_while_on_base,\n            SUM(balls_in_play_while_running) AS balls_in_play_while_running,\n            SUM(balls_in_play_while_on_base) AS balls_in_play_while_on_base,\n            SUM(batter_total_bases_while_running) AS batter_total_bases_while_running,\n            SUM(batter_total_bases_while_on_base) AS batter_total_bases_while_on_base,\n            SUM(extra_base_advance_attempts) AS extra_base_advance_attempts,\n            SUM(bases_advanced) AS bases_advanced,\n            SUM(bases_advanced_on_balls_in_play) AS bases_advanced_on_balls_in_play,\n            SUM(surplus_bases_advanced_on_balls_in_play) AS surplus_bases_advanced_on_balls_in_play,\n            SUM(outs_on_extra_base_advance_attempts) AS outs_on_extra_base_advance_attempts,\n            SUM(pitches) AS pitches,\n            SUM(swings) AS swings,\n            SUM(swings_with_contact) AS swings_with_contact,\n            SUM(strikes) AS strikes,\n            SUM(strikes_called) AS strikes_called,\n            SUM(strikes_swinging) AS strikes_swinging,\n            SUM(strikes_foul) AS strikes_foul,\n            SUM(strikes_foul_tip) AS strikes_foul_tip,\n            SUM(strikes_in_play) AS strikes_in_play,\n            SUM(strikes_unknown) AS strikes_unknown,\n            SUM(balls) AS balls,\n            SUM(balls_called) AS balls_called,\n            SUM(balls_intentional) AS balls_intentional,\n            SUM(balls_automatic) AS balls_automatic,\n            SUM(unknown_pitches) AS unknown_pitches,\n            SUM(pitchouts) AS pitchouts,\n            SUM(pitcher_pickoff_attempts) AS pitcher_pickoff_attempts,\n            SUM(catcher_pickoff_attempts) AS catcher_pickoff_attempts,\n            SUM(pitches_blocked_by_catcher) AS pitches_blocked_by_catcher,\n            SUM(pitches_with_runners_going) AS pitches_with_runners_going,\n            SUM(passed_balls) AS passed_balls,\n            SUM(wild_pitches) AS wild_pitches,\n            SUM(balks) AS balks,\n            SUM(left_on_base) AS left_on_base,\n            SUM(left_on_base_with_two_outs) AS left_on_base_with_two_outs,\n            SUM(stolen_bases_second) AS stolen_bases_second,\n            SUM(stolen_bases_third) AS stolen_bases_third,\n            SUM(stolen_bases_home) AS stolen_bases_home,\n            SUM(caught_stealing_second) AS caught_stealing_second,\n            SUM(caught_stealing_third) AS caught_stealing_third,\n            SUM(caught_stealing_home) AS caught_stealing_home,\n            SUM(stolen_base_opportunities) AS stolen_base_opportunities,\n            SUM(stolen_base_opportunities_second) AS stolen_base_opportunities_second,\n            SUM(stolen_base_opportunities_third) AS stolen_base_opportunities_third,\n            SUM(stolen_base_opportunities_home) AS stolen_base_opportunities_home,\n            SUM(picked_off_first) AS picked_off_first,\n            SUM(picked_off_second) AS picked_off_second,\n            SUM(picked_off_third) AS picked_off_third,\n            SUM(times_force_on_runner) AS times_force_on_runner,\n            SUM(times_lead_runner) AS times_lead_runner,\n            SUM(times_next_base_empty) AS times_next_base_empty,\n            SUM(extra_base_chances) AS extra_base_chances,\n            SUM(extra_bases_taken) AS extra_bases_taken,\n            SUM(hits) / SUM(at_bats) AS batting_average,\n            SUM(on_base_successes) / SUM(on_base_opportunities) AS on_base_percentage,\n            SUM(total_bases) / SUM(at_bats) AS slugging_percentage,\n            SUM(on_base_successes) / SUM(on_base_opportunities) + SUM(total_bases) / SUM(at_bats) AS on_base_plus_slugging,\n            SUM(total_bases) / SUM(at_bats) - SUM(hits) / SUM(at_bats) AS isolated_power,\n            SUM(total_bases - hits + walks + stolen_bases - caught_stealing) / SUM(at_bats) AS secondary_average,\n            SUM(hits - home_runs) / (SUM(at_bats) - SUM(home_runs) - SUM(strikeouts) + SUM(COALESCE(sacrifice_flies, 0))) AS batting_average_on_balls_in_play,\n            SUM(home_runs) / SUM(plate_appearances) AS home_run_rate,\n            SUM(walks) / SUM(plate_appearances) AS walk_rate,\n            SUM(strikeouts) / SUM(plate_appearances) AS strikeout_rate,\n            SUM(stolen_bases) / SUM(stolen_bases + caught_stealing) AS stolen_base_percentage,FROM season\n        \n        WHERE game_type IN (SELECT game_type FROM \"timeball\".\"main_seeds\".\"seed_game_types\" WHERE is_regular_season)\n        \n        GROUP BY player_id, season, league\n    ),\n\n    --- ...but we need to use the event table for event-based metrics,\n    event_agg AS (\n        SELECT\n            player_id,\n            season,\n            league,\n            COUNT(DISTINCT game_id) AS games,\n            SUM(trajectory_known * balls_batted * (at_bats - hits)) / SUM(balls_batted * (at_bats - hits)) AS known_trajectory_rate_outs,\n            SUM(trajectory_known * balls_batted * hits) / SUM(balls_batted * hits) AS known_trajectory_rate_hits,\n            SUM(trajectory_known * balls_batted) / SUM(balls_batted) AS known_trajectory_rate,\n            SUM(trajectory_broad_known * balls_batted * (at_bats - hits)) / SUM(balls_batted * (at_bats - hits)) AS known_trajectory_broad_rate_outs,\n            SUM(trajectory_broad_known * balls_batted * hits) / SUM(balls_batted * hits) AS known_trajectory_broad_rate_hits,\n            SUM(trajectory_broad_known * balls_batted) / SUM(balls_batted) AS known_trajectory_broad_rate,\n            known_trajectory_rate_outs / known_trajectory_rate_hits AS known_trajectory_out_hit_ratio,\n            known_trajectory_broad_rate_outs / known_trajectory_broad_rate_hits AS known_trajectory_broad_out_hit_ratio,\n            SUM(trajectory_broad_air_ball * (at_bats - hits)) / SUM(trajectory_broad_known * (at_bats - hits)) AS air_ball_rate_outs,\n            SUM(trajectory_broad_ground_ball * (at_bats - hits)) / SUM(trajectory_broad_known * (at_bats - hits)) AS ground_ball_rate_outs,\n            ground_ball_rate_outs / air_ball_rate_outs AS ground_air_out_ratio,\n            SUM(trajectory_broad_air_ball * hits) / SUM(trajectory_broad_known * hits) AS air_ball_hit_rate,\n            SUM(trajectory_broad_ground_ball * hits) / SUM(trajectory_broad_known * hits) AS ground_ball_hit_rate,\n            ground_ball_hit_rate / air_ball_hit_rate AS ground_air_hit_ratio,\n            SUM(trajectory_fly_ball) / SUM(trajectory_known) AS fly_ball_rate,\n            SUM(trajectory_line_drive) / SUM(trajectory_known) AS line_drive_rate,\n            SUM(trajectory_pop_up) / SUM(trajectory_known) AS pop_up_rate,\n            SUM(trajectory_ground_ball) / SUM(trajectory_broad_known) AS ground_ball_rate,\n            SUM(trajectory_broad_air_ball * hits) * known_trajectory_broad_out_hit_ratio / (SUM(trajectory_broad_air_ball * hits) * known_trajectory_broad_out_hit_ratio + SUM(trajectory_broad_air_ball * (at_bats - hits))) AS coverage_weighted_air_ball_batting_average,\n            SUM(trajectory_ground_ball * hits) * known_trajectory_broad_out_hit_ratio / (SUM(trajectory_ground_ball * hits) * known_trajectory_broad_out_hit_ratio + SUM(trajectory_ground_ball * (at_bats - hits))) AS coverage_weighted_ground_ball_batting_average,\n            SUM(trajectory_fly_ball * hits) * known_trajectory_out_hit_ratio / (SUM(trajectory_fly_ball * hits) * known_trajectory_out_hit_ratio + SUM(trajectory_fly_ball * (at_bats - hits))) AS coverage_weighted_fly_ball_batting_average,\n            SUM(trajectory_line_drive * hits) * known_trajectory_out_hit_ratio / (SUM(trajectory_line_drive * hits) * known_trajectory_out_hit_ratio + SUM(trajectory_line_drive * (at_bats - hits))) AS coverage_weighted_line_drive_batting_average,\n            SUM(trajectory_pop_up * hits) * known_trajectory_out_hit_ratio / (SUM(trajectory_pop_up * hits) * known_trajectory_out_hit_ratio + SUM(trajectory_pop_up * (at_bats - hits))) AS coverage_weighted_pop_up_batting_average,\n            SUM(batted_angle_known * (at_bats - hits)) / SUM(balls_batted * (at_bats - hits)) AS known_angle_rate_outs,\n            SUM(batted_angle_known * hits) / SUM(hits) AS known_angle_rate_hits,\n            SUM(batted_angle_known) / SUM(balls_batted) AS known_angle_rate,\n            known_angle_rate_outs / known_angle_rate_hits AS known_angle_out_hit_ratio,\n            SUM(batted_angle_left * (at_bats - hits)) / SUM(batted_angle_known * (at_bats - hits)) AS angle_left_rate_outs,\n            SUM(batted_angle_left * hits) / SUM(batted_angle_known * hits) AS angle_left_rate_hits,\n            SUM(batted_angle_left) / SUM(batted_angle_known) AS angle_left_rate,\n            SUM(batted_angle_left * hits) * known_angle_out_hit_ratio / (SUM(batted_angle_left * hits) * known_angle_out_hit_ratio + SUM(batted_angle_left * (at_bats - hits))) AS coverage_weighted_angle_left_batting_average,\n            SUM(batted_angle_right * (at_bats - hits)) / SUM(batted_angle_known * (at_bats - hits)) AS angle_right_rate_outs,\n            SUM(batted_angle_right * hits) / SUM(batted_angle_known * hits) AS angle_right_rate_hits,\n            SUM(batted_angle_right) / SUM(batted_angle_known) AS angle_right_rate,\n            SUM(batted_angle_right * hits) * known_angle_out_hit_ratio / (SUM(batted_angle_right * hits) * known_angle_out_hit_ratio + SUM(batted_angle_right * (at_bats - hits))) AS coverage_weighted_angle_right_batting_average,\n            SUM(batted_angle_middle * (at_bats - hits)) / SUM(batted_angle_known * (at_bats - hits)) AS angle_middle_rate_outs,\n            SUM(batted_angle_middle * hits) / SUM(batted_angle_known * hits) AS angle_middle_rate_hits,\n            SUM(batted_angle_middle) / SUM(batted_angle_known) AS angle_middle_rate,\n            SUM(batted_angle_middle * hits) * known_angle_out_hit_ratio / (SUM(batted_angle_middle * hits) * known_angle_out_hit_ratio + SUM(batted_angle_middle * (at_bats - hits))) AS coverage_weighted_angle_middle_batting_average,\n            SUM(batted_balls_pulled * (at_bats - hits)) / SUM(batted_angle_known * (at_bats - hits)) AS pulled_rate_outs,\n            SUM(batted_balls_pulled * hits) / SUM(batted_angle_known * hits) AS pulled_rate_hits,\n            SUM(batted_balls_pulled) / SUM(batted_angle_known) AS pulled_rate,\n            SUM(batted_balls_pulled * hits) * known_angle_out_hit_ratio / (SUM(batted_balls_pulled * hits) * known_angle_out_hit_ratio + SUM(batted_balls_pulled * (at_bats - hits))) AS coverage_weighted_pulled_batting_average,\n            SUM(batted_balls_opposite_field * (at_bats - hits)) / SUM(batted_angle_known * (at_bats - hits)) AS opposite_field_rate_outs,\n            SUM(batted_balls_opposite_field * hits) / SUM(batted_angle_known * hits) AS opposite_field_rate_hits,\n            SUM(batted_balls_opposite_field) / SUM(batted_angle_known) AS opposite_field_rate,\n            SUM(batted_balls_opposite_field * hits) * known_angle_out_hit_ratio / (SUM(batted_balls_opposite_field * hits) * known_angle_out_hit_ratio + SUM(batted_balls_opposite_field * (at_bats - hits))) AS coverage_weighted_opposite_field_batting_average,\n            SUM(stolen_bases_second + caught_stealing_second) / SUM(stolen_base_opportunities_second) AS stolen_base_attempt_rate_second,\n            SUM(stolen_bases_third + caught_stealing_third) / SUM(stolen_base_opportunities_third) AS stolen_base_attempt_rate_third,\n            SUM(stolen_bases_home + caught_stealing_home) / SUM(stolen_base_opportunities_home) AS stolen_base_attempt_rate_home,\n            SUM(unforced_outs_on_basepaths) / SUM(times_reached_base) AS unforced_out_rate,\n            SUM(strikes) / SUM(pitches) AS pitch_strike_rate,\n            SUM(swings_with_contact) / SUM(pitches) AS pitch_contact_rate,\n            SUM(swings_with_contact + strikes_swinging) / SUM(pitches) AS pitch_swing_rate,\n            SUM(balls) / SUM(pitches) AS pitch_ball_rate,\n            SUM(strikes_swinging) / SUM(pitches) AS pitch_swing_and_miss_rate,\n            SUM(strikes_foul) / SUM(pitches) AS pitch_foul_rate,\n            SUM(strikes_called) / SUM(pitches) AS pitched_called_strike_rate,\n            COUNT_IF(pitches > 0) / SUM(plate_appearances) AS pitch_data_coverage_rate,FROM event\n        \n        WHERE game_id IN (SELECT game_id FROM \"timeball\".\"main_models\".\"game_start_info\" WHERE is_regular_season)\n        \n        GROUP BY player_id, season, league\n    ),\n\n    final AS (\n        SELECT\n            player_id,\n            season,\n            league,\n            basic_stats.plate_appearances::INT AS plate_appearances,\n            basic_stats.at_bats::INT AS at_bats,\n            basic_stats.hits::INT AS hits,\n            basic_stats.singles::INT AS singles,\n            basic_stats.doubles::INT AS doubles,\n            basic_stats.triples::INT AS triples,\n            basic_stats.home_runs::INT AS home_runs,\n            basic_stats.total_bases::INT AS total_bases,\n            basic_stats.strikeouts::INT AS strikeouts,\n            basic_stats.walks::INT AS walks,\n            basic_stats.intentional_walks::INT AS intentional_walks,\n            basic_stats.hit_by_pitches::INT AS hit_by_pitches,\n            basic_stats.sacrifice_hits::INT AS sacrifice_hits,\n            basic_stats.sacrifice_flies::INT AS sacrifice_flies,\n            basic_stats.reached_on_errors::INT AS reached_on_errors,\n            basic_stats.reached_on_interferences::INT AS reached_on_interferences,\n            basic_stats.inside_the_park_home_runs::INT AS inside_the_park_home_runs,\n            basic_stats.ground_rule_doubles::INT AS ground_rule_doubles,\n            basic_stats.infield_hits::INT AS infield_hits,\n            basic_stats.on_base_opportunities::INT AS on_base_opportunities,\n            basic_stats.on_base_successes::INT AS on_base_successes,\n            basic_stats.runs_batted_in::INT AS runs_batted_in,\n            basic_stats.grounded_into_double_plays::INT AS grounded_into_double_plays,\n            basic_stats.double_plays::INT AS double_plays,\n            basic_stats.triple_plays::INT AS triple_plays,\n            basic_stats.batting_outs::INT AS batting_outs,\n            basic_stats.balls_in_play::INT AS balls_in_play,\n            basic_stats.balls_batted::INT AS balls_batted,\n            basic_stats.trajectory_fly_ball::INT AS trajectory_fly_ball,\n            basic_stats.trajectory_ground_ball::INT AS trajectory_ground_ball,\n            basic_stats.trajectory_line_drive::INT AS trajectory_line_drive,\n            basic_stats.trajectory_pop_up::INT AS trajectory_pop_up,\n            basic_stats.trajectory_unknown::INT AS trajectory_unknown,\n            basic_stats.trajectory_known::INT AS trajectory_known,\n            basic_stats.trajectory_broad_air_ball::INT AS trajectory_broad_air_ball,\n            basic_stats.trajectory_broad_ground_ball::INT AS trajectory_broad_ground_ball,\n            basic_stats.trajectory_broad_unknown::INT AS trajectory_broad_unknown,\n            basic_stats.trajectory_broad_known::INT AS trajectory_broad_known,\n            basic_stats.bunts::INT AS bunts,\n            basic_stats.batted_distance_plate::INT AS batted_distance_plate,\n            basic_stats.batted_distance_infield::INT AS batted_distance_infield,\n            basic_stats.batted_distance_outfield::INT AS batted_distance_outfield,\n            basic_stats.batted_distance_unknown::INT AS batted_distance_unknown,\n            basic_stats.batted_distance_known::INT AS batted_distance_known,\n            basic_stats.fielded_by_battery::INT AS fielded_by_battery,\n            basic_stats.fielded_by_infielder::INT AS fielded_by_infielder,\n            basic_stats.fielded_by_outfielder::INT AS fielded_by_outfielder,\n            basic_stats.fielded_by_known::INT AS fielded_by_known,\n            basic_stats.fielded_by_unknown::INT AS fielded_by_unknown,\n            basic_stats.batted_angle_left::INT AS batted_angle_left,\n            basic_stats.batted_angle_right::INT AS batted_angle_right,\n            basic_stats.batted_angle_middle::INT AS batted_angle_middle,\n            basic_stats.batted_angle_unknown::INT AS batted_angle_unknown,\n            basic_stats.batted_angle_known::INT AS batted_angle_known,\n            basic_stats.batted_location_plate::INT AS batted_location_plate,\n            basic_stats.batted_location_right_infield::INT AS batted_location_right_infield,\n            basic_stats.batted_location_middle_infield::INT AS batted_location_middle_infield,\n            basic_stats.batted_location_left_infield::INT AS batted_location_left_infield,\n            basic_stats.batted_location_left_field::INT AS batted_location_left_field,\n            basic_stats.batted_location_center_field::INT AS batted_location_center_field,\n            basic_stats.batted_location_right_field::INT AS batted_location_right_field,\n            basic_stats.batted_location_unknown::INT AS batted_location_unknown,\n            basic_stats.batted_location_known::INT AS batted_location_known,\n            basic_stats.batted_balls_pulled::INT AS batted_balls_pulled,\n            basic_stats.batted_balls_opposite_field::INT AS batted_balls_opposite_field,\n            basic_stats.runs::INT AS runs,\n            basic_stats.times_reached_base::INT AS times_reached_base,\n            basic_stats.stolen_bases::INT AS stolen_bases,\n            basic_stats.caught_stealing::INT AS caught_stealing,\n            basic_stats.picked_off::INT AS picked_off,\n            basic_stats.picked_off_caught_stealing::INT AS picked_off_caught_stealing,\n            basic_stats.outs_on_basepaths::INT AS outs_on_basepaths,\n            basic_stats.unforced_outs_on_basepaths::INT AS unforced_outs_on_basepaths,\n            basic_stats.outs_avoided_on_errors::INT AS outs_avoided_on_errors,\n            basic_stats.advances_on_wild_pitches::INT AS advances_on_wild_pitches,\n            basic_stats.advances_on_passed_balls::INT AS advances_on_passed_balls,\n            basic_stats.advances_on_balks::INT AS advances_on_balks,\n            basic_stats.advances_on_unspecified_plays::INT AS advances_on_unspecified_plays,\n            basic_stats.advances_on_defensive_indifference::INT AS advances_on_defensive_indifference,\n            basic_stats.advances_on_errors::INT AS advances_on_errors,\n            basic_stats.plate_appearances_while_on_base::INT AS plate_appearances_while_on_base,\n            basic_stats.balls_in_play_while_running::INT AS balls_in_play_while_running,\n            basic_stats.balls_in_play_while_on_base::INT AS balls_in_play_while_on_base,\n            basic_stats.batter_total_bases_while_running::INT AS batter_total_bases_while_running,\n            basic_stats.batter_total_bases_while_on_base::INT AS batter_total_bases_while_on_base,\n            basic_stats.extra_base_advance_attempts::INT AS extra_base_advance_attempts,\n            basic_stats.bases_advanced::INT AS bases_advanced,\n            basic_stats.bases_advanced_on_balls_in_play::INT AS bases_advanced_on_balls_in_play,\n            basic_stats.surplus_bases_advanced_on_balls_in_play::INT AS surplus_bases_advanced_on_balls_in_play,\n            basic_stats.outs_on_extra_base_advance_attempts::INT AS outs_on_extra_base_advance_attempts,\n            basic_stats.pitches::INT AS pitches,\n            basic_stats.swings::INT AS swings,\n            basic_stats.swings_with_contact::INT AS swings_with_contact,\n            basic_stats.strikes::INT AS strikes,\n            basic_stats.strikes_called::INT AS strikes_called,\n            basic_stats.strikes_swinging::INT AS strikes_swinging,\n            basic_stats.strikes_foul::INT AS strikes_foul,\n            basic_stats.strikes_foul_tip::INT AS strikes_foul_tip,\n            basic_stats.strikes_in_play::INT AS strikes_in_play,\n            basic_stats.strikes_unknown::INT AS strikes_unknown,\n            basic_stats.balls::INT AS balls,\n            basic_stats.balls_called::INT AS balls_called,\n            basic_stats.balls_intentional::INT AS balls_intentional,\n            basic_stats.balls_automatic::INT AS balls_automatic,\n            basic_stats.unknown_pitches::INT AS unknown_pitches,\n            basic_stats.pitchouts::INT AS pitchouts,\n            basic_stats.pitcher_pickoff_attempts::INT AS pitcher_pickoff_attempts,\n            basic_stats.catcher_pickoff_attempts::INT AS catcher_pickoff_attempts,\n            basic_stats.pitches_blocked_by_catcher::INT AS pitches_blocked_by_catcher,\n            basic_stats.pitches_with_runners_going::INT AS pitches_with_runners_going,\n            basic_stats.passed_balls::INT AS passed_balls,\n            basic_stats.wild_pitches::INT AS wild_pitches,\n            basic_stats.balks::INT AS balks,\n            basic_stats.left_on_base::INT AS left_on_base,\n            basic_stats.left_on_base_with_two_outs::INT AS left_on_base_with_two_outs,\n            basic_stats.stolen_bases_second::INT AS stolen_bases_second,\n            basic_stats.stolen_bases_third::INT AS stolen_bases_third,\n            basic_stats.stolen_bases_home::INT AS stolen_bases_home,\n            basic_stats.caught_stealing_second::INT AS caught_stealing_second,\n            basic_stats.caught_stealing_third::INT AS caught_stealing_third,\n            basic_stats.caught_stealing_home::INT AS caught_stealing_home,\n            basic_stats.stolen_base_opportunities::INT AS stolen_base_opportunities,\n            basic_stats.stolen_base_opportunities_second::INT AS stolen_base_opportunities_second,\n            basic_stats.stolen_base_opportunities_third::INT AS stolen_base_opportunities_third,\n            basic_stats.stolen_base_opportunities_home::INT AS stolen_base_opportunities_home,\n            basic_stats.picked_off_first::INT AS picked_off_first,\n            basic_stats.picked_off_second::INT AS picked_off_second,\n            basic_stats.picked_off_third::INT AS picked_off_third,\n            basic_stats.times_force_on_runner::INT AS times_force_on_runner,\n            basic_stats.times_lead_runner::INT AS times_lead_runner,\n            basic_stats.times_next_base_empty::INT AS times_next_base_empty,\n            basic_stats.extra_base_chances::INT AS extra_base_chances,\n            basic_stats.extra_bases_taken::INT AS extra_bases_taken,\n            basic_stats.batting_average,\n            basic_stats.on_base_percentage,\n            basic_stats.slugging_percentage,\n            basic_stats.on_base_plus_slugging,\n            basic_stats.isolated_power,\n            basic_stats.secondary_average,\n            basic_stats.batting_average_on_balls_in_play,\n            basic_stats.home_run_rate,\n            basic_stats.walk_rate,\n            basic_stats.strikeout_rate,\n            basic_stats.stolen_base_percentage,COALESCE(event_agg.games / basic_stats.games, 0) AS event_coverage_rate,\n            event_agg.known_trajectory_rate_outs,\n            event_agg.known_trajectory_rate_hits,\n            event_agg.known_trajectory_rate,\n            event_agg.known_trajectory_broad_rate_outs,\n            event_agg.known_trajectory_broad_rate_hits,\n            event_agg.known_trajectory_broad_rate,\n            event_agg.known_trajectory_out_hit_ratio,\n            event_agg.known_trajectory_broad_out_hit_ratio,\n            event_agg.air_ball_rate_outs,\n            event_agg.ground_ball_rate_outs,\n            event_agg.ground_air_out_ratio,\n            event_agg.air_ball_hit_rate,\n            event_agg.ground_ball_hit_rate,\n            event_agg.ground_air_hit_ratio,\n            event_agg.fly_ball_rate,\n            event_agg.line_drive_rate,\n            event_agg.pop_up_rate,\n            event_agg.ground_ball_rate,\n            event_agg.coverage_weighted_air_ball_batting_average,\n            event_agg.coverage_weighted_ground_ball_batting_average,\n            event_agg.coverage_weighted_fly_ball_batting_average,\n            event_agg.coverage_weighted_line_drive_batting_average,\n            event_agg.coverage_weighted_pop_up_batting_average,\n            event_agg.known_angle_rate_outs,\n            event_agg.known_angle_rate_hits,\n            event_agg.known_angle_rate,\n            event_agg.known_angle_out_hit_ratio,\n            event_agg.angle_left_rate_outs,\n            event_agg.angle_left_rate_hits,\n            event_agg.angle_left_rate,\n            event_agg.coverage_weighted_angle_left_batting_average,\n            event_agg.angle_right_rate_outs,\n            event_agg.angle_right_rate_hits,\n            event_agg.angle_right_rate,\n            event_agg.coverage_weighted_angle_right_batting_average,\n            event_agg.angle_middle_rate_outs,\n            event_agg.angle_middle_rate_hits,\n            event_agg.angle_middle_rate,\n            event_agg.coverage_weighted_angle_middle_batting_average,\n            event_agg.pulled_rate_outs,\n            event_agg.pulled_rate_hits,\n            event_agg.pulled_rate,\n            event_agg.coverage_weighted_pulled_batting_average,\n            event_agg.opposite_field_rate_outs,\n            event_agg.opposite_field_rate_hits,\n            event_agg.opposite_field_rate,\n            event_agg.coverage_weighted_opposite_field_batting_average,\n            event_agg.stolen_base_attempt_rate_second,\n            event_agg.stolen_base_attempt_rate_third,\n            event_agg.stolen_base_attempt_rate_home,\n            event_agg.unforced_out_rate,\n            event_agg.pitch_strike_rate,\n            event_agg.pitch_contact_rate,\n            event_agg.pitch_swing_rate,\n            event_agg.pitch_ball_rate,\n            event_agg.pitch_swing_and_miss_rate,\n            event_agg.pitch_foul_rate,\n            event_agg.pitched_called_strike_rate,\n            event_agg.pitch_data_coverage_rate,FROM basic_stats\n        LEFT JOIN event_agg USING (player_id, season, league)\n    )\n    \n    SELECT * FROM final\n", "relation_name": "\"timeball\".\"main_models\".\"metrics_player_season_league_offense\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:56.264439Z", "completed_at": "2023-12-09T18:55:56.533993Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:56.534691Z", "completed_at": "2023-12-09T18:55:56.534696Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.30370211601257324, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.timeball.metrics_team_season_offense", "compiled": true, "compiled_code": "-- Add extra context columns to get potential grouiping keys\n    WITH season AS (SELECT \n            s.*,\n                f.franchise_id,\n                f.league,\n                f.division,\n                f.location,\n                f.nickname,\n                f.alternative_nicknames,\n                f.date_start,\n                f.date_end,\n                f.city,\n                f.state,\n        FROM \"timeball\".\"main_models\".\"player_team_season_offense_stats\" AS s\n        LEFT JOIN \"timeball\".\"main_seeds\".\"seed_franchises\" AS f\n            ON s.team_id = f.team_id\n            AND s.season BETWEEN EXTRACT(YEAR FROM f.date_start) AND COALESCE(EXTRACT(YEAR FROM f.date_end), 9999)\n    ),\n    event AS (SELECT \n            e.*,\n                g.opponent_id,\n                g.league,\n                g.opponent_league,\n                g.division,\n                g.opponent_division,\n                g.team_name,\n                g.opponent_name,\n                g.starting_pitcher_id,\n                g.opponent_starting_pitcher_id,\n                g.team_side,\n                g.date,\n                g.start_time,\n                g.season,\n                g.doubleheader_status,\n                g.time_of_day,\n                g.game_type,\n                g.bat_first_side,\n                g.sky,\n                g.field_condition,\n                g.precipitation,\n                g.wind_direction,\n                g.park_id,\n                g.temperature_fahrenheit,\n                g.attendance,\n                g.wind_speed_mph,\n                g.use_dh,\n                g.scorer,\n                g.scoring_method,\n                g.source_type,\n                g.umpire_home_id,\n                g.umpire_first_id,\n                g.umpire_second_id,\n                g.umpire_third_id,\n                g.umpire_left_id,\n                g.umpire_right_id,\n                g.filename,\n                g.is_regular_season,\n                g.is_postseason,\n                g.is_integrated,\n                g.is_negro_leagues,\n                g.is_segregated_white,\n                g.away_franchise_id,\n                g.home_franchise_id,\n                g.is_interleague,\n                g.lineup_map_away,\n                g.lineup_map_home,\n                g.fielding_map_away,\n                g.fielding_map_home,\n                g.series_id,\n                g.season_game_number,\n                g.series_game_number,\n                g.days_since_last_game,\n        FROM \"timeball\".\"main_models\".\"event_offense_stats\" AS e\n        LEFT JOIN \"timeball\".\"main_models\".\"team_game_start_info\" AS g USING (team_id, game_id)\n    ),\n    -- Need to use the season table for basic stats/metrics to ensure full coverage...\n    basic_stats AS (\n        SELECT\n            team_id,\n            season,\n            SUM(games) AS games,\n            SUM(plate_appearances) AS plate_appearances,\n            SUM(at_bats) AS at_bats,\n            SUM(hits) AS hits,\n            SUM(singles) AS singles,\n            SUM(doubles) AS doubles,\n            SUM(triples) AS triples,\n            SUM(home_runs) AS home_runs,\n            SUM(total_bases) AS total_bases,\n            SUM(strikeouts) AS strikeouts,\n            SUM(walks) AS walks,\n            SUM(intentional_walks) AS intentional_walks,\n            SUM(hit_by_pitches) AS hit_by_pitches,\n            SUM(sacrifice_hits) AS sacrifice_hits,\n            SUM(sacrifice_flies) AS sacrifice_flies,\n            SUM(reached_on_errors) AS reached_on_errors,\n            SUM(reached_on_interferences) AS reached_on_interferences,\n            SUM(inside_the_park_home_runs) AS inside_the_park_home_runs,\n            SUM(ground_rule_doubles) AS ground_rule_doubles,\n            SUM(infield_hits) AS infield_hits,\n            SUM(on_base_opportunities) AS on_base_opportunities,\n            SUM(on_base_successes) AS on_base_successes,\n            SUM(runs_batted_in) AS runs_batted_in,\n            SUM(grounded_into_double_plays) AS grounded_into_double_plays,\n            SUM(double_plays) AS double_plays,\n            SUM(triple_plays) AS triple_plays,\n            SUM(batting_outs) AS batting_outs,\n            SUM(balls_in_play) AS balls_in_play,\n            SUM(balls_batted) AS balls_batted,\n            SUM(trajectory_fly_ball) AS trajectory_fly_ball,\n            SUM(trajectory_ground_ball) AS trajectory_ground_ball,\n            SUM(trajectory_line_drive) AS trajectory_line_drive,\n            SUM(trajectory_pop_up) AS trajectory_pop_up,\n            SUM(trajectory_unknown) AS trajectory_unknown,\n            SUM(trajectory_known) AS trajectory_known,\n            SUM(trajectory_broad_air_ball) AS trajectory_broad_air_ball,\n            SUM(trajectory_broad_ground_ball) AS trajectory_broad_ground_ball,\n            SUM(trajectory_broad_unknown) AS trajectory_broad_unknown,\n            SUM(trajectory_broad_known) AS trajectory_broad_known,\n            SUM(bunts) AS bunts,\n            SUM(batted_distance_plate) AS batted_distance_plate,\n            SUM(batted_distance_infield) AS batted_distance_infield,\n            SUM(batted_distance_outfield) AS batted_distance_outfield,\n            SUM(batted_distance_unknown) AS batted_distance_unknown,\n            SUM(batted_distance_known) AS batted_distance_known,\n            SUM(fielded_by_battery) AS fielded_by_battery,\n            SUM(fielded_by_infielder) AS fielded_by_infielder,\n            SUM(fielded_by_outfielder) AS fielded_by_outfielder,\n            SUM(fielded_by_known) AS fielded_by_known,\n            SUM(fielded_by_unknown) AS fielded_by_unknown,\n            SUM(batted_angle_left) AS batted_angle_left,\n            SUM(batted_angle_right) AS batted_angle_right,\n            SUM(batted_angle_middle) AS batted_angle_middle,\n            SUM(batted_angle_unknown) AS batted_angle_unknown,\n            SUM(batted_angle_known) AS batted_angle_known,\n            SUM(batted_location_plate) AS batted_location_plate,\n            SUM(batted_location_right_infield) AS batted_location_right_infield,\n            SUM(batted_location_middle_infield) AS batted_location_middle_infield,\n            SUM(batted_location_left_infield) AS batted_location_left_infield,\n            SUM(batted_location_left_field) AS batted_location_left_field,\n            SUM(batted_location_center_field) AS batted_location_center_field,\n            SUM(batted_location_right_field) AS batted_location_right_field,\n            SUM(batted_location_unknown) AS batted_location_unknown,\n            SUM(batted_location_known) AS batted_location_known,\n            SUM(batted_balls_pulled) AS batted_balls_pulled,\n            SUM(batted_balls_opposite_field) AS batted_balls_opposite_field,\n            SUM(runs) AS runs,\n            SUM(times_reached_base) AS times_reached_base,\n            SUM(stolen_bases) AS stolen_bases,\n            SUM(caught_stealing) AS caught_stealing,\n            SUM(picked_off) AS picked_off,\n            SUM(picked_off_caught_stealing) AS picked_off_caught_stealing,\n            SUM(outs_on_basepaths) AS outs_on_basepaths,\n            SUM(unforced_outs_on_basepaths) AS unforced_outs_on_basepaths,\n            SUM(outs_avoided_on_errors) AS outs_avoided_on_errors,\n            SUM(advances_on_wild_pitches) AS advances_on_wild_pitches,\n            SUM(advances_on_passed_balls) AS advances_on_passed_balls,\n            SUM(advances_on_balks) AS advances_on_balks,\n            SUM(advances_on_unspecified_plays) AS advances_on_unspecified_plays,\n            SUM(advances_on_defensive_indifference) AS advances_on_defensive_indifference,\n            SUM(advances_on_errors) AS advances_on_errors,\n            SUM(plate_appearances_while_on_base) AS plate_appearances_while_on_base,\n            SUM(balls_in_play_while_running) AS balls_in_play_while_running,\n            SUM(balls_in_play_while_on_base) AS balls_in_play_while_on_base,\n            SUM(batter_total_bases_while_running) AS batter_total_bases_while_running,\n            SUM(batter_total_bases_while_on_base) AS batter_total_bases_while_on_base,\n            SUM(extra_base_advance_attempts) AS extra_base_advance_attempts,\n            SUM(bases_advanced) AS bases_advanced,\n            SUM(bases_advanced_on_balls_in_play) AS bases_advanced_on_balls_in_play,\n            SUM(surplus_bases_advanced_on_balls_in_play) AS surplus_bases_advanced_on_balls_in_play,\n            SUM(outs_on_extra_base_advance_attempts) AS outs_on_extra_base_advance_attempts,\n            SUM(pitches) AS pitches,\n            SUM(swings) AS swings,\n            SUM(swings_with_contact) AS swings_with_contact,\n            SUM(strikes) AS strikes,\n            SUM(strikes_called) AS strikes_called,\n            SUM(strikes_swinging) AS strikes_swinging,\n            SUM(strikes_foul) AS strikes_foul,\n            SUM(strikes_foul_tip) AS strikes_foul_tip,\n            SUM(strikes_in_play) AS strikes_in_play,\n            SUM(strikes_unknown) AS strikes_unknown,\n            SUM(balls) AS balls,\n            SUM(balls_called) AS balls_called,\n            SUM(balls_intentional) AS balls_intentional,\n            SUM(balls_automatic) AS balls_automatic,\n            SUM(unknown_pitches) AS unknown_pitches,\n            SUM(pitchouts) AS pitchouts,\n            SUM(pitcher_pickoff_attempts) AS pitcher_pickoff_attempts,\n            SUM(catcher_pickoff_attempts) AS catcher_pickoff_attempts,\n            SUM(pitches_blocked_by_catcher) AS pitches_blocked_by_catcher,\n            SUM(pitches_with_runners_going) AS pitches_with_runners_going,\n            SUM(passed_balls) AS passed_balls,\n            SUM(wild_pitches) AS wild_pitches,\n            SUM(balks) AS balks,\n            SUM(left_on_base) AS left_on_base,\n            SUM(left_on_base_with_two_outs) AS left_on_base_with_two_outs,\n            SUM(stolen_bases_second) AS stolen_bases_second,\n            SUM(stolen_bases_third) AS stolen_bases_third,\n            SUM(stolen_bases_home) AS stolen_bases_home,\n            SUM(caught_stealing_second) AS caught_stealing_second,\n            SUM(caught_stealing_third) AS caught_stealing_third,\n            SUM(caught_stealing_home) AS caught_stealing_home,\n            SUM(stolen_base_opportunities) AS stolen_base_opportunities,\n            SUM(stolen_base_opportunities_second) AS stolen_base_opportunities_second,\n            SUM(stolen_base_opportunities_third) AS stolen_base_opportunities_third,\n            SUM(stolen_base_opportunities_home) AS stolen_base_opportunities_home,\n            SUM(picked_off_first) AS picked_off_first,\n            SUM(picked_off_second) AS picked_off_second,\n            SUM(picked_off_third) AS picked_off_third,\n            SUM(times_force_on_runner) AS times_force_on_runner,\n            SUM(times_lead_runner) AS times_lead_runner,\n            SUM(times_next_base_empty) AS times_next_base_empty,\n            SUM(extra_base_chances) AS extra_base_chances,\n            SUM(extra_bases_taken) AS extra_bases_taken,\n            SUM(hits) / SUM(at_bats) AS batting_average,\n            SUM(on_base_successes) / SUM(on_base_opportunities) AS on_base_percentage,\n            SUM(total_bases) / SUM(at_bats) AS slugging_percentage,\n            SUM(on_base_successes) / SUM(on_base_opportunities) + SUM(total_bases) / SUM(at_bats) AS on_base_plus_slugging,\n            SUM(total_bases) / SUM(at_bats) - SUM(hits) / SUM(at_bats) AS isolated_power,\n            SUM(total_bases - hits + walks + stolen_bases - caught_stealing) / SUM(at_bats) AS secondary_average,\n            SUM(hits - home_runs) / (SUM(at_bats) - SUM(home_runs) - SUM(strikeouts) + SUM(COALESCE(sacrifice_flies, 0))) AS batting_average_on_balls_in_play,\n            SUM(home_runs) / SUM(plate_appearances) AS home_run_rate,\n            SUM(walks) / SUM(plate_appearances) AS walk_rate,\n            SUM(strikeouts) / SUM(plate_appearances) AS strikeout_rate,\n            SUM(stolen_bases) / SUM(stolen_bases + caught_stealing) AS stolen_base_percentage,FROM season\n        \n        WHERE game_type IN (SELECT game_type FROM \"timeball\".\"main_seeds\".\"seed_game_types\" WHERE is_regular_season)\n        \n        GROUP BY team_id, season\n    ),\n\n    --- ...but we need to use the event table for event-based metrics,\n    event_agg AS (\n        SELECT\n            team_id,\n            season,\n            COUNT(DISTINCT game_id) AS games,\n            SUM(trajectory_known * balls_batted * (at_bats - hits)) / SUM(balls_batted * (at_bats - hits)) AS known_trajectory_rate_outs,\n            SUM(trajectory_known * balls_batted * hits) / SUM(balls_batted * hits) AS known_trajectory_rate_hits,\n            SUM(trajectory_known * balls_batted) / SUM(balls_batted) AS known_trajectory_rate,\n            SUM(trajectory_broad_known * balls_batted * (at_bats - hits)) / SUM(balls_batted * (at_bats - hits)) AS known_trajectory_broad_rate_outs,\n            SUM(trajectory_broad_known * balls_batted * hits) / SUM(balls_batted * hits) AS known_trajectory_broad_rate_hits,\n            SUM(trajectory_broad_known * balls_batted) / SUM(balls_batted) AS known_trajectory_broad_rate,\n            known_trajectory_rate_outs / known_trajectory_rate_hits AS known_trajectory_out_hit_ratio,\n            known_trajectory_broad_rate_outs / known_trajectory_broad_rate_hits AS known_trajectory_broad_out_hit_ratio,\n            SUM(trajectory_broad_air_ball * (at_bats - hits)) / SUM(trajectory_broad_known * (at_bats - hits)) AS air_ball_rate_outs,\n            SUM(trajectory_broad_ground_ball * (at_bats - hits)) / SUM(trajectory_broad_known * (at_bats - hits)) AS ground_ball_rate_outs,\n            ground_ball_rate_outs / air_ball_rate_outs AS ground_air_out_ratio,\n            SUM(trajectory_broad_air_ball * hits) / SUM(trajectory_broad_known * hits) AS air_ball_hit_rate,\n            SUM(trajectory_broad_ground_ball * hits) / SUM(trajectory_broad_known * hits) AS ground_ball_hit_rate,\n            ground_ball_hit_rate / air_ball_hit_rate AS ground_air_hit_ratio,\n            SUM(trajectory_fly_ball) / SUM(trajectory_known) AS fly_ball_rate,\n            SUM(trajectory_line_drive) / SUM(trajectory_known) AS line_drive_rate,\n            SUM(trajectory_pop_up) / SUM(trajectory_known) AS pop_up_rate,\n            SUM(trajectory_ground_ball) / SUM(trajectory_broad_known) AS ground_ball_rate,\n            SUM(trajectory_broad_air_ball * hits) * known_trajectory_broad_out_hit_ratio / (SUM(trajectory_broad_air_ball * hits) * known_trajectory_broad_out_hit_ratio + SUM(trajectory_broad_air_ball * (at_bats - hits))) AS coverage_weighted_air_ball_batting_average,\n            SUM(trajectory_ground_ball * hits) * known_trajectory_broad_out_hit_ratio / (SUM(trajectory_ground_ball * hits) * known_trajectory_broad_out_hit_ratio + SUM(trajectory_ground_ball * (at_bats - hits))) AS coverage_weighted_ground_ball_batting_average,\n            SUM(trajectory_fly_ball * hits) * known_trajectory_out_hit_ratio / (SUM(trajectory_fly_ball * hits) * known_trajectory_out_hit_ratio + SUM(trajectory_fly_ball * (at_bats - hits))) AS coverage_weighted_fly_ball_batting_average,\n            SUM(trajectory_line_drive * hits) * known_trajectory_out_hit_ratio / (SUM(trajectory_line_drive * hits) * known_trajectory_out_hit_ratio + SUM(trajectory_line_drive * (at_bats - hits))) AS coverage_weighted_line_drive_batting_average,\n            SUM(trajectory_pop_up * hits) * known_trajectory_out_hit_ratio / (SUM(trajectory_pop_up * hits) * known_trajectory_out_hit_ratio + SUM(trajectory_pop_up * (at_bats - hits))) AS coverage_weighted_pop_up_batting_average,\n            SUM(batted_angle_known * (at_bats - hits)) / SUM(balls_batted * (at_bats - hits)) AS known_angle_rate_outs,\n            SUM(batted_angle_known * hits) / SUM(hits) AS known_angle_rate_hits,\n            SUM(batted_angle_known) / SUM(balls_batted) AS known_angle_rate,\n            known_angle_rate_outs / known_angle_rate_hits AS known_angle_out_hit_ratio,\n            SUM(batted_angle_left * (at_bats - hits)) / SUM(batted_angle_known * (at_bats - hits)) AS angle_left_rate_outs,\n            SUM(batted_angle_left * hits) / SUM(batted_angle_known * hits) AS angle_left_rate_hits,\n            SUM(batted_angle_left) / SUM(batted_angle_known) AS angle_left_rate,\n            SUM(batted_angle_left * hits) * known_angle_out_hit_ratio / (SUM(batted_angle_left * hits) * known_angle_out_hit_ratio + SUM(batted_angle_left * (at_bats - hits))) AS coverage_weighted_angle_left_batting_average,\n            SUM(batted_angle_right * (at_bats - hits)) / SUM(batted_angle_known * (at_bats - hits)) AS angle_right_rate_outs,\n            SUM(batted_angle_right * hits) / SUM(batted_angle_known * hits) AS angle_right_rate_hits,\n            SUM(batted_angle_right) / SUM(batted_angle_known) AS angle_right_rate,\n            SUM(batted_angle_right * hits) * known_angle_out_hit_ratio / (SUM(batted_angle_right * hits) * known_angle_out_hit_ratio + SUM(batted_angle_right * (at_bats - hits))) AS coverage_weighted_angle_right_batting_average,\n            SUM(batted_angle_middle * (at_bats - hits)) / SUM(batted_angle_known * (at_bats - hits)) AS angle_middle_rate_outs,\n            SUM(batted_angle_middle * hits) / SUM(batted_angle_known * hits) AS angle_middle_rate_hits,\n            SUM(batted_angle_middle) / SUM(batted_angle_known) AS angle_middle_rate,\n            SUM(batted_angle_middle * hits) * known_angle_out_hit_ratio / (SUM(batted_angle_middle * hits) * known_angle_out_hit_ratio + SUM(batted_angle_middle * (at_bats - hits))) AS coverage_weighted_angle_middle_batting_average,\n            SUM(batted_balls_pulled * (at_bats - hits)) / SUM(batted_angle_known * (at_bats - hits)) AS pulled_rate_outs,\n            SUM(batted_balls_pulled * hits) / SUM(batted_angle_known * hits) AS pulled_rate_hits,\n            SUM(batted_balls_pulled) / SUM(batted_angle_known) AS pulled_rate,\n            SUM(batted_balls_pulled * hits) * known_angle_out_hit_ratio / (SUM(batted_balls_pulled * hits) * known_angle_out_hit_ratio + SUM(batted_balls_pulled * (at_bats - hits))) AS coverage_weighted_pulled_batting_average,\n            SUM(batted_balls_opposite_field * (at_bats - hits)) / SUM(batted_angle_known * (at_bats - hits)) AS opposite_field_rate_outs,\n            SUM(batted_balls_opposite_field * hits) / SUM(batted_angle_known * hits) AS opposite_field_rate_hits,\n            SUM(batted_balls_opposite_field) / SUM(batted_angle_known) AS opposite_field_rate,\n            SUM(batted_balls_opposite_field * hits) * known_angle_out_hit_ratio / (SUM(batted_balls_opposite_field * hits) * known_angle_out_hit_ratio + SUM(batted_balls_opposite_field * (at_bats - hits))) AS coverage_weighted_opposite_field_batting_average,\n            SUM(stolen_bases_second + caught_stealing_second) / SUM(stolen_base_opportunities_second) AS stolen_base_attempt_rate_second,\n            SUM(stolen_bases_third + caught_stealing_third) / SUM(stolen_base_opportunities_third) AS stolen_base_attempt_rate_third,\n            SUM(stolen_bases_home + caught_stealing_home) / SUM(stolen_base_opportunities_home) AS stolen_base_attempt_rate_home,\n            SUM(unforced_outs_on_basepaths) / SUM(times_reached_base) AS unforced_out_rate,\n            SUM(strikes) / SUM(pitches) AS pitch_strike_rate,\n            SUM(swings_with_contact) / SUM(pitches) AS pitch_contact_rate,\n            SUM(swings_with_contact + strikes_swinging) / SUM(pitches) AS pitch_swing_rate,\n            SUM(balls) / SUM(pitches) AS pitch_ball_rate,\n            SUM(strikes_swinging) / SUM(pitches) AS pitch_swing_and_miss_rate,\n            SUM(strikes_foul) / SUM(pitches) AS pitch_foul_rate,\n            SUM(strikes_called) / SUM(pitches) AS pitched_called_strike_rate,\n            COUNT_IF(pitches > 0) / SUM(plate_appearances) AS pitch_data_coverage_rate,FROM event\n        \n        WHERE game_id IN (SELECT game_id FROM \"timeball\".\"main_models\".\"game_start_info\" WHERE is_regular_season)\n        \n        GROUP BY team_id, season\n    ),\n\n    final AS (\n        SELECT\n            team_id,\n            season,\n            basic_stats.plate_appearances::INT AS plate_appearances,\n            basic_stats.at_bats::INT AS at_bats,\n            basic_stats.hits::INT AS hits,\n            basic_stats.singles::INT AS singles,\n            basic_stats.doubles::INT AS doubles,\n            basic_stats.triples::INT AS triples,\n            basic_stats.home_runs::INT AS home_runs,\n            basic_stats.total_bases::INT AS total_bases,\n            basic_stats.strikeouts::INT AS strikeouts,\n            basic_stats.walks::INT AS walks,\n            basic_stats.intentional_walks::INT AS intentional_walks,\n            basic_stats.hit_by_pitches::INT AS hit_by_pitches,\n            basic_stats.sacrifice_hits::INT AS sacrifice_hits,\n            basic_stats.sacrifice_flies::INT AS sacrifice_flies,\n            basic_stats.reached_on_errors::INT AS reached_on_errors,\n            basic_stats.reached_on_interferences::INT AS reached_on_interferences,\n            basic_stats.inside_the_park_home_runs::INT AS inside_the_park_home_runs,\n            basic_stats.ground_rule_doubles::INT AS ground_rule_doubles,\n            basic_stats.infield_hits::INT AS infield_hits,\n            basic_stats.on_base_opportunities::INT AS on_base_opportunities,\n            basic_stats.on_base_successes::INT AS on_base_successes,\n            basic_stats.runs_batted_in::INT AS runs_batted_in,\n            basic_stats.grounded_into_double_plays::INT AS grounded_into_double_plays,\n            basic_stats.double_plays::INT AS double_plays,\n            basic_stats.triple_plays::INT AS triple_plays,\n            basic_stats.batting_outs::INT AS batting_outs,\n            basic_stats.balls_in_play::INT AS balls_in_play,\n            basic_stats.balls_batted::INT AS balls_batted,\n            basic_stats.trajectory_fly_ball::INT AS trajectory_fly_ball,\n            basic_stats.trajectory_ground_ball::INT AS trajectory_ground_ball,\n            basic_stats.trajectory_line_drive::INT AS trajectory_line_drive,\n            basic_stats.trajectory_pop_up::INT AS trajectory_pop_up,\n            basic_stats.trajectory_unknown::INT AS trajectory_unknown,\n            basic_stats.trajectory_known::INT AS trajectory_known,\n            basic_stats.trajectory_broad_air_ball::INT AS trajectory_broad_air_ball,\n            basic_stats.trajectory_broad_ground_ball::INT AS trajectory_broad_ground_ball,\n            basic_stats.trajectory_broad_unknown::INT AS trajectory_broad_unknown,\n            basic_stats.trajectory_broad_known::INT AS trajectory_broad_known,\n            basic_stats.bunts::INT AS bunts,\n            basic_stats.batted_distance_plate::INT AS batted_distance_plate,\n            basic_stats.batted_distance_infield::INT AS batted_distance_infield,\n            basic_stats.batted_distance_outfield::INT AS batted_distance_outfield,\n            basic_stats.batted_distance_unknown::INT AS batted_distance_unknown,\n            basic_stats.batted_distance_known::INT AS batted_distance_known,\n            basic_stats.fielded_by_battery::INT AS fielded_by_battery,\n            basic_stats.fielded_by_infielder::INT AS fielded_by_infielder,\n            basic_stats.fielded_by_outfielder::INT AS fielded_by_outfielder,\n            basic_stats.fielded_by_known::INT AS fielded_by_known,\n            basic_stats.fielded_by_unknown::INT AS fielded_by_unknown,\n            basic_stats.batted_angle_left::INT AS batted_angle_left,\n            basic_stats.batted_angle_right::INT AS batted_angle_right,\n            basic_stats.batted_angle_middle::INT AS batted_angle_middle,\n            basic_stats.batted_angle_unknown::INT AS batted_angle_unknown,\n            basic_stats.batted_angle_known::INT AS batted_angle_known,\n            basic_stats.batted_location_plate::INT AS batted_location_plate,\n            basic_stats.batted_location_right_infield::INT AS batted_location_right_infield,\n            basic_stats.batted_location_middle_infield::INT AS batted_location_middle_infield,\n            basic_stats.batted_location_left_infield::INT AS batted_location_left_infield,\n            basic_stats.batted_location_left_field::INT AS batted_location_left_field,\n            basic_stats.batted_location_center_field::INT AS batted_location_center_field,\n            basic_stats.batted_location_right_field::INT AS batted_location_right_field,\n            basic_stats.batted_location_unknown::INT AS batted_location_unknown,\n            basic_stats.batted_location_known::INT AS batted_location_known,\n            basic_stats.batted_balls_pulled::INT AS batted_balls_pulled,\n            basic_stats.batted_balls_opposite_field::INT AS batted_balls_opposite_field,\n            basic_stats.runs::INT AS runs,\n            basic_stats.times_reached_base::INT AS times_reached_base,\n            basic_stats.stolen_bases::INT AS stolen_bases,\n            basic_stats.caught_stealing::INT AS caught_stealing,\n            basic_stats.picked_off::INT AS picked_off,\n            basic_stats.picked_off_caught_stealing::INT AS picked_off_caught_stealing,\n            basic_stats.outs_on_basepaths::INT AS outs_on_basepaths,\n            basic_stats.unforced_outs_on_basepaths::INT AS unforced_outs_on_basepaths,\n            basic_stats.outs_avoided_on_errors::INT AS outs_avoided_on_errors,\n            basic_stats.advances_on_wild_pitches::INT AS advances_on_wild_pitches,\n            basic_stats.advances_on_passed_balls::INT AS advances_on_passed_balls,\n            basic_stats.advances_on_balks::INT AS advances_on_balks,\n            basic_stats.advances_on_unspecified_plays::INT AS advances_on_unspecified_plays,\n            basic_stats.advances_on_defensive_indifference::INT AS advances_on_defensive_indifference,\n            basic_stats.advances_on_errors::INT AS advances_on_errors,\n            basic_stats.plate_appearances_while_on_base::INT AS plate_appearances_while_on_base,\n            basic_stats.balls_in_play_while_running::INT AS balls_in_play_while_running,\n            basic_stats.balls_in_play_while_on_base::INT AS balls_in_play_while_on_base,\n            basic_stats.batter_total_bases_while_running::INT AS batter_total_bases_while_running,\n            basic_stats.batter_total_bases_while_on_base::INT AS batter_total_bases_while_on_base,\n            basic_stats.extra_base_advance_attempts::INT AS extra_base_advance_attempts,\n            basic_stats.bases_advanced::INT AS bases_advanced,\n            basic_stats.bases_advanced_on_balls_in_play::INT AS bases_advanced_on_balls_in_play,\n            basic_stats.surplus_bases_advanced_on_balls_in_play::INT AS surplus_bases_advanced_on_balls_in_play,\n            basic_stats.outs_on_extra_base_advance_attempts::INT AS outs_on_extra_base_advance_attempts,\n            basic_stats.pitches::INT AS pitches,\n            basic_stats.swings::INT AS swings,\n            basic_stats.swings_with_contact::INT AS swings_with_contact,\n            basic_stats.strikes::INT AS strikes,\n            basic_stats.strikes_called::INT AS strikes_called,\n            basic_stats.strikes_swinging::INT AS strikes_swinging,\n            basic_stats.strikes_foul::INT AS strikes_foul,\n            basic_stats.strikes_foul_tip::INT AS strikes_foul_tip,\n            basic_stats.strikes_in_play::INT AS strikes_in_play,\n            basic_stats.strikes_unknown::INT AS strikes_unknown,\n            basic_stats.balls::INT AS balls,\n            basic_stats.balls_called::INT AS balls_called,\n            basic_stats.balls_intentional::INT AS balls_intentional,\n            basic_stats.balls_automatic::INT AS balls_automatic,\n            basic_stats.unknown_pitches::INT AS unknown_pitches,\n            basic_stats.pitchouts::INT AS pitchouts,\n            basic_stats.pitcher_pickoff_attempts::INT AS pitcher_pickoff_attempts,\n            basic_stats.catcher_pickoff_attempts::INT AS catcher_pickoff_attempts,\n            basic_stats.pitches_blocked_by_catcher::INT AS pitches_blocked_by_catcher,\n            basic_stats.pitches_with_runners_going::INT AS pitches_with_runners_going,\n            basic_stats.passed_balls::INT AS passed_balls,\n            basic_stats.wild_pitches::INT AS wild_pitches,\n            basic_stats.balks::INT AS balks,\n            basic_stats.left_on_base::INT AS left_on_base,\n            basic_stats.left_on_base_with_two_outs::INT AS left_on_base_with_two_outs,\n            basic_stats.stolen_bases_second::INT AS stolen_bases_second,\n            basic_stats.stolen_bases_third::INT AS stolen_bases_third,\n            basic_stats.stolen_bases_home::INT AS stolen_bases_home,\n            basic_stats.caught_stealing_second::INT AS caught_stealing_second,\n            basic_stats.caught_stealing_third::INT AS caught_stealing_third,\n            basic_stats.caught_stealing_home::INT AS caught_stealing_home,\n            basic_stats.stolen_base_opportunities::INT AS stolen_base_opportunities,\n            basic_stats.stolen_base_opportunities_second::INT AS stolen_base_opportunities_second,\n            basic_stats.stolen_base_opportunities_third::INT AS stolen_base_opportunities_third,\n            basic_stats.stolen_base_opportunities_home::INT AS stolen_base_opportunities_home,\n            basic_stats.picked_off_first::INT AS picked_off_first,\n            basic_stats.picked_off_second::INT AS picked_off_second,\n            basic_stats.picked_off_third::INT AS picked_off_third,\n            basic_stats.times_force_on_runner::INT AS times_force_on_runner,\n            basic_stats.times_lead_runner::INT AS times_lead_runner,\n            basic_stats.times_next_base_empty::INT AS times_next_base_empty,\n            basic_stats.extra_base_chances::INT AS extra_base_chances,\n            basic_stats.extra_bases_taken::INT AS extra_bases_taken,\n            basic_stats.batting_average,\n            basic_stats.on_base_percentage,\n            basic_stats.slugging_percentage,\n            basic_stats.on_base_plus_slugging,\n            basic_stats.isolated_power,\n            basic_stats.secondary_average,\n            basic_stats.batting_average_on_balls_in_play,\n            basic_stats.home_run_rate,\n            basic_stats.walk_rate,\n            basic_stats.strikeout_rate,\n            basic_stats.stolen_base_percentage,COALESCE(event_agg.games / basic_stats.games, 0) AS event_coverage_rate,\n            event_agg.known_trajectory_rate_outs,\n            event_agg.known_trajectory_rate_hits,\n            event_agg.known_trajectory_rate,\n            event_agg.known_trajectory_broad_rate_outs,\n            event_agg.known_trajectory_broad_rate_hits,\n            event_agg.known_trajectory_broad_rate,\n            event_agg.known_trajectory_out_hit_ratio,\n            event_agg.known_trajectory_broad_out_hit_ratio,\n            event_agg.air_ball_rate_outs,\n            event_agg.ground_ball_rate_outs,\n            event_agg.ground_air_out_ratio,\n            event_agg.air_ball_hit_rate,\n            event_agg.ground_ball_hit_rate,\n            event_agg.ground_air_hit_ratio,\n            event_agg.fly_ball_rate,\n            event_agg.line_drive_rate,\n            event_agg.pop_up_rate,\n            event_agg.ground_ball_rate,\n            event_agg.coverage_weighted_air_ball_batting_average,\n            event_agg.coverage_weighted_ground_ball_batting_average,\n            event_agg.coverage_weighted_fly_ball_batting_average,\n            event_agg.coverage_weighted_line_drive_batting_average,\n            event_agg.coverage_weighted_pop_up_batting_average,\n            event_agg.known_angle_rate_outs,\n            event_agg.known_angle_rate_hits,\n            event_agg.known_angle_rate,\n            event_agg.known_angle_out_hit_ratio,\n            event_agg.angle_left_rate_outs,\n            event_agg.angle_left_rate_hits,\n            event_agg.angle_left_rate,\n            event_agg.coverage_weighted_angle_left_batting_average,\n            event_agg.angle_right_rate_outs,\n            event_agg.angle_right_rate_hits,\n            event_agg.angle_right_rate,\n            event_agg.coverage_weighted_angle_right_batting_average,\n            event_agg.angle_middle_rate_outs,\n            event_agg.angle_middle_rate_hits,\n            event_agg.angle_middle_rate,\n            event_agg.coverage_weighted_angle_middle_batting_average,\n            event_agg.pulled_rate_outs,\n            event_agg.pulled_rate_hits,\n            event_agg.pulled_rate,\n            event_agg.coverage_weighted_pulled_batting_average,\n            event_agg.opposite_field_rate_outs,\n            event_agg.opposite_field_rate_hits,\n            event_agg.opposite_field_rate,\n            event_agg.coverage_weighted_opposite_field_batting_average,\n            event_agg.stolen_base_attempt_rate_second,\n            event_agg.stolen_base_attempt_rate_third,\n            event_agg.stolen_base_attempt_rate_home,\n            event_agg.unforced_out_rate,\n            event_agg.pitch_strike_rate,\n            event_agg.pitch_contact_rate,\n            event_agg.pitch_swing_rate,\n            event_agg.pitch_ball_rate,\n            event_agg.pitch_swing_and_miss_rate,\n            event_agg.pitch_foul_rate,\n            event_agg.pitched_called_strike_rate,\n            event_agg.pitch_data_coverage_rate,FROM basic_stats\n        LEFT JOIN event_agg USING (team_id, season)\n    )\n    \n    SELECT * FROM final\n", "relation_name": "\"timeball\".\"main_models\".\"metrics_team_season_offense\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:56.569503Z", "completed_at": "2023-12-09T18:55:56.842263Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:56.842977Z", "completed_at": "2023-12-09T18:55:56.842982Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.3067290782928467, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.timeball.metrics_player_career_pitching", "compiled": true, "compiled_code": "-- Add extra context columns to get potential grouiping keys\n    WITH season AS (SELECT \n            s.*,\n                f.franchise_id,\n                f.league,\n                f.division,\n                f.location,\n                f.nickname,\n                f.alternative_nicknames,\n                f.date_start,\n                f.date_end,\n                f.city,\n                f.state,\n        FROM \"timeball\".\"main_models\".\"player_team_season_pitching_stats\" AS s\n        LEFT JOIN \"timeball\".\"main_seeds\".\"seed_franchises\" AS f\n            ON s.team_id = f.team_id\n            AND s.season BETWEEN EXTRACT(YEAR FROM f.date_start) AND COALESCE(EXTRACT(YEAR FROM f.date_end), 9999)\n    ),\n    event AS (SELECT \n            e.*,\n                g.opponent_id,\n                g.league,\n                g.opponent_league,\n                g.division,\n                g.opponent_division,\n                g.team_name,\n                g.opponent_name,\n                g.starting_pitcher_id,\n                g.opponent_starting_pitcher_id,\n                g.team_side,\n                g.date,\n                g.start_time,\n                g.season,\n                g.doubleheader_status,\n                g.time_of_day,\n                g.game_type,\n                g.bat_first_side,\n                g.sky,\n                g.field_condition,\n                g.precipitation,\n                g.wind_direction,\n                g.park_id,\n                g.temperature_fahrenheit,\n                g.attendance,\n                g.wind_speed_mph,\n                g.use_dh,\n                g.scorer,\n                g.scoring_method,\n                g.source_type,\n                g.umpire_home_id,\n                g.umpire_first_id,\n                g.umpire_second_id,\n                g.umpire_third_id,\n                g.umpire_left_id,\n                g.umpire_right_id,\n                g.filename,\n                g.is_regular_season,\n                g.is_postseason,\n                g.is_integrated,\n                g.is_negro_leagues,\n                g.is_segregated_white,\n                g.away_franchise_id,\n                g.home_franchise_id,\n                g.is_interleague,\n                g.lineup_map_away,\n                g.lineup_map_home,\n                g.fielding_map_away,\n                g.fielding_map_home,\n                g.series_id,\n                g.season_game_number,\n                g.series_game_number,\n                g.days_since_last_game,\n        FROM \"timeball\".\"main_models\".\"event_pitching_stats\" AS e\n        LEFT JOIN \"timeball\".\"main_models\".\"team_game_start_info\" AS g USING (team_id, game_id)\n    ),\n    -- Need to use the season table for basic stats/metrics to ensure full coverage...\n    basic_stats AS (\n        SELECT\n            player_id,\n            SUM(games) AS games,\n            SUM(batters_faced) AS batters_faced,\n            SUM(outs_recorded) AS outs_recorded,\n            SUM(inherited_runners_scored) AS inherited_runners_scored,\n            SUM(bequeathed_runners_scored) AS bequeathed_runners_scored,\n            SUM(team_unearned_runs) AS team_unearned_runs,\n            SUM(plate_appearances) AS plate_appearances,\n            SUM(at_bats) AS at_bats,\n            SUM(hits) AS hits,\n            SUM(singles) AS singles,\n            SUM(doubles) AS doubles,\n            SUM(triples) AS triples,\n            SUM(home_runs) AS home_runs,\n            SUM(total_bases) AS total_bases,\n            SUM(strikeouts) AS strikeouts,\n            SUM(walks) AS walks,\n            SUM(intentional_walks) AS intentional_walks,\n            SUM(hit_by_pitches) AS hit_by_pitches,\n            SUM(sacrifice_hits) AS sacrifice_hits,\n            SUM(sacrifice_flies) AS sacrifice_flies,\n            SUM(reached_on_errors) AS reached_on_errors,\n            SUM(reached_on_interferences) AS reached_on_interferences,\n            SUM(inside_the_park_home_runs) AS inside_the_park_home_runs,\n            SUM(ground_rule_doubles) AS ground_rule_doubles,\n            SUM(infield_hits) AS infield_hits,\n            SUM(on_base_opportunities) AS on_base_opportunities,\n            SUM(on_base_successes) AS on_base_successes,\n            SUM(grounded_into_double_plays) AS grounded_into_double_plays,\n            SUM(double_plays) AS double_plays,\n            SUM(triple_plays) AS triple_plays,\n            SUM(batting_outs) AS batting_outs,\n            SUM(balls_in_play) AS balls_in_play,\n            SUM(balls_batted) AS balls_batted,\n            SUM(trajectory_fly_ball) AS trajectory_fly_ball,\n            SUM(trajectory_ground_ball) AS trajectory_ground_ball,\n            SUM(trajectory_line_drive) AS trajectory_line_drive,\n            SUM(trajectory_pop_up) AS trajectory_pop_up,\n            SUM(trajectory_unknown) AS trajectory_unknown,\n            SUM(trajectory_known) AS trajectory_known,\n            SUM(trajectory_broad_air_ball) AS trajectory_broad_air_ball,\n            SUM(trajectory_broad_ground_ball) AS trajectory_broad_ground_ball,\n            SUM(trajectory_broad_unknown) AS trajectory_broad_unknown,\n            SUM(trajectory_broad_known) AS trajectory_broad_known,\n            SUM(bunts) AS bunts,\n            SUM(batted_distance_plate) AS batted_distance_plate,\n            SUM(batted_distance_infield) AS batted_distance_infield,\n            SUM(batted_distance_outfield) AS batted_distance_outfield,\n            SUM(batted_distance_unknown) AS batted_distance_unknown,\n            SUM(batted_distance_known) AS batted_distance_known,\n            SUM(fielded_by_battery) AS fielded_by_battery,\n            SUM(fielded_by_infielder) AS fielded_by_infielder,\n            SUM(fielded_by_outfielder) AS fielded_by_outfielder,\n            SUM(fielded_by_known) AS fielded_by_known,\n            SUM(fielded_by_unknown) AS fielded_by_unknown,\n            SUM(batted_angle_left) AS batted_angle_left,\n            SUM(batted_angle_right) AS batted_angle_right,\n            SUM(batted_angle_middle) AS batted_angle_middle,\n            SUM(batted_angle_unknown) AS batted_angle_unknown,\n            SUM(batted_angle_known) AS batted_angle_known,\n            SUM(batted_location_plate) AS batted_location_plate,\n            SUM(batted_location_right_infield) AS batted_location_right_infield,\n            SUM(batted_location_middle_infield) AS batted_location_middle_infield,\n            SUM(batted_location_left_infield) AS batted_location_left_infield,\n            SUM(batted_location_left_field) AS batted_location_left_field,\n            SUM(batted_location_center_field) AS batted_location_center_field,\n            SUM(batted_location_right_field) AS batted_location_right_field,\n            SUM(batted_location_unknown) AS batted_location_unknown,\n            SUM(batted_location_known) AS batted_location_known,\n            SUM(batted_balls_pulled) AS batted_balls_pulled,\n            SUM(batted_balls_opposite_field) AS batted_balls_opposite_field,\n            SUM(runs) AS runs,\n            SUM(times_reached_base) AS times_reached_base,\n            SUM(stolen_base_opportunities) AS stolen_base_opportunities,\n            SUM(stolen_base_opportunities_second) AS stolen_base_opportunities_second,\n            SUM(stolen_base_opportunities_third) AS stolen_base_opportunities_third,\n            SUM(stolen_base_opportunities_home) AS stolen_base_opportunities_home,\n            SUM(stolen_bases) AS stolen_bases,\n            SUM(stolen_bases_second) AS stolen_bases_second,\n            SUM(stolen_bases_third) AS stolen_bases_third,\n            SUM(stolen_bases_home) AS stolen_bases_home,\n            SUM(caught_stealing) AS caught_stealing,\n            SUM(caught_stealing_second) AS caught_stealing_second,\n            SUM(caught_stealing_third) AS caught_stealing_third,\n            SUM(caught_stealing_home) AS caught_stealing_home,\n            SUM(picked_off) AS picked_off,\n            SUM(picked_off_first) AS picked_off_first,\n            SUM(picked_off_second) AS picked_off_second,\n            SUM(picked_off_third) AS picked_off_third,\n            SUM(picked_off_caught_stealing) AS picked_off_caught_stealing,\n            SUM(outs_on_basepaths) AS outs_on_basepaths,\n            SUM(unforced_outs_on_basepaths) AS unforced_outs_on_basepaths,\n            SUM(outs_avoided_on_errors) AS outs_avoided_on_errors,\n            SUM(advances_on_wild_pitches) AS advances_on_wild_pitches,\n            SUM(advances_on_passed_balls) AS advances_on_passed_balls,\n            SUM(advances_on_balks) AS advances_on_balks,\n            SUM(advances_on_unspecified_plays) AS advances_on_unspecified_plays,\n            SUM(advances_on_defensive_indifference) AS advances_on_defensive_indifference,\n            SUM(advances_on_errors) AS advances_on_errors,\n            SUM(extra_base_chances) AS extra_base_chances,\n            SUM(extra_base_advance_attempts) AS extra_base_advance_attempts,\n            SUM(extra_bases_taken) AS extra_bases_taken,\n            SUM(bases_advanced) AS bases_advanced,\n            SUM(bases_advanced_on_balls_in_play) AS bases_advanced_on_balls_in_play,\n            SUM(surplus_bases_advanced_on_balls_in_play) AS surplus_bases_advanced_on_balls_in_play,\n            SUM(outs_on_extra_base_advance_attempts) AS outs_on_extra_base_advance_attempts,\n            SUM(pitches) AS pitches,\n            SUM(swings) AS swings,\n            SUM(swings_with_contact) AS swings_with_contact,\n            SUM(strikes) AS strikes,\n            SUM(strikes_called) AS strikes_called,\n            SUM(strikes_swinging) AS strikes_swinging,\n            SUM(strikes_foul) AS strikes_foul,\n            SUM(strikes_foul_tip) AS strikes_foul_tip,\n            SUM(strikes_in_play) AS strikes_in_play,\n            SUM(strikes_unknown) AS strikes_unknown,\n            SUM(balls) AS balls,\n            SUM(balls_called) AS balls_called,\n            SUM(balls_intentional) AS balls_intentional,\n            SUM(balls_automatic) AS balls_automatic,\n            SUM(unknown_pitches) AS unknown_pitches,\n            SUM(pitchouts) AS pitchouts,\n            SUM(pitcher_pickoff_attempts) AS pitcher_pickoff_attempts,\n            SUM(catcher_pickoff_attempts) AS catcher_pickoff_attempts,\n            SUM(pitches_blocked_by_catcher) AS pitches_blocked_by_catcher,\n            SUM(pitches_with_runners_going) AS pitches_with_runners_going,\n            SUM(passed_balls) AS passed_balls,\n            SUM(wild_pitches) AS wild_pitches,\n            SUM(balks) AS balks,\n            SUM(left_on_base) AS left_on_base,\n            SUM(left_on_base_with_two_outs) AS left_on_base_with_two_outs,\n            SUM(earned_runs) * 9 / SUM(outs_recorded * 3) AS earned_run_average,\n            SUM(runs) * 9 / SUM(outs_recorded * 3) AS run_average,\n            SUM(walks) * 9 / SUM(outs_recorded * 3) AS walks_per_9_innings,\n            SUM(strikeouts) * 9 / SUM(outs_recorded * 3) AS strikeouts_per_9_innings,\n            SUM(home_runs) * 9 / SUM(outs_recorded * 3) AS home_runs_per_9_innings,\n            SUM(hits) * 9 / SUM(outs_recorded * 3) AS hits_per_9_innings,\n            (SUM(walks) + SUM(hits)) / SUM(outs_recorded * 3) AS walks_and_hits_per_innings_pitched,\n            SUM(strikeouts) / SUM(walks) AS strikeout_to_walk_ratio,\n            SUM(walks) / SUM(batters_faced) AS walk_rate,\n            SUM(strikeouts) / SUM(batters_faced) AS strikeout_rate,\n            SUM(home_runs) / SUM(batters_faced) AS home_run_rate,\n            SUM(hits) / SUM(at_bats) AS batting_average_against,\n            SUM(on_base_successes) / SUM(on_base_opportunities) AS on_base_percentage_against,\n            SUM(total_bases) / SUM(at_bats) AS slugging_percentage_against,\n            SUM(on_base_successes) / SUM(on_base_opportunities) + SUM(total_bases) / SUM(at_bats) AS on_base_plus_slugging_against,\n            SUM(hits - home_runs) / (SUM(at_bats) - SUM(home_runs) - SUM(strikeouts) + SUM(COALESCE(sacrifice_flies, 0))) AS batting_average_on_balls_in_play,FROM season\n        \n        WHERE game_type IN (SELECT game_type FROM \"timeball\".\"main_seeds\".\"seed_game_types\" WHERE is_regular_season)\n        \n        GROUP BY player_id\n    ),\n\n    --- ...but we need to use the event table for event-based metrics,\n    event_agg AS (\n        SELECT\n            player_id,\n            COUNT(DISTINCT game_id) AS games,\n            SUM(trajectory_known * balls_batted * (at_bats - hits)) / SUM(balls_batted * (at_bats - hits)) AS known_trajectory_rate_outs,\n            SUM(trajectory_known * balls_batted * hits) / SUM(balls_batted * hits) AS known_trajectory_rate_hits,\n            SUM(trajectory_known * balls_batted) / SUM(balls_batted) AS known_trajectory_rate,\n            SUM(trajectory_broad_known * balls_batted * (at_bats - hits)) / SUM(balls_batted * (at_bats - hits)) AS known_trajectory_broad_rate_outs,\n            SUM(trajectory_broad_known * balls_batted * hits) / SUM(balls_batted * hits) AS known_trajectory_broad_rate_hits,\n            SUM(trajectory_broad_known * balls_batted) / SUM(balls_batted) AS known_trajectory_broad_rate,\n            known_trajectory_rate_outs / known_trajectory_rate_hits AS known_trajectory_out_hit_ratio,\n            known_trajectory_broad_rate_outs / known_trajectory_broad_rate_hits AS known_trajectory_broad_out_hit_ratio,\n            SUM(trajectory_broad_air_ball * (at_bats - hits)) / SUM(trajectory_broad_known * (at_bats - hits)) AS air_ball_rate_outs,\n            SUM(trajectory_broad_ground_ball * (at_bats - hits)) / SUM(trajectory_broad_known * (at_bats - hits)) AS ground_ball_rate_outs,\n            ground_ball_rate_outs / air_ball_rate_outs AS ground_air_out_ratio,\n            SUM(trajectory_broad_air_ball * hits) / SUM(trajectory_broad_known * hits) AS air_ball_hit_rate,\n            SUM(trajectory_broad_ground_ball * hits) / SUM(trajectory_broad_known * hits) AS ground_ball_hit_rate,\n            ground_ball_hit_rate / air_ball_hit_rate AS ground_air_hit_ratio,\n            SUM(trajectory_fly_ball) / SUM(trajectory_known) AS fly_ball_rate,\n            SUM(trajectory_line_drive) / SUM(trajectory_known) AS line_drive_rate,\n            SUM(trajectory_pop_up) / SUM(trajectory_known) AS pop_up_rate,\n            SUM(trajectory_ground_ball) / SUM(trajectory_broad_known) AS ground_ball_rate,\n            SUM(trajectory_broad_air_ball * hits) * known_trajectory_broad_out_hit_ratio / (SUM(trajectory_broad_air_ball * hits) * known_trajectory_broad_out_hit_ratio + SUM(trajectory_broad_air_ball * (at_bats - hits))) AS coverage_weighted_air_ball_batting_average,\n            SUM(trajectory_ground_ball * hits) * known_trajectory_broad_out_hit_ratio / (SUM(trajectory_ground_ball * hits) * known_trajectory_broad_out_hit_ratio + SUM(trajectory_ground_ball * (at_bats - hits))) AS coverage_weighted_ground_ball_batting_average,\n            SUM(trajectory_fly_ball * hits) * known_trajectory_out_hit_ratio / (SUM(trajectory_fly_ball * hits) * known_trajectory_out_hit_ratio + SUM(trajectory_fly_ball * (at_bats - hits))) AS coverage_weighted_fly_ball_batting_average,\n            SUM(trajectory_line_drive * hits) * known_trajectory_out_hit_ratio / (SUM(trajectory_line_drive * hits) * known_trajectory_out_hit_ratio + SUM(trajectory_line_drive * (at_bats - hits))) AS coverage_weighted_line_drive_batting_average,\n            SUM(trajectory_pop_up * hits) * known_trajectory_out_hit_ratio / (SUM(trajectory_pop_up * hits) * known_trajectory_out_hit_ratio + SUM(trajectory_pop_up * (at_bats - hits))) AS coverage_weighted_pop_up_batting_average,\n            SUM(batted_angle_known * (at_bats - hits)) / SUM(balls_batted * (at_bats - hits)) AS known_angle_rate_outs,\n            SUM(batted_angle_known * hits) / SUM(hits) AS known_angle_rate_hits,\n            SUM(batted_angle_known) / SUM(balls_batted) AS known_angle_rate,\n            known_angle_rate_outs / known_angle_rate_hits AS known_angle_out_hit_ratio,\n            SUM(batted_angle_left * (at_bats - hits)) / SUM(batted_angle_known * (at_bats - hits)) AS angle_left_rate_outs,\n            SUM(batted_angle_left * hits) / SUM(batted_angle_known * hits) AS angle_left_rate_hits,\n            SUM(batted_angle_left) / SUM(batted_angle_known) AS angle_left_rate,\n            SUM(batted_angle_left * hits) * known_angle_out_hit_ratio / (SUM(batted_angle_left * hits) * known_angle_out_hit_ratio + SUM(batted_angle_left * (at_bats - hits))) AS coverage_weighted_angle_left_batting_average,\n            SUM(batted_angle_right * (at_bats - hits)) / SUM(batted_angle_known * (at_bats - hits)) AS angle_right_rate_outs,\n            SUM(batted_angle_right * hits) / SUM(batted_angle_known * hits) AS angle_right_rate_hits,\n            SUM(batted_angle_right) / SUM(batted_angle_known) AS angle_right_rate,\n            SUM(batted_angle_right * hits) * known_angle_out_hit_ratio / (SUM(batted_angle_right * hits) * known_angle_out_hit_ratio + SUM(batted_angle_right * (at_bats - hits))) AS coverage_weighted_angle_right_batting_average,\n            SUM(batted_angle_middle * (at_bats - hits)) / SUM(batted_angle_known * (at_bats - hits)) AS angle_middle_rate_outs,\n            SUM(batted_angle_middle * hits) / SUM(batted_angle_known * hits) AS angle_middle_rate_hits,\n            SUM(batted_angle_middle) / SUM(batted_angle_known) AS angle_middle_rate,\n            SUM(batted_angle_middle * hits) * known_angle_out_hit_ratio / (SUM(batted_angle_middle * hits) * known_angle_out_hit_ratio + SUM(batted_angle_middle * (at_bats - hits))) AS coverage_weighted_angle_middle_batting_average,\n            SUM(batted_balls_pulled * (at_bats - hits)) / SUM(batted_angle_known * (at_bats - hits)) AS pulled_rate_outs,\n            SUM(batted_balls_pulled * hits) / SUM(batted_angle_known * hits) AS pulled_rate_hits,\n            SUM(batted_balls_pulled) / SUM(batted_angle_known) AS pulled_rate,\n            SUM(batted_balls_pulled * hits) * known_angle_out_hit_ratio / (SUM(batted_balls_pulled * hits) * known_angle_out_hit_ratio + SUM(batted_balls_pulled * (at_bats - hits))) AS coverage_weighted_pulled_batting_average,\n            SUM(batted_balls_opposite_field * (at_bats - hits)) / SUM(batted_angle_known * (at_bats - hits)) AS opposite_field_rate_outs,\n            SUM(batted_balls_opposite_field * hits) / SUM(batted_angle_known * hits) AS opposite_field_rate_hits,\n            SUM(batted_balls_opposite_field) / SUM(batted_angle_known) AS opposite_field_rate,\n            SUM(batted_balls_opposite_field * hits) * known_angle_out_hit_ratio / (SUM(batted_balls_opposite_field * hits) * known_angle_out_hit_ratio + SUM(batted_balls_opposite_field * (at_bats - hits))) AS coverage_weighted_opposite_field_batting_average,\n            SUM(stolen_bases_second + caught_stealing_second) / SUM(stolen_base_opportunities_second) AS stolen_base_attempt_rate_second,\n            SUM(stolen_bases_third + caught_stealing_third) / SUM(stolen_base_opportunities_third) AS stolen_base_attempt_rate_third,\n            SUM(stolen_bases_home + caught_stealing_home) / SUM(stolen_base_opportunities_home) AS stolen_base_attempt_rate_home,\n            SUM(unforced_outs_on_basepaths) / SUM(times_reached_base) AS unforced_out_rate,\n            SUM(strikes) / SUM(pitches) AS pitch_strike_rate,\n            SUM(swings_with_contact) / SUM(pitches) AS pitch_contact_rate,\n            SUM(swings_with_contact + strikes_swinging) / SUM(pitches) AS pitch_swing_rate,\n            SUM(balls) / SUM(pitches) AS pitch_ball_rate,\n            SUM(strikes_swinging) / SUM(pitches) AS pitch_swing_and_miss_rate,\n            SUM(strikes_foul) / SUM(pitches) AS pitch_foul_rate,\n            SUM(strikes_called) / SUM(pitches) AS pitched_called_strike_rate,\n            COUNT_IF(pitches > 0) / SUM(plate_appearances) AS pitch_data_coverage_rate,FROM event\n        \n        WHERE game_id IN (SELECT game_id FROM \"timeball\".\"main_models\".\"game_start_info\" WHERE is_regular_season)\n        \n        GROUP BY player_id\n    ),\n\n    final AS (\n        SELECT\n            player_id,\n            basic_stats.batters_faced::INT AS batters_faced,\n            basic_stats.outs_recorded::INT AS outs_recorded,\n            basic_stats.inherited_runners_scored::INT AS inherited_runners_scored,\n            basic_stats.bequeathed_runners_scored::INT AS bequeathed_runners_scored,\n            basic_stats.team_unearned_runs::INT AS team_unearned_runs,\n            basic_stats.plate_appearances::INT AS plate_appearances,\n            basic_stats.at_bats::INT AS at_bats,\n            basic_stats.hits::INT AS hits,\n            basic_stats.singles::INT AS singles,\n            basic_stats.doubles::INT AS doubles,\n            basic_stats.triples::INT AS triples,\n            basic_stats.home_runs::INT AS home_runs,\n            basic_stats.total_bases::INT AS total_bases,\n            basic_stats.strikeouts::INT AS strikeouts,\n            basic_stats.walks::INT AS walks,\n            basic_stats.intentional_walks::INT AS intentional_walks,\n            basic_stats.hit_by_pitches::INT AS hit_by_pitches,\n            basic_stats.sacrifice_hits::INT AS sacrifice_hits,\n            basic_stats.sacrifice_flies::INT AS sacrifice_flies,\n            basic_stats.reached_on_errors::INT AS reached_on_errors,\n            basic_stats.reached_on_interferences::INT AS reached_on_interferences,\n            basic_stats.inside_the_park_home_runs::INT AS inside_the_park_home_runs,\n            basic_stats.ground_rule_doubles::INT AS ground_rule_doubles,\n            basic_stats.infield_hits::INT AS infield_hits,\n            basic_stats.on_base_opportunities::INT AS on_base_opportunities,\n            basic_stats.on_base_successes::INT AS on_base_successes,\n            basic_stats.grounded_into_double_plays::INT AS grounded_into_double_plays,\n            basic_stats.double_plays::INT AS double_plays,\n            basic_stats.triple_plays::INT AS triple_plays,\n            basic_stats.batting_outs::INT AS batting_outs,\n            basic_stats.balls_in_play::INT AS balls_in_play,\n            basic_stats.balls_batted::INT AS balls_batted,\n            basic_stats.trajectory_fly_ball::INT AS trajectory_fly_ball,\n            basic_stats.trajectory_ground_ball::INT AS trajectory_ground_ball,\n            basic_stats.trajectory_line_drive::INT AS trajectory_line_drive,\n            basic_stats.trajectory_pop_up::INT AS trajectory_pop_up,\n            basic_stats.trajectory_unknown::INT AS trajectory_unknown,\n            basic_stats.trajectory_known::INT AS trajectory_known,\n            basic_stats.trajectory_broad_air_ball::INT AS trajectory_broad_air_ball,\n            basic_stats.trajectory_broad_ground_ball::INT AS trajectory_broad_ground_ball,\n            basic_stats.trajectory_broad_unknown::INT AS trajectory_broad_unknown,\n            basic_stats.trajectory_broad_known::INT AS trajectory_broad_known,\n            basic_stats.bunts::INT AS bunts,\n            basic_stats.batted_distance_plate::INT AS batted_distance_plate,\n            basic_stats.batted_distance_infield::INT AS batted_distance_infield,\n            basic_stats.batted_distance_outfield::INT AS batted_distance_outfield,\n            basic_stats.batted_distance_unknown::INT AS batted_distance_unknown,\n            basic_stats.batted_distance_known::INT AS batted_distance_known,\n            basic_stats.fielded_by_battery::INT AS fielded_by_battery,\n            basic_stats.fielded_by_infielder::INT AS fielded_by_infielder,\n            basic_stats.fielded_by_outfielder::INT AS fielded_by_outfielder,\n            basic_stats.fielded_by_known::INT AS fielded_by_known,\n            basic_stats.fielded_by_unknown::INT AS fielded_by_unknown,\n            basic_stats.batted_angle_left::INT AS batted_angle_left,\n            basic_stats.batted_angle_right::INT AS batted_angle_right,\n            basic_stats.batted_angle_middle::INT AS batted_angle_middle,\n            basic_stats.batted_angle_unknown::INT AS batted_angle_unknown,\n            basic_stats.batted_angle_known::INT AS batted_angle_known,\n            basic_stats.batted_location_plate::INT AS batted_location_plate,\n            basic_stats.batted_location_right_infield::INT AS batted_location_right_infield,\n            basic_stats.batted_location_middle_infield::INT AS batted_location_middle_infield,\n            basic_stats.batted_location_left_infield::INT AS batted_location_left_infield,\n            basic_stats.batted_location_left_field::INT AS batted_location_left_field,\n            basic_stats.batted_location_center_field::INT AS batted_location_center_field,\n            basic_stats.batted_location_right_field::INT AS batted_location_right_field,\n            basic_stats.batted_location_unknown::INT AS batted_location_unknown,\n            basic_stats.batted_location_known::INT AS batted_location_known,\n            basic_stats.batted_balls_pulled::INT AS batted_balls_pulled,\n            basic_stats.batted_balls_opposite_field::INT AS batted_balls_opposite_field,\n            basic_stats.runs::INT AS runs,\n            basic_stats.times_reached_base::INT AS times_reached_base,\n            basic_stats.stolen_base_opportunities::INT AS stolen_base_opportunities,\n            basic_stats.stolen_base_opportunities_second::INT AS stolen_base_opportunities_second,\n            basic_stats.stolen_base_opportunities_third::INT AS stolen_base_opportunities_third,\n            basic_stats.stolen_base_opportunities_home::INT AS stolen_base_opportunities_home,\n            basic_stats.stolen_bases::INT AS stolen_bases,\n            basic_stats.stolen_bases_second::INT AS stolen_bases_second,\n            basic_stats.stolen_bases_third::INT AS stolen_bases_third,\n            basic_stats.stolen_bases_home::INT AS stolen_bases_home,\n            basic_stats.caught_stealing::INT AS caught_stealing,\n            basic_stats.caught_stealing_second::INT AS caught_stealing_second,\n            basic_stats.caught_stealing_third::INT AS caught_stealing_third,\n            basic_stats.caught_stealing_home::INT AS caught_stealing_home,\n            basic_stats.picked_off::INT AS picked_off,\n            basic_stats.picked_off_first::INT AS picked_off_first,\n            basic_stats.picked_off_second::INT AS picked_off_second,\n            basic_stats.picked_off_third::INT AS picked_off_third,\n            basic_stats.picked_off_caught_stealing::INT AS picked_off_caught_stealing,\n            basic_stats.outs_on_basepaths::INT AS outs_on_basepaths,\n            basic_stats.unforced_outs_on_basepaths::INT AS unforced_outs_on_basepaths,\n            basic_stats.outs_avoided_on_errors::INT AS outs_avoided_on_errors,\n            basic_stats.advances_on_wild_pitches::INT AS advances_on_wild_pitches,\n            basic_stats.advances_on_passed_balls::INT AS advances_on_passed_balls,\n            basic_stats.advances_on_balks::INT AS advances_on_balks,\n            basic_stats.advances_on_unspecified_plays::INT AS advances_on_unspecified_plays,\n            basic_stats.advances_on_defensive_indifference::INT AS advances_on_defensive_indifference,\n            basic_stats.advances_on_errors::INT AS advances_on_errors,\n            basic_stats.extra_base_chances::INT AS extra_base_chances,\n            basic_stats.extra_base_advance_attempts::INT AS extra_base_advance_attempts,\n            basic_stats.extra_bases_taken::INT AS extra_bases_taken,\n            basic_stats.bases_advanced::INT AS bases_advanced,\n            basic_stats.bases_advanced_on_balls_in_play::INT AS bases_advanced_on_balls_in_play,\n            basic_stats.surplus_bases_advanced_on_balls_in_play::INT AS surplus_bases_advanced_on_balls_in_play,\n            basic_stats.outs_on_extra_base_advance_attempts::INT AS outs_on_extra_base_advance_attempts,\n            basic_stats.pitches::INT AS pitches,\n            basic_stats.swings::INT AS swings,\n            basic_stats.swings_with_contact::INT AS swings_with_contact,\n            basic_stats.strikes::INT AS strikes,\n            basic_stats.strikes_called::INT AS strikes_called,\n            basic_stats.strikes_swinging::INT AS strikes_swinging,\n            basic_stats.strikes_foul::INT AS strikes_foul,\n            basic_stats.strikes_foul_tip::INT AS strikes_foul_tip,\n            basic_stats.strikes_in_play::INT AS strikes_in_play,\n            basic_stats.strikes_unknown::INT AS strikes_unknown,\n            basic_stats.balls::INT AS balls,\n            basic_stats.balls_called::INT AS balls_called,\n            basic_stats.balls_intentional::INT AS balls_intentional,\n            basic_stats.balls_automatic::INT AS balls_automatic,\n            basic_stats.unknown_pitches::INT AS unknown_pitches,\n            basic_stats.pitchouts::INT AS pitchouts,\n            basic_stats.pitcher_pickoff_attempts::INT AS pitcher_pickoff_attempts,\n            basic_stats.catcher_pickoff_attempts::INT AS catcher_pickoff_attempts,\n            basic_stats.pitches_blocked_by_catcher::INT AS pitches_blocked_by_catcher,\n            basic_stats.pitches_with_runners_going::INT AS pitches_with_runners_going,\n            basic_stats.passed_balls::INT AS passed_balls,\n            basic_stats.wild_pitches::INT AS wild_pitches,\n            basic_stats.balks::INT AS balks,\n            basic_stats.left_on_base::INT AS left_on_base,\n            basic_stats.left_on_base_with_two_outs::INT AS left_on_base_with_two_outs,\n            basic_stats.earned_run_average,\n            basic_stats.run_average,\n            basic_stats.walks_per_9_innings,\n            basic_stats.strikeouts_per_9_innings,\n            basic_stats.home_runs_per_9_innings,\n            basic_stats.hits_per_9_innings,\n            basic_stats.walks_and_hits_per_innings_pitched,\n            basic_stats.strikeout_to_walk_ratio,\n            basic_stats.walk_rate,\n            basic_stats.strikeout_rate,\n            basic_stats.home_run_rate,\n            basic_stats.batting_average_against,\n            basic_stats.on_base_percentage_against,\n            basic_stats.slugging_percentage_against,\n            basic_stats.on_base_plus_slugging_against,\n            basic_stats.batting_average_on_balls_in_play,COALESCE(event_agg.games / basic_stats.games, 0) AS event_coverage_rate,\n            event_agg.known_trajectory_rate_outs,\n            event_agg.known_trajectory_rate_hits,\n            event_agg.known_trajectory_rate,\n            event_agg.known_trajectory_broad_rate_outs,\n            event_agg.known_trajectory_broad_rate_hits,\n            event_agg.known_trajectory_broad_rate,\n            event_agg.known_trajectory_out_hit_ratio,\n            event_agg.known_trajectory_broad_out_hit_ratio,\n            event_agg.air_ball_rate_outs,\n            event_agg.ground_ball_rate_outs,\n            event_agg.ground_air_out_ratio,\n            event_agg.air_ball_hit_rate,\n            event_agg.ground_ball_hit_rate,\n            event_agg.ground_air_hit_ratio,\n            event_agg.fly_ball_rate,\n            event_agg.line_drive_rate,\n            event_agg.pop_up_rate,\n            event_agg.ground_ball_rate,\n            event_agg.coverage_weighted_air_ball_batting_average,\n            event_agg.coverage_weighted_ground_ball_batting_average,\n            event_agg.coverage_weighted_fly_ball_batting_average,\n            event_agg.coverage_weighted_line_drive_batting_average,\n            event_agg.coverage_weighted_pop_up_batting_average,\n            event_agg.known_angle_rate_outs,\n            event_agg.known_angle_rate_hits,\n            event_agg.known_angle_rate,\n            event_agg.known_angle_out_hit_ratio,\n            event_agg.angle_left_rate_outs,\n            event_agg.angle_left_rate_hits,\n            event_agg.angle_left_rate,\n            event_agg.coverage_weighted_angle_left_batting_average,\n            event_agg.angle_right_rate_outs,\n            event_agg.angle_right_rate_hits,\n            event_agg.angle_right_rate,\n            event_agg.coverage_weighted_angle_right_batting_average,\n            event_agg.angle_middle_rate_outs,\n            event_agg.angle_middle_rate_hits,\n            event_agg.angle_middle_rate,\n            event_agg.coverage_weighted_angle_middle_batting_average,\n            event_agg.pulled_rate_outs,\n            event_agg.pulled_rate_hits,\n            event_agg.pulled_rate,\n            event_agg.coverage_weighted_pulled_batting_average,\n            event_agg.opposite_field_rate_outs,\n            event_agg.opposite_field_rate_hits,\n            event_agg.opposite_field_rate,\n            event_agg.coverage_weighted_opposite_field_batting_average,\n            event_agg.stolen_base_attempt_rate_second,\n            event_agg.stolen_base_attempt_rate_third,\n            event_agg.stolen_base_attempt_rate_home,\n            event_agg.unforced_out_rate,\n            event_agg.pitch_strike_rate,\n            event_agg.pitch_contact_rate,\n            event_agg.pitch_swing_rate,\n            event_agg.pitch_ball_rate,\n            event_agg.pitch_swing_and_miss_rate,\n            event_agg.pitch_foul_rate,\n            event_agg.pitched_called_strike_rate,\n            event_agg.pitch_data_coverage_rate,FROM basic_stats\n        LEFT JOIN event_agg USING (player_id)\n    )\n    \n    SELECT * FROM final\n", "relation_name": "\"timeball\".\"main_models\".\"metrics_player_career_pitching\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:56.877112Z", "completed_at": "2023-12-09T18:55:57.146826Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:57.147543Z", "completed_at": "2023-12-09T18:55:57.147549Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.30749082565307617, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.timeball.metrics_player_season_league_pitching", "compiled": true, "compiled_code": "-- Add extra context columns to get potential grouiping keys\n    WITH season AS (SELECT \n            s.*,\n                f.franchise_id,\n                f.league,\n                f.division,\n                f.location,\n                f.nickname,\n                f.alternative_nicknames,\n                f.date_start,\n                f.date_end,\n                f.city,\n                f.state,\n        FROM \"timeball\".\"main_models\".\"player_team_season_pitching_stats\" AS s\n        LEFT JOIN \"timeball\".\"main_seeds\".\"seed_franchises\" AS f\n            ON s.team_id = f.team_id\n            AND s.season BETWEEN EXTRACT(YEAR FROM f.date_start) AND COALESCE(EXTRACT(YEAR FROM f.date_end), 9999)\n    ),\n    event AS (SELECT \n            e.*,\n                g.opponent_id,\n                g.league,\n                g.opponent_league,\n                g.division,\n                g.opponent_division,\n                g.team_name,\n                g.opponent_name,\n                g.starting_pitcher_id,\n                g.opponent_starting_pitcher_id,\n                g.team_side,\n                g.date,\n                g.start_time,\n                g.season,\n                g.doubleheader_status,\n                g.time_of_day,\n                g.game_type,\n                g.bat_first_side,\n                g.sky,\n                g.field_condition,\n                g.precipitation,\n                g.wind_direction,\n                g.park_id,\n                g.temperature_fahrenheit,\n                g.attendance,\n                g.wind_speed_mph,\n                g.use_dh,\n                g.scorer,\n                g.scoring_method,\n                g.source_type,\n                g.umpire_home_id,\n                g.umpire_first_id,\n                g.umpire_second_id,\n                g.umpire_third_id,\n                g.umpire_left_id,\n                g.umpire_right_id,\n                g.filename,\n                g.is_regular_season,\n                g.is_postseason,\n                g.is_integrated,\n                g.is_negro_leagues,\n                g.is_segregated_white,\n                g.away_franchise_id,\n                g.home_franchise_id,\n                g.is_interleague,\n                g.lineup_map_away,\n                g.lineup_map_home,\n                g.fielding_map_away,\n                g.fielding_map_home,\n                g.series_id,\n                g.season_game_number,\n                g.series_game_number,\n                g.days_since_last_game,\n        FROM \"timeball\".\"main_models\".\"event_pitching_stats\" AS e\n        LEFT JOIN \"timeball\".\"main_models\".\"team_game_start_info\" AS g USING (team_id, game_id)\n    ),\n    -- Need to use the season table for basic stats/metrics to ensure full coverage...\n    basic_stats AS (\n        SELECT\n            player_id,\n            season,\n            league,\n            SUM(games) AS games,\n            SUM(batters_faced) AS batters_faced,\n            SUM(outs_recorded) AS outs_recorded,\n            SUM(inherited_runners_scored) AS inherited_runners_scored,\n            SUM(bequeathed_runners_scored) AS bequeathed_runners_scored,\n            SUM(team_unearned_runs) AS team_unearned_runs,\n            SUM(plate_appearances) AS plate_appearances,\n            SUM(at_bats) AS at_bats,\n            SUM(hits) AS hits,\n            SUM(singles) AS singles,\n            SUM(doubles) AS doubles,\n            SUM(triples) AS triples,\n            SUM(home_runs) AS home_runs,\n            SUM(total_bases) AS total_bases,\n            SUM(strikeouts) AS strikeouts,\n            SUM(walks) AS walks,\n            SUM(intentional_walks) AS intentional_walks,\n            SUM(hit_by_pitches) AS hit_by_pitches,\n            SUM(sacrifice_hits) AS sacrifice_hits,\n            SUM(sacrifice_flies) AS sacrifice_flies,\n            SUM(reached_on_errors) AS reached_on_errors,\n            SUM(reached_on_interferences) AS reached_on_interferences,\n            SUM(inside_the_park_home_runs) AS inside_the_park_home_runs,\n            SUM(ground_rule_doubles) AS ground_rule_doubles,\n            SUM(infield_hits) AS infield_hits,\n            SUM(on_base_opportunities) AS on_base_opportunities,\n            SUM(on_base_successes) AS on_base_successes,\n            SUM(grounded_into_double_plays) AS grounded_into_double_plays,\n            SUM(double_plays) AS double_plays,\n            SUM(triple_plays) AS triple_plays,\n            SUM(batting_outs) AS batting_outs,\n            SUM(balls_in_play) AS balls_in_play,\n            SUM(balls_batted) AS balls_batted,\n            SUM(trajectory_fly_ball) AS trajectory_fly_ball,\n            SUM(trajectory_ground_ball) AS trajectory_ground_ball,\n            SUM(trajectory_line_drive) AS trajectory_line_drive,\n            SUM(trajectory_pop_up) AS trajectory_pop_up,\n            SUM(trajectory_unknown) AS trajectory_unknown,\n            SUM(trajectory_known) AS trajectory_known,\n            SUM(trajectory_broad_air_ball) AS trajectory_broad_air_ball,\n            SUM(trajectory_broad_ground_ball) AS trajectory_broad_ground_ball,\n            SUM(trajectory_broad_unknown) AS trajectory_broad_unknown,\n            SUM(trajectory_broad_known) AS trajectory_broad_known,\n            SUM(bunts) AS bunts,\n            SUM(batted_distance_plate) AS batted_distance_plate,\n            SUM(batted_distance_infield) AS batted_distance_infield,\n            SUM(batted_distance_outfield) AS batted_distance_outfield,\n            SUM(batted_distance_unknown) AS batted_distance_unknown,\n            SUM(batted_distance_known) AS batted_distance_known,\n            SUM(fielded_by_battery) AS fielded_by_battery,\n            SUM(fielded_by_infielder) AS fielded_by_infielder,\n            SUM(fielded_by_outfielder) AS fielded_by_outfielder,\n            SUM(fielded_by_known) AS fielded_by_known,\n            SUM(fielded_by_unknown) AS fielded_by_unknown,\n            SUM(batted_angle_left) AS batted_angle_left,\n            SUM(batted_angle_right) AS batted_angle_right,\n            SUM(batted_angle_middle) AS batted_angle_middle,\n            SUM(batted_angle_unknown) AS batted_angle_unknown,\n            SUM(batted_angle_known) AS batted_angle_known,\n            SUM(batted_location_plate) AS batted_location_plate,\n            SUM(batted_location_right_infield) AS batted_location_right_infield,\n            SUM(batted_location_middle_infield) AS batted_location_middle_infield,\n            SUM(batted_location_left_infield) AS batted_location_left_infield,\n            SUM(batted_location_left_field) AS batted_location_left_field,\n            SUM(batted_location_center_field) AS batted_location_center_field,\n            SUM(batted_location_right_field) AS batted_location_right_field,\n            SUM(batted_location_unknown) AS batted_location_unknown,\n            SUM(batted_location_known) AS batted_location_known,\n            SUM(batted_balls_pulled) AS batted_balls_pulled,\n            SUM(batted_balls_opposite_field) AS batted_balls_opposite_field,\n            SUM(runs) AS runs,\n            SUM(times_reached_base) AS times_reached_base,\n            SUM(stolen_base_opportunities) AS stolen_base_opportunities,\n            SUM(stolen_base_opportunities_second) AS stolen_base_opportunities_second,\n            SUM(stolen_base_opportunities_third) AS stolen_base_opportunities_third,\n            SUM(stolen_base_opportunities_home) AS stolen_base_opportunities_home,\n            SUM(stolen_bases) AS stolen_bases,\n            SUM(stolen_bases_second) AS stolen_bases_second,\n            SUM(stolen_bases_third) AS stolen_bases_third,\n            SUM(stolen_bases_home) AS stolen_bases_home,\n            SUM(caught_stealing) AS caught_stealing,\n            SUM(caught_stealing_second) AS caught_stealing_second,\n            SUM(caught_stealing_third) AS caught_stealing_third,\n            SUM(caught_stealing_home) AS caught_stealing_home,\n            SUM(picked_off) AS picked_off,\n            SUM(picked_off_first) AS picked_off_first,\n            SUM(picked_off_second) AS picked_off_second,\n            SUM(picked_off_third) AS picked_off_third,\n            SUM(picked_off_caught_stealing) AS picked_off_caught_stealing,\n            SUM(outs_on_basepaths) AS outs_on_basepaths,\n            SUM(unforced_outs_on_basepaths) AS unforced_outs_on_basepaths,\n            SUM(outs_avoided_on_errors) AS outs_avoided_on_errors,\n            SUM(advances_on_wild_pitches) AS advances_on_wild_pitches,\n            SUM(advances_on_passed_balls) AS advances_on_passed_balls,\n            SUM(advances_on_balks) AS advances_on_balks,\n            SUM(advances_on_unspecified_plays) AS advances_on_unspecified_plays,\n            SUM(advances_on_defensive_indifference) AS advances_on_defensive_indifference,\n            SUM(advances_on_errors) AS advances_on_errors,\n            SUM(extra_base_chances) AS extra_base_chances,\n            SUM(extra_base_advance_attempts) AS extra_base_advance_attempts,\n            SUM(extra_bases_taken) AS extra_bases_taken,\n            SUM(bases_advanced) AS bases_advanced,\n            SUM(bases_advanced_on_balls_in_play) AS bases_advanced_on_balls_in_play,\n            SUM(surplus_bases_advanced_on_balls_in_play) AS surplus_bases_advanced_on_balls_in_play,\n            SUM(outs_on_extra_base_advance_attempts) AS outs_on_extra_base_advance_attempts,\n            SUM(pitches) AS pitches,\n            SUM(swings) AS swings,\n            SUM(swings_with_contact) AS swings_with_contact,\n            SUM(strikes) AS strikes,\n            SUM(strikes_called) AS strikes_called,\n            SUM(strikes_swinging) AS strikes_swinging,\n            SUM(strikes_foul) AS strikes_foul,\n            SUM(strikes_foul_tip) AS strikes_foul_tip,\n            SUM(strikes_in_play) AS strikes_in_play,\n            SUM(strikes_unknown) AS strikes_unknown,\n            SUM(balls) AS balls,\n            SUM(balls_called) AS balls_called,\n            SUM(balls_intentional) AS balls_intentional,\n            SUM(balls_automatic) AS balls_automatic,\n            SUM(unknown_pitches) AS unknown_pitches,\n            SUM(pitchouts) AS pitchouts,\n            SUM(pitcher_pickoff_attempts) AS pitcher_pickoff_attempts,\n            SUM(catcher_pickoff_attempts) AS catcher_pickoff_attempts,\n            SUM(pitches_blocked_by_catcher) AS pitches_blocked_by_catcher,\n            SUM(pitches_with_runners_going) AS pitches_with_runners_going,\n            SUM(passed_balls) AS passed_balls,\n            SUM(wild_pitches) AS wild_pitches,\n            SUM(balks) AS balks,\n            SUM(left_on_base) AS left_on_base,\n            SUM(left_on_base_with_two_outs) AS left_on_base_with_two_outs,\n            SUM(earned_runs) * 9 / SUM(outs_recorded * 3) AS earned_run_average,\n            SUM(runs) * 9 / SUM(outs_recorded * 3) AS run_average,\n            SUM(walks) * 9 / SUM(outs_recorded * 3) AS walks_per_9_innings,\n            SUM(strikeouts) * 9 / SUM(outs_recorded * 3) AS strikeouts_per_9_innings,\n            SUM(home_runs) * 9 / SUM(outs_recorded * 3) AS home_runs_per_9_innings,\n            SUM(hits) * 9 / SUM(outs_recorded * 3) AS hits_per_9_innings,\n            (SUM(walks) + SUM(hits)) / SUM(outs_recorded * 3) AS walks_and_hits_per_innings_pitched,\n            SUM(strikeouts) / SUM(walks) AS strikeout_to_walk_ratio,\n            SUM(walks) / SUM(batters_faced) AS walk_rate,\n            SUM(strikeouts) / SUM(batters_faced) AS strikeout_rate,\n            SUM(home_runs) / SUM(batters_faced) AS home_run_rate,\n            SUM(hits) / SUM(at_bats) AS batting_average_against,\n            SUM(on_base_successes) / SUM(on_base_opportunities) AS on_base_percentage_against,\n            SUM(total_bases) / SUM(at_bats) AS slugging_percentage_against,\n            SUM(on_base_successes) / SUM(on_base_opportunities) + SUM(total_bases) / SUM(at_bats) AS on_base_plus_slugging_against,\n            SUM(hits - home_runs) / (SUM(at_bats) - SUM(home_runs) - SUM(strikeouts) + SUM(COALESCE(sacrifice_flies, 0))) AS batting_average_on_balls_in_play,FROM season\n        \n        WHERE game_type IN (SELECT game_type FROM \"timeball\".\"main_seeds\".\"seed_game_types\" WHERE is_regular_season)\n        \n        GROUP BY player_id, season, league\n    ),\n\n    --- ...but we need to use the event table for event-based metrics,\n    event_agg AS (\n        SELECT\n            player_id,\n            season,\n            league,\n            COUNT(DISTINCT game_id) AS games,\n            SUM(trajectory_known * balls_batted * (at_bats - hits)) / SUM(balls_batted * (at_bats - hits)) AS known_trajectory_rate_outs,\n            SUM(trajectory_known * balls_batted * hits) / SUM(balls_batted * hits) AS known_trajectory_rate_hits,\n            SUM(trajectory_known * balls_batted) / SUM(balls_batted) AS known_trajectory_rate,\n            SUM(trajectory_broad_known * balls_batted * (at_bats - hits)) / SUM(balls_batted * (at_bats - hits)) AS known_trajectory_broad_rate_outs,\n            SUM(trajectory_broad_known * balls_batted * hits) / SUM(balls_batted * hits) AS known_trajectory_broad_rate_hits,\n            SUM(trajectory_broad_known * balls_batted) / SUM(balls_batted) AS known_trajectory_broad_rate,\n            known_trajectory_rate_outs / known_trajectory_rate_hits AS known_trajectory_out_hit_ratio,\n            known_trajectory_broad_rate_outs / known_trajectory_broad_rate_hits AS known_trajectory_broad_out_hit_ratio,\n            SUM(trajectory_broad_air_ball * (at_bats - hits)) / SUM(trajectory_broad_known * (at_bats - hits)) AS air_ball_rate_outs,\n            SUM(trajectory_broad_ground_ball * (at_bats - hits)) / SUM(trajectory_broad_known * (at_bats - hits)) AS ground_ball_rate_outs,\n            ground_ball_rate_outs / air_ball_rate_outs AS ground_air_out_ratio,\n            SUM(trajectory_broad_air_ball * hits) / SUM(trajectory_broad_known * hits) AS air_ball_hit_rate,\n            SUM(trajectory_broad_ground_ball * hits) / SUM(trajectory_broad_known * hits) AS ground_ball_hit_rate,\n            ground_ball_hit_rate / air_ball_hit_rate AS ground_air_hit_ratio,\n            SUM(trajectory_fly_ball) / SUM(trajectory_known) AS fly_ball_rate,\n            SUM(trajectory_line_drive) / SUM(trajectory_known) AS line_drive_rate,\n            SUM(trajectory_pop_up) / SUM(trajectory_known) AS pop_up_rate,\n            SUM(trajectory_ground_ball) / SUM(trajectory_broad_known) AS ground_ball_rate,\n            SUM(trajectory_broad_air_ball * hits) * known_trajectory_broad_out_hit_ratio / (SUM(trajectory_broad_air_ball * hits) * known_trajectory_broad_out_hit_ratio + SUM(trajectory_broad_air_ball * (at_bats - hits))) AS coverage_weighted_air_ball_batting_average,\n            SUM(trajectory_ground_ball * hits) * known_trajectory_broad_out_hit_ratio / (SUM(trajectory_ground_ball * hits) * known_trajectory_broad_out_hit_ratio + SUM(trajectory_ground_ball * (at_bats - hits))) AS coverage_weighted_ground_ball_batting_average,\n            SUM(trajectory_fly_ball * hits) * known_trajectory_out_hit_ratio / (SUM(trajectory_fly_ball * hits) * known_trajectory_out_hit_ratio + SUM(trajectory_fly_ball * (at_bats - hits))) AS coverage_weighted_fly_ball_batting_average,\n            SUM(trajectory_line_drive * hits) * known_trajectory_out_hit_ratio / (SUM(trajectory_line_drive * hits) * known_trajectory_out_hit_ratio + SUM(trajectory_line_drive * (at_bats - hits))) AS coverage_weighted_line_drive_batting_average,\n            SUM(trajectory_pop_up * hits) * known_trajectory_out_hit_ratio / (SUM(trajectory_pop_up * hits) * known_trajectory_out_hit_ratio + SUM(trajectory_pop_up * (at_bats - hits))) AS coverage_weighted_pop_up_batting_average,\n            SUM(batted_angle_known * (at_bats - hits)) / SUM(balls_batted * (at_bats - hits)) AS known_angle_rate_outs,\n            SUM(batted_angle_known * hits) / SUM(hits) AS known_angle_rate_hits,\n            SUM(batted_angle_known) / SUM(balls_batted) AS known_angle_rate,\n            known_angle_rate_outs / known_angle_rate_hits AS known_angle_out_hit_ratio,\n            SUM(batted_angle_left * (at_bats - hits)) / SUM(batted_angle_known * (at_bats - hits)) AS angle_left_rate_outs,\n            SUM(batted_angle_left * hits) / SUM(batted_angle_known * hits) AS angle_left_rate_hits,\n            SUM(batted_angle_left) / SUM(batted_angle_known) AS angle_left_rate,\n            SUM(batted_angle_left * hits) * known_angle_out_hit_ratio / (SUM(batted_angle_left * hits) * known_angle_out_hit_ratio + SUM(batted_angle_left * (at_bats - hits))) AS coverage_weighted_angle_left_batting_average,\n            SUM(batted_angle_right * (at_bats - hits)) / SUM(batted_angle_known * (at_bats - hits)) AS angle_right_rate_outs,\n            SUM(batted_angle_right * hits) / SUM(batted_angle_known * hits) AS angle_right_rate_hits,\n            SUM(batted_angle_right) / SUM(batted_angle_known) AS angle_right_rate,\n            SUM(batted_angle_right * hits) * known_angle_out_hit_ratio / (SUM(batted_angle_right * hits) * known_angle_out_hit_ratio + SUM(batted_angle_right * (at_bats - hits))) AS coverage_weighted_angle_right_batting_average,\n            SUM(batted_angle_middle * (at_bats - hits)) / SUM(batted_angle_known * (at_bats - hits)) AS angle_middle_rate_outs,\n            SUM(batted_angle_middle * hits) / SUM(batted_angle_known * hits) AS angle_middle_rate_hits,\n            SUM(batted_angle_middle) / SUM(batted_angle_known) AS angle_middle_rate,\n            SUM(batted_angle_middle * hits) * known_angle_out_hit_ratio / (SUM(batted_angle_middle * hits) * known_angle_out_hit_ratio + SUM(batted_angle_middle * (at_bats - hits))) AS coverage_weighted_angle_middle_batting_average,\n            SUM(batted_balls_pulled * (at_bats - hits)) / SUM(batted_angle_known * (at_bats - hits)) AS pulled_rate_outs,\n            SUM(batted_balls_pulled * hits) / SUM(batted_angle_known * hits) AS pulled_rate_hits,\n            SUM(batted_balls_pulled) / SUM(batted_angle_known) AS pulled_rate,\n            SUM(batted_balls_pulled * hits) * known_angle_out_hit_ratio / (SUM(batted_balls_pulled * hits) * known_angle_out_hit_ratio + SUM(batted_balls_pulled * (at_bats - hits))) AS coverage_weighted_pulled_batting_average,\n            SUM(batted_balls_opposite_field * (at_bats - hits)) / SUM(batted_angle_known * (at_bats - hits)) AS opposite_field_rate_outs,\n            SUM(batted_balls_opposite_field * hits) / SUM(batted_angle_known * hits) AS opposite_field_rate_hits,\n            SUM(batted_balls_opposite_field) / SUM(batted_angle_known) AS opposite_field_rate,\n            SUM(batted_balls_opposite_field * hits) * known_angle_out_hit_ratio / (SUM(batted_balls_opposite_field * hits) * known_angle_out_hit_ratio + SUM(batted_balls_opposite_field * (at_bats - hits))) AS coverage_weighted_opposite_field_batting_average,\n            SUM(stolen_bases_second + caught_stealing_second) / SUM(stolen_base_opportunities_second) AS stolen_base_attempt_rate_second,\n            SUM(stolen_bases_third + caught_stealing_third) / SUM(stolen_base_opportunities_third) AS stolen_base_attempt_rate_third,\n            SUM(stolen_bases_home + caught_stealing_home) / SUM(stolen_base_opportunities_home) AS stolen_base_attempt_rate_home,\n            SUM(unforced_outs_on_basepaths) / SUM(times_reached_base) AS unforced_out_rate,\n            SUM(strikes) / SUM(pitches) AS pitch_strike_rate,\n            SUM(swings_with_contact) / SUM(pitches) AS pitch_contact_rate,\n            SUM(swings_with_contact + strikes_swinging) / SUM(pitches) AS pitch_swing_rate,\n            SUM(balls) / SUM(pitches) AS pitch_ball_rate,\n            SUM(strikes_swinging) / SUM(pitches) AS pitch_swing_and_miss_rate,\n            SUM(strikes_foul) / SUM(pitches) AS pitch_foul_rate,\n            SUM(strikes_called) / SUM(pitches) AS pitched_called_strike_rate,\n            COUNT_IF(pitches > 0) / SUM(plate_appearances) AS pitch_data_coverage_rate,FROM event\n        \n        WHERE game_id IN (SELECT game_id FROM \"timeball\".\"main_models\".\"game_start_info\" WHERE is_regular_season)\n        \n        GROUP BY player_id, season, league\n    ),\n\n    final AS (\n        SELECT\n            player_id,\n            season,\n            league,\n            basic_stats.batters_faced::INT AS batters_faced,\n            basic_stats.outs_recorded::INT AS outs_recorded,\n            basic_stats.inherited_runners_scored::INT AS inherited_runners_scored,\n            basic_stats.bequeathed_runners_scored::INT AS bequeathed_runners_scored,\n            basic_stats.team_unearned_runs::INT AS team_unearned_runs,\n            basic_stats.plate_appearances::INT AS plate_appearances,\n            basic_stats.at_bats::INT AS at_bats,\n            basic_stats.hits::INT AS hits,\n            basic_stats.singles::INT AS singles,\n            basic_stats.doubles::INT AS doubles,\n            basic_stats.triples::INT AS triples,\n            basic_stats.home_runs::INT AS home_runs,\n            basic_stats.total_bases::INT AS total_bases,\n            basic_stats.strikeouts::INT AS strikeouts,\n            basic_stats.walks::INT AS walks,\n            basic_stats.intentional_walks::INT AS intentional_walks,\n            basic_stats.hit_by_pitches::INT AS hit_by_pitches,\n            basic_stats.sacrifice_hits::INT AS sacrifice_hits,\n            basic_stats.sacrifice_flies::INT AS sacrifice_flies,\n            basic_stats.reached_on_errors::INT AS reached_on_errors,\n            basic_stats.reached_on_interferences::INT AS reached_on_interferences,\n            basic_stats.inside_the_park_home_runs::INT AS inside_the_park_home_runs,\n            basic_stats.ground_rule_doubles::INT AS ground_rule_doubles,\n            basic_stats.infield_hits::INT AS infield_hits,\n            basic_stats.on_base_opportunities::INT AS on_base_opportunities,\n            basic_stats.on_base_successes::INT AS on_base_successes,\n            basic_stats.grounded_into_double_plays::INT AS grounded_into_double_plays,\n            basic_stats.double_plays::INT AS double_plays,\n            basic_stats.triple_plays::INT AS triple_plays,\n            basic_stats.batting_outs::INT AS batting_outs,\n            basic_stats.balls_in_play::INT AS balls_in_play,\n            basic_stats.balls_batted::INT AS balls_batted,\n            basic_stats.trajectory_fly_ball::INT AS trajectory_fly_ball,\n            basic_stats.trajectory_ground_ball::INT AS trajectory_ground_ball,\n            basic_stats.trajectory_line_drive::INT AS trajectory_line_drive,\n            basic_stats.trajectory_pop_up::INT AS trajectory_pop_up,\n            basic_stats.trajectory_unknown::INT AS trajectory_unknown,\n            basic_stats.trajectory_known::INT AS trajectory_known,\n            basic_stats.trajectory_broad_air_ball::INT AS trajectory_broad_air_ball,\n            basic_stats.trajectory_broad_ground_ball::INT AS trajectory_broad_ground_ball,\n            basic_stats.trajectory_broad_unknown::INT AS trajectory_broad_unknown,\n            basic_stats.trajectory_broad_known::INT AS trajectory_broad_known,\n            basic_stats.bunts::INT AS bunts,\n            basic_stats.batted_distance_plate::INT AS batted_distance_plate,\n            basic_stats.batted_distance_infield::INT AS batted_distance_infield,\n            basic_stats.batted_distance_outfield::INT AS batted_distance_outfield,\n            basic_stats.batted_distance_unknown::INT AS batted_distance_unknown,\n            basic_stats.batted_distance_known::INT AS batted_distance_known,\n            basic_stats.fielded_by_battery::INT AS fielded_by_battery,\n            basic_stats.fielded_by_infielder::INT AS fielded_by_infielder,\n            basic_stats.fielded_by_outfielder::INT AS fielded_by_outfielder,\n            basic_stats.fielded_by_known::INT AS fielded_by_known,\n            basic_stats.fielded_by_unknown::INT AS fielded_by_unknown,\n            basic_stats.batted_angle_left::INT AS batted_angle_left,\n            basic_stats.batted_angle_right::INT AS batted_angle_right,\n            basic_stats.batted_angle_middle::INT AS batted_angle_middle,\n            basic_stats.batted_angle_unknown::INT AS batted_angle_unknown,\n            basic_stats.batted_angle_known::INT AS batted_angle_known,\n            basic_stats.batted_location_plate::INT AS batted_location_plate,\n            basic_stats.batted_location_right_infield::INT AS batted_location_right_infield,\n            basic_stats.batted_location_middle_infield::INT AS batted_location_middle_infield,\n            basic_stats.batted_location_left_infield::INT AS batted_location_left_infield,\n            basic_stats.batted_location_left_field::INT AS batted_location_left_field,\n            basic_stats.batted_location_center_field::INT AS batted_location_center_field,\n            basic_stats.batted_location_right_field::INT AS batted_location_right_field,\n            basic_stats.batted_location_unknown::INT AS batted_location_unknown,\n            basic_stats.batted_location_known::INT AS batted_location_known,\n            basic_stats.batted_balls_pulled::INT AS batted_balls_pulled,\n            basic_stats.batted_balls_opposite_field::INT AS batted_balls_opposite_field,\n            basic_stats.runs::INT AS runs,\n            basic_stats.times_reached_base::INT AS times_reached_base,\n            basic_stats.stolen_base_opportunities::INT AS stolen_base_opportunities,\n            basic_stats.stolen_base_opportunities_second::INT AS stolen_base_opportunities_second,\n            basic_stats.stolen_base_opportunities_third::INT AS stolen_base_opportunities_third,\n            basic_stats.stolen_base_opportunities_home::INT AS stolen_base_opportunities_home,\n            basic_stats.stolen_bases::INT AS stolen_bases,\n            basic_stats.stolen_bases_second::INT AS stolen_bases_second,\n            basic_stats.stolen_bases_third::INT AS stolen_bases_third,\n            basic_stats.stolen_bases_home::INT AS stolen_bases_home,\n            basic_stats.caught_stealing::INT AS caught_stealing,\n            basic_stats.caught_stealing_second::INT AS caught_stealing_second,\n            basic_stats.caught_stealing_third::INT AS caught_stealing_third,\n            basic_stats.caught_stealing_home::INT AS caught_stealing_home,\n            basic_stats.picked_off::INT AS picked_off,\n            basic_stats.picked_off_first::INT AS picked_off_first,\n            basic_stats.picked_off_second::INT AS picked_off_second,\n            basic_stats.picked_off_third::INT AS picked_off_third,\n            basic_stats.picked_off_caught_stealing::INT AS picked_off_caught_stealing,\n            basic_stats.outs_on_basepaths::INT AS outs_on_basepaths,\n            basic_stats.unforced_outs_on_basepaths::INT AS unforced_outs_on_basepaths,\n            basic_stats.outs_avoided_on_errors::INT AS outs_avoided_on_errors,\n            basic_stats.advances_on_wild_pitches::INT AS advances_on_wild_pitches,\n            basic_stats.advances_on_passed_balls::INT AS advances_on_passed_balls,\n            basic_stats.advances_on_balks::INT AS advances_on_balks,\n            basic_stats.advances_on_unspecified_plays::INT AS advances_on_unspecified_plays,\n            basic_stats.advances_on_defensive_indifference::INT AS advances_on_defensive_indifference,\n            basic_stats.advances_on_errors::INT AS advances_on_errors,\n            basic_stats.extra_base_chances::INT AS extra_base_chances,\n            basic_stats.extra_base_advance_attempts::INT AS extra_base_advance_attempts,\n            basic_stats.extra_bases_taken::INT AS extra_bases_taken,\n            basic_stats.bases_advanced::INT AS bases_advanced,\n            basic_stats.bases_advanced_on_balls_in_play::INT AS bases_advanced_on_balls_in_play,\n            basic_stats.surplus_bases_advanced_on_balls_in_play::INT AS surplus_bases_advanced_on_balls_in_play,\n            basic_stats.outs_on_extra_base_advance_attempts::INT AS outs_on_extra_base_advance_attempts,\n            basic_stats.pitches::INT AS pitches,\n            basic_stats.swings::INT AS swings,\n            basic_stats.swings_with_contact::INT AS swings_with_contact,\n            basic_stats.strikes::INT AS strikes,\n            basic_stats.strikes_called::INT AS strikes_called,\n            basic_stats.strikes_swinging::INT AS strikes_swinging,\n            basic_stats.strikes_foul::INT AS strikes_foul,\n            basic_stats.strikes_foul_tip::INT AS strikes_foul_tip,\n            basic_stats.strikes_in_play::INT AS strikes_in_play,\n            basic_stats.strikes_unknown::INT AS strikes_unknown,\n            basic_stats.balls::INT AS balls,\n            basic_stats.balls_called::INT AS balls_called,\n            basic_stats.balls_intentional::INT AS balls_intentional,\n            basic_stats.balls_automatic::INT AS balls_automatic,\n            basic_stats.unknown_pitches::INT AS unknown_pitches,\n            basic_stats.pitchouts::INT AS pitchouts,\n            basic_stats.pitcher_pickoff_attempts::INT AS pitcher_pickoff_attempts,\n            basic_stats.catcher_pickoff_attempts::INT AS catcher_pickoff_attempts,\n            basic_stats.pitches_blocked_by_catcher::INT AS pitches_blocked_by_catcher,\n            basic_stats.pitches_with_runners_going::INT AS pitches_with_runners_going,\n            basic_stats.passed_balls::INT AS passed_balls,\n            basic_stats.wild_pitches::INT AS wild_pitches,\n            basic_stats.balks::INT AS balks,\n            basic_stats.left_on_base::INT AS left_on_base,\n            basic_stats.left_on_base_with_two_outs::INT AS left_on_base_with_two_outs,\n            basic_stats.earned_run_average,\n            basic_stats.run_average,\n            basic_stats.walks_per_9_innings,\n            basic_stats.strikeouts_per_9_innings,\n            basic_stats.home_runs_per_9_innings,\n            basic_stats.hits_per_9_innings,\n            basic_stats.walks_and_hits_per_innings_pitched,\n            basic_stats.strikeout_to_walk_ratio,\n            basic_stats.walk_rate,\n            basic_stats.strikeout_rate,\n            basic_stats.home_run_rate,\n            basic_stats.batting_average_against,\n            basic_stats.on_base_percentage_against,\n            basic_stats.slugging_percentage_against,\n            basic_stats.on_base_plus_slugging_against,\n            basic_stats.batting_average_on_balls_in_play,COALESCE(event_agg.games / basic_stats.games, 0) AS event_coverage_rate,\n            event_agg.known_trajectory_rate_outs,\n            event_agg.known_trajectory_rate_hits,\n            event_agg.known_trajectory_rate,\n            event_agg.known_trajectory_broad_rate_outs,\n            event_agg.known_trajectory_broad_rate_hits,\n            event_agg.known_trajectory_broad_rate,\n            event_agg.known_trajectory_out_hit_ratio,\n            event_agg.known_trajectory_broad_out_hit_ratio,\n            event_agg.air_ball_rate_outs,\n            event_agg.ground_ball_rate_outs,\n            event_agg.ground_air_out_ratio,\n            event_agg.air_ball_hit_rate,\n            event_agg.ground_ball_hit_rate,\n            event_agg.ground_air_hit_ratio,\n            event_agg.fly_ball_rate,\n            event_agg.line_drive_rate,\n            event_agg.pop_up_rate,\n            event_agg.ground_ball_rate,\n            event_agg.coverage_weighted_air_ball_batting_average,\n            event_agg.coverage_weighted_ground_ball_batting_average,\n            event_agg.coverage_weighted_fly_ball_batting_average,\n            event_agg.coverage_weighted_line_drive_batting_average,\n            event_agg.coverage_weighted_pop_up_batting_average,\n            event_agg.known_angle_rate_outs,\n            event_agg.known_angle_rate_hits,\n            event_agg.known_angle_rate,\n            event_agg.known_angle_out_hit_ratio,\n            event_agg.angle_left_rate_outs,\n            event_agg.angle_left_rate_hits,\n            event_agg.angle_left_rate,\n            event_agg.coverage_weighted_angle_left_batting_average,\n            event_agg.angle_right_rate_outs,\n            event_agg.angle_right_rate_hits,\n            event_agg.angle_right_rate,\n            event_agg.coverage_weighted_angle_right_batting_average,\n            event_agg.angle_middle_rate_outs,\n            event_agg.angle_middle_rate_hits,\n            event_agg.angle_middle_rate,\n            event_agg.coverage_weighted_angle_middle_batting_average,\n            event_agg.pulled_rate_outs,\n            event_agg.pulled_rate_hits,\n            event_agg.pulled_rate,\n            event_agg.coverage_weighted_pulled_batting_average,\n            event_agg.opposite_field_rate_outs,\n            event_agg.opposite_field_rate_hits,\n            event_agg.opposite_field_rate,\n            event_agg.coverage_weighted_opposite_field_batting_average,\n            event_agg.stolen_base_attempt_rate_second,\n            event_agg.stolen_base_attempt_rate_third,\n            event_agg.stolen_base_attempt_rate_home,\n            event_agg.unforced_out_rate,\n            event_agg.pitch_strike_rate,\n            event_agg.pitch_contact_rate,\n            event_agg.pitch_swing_rate,\n            event_agg.pitch_ball_rate,\n            event_agg.pitch_swing_and_miss_rate,\n            event_agg.pitch_foul_rate,\n            event_agg.pitched_called_strike_rate,\n            event_agg.pitch_data_coverage_rate,FROM basic_stats\n        LEFT JOIN event_agg USING (player_id, season, league)\n    )\n    \n    SELECT * FROM final\n", "relation_name": "\"timeball\".\"main_models\".\"metrics_player_season_league_pitching\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:57.185704Z", "completed_at": "2023-12-09T18:55:57.456892Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:57.457590Z", "completed_at": "2023-12-09T18:55:57.457595Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.30565786361694336, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.timeball.metrics_team_season_pitching", "compiled": true, "compiled_code": "-- Add extra context columns to get potential grouiping keys\n    WITH season AS (SELECT \n            s.*,\n                f.franchise_id,\n                f.league,\n                f.division,\n                f.location,\n                f.nickname,\n                f.alternative_nicknames,\n                f.date_start,\n                f.date_end,\n                f.city,\n                f.state,\n        FROM \"timeball\".\"main_models\".\"player_team_season_pitching_stats\" AS s\n        LEFT JOIN \"timeball\".\"main_seeds\".\"seed_franchises\" AS f\n            ON s.team_id = f.team_id\n            AND s.season BETWEEN EXTRACT(YEAR FROM f.date_start) AND COALESCE(EXTRACT(YEAR FROM f.date_end), 9999)\n    ),\n    event AS (SELECT \n            e.*,\n                g.opponent_id,\n                g.league,\n                g.opponent_league,\n                g.division,\n                g.opponent_division,\n                g.team_name,\n                g.opponent_name,\n                g.starting_pitcher_id,\n                g.opponent_starting_pitcher_id,\n                g.team_side,\n                g.date,\n                g.start_time,\n                g.season,\n                g.doubleheader_status,\n                g.time_of_day,\n                g.game_type,\n                g.bat_first_side,\n                g.sky,\n                g.field_condition,\n                g.precipitation,\n                g.wind_direction,\n                g.park_id,\n                g.temperature_fahrenheit,\n                g.attendance,\n                g.wind_speed_mph,\n                g.use_dh,\n                g.scorer,\n                g.scoring_method,\n                g.source_type,\n                g.umpire_home_id,\n                g.umpire_first_id,\n                g.umpire_second_id,\n                g.umpire_third_id,\n                g.umpire_left_id,\n                g.umpire_right_id,\n                g.filename,\n                g.is_regular_season,\n                g.is_postseason,\n                g.is_integrated,\n                g.is_negro_leagues,\n                g.is_segregated_white,\n                g.away_franchise_id,\n                g.home_franchise_id,\n                g.is_interleague,\n                g.lineup_map_away,\n                g.lineup_map_home,\n                g.fielding_map_away,\n                g.fielding_map_home,\n                g.series_id,\n                g.season_game_number,\n                g.series_game_number,\n                g.days_since_last_game,\n        FROM \"timeball\".\"main_models\".\"event_pitching_stats\" AS e\n        LEFT JOIN \"timeball\".\"main_models\".\"team_game_start_info\" AS g USING (team_id, game_id)\n    ),\n    -- Need to use the season table for basic stats/metrics to ensure full coverage...\n    basic_stats AS (\n        SELECT\n            team_id,\n            season,\n            SUM(games) AS games,\n            SUM(batters_faced) AS batters_faced,\n            SUM(outs_recorded) AS outs_recorded,\n            SUM(inherited_runners_scored) AS inherited_runners_scored,\n            SUM(bequeathed_runners_scored) AS bequeathed_runners_scored,\n            SUM(team_unearned_runs) AS team_unearned_runs,\n            SUM(plate_appearances) AS plate_appearances,\n            SUM(at_bats) AS at_bats,\n            SUM(hits) AS hits,\n            SUM(singles) AS singles,\n            SUM(doubles) AS doubles,\n            SUM(triples) AS triples,\n            SUM(home_runs) AS home_runs,\n            SUM(total_bases) AS total_bases,\n            SUM(strikeouts) AS strikeouts,\n            SUM(walks) AS walks,\n            SUM(intentional_walks) AS intentional_walks,\n            SUM(hit_by_pitches) AS hit_by_pitches,\n            SUM(sacrifice_hits) AS sacrifice_hits,\n            SUM(sacrifice_flies) AS sacrifice_flies,\n            SUM(reached_on_errors) AS reached_on_errors,\n            SUM(reached_on_interferences) AS reached_on_interferences,\n            SUM(inside_the_park_home_runs) AS inside_the_park_home_runs,\n            SUM(ground_rule_doubles) AS ground_rule_doubles,\n            SUM(infield_hits) AS infield_hits,\n            SUM(on_base_opportunities) AS on_base_opportunities,\n            SUM(on_base_successes) AS on_base_successes,\n            SUM(grounded_into_double_plays) AS grounded_into_double_plays,\n            SUM(double_plays) AS double_plays,\n            SUM(triple_plays) AS triple_plays,\n            SUM(batting_outs) AS batting_outs,\n            SUM(balls_in_play) AS balls_in_play,\n            SUM(balls_batted) AS balls_batted,\n            SUM(trajectory_fly_ball) AS trajectory_fly_ball,\n            SUM(trajectory_ground_ball) AS trajectory_ground_ball,\n            SUM(trajectory_line_drive) AS trajectory_line_drive,\n            SUM(trajectory_pop_up) AS trajectory_pop_up,\n            SUM(trajectory_unknown) AS trajectory_unknown,\n            SUM(trajectory_known) AS trajectory_known,\n            SUM(trajectory_broad_air_ball) AS trajectory_broad_air_ball,\n            SUM(trajectory_broad_ground_ball) AS trajectory_broad_ground_ball,\n            SUM(trajectory_broad_unknown) AS trajectory_broad_unknown,\n            SUM(trajectory_broad_known) AS trajectory_broad_known,\n            SUM(bunts) AS bunts,\n            SUM(batted_distance_plate) AS batted_distance_plate,\n            SUM(batted_distance_infield) AS batted_distance_infield,\n            SUM(batted_distance_outfield) AS batted_distance_outfield,\n            SUM(batted_distance_unknown) AS batted_distance_unknown,\n            SUM(batted_distance_known) AS batted_distance_known,\n            SUM(fielded_by_battery) AS fielded_by_battery,\n            SUM(fielded_by_infielder) AS fielded_by_infielder,\n            SUM(fielded_by_outfielder) AS fielded_by_outfielder,\n            SUM(fielded_by_known) AS fielded_by_known,\n            SUM(fielded_by_unknown) AS fielded_by_unknown,\n            SUM(batted_angle_left) AS batted_angle_left,\n            SUM(batted_angle_right) AS batted_angle_right,\n            SUM(batted_angle_middle) AS batted_angle_middle,\n            SUM(batted_angle_unknown) AS batted_angle_unknown,\n            SUM(batted_angle_known) AS batted_angle_known,\n            SUM(batted_location_plate) AS batted_location_plate,\n            SUM(batted_location_right_infield) AS batted_location_right_infield,\n            SUM(batted_location_middle_infield) AS batted_location_middle_infield,\n            SUM(batted_location_left_infield) AS batted_location_left_infield,\n            SUM(batted_location_left_field) AS batted_location_left_field,\n            SUM(batted_location_center_field) AS batted_location_center_field,\n            SUM(batted_location_right_field) AS batted_location_right_field,\n            SUM(batted_location_unknown) AS batted_location_unknown,\n            SUM(batted_location_known) AS batted_location_known,\n            SUM(batted_balls_pulled) AS batted_balls_pulled,\n            SUM(batted_balls_opposite_field) AS batted_balls_opposite_field,\n            SUM(runs) AS runs,\n            SUM(times_reached_base) AS times_reached_base,\n            SUM(stolen_base_opportunities) AS stolen_base_opportunities,\n            SUM(stolen_base_opportunities_second) AS stolen_base_opportunities_second,\n            SUM(stolen_base_opportunities_third) AS stolen_base_opportunities_third,\n            SUM(stolen_base_opportunities_home) AS stolen_base_opportunities_home,\n            SUM(stolen_bases) AS stolen_bases,\n            SUM(stolen_bases_second) AS stolen_bases_second,\n            SUM(stolen_bases_third) AS stolen_bases_third,\n            SUM(stolen_bases_home) AS stolen_bases_home,\n            SUM(caught_stealing) AS caught_stealing,\n            SUM(caught_stealing_second) AS caught_stealing_second,\n            SUM(caught_stealing_third) AS caught_stealing_third,\n            SUM(caught_stealing_home) AS caught_stealing_home,\n            SUM(picked_off) AS picked_off,\n            SUM(picked_off_first) AS picked_off_first,\n            SUM(picked_off_second) AS picked_off_second,\n            SUM(picked_off_third) AS picked_off_third,\n            SUM(picked_off_caught_stealing) AS picked_off_caught_stealing,\n            SUM(outs_on_basepaths) AS outs_on_basepaths,\n            SUM(unforced_outs_on_basepaths) AS unforced_outs_on_basepaths,\n            SUM(outs_avoided_on_errors) AS outs_avoided_on_errors,\n            SUM(advances_on_wild_pitches) AS advances_on_wild_pitches,\n            SUM(advances_on_passed_balls) AS advances_on_passed_balls,\n            SUM(advances_on_balks) AS advances_on_balks,\n            SUM(advances_on_unspecified_plays) AS advances_on_unspecified_plays,\n            SUM(advances_on_defensive_indifference) AS advances_on_defensive_indifference,\n            SUM(advances_on_errors) AS advances_on_errors,\n            SUM(extra_base_chances) AS extra_base_chances,\n            SUM(extra_base_advance_attempts) AS extra_base_advance_attempts,\n            SUM(extra_bases_taken) AS extra_bases_taken,\n            SUM(bases_advanced) AS bases_advanced,\n            SUM(bases_advanced_on_balls_in_play) AS bases_advanced_on_balls_in_play,\n            SUM(surplus_bases_advanced_on_balls_in_play) AS surplus_bases_advanced_on_balls_in_play,\n            SUM(outs_on_extra_base_advance_attempts) AS outs_on_extra_base_advance_attempts,\n            SUM(pitches) AS pitches,\n            SUM(swings) AS swings,\n            SUM(swings_with_contact) AS swings_with_contact,\n            SUM(strikes) AS strikes,\n            SUM(strikes_called) AS strikes_called,\n            SUM(strikes_swinging) AS strikes_swinging,\n            SUM(strikes_foul) AS strikes_foul,\n            SUM(strikes_foul_tip) AS strikes_foul_tip,\n            SUM(strikes_in_play) AS strikes_in_play,\n            SUM(strikes_unknown) AS strikes_unknown,\n            SUM(balls) AS balls,\n            SUM(balls_called) AS balls_called,\n            SUM(balls_intentional) AS balls_intentional,\n            SUM(balls_automatic) AS balls_automatic,\n            SUM(unknown_pitches) AS unknown_pitches,\n            SUM(pitchouts) AS pitchouts,\n            SUM(pitcher_pickoff_attempts) AS pitcher_pickoff_attempts,\n            SUM(catcher_pickoff_attempts) AS catcher_pickoff_attempts,\n            SUM(pitches_blocked_by_catcher) AS pitches_blocked_by_catcher,\n            SUM(pitches_with_runners_going) AS pitches_with_runners_going,\n            SUM(passed_balls) AS passed_balls,\n            SUM(wild_pitches) AS wild_pitches,\n            SUM(balks) AS balks,\n            SUM(left_on_base) AS left_on_base,\n            SUM(left_on_base_with_two_outs) AS left_on_base_with_two_outs,\n            SUM(earned_runs) * 9 / SUM(outs_recorded * 3) AS earned_run_average,\n            SUM(runs) * 9 / SUM(outs_recorded * 3) AS run_average,\n            SUM(walks) * 9 / SUM(outs_recorded * 3) AS walks_per_9_innings,\n            SUM(strikeouts) * 9 / SUM(outs_recorded * 3) AS strikeouts_per_9_innings,\n            SUM(home_runs) * 9 / SUM(outs_recorded * 3) AS home_runs_per_9_innings,\n            SUM(hits) * 9 / SUM(outs_recorded * 3) AS hits_per_9_innings,\n            (SUM(walks) + SUM(hits)) / SUM(outs_recorded * 3) AS walks_and_hits_per_innings_pitched,\n            SUM(strikeouts) / SUM(walks) AS strikeout_to_walk_ratio,\n            SUM(walks) / SUM(batters_faced) AS walk_rate,\n            SUM(strikeouts) / SUM(batters_faced) AS strikeout_rate,\n            SUM(home_runs) / SUM(batters_faced) AS home_run_rate,\n            SUM(hits) / SUM(at_bats) AS batting_average_against,\n            SUM(on_base_successes) / SUM(on_base_opportunities) AS on_base_percentage_against,\n            SUM(total_bases) / SUM(at_bats) AS slugging_percentage_against,\n            SUM(on_base_successes) / SUM(on_base_opportunities) + SUM(total_bases) / SUM(at_bats) AS on_base_plus_slugging_against,\n            SUM(hits - home_runs) / (SUM(at_bats) - SUM(home_runs) - SUM(strikeouts) + SUM(COALESCE(sacrifice_flies, 0))) AS batting_average_on_balls_in_play,FROM season\n        \n        WHERE game_type IN (SELECT game_type FROM \"timeball\".\"main_seeds\".\"seed_game_types\" WHERE is_regular_season)\n        \n        GROUP BY team_id, season\n    ),\n\n    --- ...but we need to use the event table for event-based metrics,\n    event_agg AS (\n        SELECT\n            team_id,\n            season,\n            COUNT(DISTINCT game_id) AS games,\n            SUM(trajectory_known * balls_batted * (at_bats - hits)) / SUM(balls_batted * (at_bats - hits)) AS known_trajectory_rate_outs,\n            SUM(trajectory_known * balls_batted * hits) / SUM(balls_batted * hits) AS known_trajectory_rate_hits,\n            SUM(trajectory_known * balls_batted) / SUM(balls_batted) AS known_trajectory_rate,\n            SUM(trajectory_broad_known * balls_batted * (at_bats - hits)) / SUM(balls_batted * (at_bats - hits)) AS known_trajectory_broad_rate_outs,\n            SUM(trajectory_broad_known * balls_batted * hits) / SUM(balls_batted * hits) AS known_trajectory_broad_rate_hits,\n            SUM(trajectory_broad_known * balls_batted) / SUM(balls_batted) AS known_trajectory_broad_rate,\n            known_trajectory_rate_outs / known_trajectory_rate_hits AS known_trajectory_out_hit_ratio,\n            known_trajectory_broad_rate_outs / known_trajectory_broad_rate_hits AS known_trajectory_broad_out_hit_ratio,\n            SUM(trajectory_broad_air_ball * (at_bats - hits)) / SUM(trajectory_broad_known * (at_bats - hits)) AS air_ball_rate_outs,\n            SUM(trajectory_broad_ground_ball * (at_bats - hits)) / SUM(trajectory_broad_known * (at_bats - hits)) AS ground_ball_rate_outs,\n            ground_ball_rate_outs / air_ball_rate_outs AS ground_air_out_ratio,\n            SUM(trajectory_broad_air_ball * hits) / SUM(trajectory_broad_known * hits) AS air_ball_hit_rate,\n            SUM(trajectory_broad_ground_ball * hits) / SUM(trajectory_broad_known * hits) AS ground_ball_hit_rate,\n            ground_ball_hit_rate / air_ball_hit_rate AS ground_air_hit_ratio,\n            SUM(trajectory_fly_ball) / SUM(trajectory_known) AS fly_ball_rate,\n            SUM(trajectory_line_drive) / SUM(trajectory_known) AS line_drive_rate,\n            SUM(trajectory_pop_up) / SUM(trajectory_known) AS pop_up_rate,\n            SUM(trajectory_ground_ball) / SUM(trajectory_broad_known) AS ground_ball_rate,\n            SUM(trajectory_broad_air_ball * hits) * known_trajectory_broad_out_hit_ratio / (SUM(trajectory_broad_air_ball * hits) * known_trajectory_broad_out_hit_ratio + SUM(trajectory_broad_air_ball * (at_bats - hits))) AS coverage_weighted_air_ball_batting_average,\n            SUM(trajectory_ground_ball * hits) * known_trajectory_broad_out_hit_ratio / (SUM(trajectory_ground_ball * hits) * known_trajectory_broad_out_hit_ratio + SUM(trajectory_ground_ball * (at_bats - hits))) AS coverage_weighted_ground_ball_batting_average,\n            SUM(trajectory_fly_ball * hits) * known_trajectory_out_hit_ratio / (SUM(trajectory_fly_ball * hits) * known_trajectory_out_hit_ratio + SUM(trajectory_fly_ball * (at_bats - hits))) AS coverage_weighted_fly_ball_batting_average,\n            SUM(trajectory_line_drive * hits) * known_trajectory_out_hit_ratio / (SUM(trajectory_line_drive * hits) * known_trajectory_out_hit_ratio + SUM(trajectory_line_drive * (at_bats - hits))) AS coverage_weighted_line_drive_batting_average,\n            SUM(trajectory_pop_up * hits) * known_trajectory_out_hit_ratio / (SUM(trajectory_pop_up * hits) * known_trajectory_out_hit_ratio + SUM(trajectory_pop_up * (at_bats - hits))) AS coverage_weighted_pop_up_batting_average,\n            SUM(batted_angle_known * (at_bats - hits)) / SUM(balls_batted * (at_bats - hits)) AS known_angle_rate_outs,\n            SUM(batted_angle_known * hits) / SUM(hits) AS known_angle_rate_hits,\n            SUM(batted_angle_known) / SUM(balls_batted) AS known_angle_rate,\n            known_angle_rate_outs / known_angle_rate_hits AS known_angle_out_hit_ratio,\n            SUM(batted_angle_left * (at_bats - hits)) / SUM(batted_angle_known * (at_bats - hits)) AS angle_left_rate_outs,\n            SUM(batted_angle_left * hits) / SUM(batted_angle_known * hits) AS angle_left_rate_hits,\n            SUM(batted_angle_left) / SUM(batted_angle_known) AS angle_left_rate,\n            SUM(batted_angle_left * hits) * known_angle_out_hit_ratio / (SUM(batted_angle_left * hits) * known_angle_out_hit_ratio + SUM(batted_angle_left * (at_bats - hits))) AS coverage_weighted_angle_left_batting_average,\n            SUM(batted_angle_right * (at_bats - hits)) / SUM(batted_angle_known * (at_bats - hits)) AS angle_right_rate_outs,\n            SUM(batted_angle_right * hits) / SUM(batted_angle_known * hits) AS angle_right_rate_hits,\n            SUM(batted_angle_right) / SUM(batted_angle_known) AS angle_right_rate,\n            SUM(batted_angle_right * hits) * known_angle_out_hit_ratio / (SUM(batted_angle_right * hits) * known_angle_out_hit_ratio + SUM(batted_angle_right * (at_bats - hits))) AS coverage_weighted_angle_right_batting_average,\n            SUM(batted_angle_middle * (at_bats - hits)) / SUM(batted_angle_known * (at_bats - hits)) AS angle_middle_rate_outs,\n            SUM(batted_angle_middle * hits) / SUM(batted_angle_known * hits) AS angle_middle_rate_hits,\n            SUM(batted_angle_middle) / SUM(batted_angle_known) AS angle_middle_rate,\n            SUM(batted_angle_middle * hits) * known_angle_out_hit_ratio / (SUM(batted_angle_middle * hits) * known_angle_out_hit_ratio + SUM(batted_angle_middle * (at_bats - hits))) AS coverage_weighted_angle_middle_batting_average,\n            SUM(batted_balls_pulled * (at_bats - hits)) / SUM(batted_angle_known * (at_bats - hits)) AS pulled_rate_outs,\n            SUM(batted_balls_pulled * hits) / SUM(batted_angle_known * hits) AS pulled_rate_hits,\n            SUM(batted_balls_pulled) / SUM(batted_angle_known) AS pulled_rate,\n            SUM(batted_balls_pulled * hits) * known_angle_out_hit_ratio / (SUM(batted_balls_pulled * hits) * known_angle_out_hit_ratio + SUM(batted_balls_pulled * (at_bats - hits))) AS coverage_weighted_pulled_batting_average,\n            SUM(batted_balls_opposite_field * (at_bats - hits)) / SUM(batted_angle_known * (at_bats - hits)) AS opposite_field_rate_outs,\n            SUM(batted_balls_opposite_field * hits) / SUM(batted_angle_known * hits) AS opposite_field_rate_hits,\n            SUM(batted_balls_opposite_field) / SUM(batted_angle_known) AS opposite_field_rate,\n            SUM(batted_balls_opposite_field * hits) * known_angle_out_hit_ratio / (SUM(batted_balls_opposite_field * hits) * known_angle_out_hit_ratio + SUM(batted_balls_opposite_field * (at_bats - hits))) AS coverage_weighted_opposite_field_batting_average,\n            SUM(stolen_bases_second + caught_stealing_second) / SUM(stolen_base_opportunities_second) AS stolen_base_attempt_rate_second,\n            SUM(stolen_bases_third + caught_stealing_third) / SUM(stolen_base_opportunities_third) AS stolen_base_attempt_rate_third,\n            SUM(stolen_bases_home + caught_stealing_home) / SUM(stolen_base_opportunities_home) AS stolen_base_attempt_rate_home,\n            SUM(unforced_outs_on_basepaths) / SUM(times_reached_base) AS unforced_out_rate,\n            SUM(strikes) / SUM(pitches) AS pitch_strike_rate,\n            SUM(swings_with_contact) / SUM(pitches) AS pitch_contact_rate,\n            SUM(swings_with_contact + strikes_swinging) / SUM(pitches) AS pitch_swing_rate,\n            SUM(balls) / SUM(pitches) AS pitch_ball_rate,\n            SUM(strikes_swinging) / SUM(pitches) AS pitch_swing_and_miss_rate,\n            SUM(strikes_foul) / SUM(pitches) AS pitch_foul_rate,\n            SUM(strikes_called) / SUM(pitches) AS pitched_called_strike_rate,\n            COUNT_IF(pitches > 0) / SUM(plate_appearances) AS pitch_data_coverage_rate,FROM event\n        \n        WHERE game_id IN (SELECT game_id FROM \"timeball\".\"main_models\".\"game_start_info\" WHERE is_regular_season)\n        \n        GROUP BY team_id, season\n    ),\n\n    final AS (\n        SELECT\n            team_id,\n            season,\n            basic_stats.batters_faced::INT AS batters_faced,\n            basic_stats.outs_recorded::INT AS outs_recorded,\n            basic_stats.inherited_runners_scored::INT AS inherited_runners_scored,\n            basic_stats.bequeathed_runners_scored::INT AS bequeathed_runners_scored,\n            basic_stats.team_unearned_runs::INT AS team_unearned_runs,\n            basic_stats.plate_appearances::INT AS plate_appearances,\n            basic_stats.at_bats::INT AS at_bats,\n            basic_stats.hits::INT AS hits,\n            basic_stats.singles::INT AS singles,\n            basic_stats.doubles::INT AS doubles,\n            basic_stats.triples::INT AS triples,\n            basic_stats.home_runs::INT AS home_runs,\n            basic_stats.total_bases::INT AS total_bases,\n            basic_stats.strikeouts::INT AS strikeouts,\n            basic_stats.walks::INT AS walks,\n            basic_stats.intentional_walks::INT AS intentional_walks,\n            basic_stats.hit_by_pitches::INT AS hit_by_pitches,\n            basic_stats.sacrifice_hits::INT AS sacrifice_hits,\n            basic_stats.sacrifice_flies::INT AS sacrifice_flies,\n            basic_stats.reached_on_errors::INT AS reached_on_errors,\n            basic_stats.reached_on_interferences::INT AS reached_on_interferences,\n            basic_stats.inside_the_park_home_runs::INT AS inside_the_park_home_runs,\n            basic_stats.ground_rule_doubles::INT AS ground_rule_doubles,\n            basic_stats.infield_hits::INT AS infield_hits,\n            basic_stats.on_base_opportunities::INT AS on_base_opportunities,\n            basic_stats.on_base_successes::INT AS on_base_successes,\n            basic_stats.grounded_into_double_plays::INT AS grounded_into_double_plays,\n            basic_stats.double_plays::INT AS double_plays,\n            basic_stats.triple_plays::INT AS triple_plays,\n            basic_stats.batting_outs::INT AS batting_outs,\n            basic_stats.balls_in_play::INT AS balls_in_play,\n            basic_stats.balls_batted::INT AS balls_batted,\n            basic_stats.trajectory_fly_ball::INT AS trajectory_fly_ball,\n            basic_stats.trajectory_ground_ball::INT AS trajectory_ground_ball,\n            basic_stats.trajectory_line_drive::INT AS trajectory_line_drive,\n            basic_stats.trajectory_pop_up::INT AS trajectory_pop_up,\n            basic_stats.trajectory_unknown::INT AS trajectory_unknown,\n            basic_stats.trajectory_known::INT AS trajectory_known,\n            basic_stats.trajectory_broad_air_ball::INT AS trajectory_broad_air_ball,\n            basic_stats.trajectory_broad_ground_ball::INT AS trajectory_broad_ground_ball,\n            basic_stats.trajectory_broad_unknown::INT AS trajectory_broad_unknown,\n            basic_stats.trajectory_broad_known::INT AS trajectory_broad_known,\n            basic_stats.bunts::INT AS bunts,\n            basic_stats.batted_distance_plate::INT AS batted_distance_plate,\n            basic_stats.batted_distance_infield::INT AS batted_distance_infield,\n            basic_stats.batted_distance_outfield::INT AS batted_distance_outfield,\n            basic_stats.batted_distance_unknown::INT AS batted_distance_unknown,\n            basic_stats.batted_distance_known::INT AS batted_distance_known,\n            basic_stats.fielded_by_battery::INT AS fielded_by_battery,\n            basic_stats.fielded_by_infielder::INT AS fielded_by_infielder,\n            basic_stats.fielded_by_outfielder::INT AS fielded_by_outfielder,\n            basic_stats.fielded_by_known::INT AS fielded_by_known,\n            basic_stats.fielded_by_unknown::INT AS fielded_by_unknown,\n            basic_stats.batted_angle_left::INT AS batted_angle_left,\n            basic_stats.batted_angle_right::INT AS batted_angle_right,\n            basic_stats.batted_angle_middle::INT AS batted_angle_middle,\n            basic_stats.batted_angle_unknown::INT AS batted_angle_unknown,\n            basic_stats.batted_angle_known::INT AS batted_angle_known,\n            basic_stats.batted_location_plate::INT AS batted_location_plate,\n            basic_stats.batted_location_right_infield::INT AS batted_location_right_infield,\n            basic_stats.batted_location_middle_infield::INT AS batted_location_middle_infield,\n            basic_stats.batted_location_left_infield::INT AS batted_location_left_infield,\n            basic_stats.batted_location_left_field::INT AS batted_location_left_field,\n            basic_stats.batted_location_center_field::INT AS batted_location_center_field,\n            basic_stats.batted_location_right_field::INT AS batted_location_right_field,\n            basic_stats.batted_location_unknown::INT AS batted_location_unknown,\n            basic_stats.batted_location_known::INT AS batted_location_known,\n            basic_stats.batted_balls_pulled::INT AS batted_balls_pulled,\n            basic_stats.batted_balls_opposite_field::INT AS batted_balls_opposite_field,\n            basic_stats.runs::INT AS runs,\n            basic_stats.times_reached_base::INT AS times_reached_base,\n            basic_stats.stolen_base_opportunities::INT AS stolen_base_opportunities,\n            basic_stats.stolen_base_opportunities_second::INT AS stolen_base_opportunities_second,\n            basic_stats.stolen_base_opportunities_third::INT AS stolen_base_opportunities_third,\n            basic_stats.stolen_base_opportunities_home::INT AS stolen_base_opportunities_home,\n            basic_stats.stolen_bases::INT AS stolen_bases,\n            basic_stats.stolen_bases_second::INT AS stolen_bases_second,\n            basic_stats.stolen_bases_third::INT AS stolen_bases_third,\n            basic_stats.stolen_bases_home::INT AS stolen_bases_home,\n            basic_stats.caught_stealing::INT AS caught_stealing,\n            basic_stats.caught_stealing_second::INT AS caught_stealing_second,\n            basic_stats.caught_stealing_third::INT AS caught_stealing_third,\n            basic_stats.caught_stealing_home::INT AS caught_stealing_home,\n            basic_stats.picked_off::INT AS picked_off,\n            basic_stats.picked_off_first::INT AS picked_off_first,\n            basic_stats.picked_off_second::INT AS picked_off_second,\n            basic_stats.picked_off_third::INT AS picked_off_third,\n            basic_stats.picked_off_caught_stealing::INT AS picked_off_caught_stealing,\n            basic_stats.outs_on_basepaths::INT AS outs_on_basepaths,\n            basic_stats.unforced_outs_on_basepaths::INT AS unforced_outs_on_basepaths,\n            basic_stats.outs_avoided_on_errors::INT AS outs_avoided_on_errors,\n            basic_stats.advances_on_wild_pitches::INT AS advances_on_wild_pitches,\n            basic_stats.advances_on_passed_balls::INT AS advances_on_passed_balls,\n            basic_stats.advances_on_balks::INT AS advances_on_balks,\n            basic_stats.advances_on_unspecified_plays::INT AS advances_on_unspecified_plays,\n            basic_stats.advances_on_defensive_indifference::INT AS advances_on_defensive_indifference,\n            basic_stats.advances_on_errors::INT AS advances_on_errors,\n            basic_stats.extra_base_chances::INT AS extra_base_chances,\n            basic_stats.extra_base_advance_attempts::INT AS extra_base_advance_attempts,\n            basic_stats.extra_bases_taken::INT AS extra_bases_taken,\n            basic_stats.bases_advanced::INT AS bases_advanced,\n            basic_stats.bases_advanced_on_balls_in_play::INT AS bases_advanced_on_balls_in_play,\n            basic_stats.surplus_bases_advanced_on_balls_in_play::INT AS surplus_bases_advanced_on_balls_in_play,\n            basic_stats.outs_on_extra_base_advance_attempts::INT AS outs_on_extra_base_advance_attempts,\n            basic_stats.pitches::INT AS pitches,\n            basic_stats.swings::INT AS swings,\n            basic_stats.swings_with_contact::INT AS swings_with_contact,\n            basic_stats.strikes::INT AS strikes,\n            basic_stats.strikes_called::INT AS strikes_called,\n            basic_stats.strikes_swinging::INT AS strikes_swinging,\n            basic_stats.strikes_foul::INT AS strikes_foul,\n            basic_stats.strikes_foul_tip::INT AS strikes_foul_tip,\n            basic_stats.strikes_in_play::INT AS strikes_in_play,\n            basic_stats.strikes_unknown::INT AS strikes_unknown,\n            basic_stats.balls::INT AS balls,\n            basic_stats.balls_called::INT AS balls_called,\n            basic_stats.balls_intentional::INT AS balls_intentional,\n            basic_stats.balls_automatic::INT AS balls_automatic,\n            basic_stats.unknown_pitches::INT AS unknown_pitches,\n            basic_stats.pitchouts::INT AS pitchouts,\n            basic_stats.pitcher_pickoff_attempts::INT AS pitcher_pickoff_attempts,\n            basic_stats.catcher_pickoff_attempts::INT AS catcher_pickoff_attempts,\n            basic_stats.pitches_blocked_by_catcher::INT AS pitches_blocked_by_catcher,\n            basic_stats.pitches_with_runners_going::INT AS pitches_with_runners_going,\n            basic_stats.passed_balls::INT AS passed_balls,\n            basic_stats.wild_pitches::INT AS wild_pitches,\n            basic_stats.balks::INT AS balks,\n            basic_stats.left_on_base::INT AS left_on_base,\n            basic_stats.left_on_base_with_two_outs::INT AS left_on_base_with_two_outs,\n            basic_stats.earned_run_average,\n            basic_stats.run_average,\n            basic_stats.walks_per_9_innings,\n            basic_stats.strikeouts_per_9_innings,\n            basic_stats.home_runs_per_9_innings,\n            basic_stats.hits_per_9_innings,\n            basic_stats.walks_and_hits_per_innings_pitched,\n            basic_stats.strikeout_to_walk_ratio,\n            basic_stats.walk_rate,\n            basic_stats.strikeout_rate,\n            basic_stats.home_run_rate,\n            basic_stats.batting_average_against,\n            basic_stats.on_base_percentage_against,\n            basic_stats.slugging_percentage_against,\n            basic_stats.on_base_plus_slugging_against,\n            basic_stats.batting_average_on_balls_in_play,COALESCE(event_agg.games / basic_stats.games, 0) AS event_coverage_rate,\n            event_agg.known_trajectory_rate_outs,\n            event_agg.known_trajectory_rate_hits,\n            event_agg.known_trajectory_rate,\n            event_agg.known_trajectory_broad_rate_outs,\n            event_agg.known_trajectory_broad_rate_hits,\n            event_agg.known_trajectory_broad_rate,\n            event_agg.known_trajectory_out_hit_ratio,\n            event_agg.known_trajectory_broad_out_hit_ratio,\n            event_agg.air_ball_rate_outs,\n            event_agg.ground_ball_rate_outs,\n            event_agg.ground_air_out_ratio,\n            event_agg.air_ball_hit_rate,\n            event_agg.ground_ball_hit_rate,\n            event_agg.ground_air_hit_ratio,\n            event_agg.fly_ball_rate,\n            event_agg.line_drive_rate,\n            event_agg.pop_up_rate,\n            event_agg.ground_ball_rate,\n            event_agg.coverage_weighted_air_ball_batting_average,\n            event_agg.coverage_weighted_ground_ball_batting_average,\n            event_agg.coverage_weighted_fly_ball_batting_average,\n            event_agg.coverage_weighted_line_drive_batting_average,\n            event_agg.coverage_weighted_pop_up_batting_average,\n            event_agg.known_angle_rate_outs,\n            event_agg.known_angle_rate_hits,\n            event_agg.known_angle_rate,\n            event_agg.known_angle_out_hit_ratio,\n            event_agg.angle_left_rate_outs,\n            event_agg.angle_left_rate_hits,\n            event_agg.angle_left_rate,\n            event_agg.coverage_weighted_angle_left_batting_average,\n            event_agg.angle_right_rate_outs,\n            event_agg.angle_right_rate_hits,\n            event_agg.angle_right_rate,\n            event_agg.coverage_weighted_angle_right_batting_average,\n            event_agg.angle_middle_rate_outs,\n            event_agg.angle_middle_rate_hits,\n            event_agg.angle_middle_rate,\n            event_agg.coverage_weighted_angle_middle_batting_average,\n            event_agg.pulled_rate_outs,\n            event_agg.pulled_rate_hits,\n            event_agg.pulled_rate,\n            event_agg.coverage_weighted_pulled_batting_average,\n            event_agg.opposite_field_rate_outs,\n            event_agg.opposite_field_rate_hits,\n            event_agg.opposite_field_rate,\n            event_agg.coverage_weighted_opposite_field_batting_average,\n            event_agg.stolen_base_attempt_rate_second,\n            event_agg.stolen_base_attempt_rate_third,\n            event_agg.stolen_base_attempt_rate_home,\n            event_agg.unforced_out_rate,\n            event_agg.pitch_strike_rate,\n            event_agg.pitch_contact_rate,\n            event_agg.pitch_swing_rate,\n            event_agg.pitch_ball_rate,\n            event_agg.pitch_swing_and_miss_rate,\n            event_agg.pitch_foul_rate,\n            event_agg.pitched_called_strike_rate,\n            event_agg.pitch_data_coverage_rate,FROM basic_stats\n        LEFT JOIN event_agg USING (team_id, season)\n    )\n    \n    SELECT * FROM final\n", "relation_name": "\"timeball\".\"main_models\".\"metrics_team_season_pitching\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:57.492412Z", "completed_at": "2023-12-09T18:55:57.497376Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:57.498065Z", "completed_at": "2023-12-09T18:55:57.498069Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007153034210205078, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.timeball.team_game_results", "compiled": true, "compiled_code": "\nWITH joined AS (\n    SELECT\n        s.season,\n        s.game_id,\n        r.game_finish_date,\n        s.team_id,\n        s.game_type,\n        s.team_side,\n        s.league,\n        s.division,\n        s.opponent_league,\n        s.opponent_division,\n        s.season_game_number,\n        s.is_interleague,\n        -- Traditional top-level stats\n        CASE WHEN s.team_id = r.winning_team_id THEN 1 ELSE 0 END AS wins,\n        CASE WHEN s.team_id = r.losing_team_id THEN 1 ELSE 0 END AS losses,\n        CASE WHEN s.team_side = 'Home' THEN r.home_runs_scored ELSE r.away_runs_scored END AS runs_scored,\n        CASE WHEN s.team_side = 'Home' THEN r.away_runs_scored ELSE r.home_runs_scored END AS runs_allowed,\n        o.hits,\n        f.errors,\n        o.left_on_base,\n        -- Traditional box score stats\n        o.at_bats,\n        o.doubles,\n        o.triples,\n        o.home_runs,\n        o.runs_batted_in,\n        o.sacrifice_hits,\n        o.sacrifice_flies,\n        o.hit_by_pitches,\n        o.walks,\n        o.intentional_walks,\n        o.strikeouts,\n        o.stolen_bases,\n        o.caught_stealing,\n        o.grounded_into_double_plays,\n        o.reached_on_interferences,\n        p.innings_pitched,\n        p.individual_earned_runs AS individual_earned_runs_allowed,\n        p.earned_runs AS earned_runs_allowed,\n        p.wild_pitches,\n        p.balks,\n        f.putouts,\n        f.assists,\n        f.passed_balls,\n        f.double_plays AS double_plays_turned,\n        f.triple_plays AS triple_plays_turned,\n        -- Same for opponent\n        o_opp.team_id AS opponent_team_id,\n        o_opp.runs AS opponent_runs,\n        o_opp.hits AS opponent_hits,\n        f_opp.errors AS opponent_errors,\n        o_opp.left_on_base AS opponent_left_on_base,\n        o_opp.at_bats AS opponent_at_bats,\n        o_opp.doubles AS opponent_doubles,\n        o_opp.triples AS opponent_triples,\n        o_opp.home_runs AS opponent_home_runs,\n        o_opp.runs_batted_in AS opponent_runs_batted_in,\n        o_opp.sacrifice_hits AS opponent_sacrifice_hits,\n        o_opp.sacrifice_flies AS opponent_sacrifice_flies,\n        o_opp.hit_by_pitches AS opponent_hit_by_pitches,\n        o_opp.walks AS opponent_walks,\n        o_opp.intentional_walks AS opponent_intentional_walks,\n        o_opp.strikeouts AS opponent_strikeouts,\n        o_opp.stolen_bases AS opponent_stolen_bases,\n        o_opp.caught_stealing AS opponent_caught_stealing,\n        o_opp.grounded_into_double_plays AS opponent_grounded_into_double_plays,\n        o_opp.reached_on_interferences AS opponent_reached_on_interferences,\n        p_opp.innings_pitched AS opponent_innings_pitched,\n        p_opp.individual_earned_runs AS opponent_individual_earned_runs_allowed,\n        p_opp.earned_runs AS opponent_earned_runs_allowed,\n        p_opp.wild_pitches AS opponent_wild_pitches,\n        p_opp.balks AS opponent_balks,\n        f_opp.putouts AS opponent_putouts,\n        f_opp.assists AS opponent_assists,\n        f_opp.passed_balls AS opponent_passed_balls,\n        f_opp.double_plays AS opponent_double_plays,\n        f_opp.triple_plays AS opponent_triple_plays,\n    FROM \"timeball\".\"main_models\".\"team_game_start_info\" AS s\n    INNER JOIN \"timeball\".\"main_models\".\"game_results\" AS r USING (game_id)\n    LEFT JOIN \"timeball\".\"main_models\".\"team_game_offense_stats\" AS o USING (game_id, team_id)\n    LEFT JOIN \"timeball\".\"main_models\".\"team_game_fielding_stats\" AS f USING (game_id, team_id)\n    LEFT JOIN \"timeball\".\"main_models\".\"team_game_pitching_stats\" AS p USING (game_id, team_id)\n    LEFT JOIN \"timeball\".\"main_models\".\"team_game_offense_stats\" AS o_opp\n        ON o_opp.game_id = o.game_id AND o_opp.team_id != o.team_id\n    LEFT JOIN \"timeball\".\"main_models\".\"team_game_fielding_stats\" AS f_opp\n        ON f_opp.game_id = f.game_id AND f_opp.team_id != f.team_id\n    LEFT JOIN \"timeball\".\"main_models\".\"team_game_pitching_stats\" AS p_opp\n        ON p_opp.game_id = p.game_id AND p_opp.team_id != p.team_id\n),\n\nenriched AS (\n    SELECT\n        *,\n        CASE WHEN team_side = 'Home' THEN wins ELSE 0 END AS home_wins,\n        CASE WHEN team_side = 'Home' THEN losses ELSE 0 END AS home_losses,\n        CASE WHEN team_side = 'Away' THEN wins ELSE 0 END AS away_wins,\n        CASE WHEN team_side = 'Away' THEN losses ELSE 0 END AS away_losses,\n        CASE WHEN is_interleague THEN wins ELSE 0 END AS interleague_wins,\n        CASE WHEN is_interleague THEN losses ELSE 0 END AS interleague_losses,\n        CASE WHEN NOT is_interleague AND opponent_division = 'E' THEN wins ELSE 0 END AS east_wins,\n        CASE WHEN NOT is_interleague AND opponent_division = 'E' THEN losses ELSE 0 END AS east_losses,\n        CASE WHEN NOT is_interleague AND opponent_division = 'C' THEN wins ELSE 0 END AS central_wins,\n        CASE WHEN NOT is_interleague AND opponent_division = 'C' THEN losses ELSE 0 END AS central_losses,\n        CASE WHEN NOT is_interleague AND opponent_division = 'W' THEN wins ELSE 0 END AS west_wins,\n        CASE WHEN NOT is_interleague AND opponent_division = 'W' THEN losses ELSE 0 END AS west_losses,\n        CASE WHEN ABS(runs_scored::INT - runs_allowed) = 1 THEN wins ELSE 0 END AS one_run_wins,\n        CASE WHEN ABS(runs_scored::INT - runs_allowed) = 1 THEN losses ELSE 0 END AS one_run_losses,\n        CASE WHEN wins = 1 AND NOT LAG(wins = 1, 1, FALSE) OVER streak_window\n                THEN season_game_number\n        END AS win_streak_id,\n        CASE WHEN losses = 1 AND NOT LAG(losses = 1, 1, FALSE) OVER streak_window\n                THEN season_game_number\n        END AS loss_streak_id,\n    FROM joined\n    WINDOW streak_window AS (\n        PARTITION BY season, team_id, game_type\n        ORDER BY game_finish_date, season_game_number\n    )\n),\n\nstreak_calc_continued AS (\n    SELECT\n        * REPLACE (\n            CASE WHEN wins = 1 AND win_streak_id IS NULL\n                    THEN LAG(win_streak_id IGNORE NULLS) OVER streak_window\n                ELSE win_streak_id\n            END AS win_streak_id,\n            CASE WHEN losses = 1 AND loss_streak_id IS NULL\n                    THEN LAG(loss_streak_id IGNORE NULLS) OVER streak_window\n                ELSE loss_streak_id\n            END AS loss_streak_id\n        )\n    FROM enriched\n    WINDOW streak_window AS (\n        PARTITION BY season, team_id, game_type\n        ORDER BY game_finish_date, season_game_number\n        ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\n    )\n),\n\nfinal AS (\n    SELECT\n        *,\n        CASE WHEN wins = 1 THEN COUNT(*) OVER win_streak_window ELSE 0 END AS win_streak_length,\n        CASE WHEN losses = 1 THEN COUNT(*) OVER loss_streak_window ELSE 0 END AS loss_streak_length,\n    FROM streak_calc_continued\n    WINDOW\n        win_streak_window AS (\n            PARTITION BY season, team_id, game_type, win_streak_id\n            ORDER BY game_finish_date, season_game_number\n        ),\n        loss_streak_window AS (\n            PARTITION BY season, team_id, game_type, loss_streak_id\n            ORDER BY game_finish_date, season_game_number\n        )\n)\n\nSELECT * FROM final", "relation_name": "\"timeball\".\"main_models\".\"team_game_results\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:57.500334Z", "completed_at": "2023-12-09T18:55:57.503421Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:57.504105Z", "completed_at": "2023-12-09T18:55:57.504108Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005288839340209961, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.timeball.ml_features", "compiled": true, "compiled_code": "\nWITH final AS (\n    SELECT\n        o.event_key,\n        o.outcome_has_batting_bin,\n        o.outcome_is_in_play_bin,\n        o.outcome_batted_trajectory_cat,\n        o.outcome_batted_location_cat,\n        o.outcome_plate_appearance_cat,\n        o.outcome_baserunning_cat,\n        o.outcome_runs_following_num,\n        o.outcome_is_win_bin,\n        o.generic_sample_weight,\n        o.plate_appearance_sample_weight,\n        o.in_play_sample_weight,\n        o.trajectory_sample_weight,\n        o.location_sample_weight,\n        o.baserunning_play_sample_weight,\n        o.win_sample_weight,\n        e.season::FLOAT AS season_num,\n        DATE_PART('dayofyear', e.date)::FLOAT AS day_of_year_num,\n        LEAST(e.inning_start, 10)::FLOAT AS inning_num,\n        CASE WHEN e.frame_start = 'Top' THEN 0 ELSE 1 END::FLOAT AS frame_num,\n        CASE WHEN e.time_of_day = 'Night' THEN 1 ELSE 0 END::FLOAT AS is_night_game_num,\n        CASE\n            WHEN e.batting_side = 'Home'\n                THEN e.score_home_start\n            ELSE e.score_away_start\n        END::FLOAT AS score_batting_team_num,\n        CASE\n            WHEN e.batting_side = 'Home'\n                THEN e.score_away_start\n            ELSE e.score_home_start\n        END::FLOAT AS score_fielding_team_num,\n        e.park_id AS park_cat,\n        e.game_type AS game_type_cat,\n        COALESCE(e.league, 'None') AS league_cat,\n        e.base_state_start::VARCHAR AS base_state_cat,\n        e.batter_id AS batter_player,\n        COALESCE(e.runner_first_id_start, 'N/A') AS runner_first_player,\n        COALESCE(e.runner_second_id_start, 'N/A') AS runner_second_player,\n        COALESCE(e.runner_third_id_start, 'N/A') AS runner_third_player,\n        e.pitcher_id AS pitcher_player,\n        CASE\n            WHEN HASH(e.game_id)::HUGEINT % 100 BETWEEN 0 AND 97 THEN 'TRAIN'\n            ELSE 'TEST'\n        END AS meta_train_test_split,\n\n    FROM \"timeball\".\"main_models\".\"ml_event_outcomes\" AS o\n    -- This is really an inner join but using o as the base table\n    -- preserves the random order\n    LEFT JOIN \"timeball\".\"main_models\".\"event_states_full\" AS e USING (event_key)\n)\n\nSELECT * FROM final", "relation_name": "\"timeball\".\"main_models\".\"ml_features\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:57.506299Z", "completed_at": "2023-12-09T18:55:57.509944Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:57.510595Z", "completed_at": "2023-12-09T18:55:57.510599Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0058481693267822266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "analysis.timeball.scorekeeper_tendencies_location", "compiled": true, "compiled_code": "WITH final AS (\n    SELECT\n        cleaned_scorer || COALESCE(inputter, '') || COALESCE(translator, '') AS scorer,\n        substring(game_id, 4, 4)::int // 10 * 10 AS decade,\n        SUM(game_share) AS plays,\n        SUM(batted_location_known * hits) AS hits_location_known,\n        SUM(batted_location_unknown * hits) AS hits_location_unknown,\n        hits_location_known / SUM(hits) AS location_known_hit_rate,\n        SUM(batted_distance_infield * hits)/hits_location_known AS hits_location_infield_rate,\n        SUM(batted_distance_outfield * hits)/hits_location_known AS hits_location_outfield_rate,\n        SUM(singles * batted_location_known) / SUM(singles) AS location_known_single_rate,\n        SUM(doubles * batted_location_known) / SUM(doubles) AS location_known_double_rate,\n        SUM(triples * batted_location_known) / SUM(triples) AS location_known_triple_rate,\n        SUM((li.win_leverage_index > 1)::int * batted_location_known * hits) / SUM((li.win_leverage_index > 1)::int * hits) AS location_known_high_leverage_rate,\n        SUM((e.runs_on_play >= 1)::int * batted_location_known * hits) / SUM((e.runs_on_play >= 1)::int * hits) AS location_known_run_scoring_play_rate,\n        SUM((e.base_state > 0)::int * batted_location_known * hits) / SUM((e.base_state > 0)::int * hits) AS location_known_runners_on_base_rate,\n        SUM(batted_location_left_infield * hits) / SUM(batted_distance_infield * hits) AS known_location_share_left_infield,\n        SUM(batted_location_middle_infield * hits) / SUM(batted_distance_infield * hits) AS known_location_share_middle_infield,\n        SUM(batted_location_right_infield * hits) / SUM(batted_distance_infield * hits) AS known_location_share_right_infield,\n        SUM(batted_location_left_field * hits) / SUM(batted_distance_outfield * hits) AS known_location_share_left_field,\n        SUM(batted_location_center_field * hits) / SUM(batted_distance_outfield * hits) AS known_location_share_center_field,\n        SUM(batted_location_right_field * hits) / SUM(batted_distance_outfield * hits) AS known_location_share_right_field,\n        SUM((batted_to_fielder = 7)::int * hits) / SUM(fielded_by_outfielder * hits) AS known_fielded_by_left_fielder_rate,\n        SUM((batted_to_fielder = 8)::int * hits) / SUM(fielded_by_outfielder * hits) AS known_fielded_by_center_fielder_rate,\n        SUM((batted_to_fielder = 9)::int * hits) / SUM(fielded_by_outfielder * hits) AS known_fielded_by_right_fielder_rate,\n        SUM(trajectory_ground_ball * batted_location_known * fielded_by_outfielder * hits) / SUM(trajectory_broad_known * batted_location_known * fielded_by_outfielder * hits) AS outfield_hit_ground_ball_rate,\n        SUM(batted_balls_pulled * batted_location_known * hits) / SUM(batted_location_known * hits) AS known_location_pulled_rate,\n        SUM(batted_balls_opposite_field * batted_location_known * hits) / SUM(batted_location_known * hits) AS known_location_opposite_field_rate,\n        SUM(batted_distance_outfield * fielded_by_unknown * hits) / SUM(batted_distance_known * fielded_by_unknown * hits) AS unknown_fielder_hit_in_outfield_rate,\n    FROM \"timeball\".\"main_models\".\"event_offense_stats\" s\n    LEFT JOIN \"timeball\".\"main_models\".\"game_scorekeeping\" k USING (game_id)\n    INNER JOIN \"timeball\".\"main_models\".\"event_states_full\" f USING (event_key)\n    LEFT JOIN \"timeball\".\"main_models\".\"stg_events\" AS e USING (event_key)\n    LEFT JOIN \"timeball\".\"main_models\".\"leverage_index\" li USING (win_expectancy_start_key)\n    WHERE balls_in_play = 1\n    GROUP BY 1, 2\n)\n\nSELECT location_known_hit_rate * hits_location_outfield_rate AS r, * FROM final\nWHERE hits_location_known > 50", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:57.512885Z", "completed_at": "2023-12-09T18:55:57.516907Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:57.517545Z", "completed_at": "2023-12-09T18:55:57.517549Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0060269832611083984, "adapter_response": {}, "message": null, "failures": null, "unique_id": "analysis.timeball.scratch", "compiled": true, "compiled_code": "\n\n\n\n\n\n\nWITH t AS (\n    SELECT cleaned_scorer, game_id, game_share, unnest([away_team_id, home_team_id]) AS team_id\n    FROM \"timeball\".\"main_models\".\"game_scorekeeping\"\n)\n\nSELECT cleaned_scorer,\n    SUM(game_share /2) AS share,\n    SUM(share) OVER (ORDER BY share DESC, cleaned_scorer)/SUM(share) OVER  () AS cumsum,\n    ROW_NUMBER() OVER (ORDER BY share DESC, cleaned_scorer) AS rank,\n    LIST(DISTINCT SUBSTRING(game_id, 1, 7) ORDER BY substring(game_id, 1, 7)) AS files,\nFROM t\n--WHERE cleaned_scorer LIKE '%kopf%'\nGROUP BY 1 ORDER BY 2 DESC\n\nSELECT game_id, cleaned_scorer, batted_trajectory, batted_to_fielder, batted_location_general\nFROM \"timeball\".\"main_models\".\"stg_events\" e\n JOIN \"timeball\".\"main_models\".\"game_scorekeeping\" USING (game_id)\nWHERE 1=1\nand inputter ilike 'Dewan'\nAND plate_appearance_result IN ('Single', 'Double', 'Triple')\nAND batted_location_general != 'Unknown'\nAND batted_trajectory = 'Unknown'\nORDER BY e.date, game_id, event_id\n\nSELECT batted_trajectory, date, c.game_id, e.batter_id, e.inning, e.pitcher_id, c.batted_to_fielder, c.contact_broad_classification, recorded_location, recorded_location_angle, recorded_location_depth\nFROM \"timeball\".\"main_models\".\"stg_events\" e\nINNER JOIN \"timeball\".\"main_models\".\"calc_batted_ball_type\" c USING (event_key)\nWHERE e.batter_id LIKE 'youne%'\nAND season = 2000\nAND e.plate_appearance_result IN ('Single', 'Double')\nORDER BY date DESC , c.game_id DESC, event_id DESC;\n\nSELECT * FROM \"timeball\".\"main_models\".\"metrics_player_career_offense\"\nORDER BY hits DESC\n\nSELECT * FROM \"timeball\".\"main_models\".\"event_offense_stats\"\nWHERE player_id LIKE 'troum%'\nAND balls_batted = 1\n\nSELECT *\nFROM \"timeball\".\"main_models\".\"player_game_offense_stats\"\nWHERE player_id = 'musis101'\nAND game_id IN (SELECT game_id from \"timeball\".\"main_models\".\"game_start_info\" WHERE is_regular_season)\nAND substring(game_id, 4, 4) = 1960", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:57.519603Z", "completed_at": "2023-12-09T18:55:57.522224Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:57.522864Z", "completed_at": "2023-12-09T18:55:57.522867Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004575967788696289, "adapter_response": {}, "message": null, "failures": null, "unique_id": "analysis.timeball.putout_innings_gaps", "compiled": true, "compiled_code": "WITH event_based_putouts AS (\n    SELECT game_id, team_id, SUM(putouts) AS putouts\n    FROM \"timeball\".\"main_models\".\"event_fielding_stats\"\n    GROUP BY 1, 2\n)\nSELECT game_id, team_id,\n    ROUND(innings_pitched * 3)::int AS ip_outs,\n    r.putouts,\n    e.putouts AS event_putouts,\n    ip_outs - r.putouts AS diff,\n    ip_outs - e.putouts AS event_based_diff\nFROM \"timeball\".\"main_models\".\"team_game_results\" r\nLEFT JOIN event_based_putouts e USING (game_id, team_id)\nWHERE diff != 0\nORDER BY ABS(innings_pitched * 3 - r.putouts) DESC", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:57.524960Z", "completed_at": "2023-12-09T18:55:57.528063Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:57.528707Z", "completed_at": "2023-12-09T18:55:57.528710Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005079984664916992, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.timeball.calc_park_factors_basic", "compiled": true, "compiled_code": "\n-- This needs to cover games with the lowest possible coverage\n-- (run totals for each team)\nWITH batting_agg AS (\n    SELECT\n        s.park_id,\n        s.season,\n        s.league,\n        s.team_id,\n        s.opponent_id,\n        SUM(r.runs_scored + r.runs_allowed) AS runs,\n        -- Estimate innings for games without box score/pbp data\n        SUM(COALESCE(r.innings_pitched + r.opponent_innings_pitched, 18)) AS innings,\n    FROM \"timeball\".\"main_models\".\"team_game_start_info\" AS s\n    INNER JOIN \"timeball\".\"main_models\".\"team_game_results\" AS r USING (game_id, team_id)\n    WHERE s.game_type = 'RegularSeason'\n        AND NOT s.is_interleague\n    GROUP BY 1, 2, 3, 4, 5\n),\n\naverages AS (\n    SELECT DISTINCT ON (season, league)\n        season,\n        league,\n        SUM(runs) OVER w / SUM(innings) OVER w AS run_rate_league,\n        SUM(runs) OVER () / SUM(innings) OVER () AS run_rate_all,\n        run_rate_league / run_rate_all AS run_factor\n    FROM batting_agg\n    WINDOW w AS (PARTITION BY season, league)\n),\n\nmulti_year_range AS (\n    SELECT\n        ba.park_id,\n        ba.season,\n        ba.league,\n        ba.team_id,\n        ba.opponent_id,\n        -- Adjust to handle wide year-to-year differences\n        -- common in 19th century\n        SUM(ba.runs) OVER w / averages.run_factor AS runs,\n        SUM(ba.innings) OVER w AS innings,\n    FROM batting_agg AS ba\n    INNER JOIN averages USING (season, league)\n    WINDOW w AS (\n        PARTITION BY park_id, league, team_id, opponent_id\n        ORDER BY season\n        ROWS BETWEEN 2 PRECEDING AND CURRENT ROW\n    )\n),\n\nself_joined AS (\n    SELECT\n        this.park_id AS this_park_id,\n        other.park_id AS other_park_id,\n        this.season,\n        this.league,\n        this.team_id,\n        this.opponent_id,\n        -- Restrict avg runs per inning to between 0.1 AND 1\n        GREATEST(0.1, LEAST(1, this.runs / this.innings)) AS this_runs_per_inning,\n        GREATEST(0.1, LEAST(1, other.runs / other.innings)) AS other_runs_per_inning,\n        SQRT(LEAST(this.innings, other.innings)) AS sample_size,\n        SUM(sample_size) OVER (PARTITION BY this_park_id, this.season, this.league) AS sum_sample_size\n    FROM multi_year_range AS this\n    INNER JOIN multi_year_range AS other\n        ON this.park_id != other.park_id\n            AND this.season = other.season\n            AND this.league = other.league\n            AND this.team_id = other.team_id\n            AND this.opponent_id = other.opponent_id\n),\n\nrate_calculation AS (\n    SELECT\n        *,\n        -- Find the park pair with the highest sample size, and upweight all other pairs to match\n        MAX(sum_sample_size) OVER (PARTITION BY this_park_id, season, league) AS scaling_factor,\n        sample_size * (scaling_factor / sum_sample_size) AS sample_weight\n    FROM self_joined\n),\n\nfinal AS (\n    SELECT\n        this_park_id AS park_id,\n        season,\n        league,\n        SUM(sample_size) AS sqrt_sample_size,\n        SUM(this_runs_per_inning * sample_weight) / SUM(sample_weight) AS avg_this_runs_per_inning,\n        SUM(other_runs_per_inning * sample_weight) / SUM(sample_weight) AS avg_other_runs_per_inning,\n        avg_this_runs_per_inning / avg_other_runs_per_inning AS basic_park_factor\n    FROM rate_calculation\n    GROUP BY 1, 2, 3\n)\n\nSELECT * FROM final", "relation_name": "\"timeball\".\"main_models\".\"calc_park_factors_basic\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:57.530935Z", "completed_at": "2023-12-09T18:55:57.537139Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:57.537814Z", "completed_at": "2023-12-09T18:55:57.537818Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008347749710083008, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.timeball.linear_weights", "compiled": true, "compiled_code": "\nWITH valid_leagues AS (\n    SELECT\n        season,\n        league,\n        AVG(runs_scored) AS average_runs_scored,\n    FROM \"timeball\".\"main_models\".\"team_game_results\"\n    GROUP BY 1, 2\n),\n\nunion_plays AS (\n    SELECT\n        e.event_key,\n        CASE WHEN cat.result_category = 'InPlayOut' AND e.outs_on_play > 1\n                THEN 'DoublePlay'\n            ELSE cat.result_category\n        END AS play,\n        'BATTING' AS play_category,\n    FROM \"timeball\".\"main_models\".\"stg_events\" AS e\n    INNER JOIN \"timeball\".\"main_seeds\".\"seed_plate_appearance_result_types\" AS cat USING (plate_appearance_result)\n    -- Only include plays that didn't have simultaneous baserunning plays,\n    -- or plays with an atypical number of outs recorded for its type (e.g. single with an out)\n    WHERE e.event_key NOT IN (\n        SELECT event_key FROM \"timeball\".\"main_models\".\"stg_event_baserunners\" WHERE baserunning_play_type IS NOT NULL\n    )\n    UNION ALL BY NAME\n    -- Only consider baserunning plays with a single event for now.\n    -- We can still handle these cases downstream by assigning the value\n    -- to each item of the event, e.g. 2xSB for a double steal, which is probably\n    -- wrong but not too far off.\n    SELECT\n        e.event_key,\n        FIRST(CASE WHEN e.is_out THEN cat.result_category_out ELSE cat.result_category_safe END) AS play,\n        FIRST('BASERUNNING') AS play_category,\n    FROM \"timeball\".\"main_models\".\"stg_event_baserunners\" AS e\n    INNER JOIN \"timeball\".\"main_seeds\".\"seed_baserunning_play_types\" AS cat USING (baserunning_play_type)\n    WHERE e.event_key NOT IN (\n            SELECT event_key FROM \"timeball\".\"main_models\".\"stg_events\" WHERE plate_appearance_result IS NOT NULL\n        )\n    GROUP BY 1\n    HAVING COUNT(*) = 1\n),\n\njoined AS (\n    SELECT\n        trans.season,\n        trans.league,\n        union_plays.play,\n        union_plays.play_category,\n        trans.expected_runs_change,\n        trans.expected_batting_win_change\n    FROM union_plays\n    INNER JOIN \"timeball\".\"main_models\".\"event_transition_values\" AS trans USING (event_key)\n),\n\nagg_specific AS (\n    SELECT DISTINCT ON (season, league, play)\n        season,\n        league,\n        play,\n        play_category,\n        AVG(expected_runs_change) OVER all_league AS average_run_value_all,\n        AVG(expected_runs_change) OVER result AS average_run_value_result,\n        STDDEV_SAMP(expected_runs_change) OVER result AS std_dev_run_value_result,\n        AVG(expected_batting_win_change) OVER all_league AS average_win_value_all,\n        AVG(expected_batting_win_change) OVER result AS average_win_value_result,\n        STDDEV_SAMP(expected_batting_win_change) OVER result AS std_dev_win_value_result,\n        FALSE AS is_imputed\n    FROM joined\n    WINDOW\n        all_league AS (PARTITION BY season, league),\n        result AS (PARTITION BY season, league, play)\n    QUALIFY COUNT(*) OVER result > 100\n),\n\ngeneric_values AS (\n    SELECT DISTINCT ON (play)\n        play,\n        play_category,\n        AVG(expected_runs_change) OVER () AS average_run_value_all,\n        AVG(expected_runs_change) OVER result AS average_run_value_result,\n        STDDEV_SAMP(expected_runs_change) OVER result AS std_dev_run_value_result,\n        AVG(expected_batting_win_change) OVER () AS average_win_value_all,\n        AVG(expected_batting_win_change) OVER result AS average_win_value_result,\n        STDDEV_SAMP(expected_batting_win_change) OVER result AS std_dev_win_value_result,\n    FROM joined\n    WINDOW result AS (PARTITION BY play)\n),\n\nimputed AS (\n    SELECT\n        valid_leagues.*,\n        generic_values.*,\n        TRUE AS is_imputed\n    FROM generic_values\n    CROSS JOIN valid_leagues\n    LEFT JOIN agg_specific USING (season, league, play)\n    WHERE agg_specific.season IS NULL\n),\n\nunioned AS (\n    SELECT * FROM agg_specific\n    UNION ALL BY NAME\n    SELECT * FROM imputed\n),\n\nfinal AS (\n    SELECT\n        season,\n        COALESCE(league, 'N/A') AS league,\n        play,\n        play_category,\n        ROUND(average_run_value_result - average_run_value_all, 3) AS average_run_value,\n        ROUND(average_win_value_result - average_win_value_all, 3) AS average_win_value,\n        average_run_value_result\n            - FIRST(CASE WHEN play = 'InPlayOut' THEN average_run_value_result END IGNORE NULLS) OVER w\n        AS relative_run_value,\n        ROUND(std_dev_run_value_result, 3) AS std_dev_run_value,\n        ROUND(std_dev_win_value_result, 3) AS std_dev_win_value,\n        is_imputed\n    FROM unioned\n    WINDOW w AS (PARTITION BY season, league)\n)\n\nSELECT * FROM final", "relation_name": "\"timeball\".\"main_models\".\"linear_weights\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:57.539965Z", "completed_at": "2023-12-09T18:55:57.543753Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:57.544400Z", "completed_at": "2023-12-09T18:55:57.544404Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005795955657958984, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.timeball.standings", "compiled": true, "compiled_code": "\nWITH date_spine AS MATERIALIZED (\n    SELECT UNNEST(GENERATE_SERIES(\n        (SELECT MIN(date) FROM \"timeball\".\"main_models\".\"game_start_info\"),\n        (SELECT MAX(date) FROM \"timeball\".\"main_models\".\"game_start_info\") + 1,\n        INTERVAL '1 day'\n    ))::DATE AS date,\n    EXTRACT(YEAR FROM date) AS season\n),\n\nseason_date_bounds AS (\n    SELECT\n        season,\n        MIN(game_finish_date) - 1 AS season_start_date,\n        MAX(game_finish_date) + 1 AS season_end_date\n    FROM \"timeball\".\"main_models\".\"game_results\"\n    WHERE game_type = 'RegularSeason'\n    GROUP BY 1\n),\n\nteam_spine AS (\n    SELECT\n        season,\n        team_id,\n        -- TODO: Test one league per team per regular season\n        ANY_VALUE(league) AS league,\n        ANY_VALUE(team_name) AS team_name,\n        ANY_VALUE(division) AS division,\n    FROM \"timeball\".\"main_models\".\"team_game_start_info\"\n    WHERE game_type = 'RegularSeason'\n    GROUP BY 1, 2\n),\n\nstandings_spine AS (\n    SELECT\n        d.season,\n        d.date,\n        t.* EXCLUDE (season)\n    FROM date_spine AS d\n    INNER JOIN season_date_bounds AS b USING (season)\n    LEFT JOIN team_spine AS t USING (season)\n    WHERE d.date BETWEEN b.season_start_date AND b.season_end_date\n),\n\ncrossed AS (\n    SELECT DISTINCT ON (s.date, s.season, s.league, s.team_id)\n        s.date,\n        s.season,\n        s.league,\n        s.division,\n        s.team_id,\n        s.team_name,\n        COALESCE(SUM(r.wins) OVER team_window, 0) AS wins,\n        COALESCE(SUM(r.losses) OVER team_window, 0) AS losses,\n        -- Take the streak count from the last game of the day\n        COALESCE(LAST(r.win_streak_length IGNORE NULLS) OVER team_window, 0) AS win_streak_length,\n        COALESCE(LAST(r.loss_streak_length IGNORE NULLS) OVER team_window, 0) AS loss_streak_length,\n        COALESCE(SUM(r.runs_scored) OVER team_window, 0) AS runs_scored,\n        COALESCE(SUM(r.runs_allowed) OVER team_window, 0) AS runs_allowed,\n        COALESCE(SUM(r.home_wins) OVER team_window, 0) AS home_wins,\n        COALESCE(SUM(r.home_losses) OVER team_window, 0) AS home_losses,\n        COALESCE(SUM(r.away_wins) OVER team_window, 0) AS away_wins,\n        COALESCE(SUM(r.away_losses) OVER team_window, 0) AS away_losses,\n        COALESCE(SUM(r.interleague_wins) OVER team_window, 0) AS interleague_wins,\n        COALESCE(SUM(r.interleague_losses) OVER team_window, 0) AS interleague_losses,\n        COALESCE(SUM(r.east_wins) OVER team_window, 0) AS east_wins,\n        COALESCE(SUM(r.east_losses) OVER team_window, 0) AS east_losses,\n        COALESCE(SUM(r.central_wins) OVER team_window, 0) AS central_wins,\n        COALESCE(SUM(r.central_losses) OVER team_window, 0) AS central_losses,\n        COALESCE(SUM(r.west_wins) OVER team_window, 0) AS west_wins,\n        COALESCE(SUM(r.west_losses) OVER team_window, 0) AS west_losses,\n        COALESCE(SUM(r.one_run_wins) OVER team_window, 0) AS one_run_wins,\n        COALESCE(SUM(r.one_run_losses) OVER team_window, 0) AS one_run_losses,\n        COALESCE(SUM(r.wins) OVER last_10_window, 0) AS last_10_wins,\n        COALESCE(SUM(r.losses) OVER last_10_window, 0) AS last_10_losses,\n    FROM standings_spine AS s\n    LEFT JOIN \"timeball\".\"main_models\".\"team_game_results\" AS r\n        ON r.season = s.season\n            AND r.team_id = s.team_id\n            AND r.game_finish_date = s.date\n            AND r.game_type = 'RegularSeason'\n    WINDOW\n        team_window AS (\n            PARTITION BY s.season, s.team_id\n            ORDER BY s.date, r.season_game_number\n        ),\n        last_10_window AS (\n            PARTITION BY s.season, s.team_id\n            ORDER BY r.season_game_number\n            RANGE BETWEEN 9 PRECEDING AND CURRENT ROW\n        )\n),\n\nfinal AS (\n    SELECT\n        -- Put the calc cols further up\n        season,\n        date,\n        league,\n        division,\n        team_id,\n        team_name,\n        wins,\n        losses,\n        wins / (wins + losses) AS win_percentage,\n        GREATEST(\n            0,\n            (FIRST(wins) OVER division_snapshot - FIRST(losses) OVER division_snapshot - (wins - losses)) / 2\n        ) AS games_behind,\n        runs_scored ^ 1.85 / (runs_scored ^ 1.85 + runs_allowed ^ 1.85) AS pythagorean_win_percentage,\n        (runs_scored - runs_allowed) / (wins + losses) AS average_run_differential,\n        * EXCLUDE (date, season, league, division, team_id, team_name, wins, losses)\n    FROM crossed\n    WINDOW\n        division_snapshot AS (\n            PARTITION BY season, league, division, date\n            ORDER BY wins - losses DESC\n        )\n)\n\nSELECT * FROM final", "relation_name": "\"timeball\".\"main_models\".\"standings\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-09T18:55:57.546734Z", "completed_at": "2023-12-09T18:55:57.667114Z"}, {"name": "execute", "started_at": "2023-12-09T18:55:57.667820Z", "completed_at": "2023-12-09T18:55:57.667825Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.15403509140014648, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.timeball.park_factors", "compiled": true, "compiled_code": "\n\nWITH final AS (\n    SELECT\n        b.season,\n        b.park_id,\n        b.league,\n        b.basic_park_factor,\n        \n            a.singles_park_factor,\n        \n            a.doubles_park_factor,\n        \n            a.triples_park_factor,\n        \n            a.home_runs_park_factor,\n        \n            a.strikeouts_park_factor,\n        \n            a.walks_park_factor,\n        \n            a.batting_outs_park_factor,\n        \n            a.runs_park_factor,\n        \n            a.balls_in_play_park_factor,\n        \n            a.trajectory_fly_ball_park_factor,\n        \n            a.trajectory_ground_ball_park_factor,\n        \n            a.trajectory_line_drive_park_factor,\n        \n            a.trajectory_pop_up_park_factor,\n        \n            a.trajectory_unknown_park_factor,\n        \n            a.batted_distance_infield_park_factor,\n        \n            a.batted_distance_outfield_park_factor,\n        \n            a.batted_distance_unknown_park_factor,\n        \n            a.batted_angle_left_park_factor,\n        \n            a.batted_angle_right_park_factor,\n        \n            a.batted_angle_middle_park_factor,\n        \n        COALESCE(a.runs_park_factor, b.basic_park_factor) AS overall_park_factor\n    FROM \"timeball\".\"main_models\".\"calc_park_factors_basic\" AS b\n    LEFT JOIN \"timeball\".\"main_models\".\"calc_park_factors_advanced\" AS a USING (season, park_id, league)\n)\n\nSELECT * FROM final", "relation_name": "\"timeball\".\"main_models\".\"park_factors\""}], "elapsed_time": 5.3902599811553955, "args": {"warn_error_options": {"include": [], "exclude": []}, "project_dir": "/Users/davidroher/Repos/timeball-dbt/timeball", "indirect_selection": "eager", "log_level_file": "debug", "log_format": "default", "use_colors": true, "log_format_file": "debug", "exclude": [], "partial_parse_file_diff": true, "static": false, "select": [], "send_anonymous_usage_stats": false, "invocation_command": "dbt docs generate", "empty_catalog": false, "cache_selected_only": false, "use_colors_file": true, "macro_debugging": false, "introspect": true, "strict_mode": false, "version_check": true, "profiles_dir": "/Users/davidroher/.dbt", "compile": true, "defer": false, "show_resource_report": false, "which": "generate", "write_json": true, "static_parser": true, "log_level": "info", "print": true, "quiet": false, "log_file_max_bytes": 10485760, "vars": {}, "favor_state": false, "printer_width": 80, "partial_parse": true, "enable_legacy_logger": false, "log_path": "/Users/davidroher/Repos/timeball-dbt/timeball/logs", "populate_cache": true}}