{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v11.json", "dbt_version": "1.7.3", "generated_at": "2023-12-11T09:24:18.542064Z", "invocation_id": "f0fa84c9-d13c-403e-8e63-f3dbf1df7374", "env": {}, "project_name": "baseball_computer", "project_id": "f4dcc515ee899bdb0c4515f4f4880926", "user_id": null, "send_anonymous_usage_stats": false, "adapter_type": "duckdb"}, "nodes": {"model.baseball_computer.stg_parks": {"database": "bc", "schema": "main_models", "name": "stg_parks", "resource_type": "model", "package_name": "baseball_computer", "path": "staging/misc/stg_parks.sql", "original_file_path": "models/staging/misc/stg_parks.sql", "unique_id": "model.baseball_computer.stg_parks", "fqn": ["baseball_computer", "staging", "misc", "stg_parks"], "alias": "stg_parks", "checksum": {"name": "sha256", "checksum": "2fc5444e01cdf96ef0be51a98044c84474f46c996cd6cea6a0cbc905b03dd8be"}, "config": {"enabled": true, "alias": null, "schema": "models", "database": null, "tags": [], "meta": {"primary_keys": ["park_id"]}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {"park_id": {"name": "park_id", "description": "Retrosheet park ID, 3-character string which identifies the ballpark\n    associated with this entity. See `stg_parks` for full park info.", "meta": {}, "data_type": "park_id", "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "aka": {"name": "aka", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "city": {"name": "city", "description": "", "meta": {}, "data_type": "varchar", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "state": {"name": "state", "description": "", "meta": {}, "data_type": "varchar", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "start_date": {"name": "start_date", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "end_date": {"name": "end_date", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "league": {"name": "league", "description": "Abbreviation for the league associated with this entity. NULL\n    indicates that a team is not part of a league (e.g. all-star games\n    or Negro League barnstorming teams).", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "notes": {"name": "notes", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}}, "meta": {"primary_keys": ["park_id"]}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "baseball_computer://models/staging/misc/stg_parks.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "models", "contract": {"enforced": true}, "meta": {"primary_keys": ["park_id"]}}, "created_at": 1702281448.9606771, "relation_name": "\"bc\".\"main_models\".\"stg_parks\"", "raw_code": "WITH source AS (\n    SELECT * FROM {{ source('misc', 'park') }}\n),\n\nrenamed AS (\n    SELECT\n        park_id,\n        name,\n        aka,\n        city,\n        state,\n        start_date,\n        end_date,\n        league,\n        notes\n\n    FROM source\n)\n\nSELECT * FROM renamed", "language": "sql", "refs": [], "sources": [["misc", "park"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.baseball_computer.misc.park"]}, "compiled_path": null, "contract": {"enforced": true, "alias_types": true, "checksum": "f6d56e7943004d875756a83ea696e459d0d63cb43585529f8224d2644e67d61f"}, "access": "protected", "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true, "columns": ["park_id"]}], "version": null, "latest_version": null, "deprecation_date": null}, "model.baseball_computer.stg_rosters": {"database": "bc", "schema": "main_models", "name": "stg_rosters", "resource_type": "model", "package_name": "baseball_computer", "path": "staging/misc/stg_rosters.sql", "original_file_path": "models/staging/misc/stg_rosters.sql", "unique_id": "model.baseball_computer.stg_rosters", "fqn": ["baseball_computer", "staging", "misc", "stg_rosters"], "alias": "stg_rosters", "checksum": {"name": "sha256", "checksum": "3a519b9367efcb8ca03cdb33d1323a7de1d55a300e9797d251095d9046546fcd"}, "config": {"enabled": true, "alias": null, "schema": "models", "database": null, "tags": [], "meta": {"primary_keys": ["year", "player_id", "team_id"]}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {"year": {"name": "year", "description": "", "meta": {}, "data_type": "integer", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "player_id": {"name": "player_id", "description": "Retrosheet 8-character person ID for a player, which consists of\n    the first four characters of the last name, the first character\n    of the first name, and then three digits to disambiguate between\n    players with the same five characters.", "meta": {}, "data_type": "varchar", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "last_name": {"name": "last_name", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "first_name": {"name": "first_name", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "bats": {"name": "bats", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "throws": {"name": "throws", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "team_id": {"name": "team_id", "description": "Retrosheet team ID, 3-character string which identifies the team\n    that a franchise was playing as at a given time.", "meta": {}, "data_type": "team_id", "constraints": [], "quote": null, "tags": []}, "position": {"name": "position", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}}, "meta": {"primary_keys": ["year", "player_id", "team_id"]}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "baseball_computer://models/staging/misc/stg_rosters.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "models", "contract": {"enforced": true}, "meta": {"primary_keys": ["year", "player_id", "team_id"]}}, "created_at": 1702281448.958594, "relation_name": "\"bc\".\"main_models\".\"stg_rosters\"", "raw_code": "WITH source AS (\n    SELECT * FROM {{ source('misc', 'roster') }}\n),\n\nrenamed AS (\n    SELECT\n        year,\n        player_id,\n        last_name,\n        first_name,\n        NULLIF(bats, '?') AS bats,\n        NULLIF(throws, '?') AS throws,\n        team_id,\n        position\n\n    FROM source\n    -- TODO: Modify upstream deduper to handle multiple positions on same team\n    -- (or talk to retrosheet)\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY year, team_id, player_id ORDER BY position) = 1\n)\n\nSELECT * FROM renamed", "language": "sql", "refs": [], "sources": [["misc", "roster"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.baseball_computer.misc.roster"]}, "compiled_path": null, "contract": {"enforced": true, "alias_types": true, "checksum": "887e20fd26dcd35f6abc9de8921430133ad36c9b6de1fa4044a33b979f0a9cc0"}, "access": "protected", "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true, "columns": ["year", "player_id", "team_id"]}], "version": null, "latest_version": null, "deprecation_date": null}, "model.baseball_computer.stg_gamelog": {"database": "bc", "schema": "main_models", "name": "stg_gamelog", "resource_type": "model", "package_name": "baseball_computer", "path": "staging/misc/stg_gamelog.sql", "original_file_path": "models/staging/misc/stg_gamelog.sql", "unique_id": "model.baseball_computer.stg_gamelog", "fqn": ["baseball_computer", "staging", "misc", "stg_gamelog"], "alias": "stg_gamelog", "checksum": {"name": "sha256", "checksum": "7b294d83a4d5ebb1bf2432f1f9f8b40f460775f91e141f55c1e67d9a901e6889"}, "config": {"enabled": true, "alias": null, "schema": "models", "database": null, "tags": [], "meta": {"primary_keys": ["game_id"]}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {"season": {"name": "season", "description": "Year, 4-digit integer", "meta": {}, "data_type": "smallint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "date": {"name": "date", "description": "Date on which the entity took place.", "meta": {}, "data_type": "date", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "doubleheader_status": {"name": "doubleheader_status", "description": "", "meta": {}, "data_type": "doubleheader_status", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "game_id": {"name": "game_id", "description": "Retrosheet game ID, A 12-character string structured as follows:\n\n    - Chars 1-3: Home team ID\n    - Chars 4-11: Date (YYYYMMDD)\n    - Char 12: Game number (0 if only one game was played on that day)\n    \n    Example: MLN195607170", "meta": {}, "data_type": "varchar", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "away_team_id": {"name": "away_team_id", "description": "Retrosheet team ID, 3-character string which identifies the team\n    that a franchise was playing as at a given time.", "meta": {}, "data_type": "team_id", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "home_team_id": {"name": "home_team_id", "description": "Retrosheet team ID, 3-character string which identifies the team\n    that a franchise was playing as at a given time.", "meta": {}, "data_type": "team_id", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "time_of_day": {"name": "time_of_day", "description": "A day game/night game indicator for the entity. This value\n    is close to 100% populated for the pre-night-baseball era and from 1949 on,\n    and is still well-populated for the years in between. By far the most reliably\n    populated data point for game environmental conditions.", "meta": {}, "data_type": "time_of_day", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "park_id": {"name": "park_id", "description": "Retrosheet park ID, 3-character string which identifies the ballpark\n    associated with this entity. See `stg_parks` for full park info.", "meta": {}, "data_type": "park_id", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "attendance": {"name": "attendance", "description": "The number of people in attendance at the game.\n    The source for this number is not consistent over time\n    and may refer to paid attendance or some other way\n    of estimating the number. Attendance data is is very well-populated\n    historically, but there is a zero-or-missing ambiguity in Retrosheet\n    data. At the moment, we NULL out 0 attendance for all years\n    other than 2020, which contains almost all of the true-zero-attendance\n    games in history.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "umpire_home_id": {"name": "umpire_home_id", "description": "Retrosheet person ID of the umpire at home plate.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "umpire_first_id": {"name": "umpire_first_id", "description": "Retrosheet person ID of the umpire at first base.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "umpire_second_id": {"name": "umpire_second_id", "description": "Retrosheet person ID of the umpire at second base.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "umpire_third_id": {"name": "umpire_third_id", "description": "Retrosheet person ID of the umpire at third base.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "away_starting_pitcher_id": {"name": "away_starting_pitcher_id", "description": "The Retrosheet person ID of the starting pitcher for the away team in this game.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "home_starting_pitcher_id": {"name": "home_starting_pitcher_id", "description": "The Retrosheet person ID of the starting pitcher for the home team in this game.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "additional_info": {"name": "additional_info", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "bat_first_side": {"name": "bat_first_side", "description": "The side that batted in the top of the inning during the game.\n    This is almost always the Away side, but there are a good number of\n    home-team-bats-first games in the 19th century and 2020.\n    See this SABR article for historical context: https://sabr.org/journal/article/the-death-and-rebirth-of-the-home-team-batting-first/", "meta": {}, "data_type": "side", "constraints": [], "quote": null, "tags": []}, "use_dh": {"name": "use_dh", "description": "", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "game_type": {"name": "game_type", "description": "The context in which a game took place, such as the regular season,\n    a specific playoff round, or an all-star game.", "meta": {}, "data_type": "game_type", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "duration_minutes": {"name": "duration_minutes", "description": "", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "away_line_score": {"name": "away_line_score", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "home_line_score": {"name": "home_line_score", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "away_runs_scored": {"name": "away_runs_scored", "description": "", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "home_runs_scored": {"name": "home_runs_scored", "description": "", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "forfeit_info": {"name": "forfeit_info", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "source_type": {"name": "source_type", "description": "Broad categorization of the source of the data.\n    - PlayByPlay: Retrosheet play-by-play files (either from an account or deduced)\n    - BoxScore: Retrosheet box score files\n    - GameLog: Retrosheet game log files", "meta": {}, "data_type": "varchar", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}}, "meta": {"primary_keys": ["game_id"]}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "baseball_computer://models/staging/misc/stg_gamelog.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "models", "contract": {"enforced": true}, "meta": {"primary_keys": ["game_id"]}}, "created_at": 1702281448.95445, "relation_name": "\"bc\".\"main_models\".\"stg_gamelog\"", "raw_code": "WITH source AS (\n    SELECT * FROM {{ source('misc', 'gamelog') }}\n),\n\nrenamed AS (\n    SELECT\n        EXTRACT(YEAR FROM date)::INT2 AS season,\n        date::DATE AS date, -- noqa: RF04\n        CASE double_header\n            WHEN 0 THEN 'SingleGame'\n            WHEN 1 THEN 'DoubleHeaderGame1'\n            WHEN 2 THEN 'DoubleHeaderGame2'\n            WHEN 3 THEN 'DoubleHeaderGame3'\n        END::DOUBLEHEADER_STATUS AS doubleheader_status,\n        home_team || STRFTIME(date, '%Y%m%d') || double_header AS game_id,\n        visiting_team::TEAM_ID AS away_team_id,\n        home_team::TEAM_ID AS home_team_id,\n        CASE day_night WHEN 'N' THEN 'Night' ELSE 'Day' END::TIME_OF_DAY AS time_of_day,\n        park_id::PARK_ID AS park_id,\n        attendance,\n        umpire_h_id AS umpire_home_id,\n        umpire_1b_id AS umpire_first_id,\n        umpire_2b_id AS umpire_second_id,\n        umpire_3b_id AS umpire_third_id,\n        visitor_starting_pitcher_id::PLAYER_ID AS away_starting_pitcher_id,\n        home_starting_pitcher_id::PLAYER_ID AS home_starting_pitcher_id,\n        additional_info,\n        CASE WHEN additional_info LIKE '%HTBF%' THEN 'Home' ELSE 'Away' END::SIDE AS bat_first_side,\n        -- These two might need to be updated if there's ever another game without acq info\n        (EXTRACT(year from date) >= 1973 AND home_team_league = 'AL') AS use_dh,\n        'RegularSeason'::GAME_TYPE AS game_type,\n        -- Everything below is post-game knowledge\n        duration::INT2 AS duration_minutes,\n        -- TODO: Fix spelling in original\n        vistor_line_score AS away_line_score,\n        home_line_score,\n        -- TODO: Fix spelling in original\n        visitor_runs_scored::UTINYINT AS away_runs_scored,\n        home_runs_score::UTINYINT AS home_runs_scored,\n        forfeit_info,\n        'GameLog' AS source_type\n    FROM source\n)\n\nSELECT * FROM renamed", "language": "sql", "refs": [], "sources": [["misc", "gamelog"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.baseball_computer.misc.gamelog"]}, "compiled_path": null, "contract": {"enforced": true, "alias_types": true, "checksum": "7275a1f617a2848b78a58c59ceba3a3803347268481adc53d624b71e74d1ad58"}, "access": "protected", "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true, "columns": ["game_id"]}], "version": null, "latest_version": null, "deprecation_date": null}, "model.baseball_computer.stg_schedule": {"database": "bc", "schema": "main_models", "name": "stg_schedule", "resource_type": "model", "package_name": "baseball_computer", "path": "staging/misc/stg_schedule.sql", "original_file_path": "models/staging/misc/stg_schedule.sql", "unique_id": "model.baseball_computer.stg_schedule", "fqn": ["baseball_computer", "staging", "misc", "stg_schedule"], "alias": "stg_schedule", "checksum": {"name": "sha256", "checksum": "b7574698bcd66fe721c9292be5765d0b92df525a25a2f5fc00954436607559c7"}, "config": {"enabled": true, "alias": null, "schema": "models", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {"date": {"name": "date", "description": "Date on which the entity took place.", "meta": {}, "data_type": "timestamp", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "double_header": {"name": "double_header", "description": "", "meta": {}, "data_type": "smallint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "day_of_week": {"name": "day_of_week", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "visiting_team": {"name": "visiting_team", "description": "", "meta": {}, "data_type": "varchar", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "visiting_team_league": {"name": "visiting_team_league", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "visiting_team_game_number": {"name": "visiting_team_game_number", "description": "", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "home_team": {"name": "home_team", "description": "", "meta": {}, "data_type": "varchar", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "home_team_league": {"name": "home_team_league", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "home_team_game_number": {"name": "home_team_game_number", "description": "", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "day_night": {"name": "day_night", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "postponement_indicator": {"name": "postponement_indicator", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "makeup_dates": {"name": "makeup_dates", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "baseball_computer://models/staging/misc/stg_schedule.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "models", "contract": {"enforced": true}}, "created_at": 1702281448.956747, "relation_name": "\"bc\".\"main_models\".\"stg_schedule\"", "raw_code": "WITH source AS (\n    SELECT * FROM {{ source('misc', 'schedule') }}\n),\n\nrenamed AS (\n    SELECT\n        date,\n        double_header,\n        day_of_week,\n        visiting_team,\n        visiting_team_league,\n        visiting_team_game_number,\n        home_team,\n        home_team_league,\n        home_team_game_number,\n        day_night,\n        postponement_indicator,\n        makeup_dates\n\n    FROM source\n)\n\nSELECT * FROM renamed", "language": "sql", "refs": [], "sources": [["misc", "schedule"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.baseball_computer.misc.schedule"]}, "compiled_path": null, "contract": {"enforced": true, "alias_types": true, "checksum": "708e111f477d0e2ca32da566b3c95c4e91af34069272b80f9f7eeb6ac05b7b1a"}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.baseball_computer.stg_bio": {"database": "bc", "schema": "main_models", "name": "stg_bio", "resource_type": "model", "package_name": "baseball_computer", "path": "staging/misc/stg_bio.sql", "original_file_path": "models/staging/misc/stg_bio.sql", "unique_id": "model.baseball_computer.stg_bio", "fqn": ["baseball_computer", "staging", "misc", "stg_bio"], "alias": "stg_bio", "checksum": {"name": "sha256", "checksum": "2dd564e32d11c8f4e09d1bc1f7360d49679f9cb0a2b9c4fe7fd6b1fba1c47dd2"}, "config": {"enabled": true, "alias": null, "schema": "models", "database": null, "tags": [], "meta": {"primary_keys": ["player_id"]}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Staging table for Retrosheet's `bio.csv` file, which contains basic demographic\ninformation about players, managers, coaches, and umpires.\n", "columns": {"player_id": {"name": "player_id", "description": "Retrosheet 8-character person ID for a player, which consists of\n    the first four characters of the last name, the first character\n    of the first name, and then three digits to disambiguate between\n    players with the same five characters.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "last_name": {"name": "last_name", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "official_name": {"name": "official_name", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "first_name": {"name": "first_name", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "birth_date": {"name": "birth_date", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "birth_city": {"name": "birth_city", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "birth_state": {"name": "birth_state", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "birth_country": {"name": "birth_country", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "player_debut_date": {"name": "player_debut_date", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "player_last_game_date": {"name": "player_last_game_date", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "manager_debut_date": {"name": "manager_debut_date", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "manager_last_game_date": {"name": "manager_last_game_date", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "coach_debut_date": {"name": "coach_debut_date", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "coach_last_game_date": {"name": "coach_last_game_date", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "umpire_debut_date": {"name": "umpire_debut_date", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "umpire_last_game_date": {"name": "umpire_last_game_date", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "death_date": {"name": "death_date", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "death_city": {"name": "death_city", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "death_state": {"name": "death_state", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "death_country": {"name": "death_country", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "bats": {"name": "bats", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "throws": {"name": "throws", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "height_inches": {"name": "height_inches", "description": "", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "weight_pounds": {"name": "weight_pounds", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "cemetery_name": {"name": "cemetery_name", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "cemetery_city": {"name": "cemetery_city", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "cemetery_state": {"name": "cemetery_state", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "cemetery_country": {"name": "cemetery_country", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "cemetery_note": {"name": "cemetery_note", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "birth_name": {"name": "birth_name", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "name_change_notes": {"name": "name_change_notes", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "batting_hand_change_notes": {"name": "batting_hand_change_notes", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "hall_of_fame_status": {"name": "hall_of_fame_status", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}}, "meta": {"primary_keys": ["player_id"]}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "baseball_computer://models/staging/misc/stg_bio.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "models", "contract": {"enforced": true}, "meta": {"primary_keys": ["player_id"]}}, "created_at": 1702281448.969576, "relation_name": "\"bc\".\"main_models\".\"stg_bio\"", "raw_code": "WITH source AS (\n    SELECT * FROM {{ source('misc', 'bio') }}\n),\n\nrenamed AS (\n    SELECT\n        player_id,\n        last AS last_name,\n        first AS official_name,\n        nickname AS first_name,\n        birthdate AS birth_date,\n        birth_city,\n        birth_state,\n        birth_country,\n        play_debut AS player_debut_date,\n        play_lastgame AS player_last_game_date,\n        mgr_debut AS manager_debut_date,\n        mgr_lastgame AS manager_last_game_date,\n        coach_debut AS coach_debut_date,\n        coach_lastgame AS coach_last_game_date,\n        ump_debut AS umpire_debut_date,\n        ump_lastgame AS umpire_last_game_date,\n        deathdate AS death_date,\n        death_city AS death_city,\n        death_state AS death_state,\n        death_country AS death_country,\n        bats,\n        throws,\n        CASE WHEN height LIKE '%-%'\n            THEN SPLIT_PART(height, '-', 1)::INT * 12 + SPLIT_PART(height, '-', 2)::INT\n        END AS height_inches,\n        weight AS weight_pounds,\n        -- TODO: Fix spelling\n        cemetary AS cemetery_name,\n        ceme_city AS cemetery_city,\n        ceme_state AS cemetery_state,\n        ceme_country AS cemetery_country,\n        ceme_note AS cemetery_note,\n        birth_name AS birth_name,\n        name_chg AS name_change_notes,\n        bat_chg AS batting_hand_change_notes,\n        hof AS hall_of_fame_status\n\n    FROM source\n)\n\nSELECT * FROM renamed", "language": "sql", "refs": [], "sources": [["misc", "bio"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.baseball_computer.misc.bio"]}, "compiled_path": null, "contract": {"enforced": true, "alias_types": true, "checksum": "9a3103daa37ea6f7d630ec3e550de0e5f9f3b2e5dbc2de90580515bc99049325"}, "access": "protected", "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true, "columns": ["player_id"]}], "version": null, "latest_version": null, "deprecation_date": null}, "model.baseball_computer.stg_databank_fielding_of": {"database": "bc", "schema": "main_models", "name": "stg_databank_fielding_of", "resource_type": "model", "package_name": "baseball_computer", "path": "staging/baseballdatabank/stg_databank_fielding_of.sql", "original_file_path": "models/staging/baseballdatabank/stg_databank_fielding_of.sql", "unique_id": "model.baseball_computer.stg_databank_fielding_of", "fqn": ["baseball_computer", "staging", "baseballdatabank", "stg_databank_fielding_of"], "alias": "stg_databank_fielding_of", "checksum": {"name": "sha256", "checksum": "8b7a7f650f8c6fba54d6f591016b479a0d085139215ae9f8aa0da59ae3182907"}, "config": {"enabled": true, "alias": null, "schema": "models", "database": null, "tags": [], "meta": {"primary_keys": ["databank_player_id", "season", "stint"]}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Gives information about the number of games played at each outfield position\nby player, season, and stint with a given team. This table is important for 19th century\ndata because fielding stats are aggregated across outfield positions, so we need to infer\nwhich stats they accumulated at each position.\n", "columns": {"databank_player_id": {"name": "databank_player_id", "description": "Baseball Databank player ID, which is different from Retrosheet's.\n    This ID must be used to join player data from the Baseball Databank\n    sources.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "season": {"name": "season", "description": "Year, 4-digit integer", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "stint": {"name": "stint", "description": "Nth team played for in a season. Increments with each team switch.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "games_left_field": {"name": "games_left_field", "description": "Total number of games played in left field", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "games_center_field": {"name": "games_center_field", "description": "Total number of games played in center field", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "games_right_field": {"name": "games_right_field", "description": "Total number of games played in right field", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}}, "meta": {"primary_keys": ["databank_player_id", "season", "stint"]}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "baseball_computer://models/staging/baseballdatabank/stg_databank_fielding_of.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "models", "contract": {"enforced": true}, "meta": {"primary_keys": ["databank_player_id", "season", "stint"]}}, "created_at": 1702281449.001972, "relation_name": "\"bc\".\"main_models\".\"stg_databank_fielding_of\"", "raw_code": "WITH source AS (\n    SELECT * FROM {{ source('baseballdatabank', 'fielding_of') }}\n),\n\nrenamed AS (\n    SELECT\n        player_id AS databank_player_id,\n        year_id AS season,\n        stint,\n        g_lf AS games_left_field,\n        g_cf AS games_center_field,\n        g_rf AS games_right_field,\n    FROM source\n)\n\nSELECT * FROM renamed", "language": "sql", "refs": [], "sources": [["baseballdatabank", "fielding_of"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.baseball_computer.baseballdatabank.fielding_of"]}, "compiled_path": null, "contract": {"enforced": true, "alias_types": true, "checksum": "8107f563915b8a084bb73a3a23841829a0c0d002ebb53f047c929183608842bf"}, "access": "protected", "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true, "columns": ["databank_player_id", "season", "stint"]}], "version": null, "latest_version": null, "deprecation_date": null}, "model.baseball_computer.stg_databank_batting": {"database": "bc", "schema": "main_models", "name": "stg_databank_batting", "resource_type": "model", "package_name": "baseball_computer", "path": "staging/baseballdatabank/stg_databank_batting.sql", "original_file_path": "models/staging/baseballdatabank/stg_databank_batting.sql", "unique_id": "model.baseball_computer.stg_databank_batting", "fqn": ["baseball_computer", "staging", "baseballdatabank", "stg_databank_batting"], "alias": "stg_databank_batting", "checksum": {"name": "sha256", "checksum": "d93944cc587af0082040d11be57323cbffebb76d523bcf28098cb146528742ac"}, "config": {"enabled": true, "alias": null, "schema": "models", "database": null, "tags": [], "meta": {"primary_keys": ["databank_player_id", "season", "stint"]}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Aggregate batting statistics by player, season, and stint with a given team.", "columns": {"databank_player_id": {"name": "databank_player_id", "description": "Baseball Databank player ID, which is different from Retrosheet's.\n    This ID must be used to join player data from the Baseball Databank\n    sources.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "season": {"name": "season", "description": "Year, 4-digit integer", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "stint": {"name": "stint", "description": "Nth team played for in a season. Increments with each team switch.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "team_id": {"name": "team_id", "description": "Retrosheet team ID, 3-character string which identifies the team\n    that a franchise was playing as at a given time.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "league_id": {"name": "league_id", "description": "League abbreviation", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "games": {"name": "games", "description": "Total number of games played", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "at_bats": {"name": "at_bats", "description": "(AB) Number of plate appearances that ended in either a hit or a non-sacrifice out.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "runs": {"name": "runs", "description": "(R) Number of runs scored.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "hits": {"name": "hits", "description": "(H) Number of times a batter reached base safely without an error or fielder's choice.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "doubles": {"name": "doubles", "description": "(2B) Number of hits in which a batter reached second base without the help of an error or an attempted\n    play on another runner.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "triples": {"name": "triples", "description": "(3B) Number of hits in which a batter reached third base without the help of an error or an attempted\n    play on another runner.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "home_runs": {"name": "home_runs", "description": "(HR) Number of hits in which a batter reached home plate without the help of an error or an attempted\n    play on another runner (usually by hitting the ball out of the park).", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "runs_batted_in": {"name": "runs_batted_in", "description": "(RBI) Number of runs that scored as a result of a batter's plate appearance. This is usually\n    the number of runs that scored on the play, but errors and other similar cases may cause\n    some runs not to be credited to the batter. Scorerkeeper discretion occasionally causes differences\n    between the number in the database and the official MLB total.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "stolen_bases": {"name": "stolen_bases", "description": "(SB) Number of successful stolen bases.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "caught_stealing": {"name": "caught_stealing", "description": "(CS) Number of times a runner was caught stealing.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "walks": {"name": "walks", "description": "(BB, occasionally W) Number of times a batter reaches base on called balls out of the strike zone\n    (Four balls for all of MLB history after the 1880s).", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "strikeouts": {"name": "strikeouts", "description": "(K, SO) Number of times a batter struck out. This includes plays in which a batter reached base on\n    a dropped third strike.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "intentional_walks": {"name": "intentional_walks", "description": "(IBB, occasionally IW) Number of times a batter was intentionally walked. This number may be missing or undercounted\n    in earlier years, as intentional walks were not officially tracked until 1955.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "hit_by_pitches": {"name": "hit_by_pitches", "description": "(HBP) Number of times a batter was awarded first base after being hit by a pitch.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "sacrifice_hits": {"name": "sacrifice_hits", "description": "(SH) Number of times a batter performed a sacrifice bunt to advance another runner.\n    A bunt may count as a sacrifice even if the batter reaches base safely.\n    Unsuccessful attempts are not counted, nor are non-sacrifice bunts.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "sacrifice_flies": {"name": "sacrifice_flies", "description": "(SF) Number of times a batter hit a fly ball that resulted in an out (or error),\n    but allowed a runner to score on the throw.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "grounded_into_double_plays": {"name": "grounded_into_double_plays", "description": "(GIDP) Number of times a batter grounded into a double play. This is the conventional way\n    to record a double play and as such is an important statistic on its own. Games without\n    play-by-play accounts don't have data on the trajectory of the double play, so\n    this number is not populated for those games.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "singles": {"name": "singles", "description": "(1B) Number of hits in which a batter reached first base.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "total_bases": {"name": "total_bases", "description": "(TB) Number of bases a batter reached safely without the help of an error or an attempted\n    play on another runner. HR * 4 + 3B * 3 + 2B * 2 + (H - HR - 3B - 2B)", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "plate_appearances": {"name": "plate_appearances", "description": "(PA) Number of times a batter came to the plate, including walks, hit by pitches, sacrifices, and at-bats.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "on_base_opportunities": {"name": "on_base_opportunities", "description": "Number of plate appearances in which a batter either did or did not reach base,\n    as defined by the formula for on-base percentage. Note that this is very similar to but different\n    from plate_appearances, as it does not include sacrifice hits or interference.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "on_base_successes": {"name": "on_base_successes", "description": "Number of hits, walks, and hit by pitches that serves as the numerator in the formula\n    for on-base percentage.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}}, "meta": {"primary_keys": ["databank_player_id", "season", "stint"]}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "baseball_computer://models/staging/baseballdatabank/stg_databank_batting.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "models", "contract": {"enforced": true}, "meta": {"primary_keys": ["databank_player_id", "season", "stint"]}}, "created_at": 1702281448.973252, "relation_name": "\"bc\".\"main_models\".\"stg_databank_batting\"", "raw_code": "WITH source AS (\n    SELECT * FROM {{ source('baseballdatabank', 'batting') }}\n),\n\nrenamed AS (\n\n    SELECT\n        player_id AS databank_player_id,\n        year_id AS season,\n        stint,\n        team_id AS team_id,\n        lg_id AS league_id,\n        g AS games,\n        ab AS at_bats,\n        r AS runs,\n        h AS hits,\n        _2b AS doubles, -- noqa: RF06\n        _3b AS triples, -- noqa: RF06\n        hr AS home_runs,\n        rbi AS runs_batted_in,\n        sb AS stolen_bases,\n        cs AS caught_stealing,\n        bb AS walks,\n        so AS strikeouts,\n        ibb AS intentional_walks,\n        hbp AS hit_by_pitches,\n        sh AS sacrifice_hits,\n        sf AS sacrifice_flies,\n        gidp AS grounded_into_double_plays,\n        hits - home_runs - triples - doubles AS singles,\n        singles + doubles * 2 + triples * 3 + home_runs * 4 AS total_bases,\n        at_bats + COALESCE(walks, 0) + COALESCE(hit_by_pitches, 0) + COALESCE(sacrifice_flies, 0)\n        + COALESCE(sacrifice_hits, 0)\n        AS plate_appearances,\n        at_bats + COALESCE(walks, 0) + COALESCE(hit_by_pitches, 0) + COALESCE(sacrifice_flies, 0)\n        AS on_base_opportunities,\n        hits + COALESCE(walks, 0) + COALESCE(hit_by_pitches, 0) AS on_base_successes,\n    FROM source\n\n)\n\nSELECT * FROM renamed", "language": "sql", "refs": [], "sources": [["baseballdatabank", "batting"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.baseball_computer.baseballdatabank.batting"]}, "compiled_path": null, "contract": {"enforced": true, "alias_types": true, "checksum": "e67f007c184e298b014dcb81441fa3bda654f56b66aebff64109b54b59acab8f"}, "access": "protected", "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true, "columns": ["databank_player_id", "season", "stint"]}], "version": null, "latest_version": null, "deprecation_date": null}, "model.baseball_computer.stg_people": {"database": "bc", "schema": "main_models", "name": "stg_people", "resource_type": "model", "package_name": "baseball_computer", "path": "staging/baseballdatabank/stg_people.sql", "original_file_path": "models/staging/baseballdatabank/stg_people.sql", "unique_id": "model.baseball_computer.stg_people", "fqn": ["baseball_computer", "staging", "baseballdatabank", "stg_people"], "alias": "stg_people", "checksum": {"name": "sha256", "checksum": "8eb25a8013bd9a0d29cfd41d6d2a960aa3e51ee08c563b601a6750d06f0616ae"}, "config": {"enabled": true, "alias": null, "schema": "models", "database": null, "tags": [], "meta": {"primary_keys": ["databank_player_id"]}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {"retrosheet_player_id": {"name": "retrosheet_player_id", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "baseball_reference_player_id": {"name": "baseball_reference_player_id", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "databank_player_id": {"name": "databank_player_id", "description": "Baseball Databank player ID, which is different from Retrosheet's.\n    This ID must be used to join player data from the Baseball Databank\n    sources.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "birth_year": {"name": "birth_year", "description": "", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "birth_month": {"name": "birth_month", "description": "", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "birth_day": {"name": "birth_day", "description": "", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "birth_country": {"name": "birth_country", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "birth_state": {"name": "birth_state", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "birth_city": {"name": "birth_city", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "death_year": {"name": "death_year", "description": "", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "death_month": {"name": "death_month", "description": "", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "death_day": {"name": "death_day", "description": "", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "death_country": {"name": "death_country", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "death_state": {"name": "death_state", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "death_city": {"name": "death_city", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "first_name": {"name": "first_name", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "last_name": {"name": "last_name", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "given_name": {"name": "given_name", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "weight_pounds": {"name": "weight_pounds", "description": "", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "height_inches": {"name": "height_inches", "description": "", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "bats": {"name": "bats", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "throws": {"name": "throws", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "debut": {"name": "debut", "description": "", "meta": {}, "data_type": "timestamp", "constraints": [], "quote": null, "tags": []}, "final_game": {"name": "final_game", "description": "", "meta": {}, "data_type": "timestamp", "constraints": [], "quote": null, "tags": []}, "internal_id": {"name": "internal_id", "description": "", "meta": {}, "data_type": "bigint", "constraints": [], "quote": null, "tags": []}}, "meta": {"primary_keys": ["databank_player_id"]}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "baseball_computer://models/staging/baseballdatabank/stg_people.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "models", "contract": {"enforced": true}, "meta": {"primary_keys": ["databank_player_id"]}}, "created_at": 1702281448.99958, "relation_name": "\"bc\".\"main_models\".\"stg_people\"", "raw_code": "WITH source AS (\n    SELECT * FROM {{ source('baseballdatabank', 'people') }}\n),\n\nrenamed AS (\n    SELECT\n        retro_id AS retrosheet_player_id,\n        bbref_id AS baseball_reference_player_id,\n        player_id AS databank_player_id,\n        birth_year AS birth_year,\n        birth_month AS birth_month,\n        birth_day AS birth_day,\n        birth_country AS birth_country,\n        birth_state AS birth_state,\n        birth_city AS birth_city,\n        death_year AS death_year,\n        death_month AS death_month,\n        death_day AS death_day,\n        death_country AS death_country,\n        death_state AS death_state,\n        death_city AS death_city,\n        name_first AS first_name,\n        name_last AS last_name,\n        name_given AS given_name,\n        weight AS weight_pounds,\n        height AS height_inches,\n        bats,\n        throws,\n        debut,\n        final_game AS final_game,\n        ROW_NUMBER() OVER (order by player_id) AS internal_id\n    FROM source\n)\n\nSELECT * FROM renamed", "language": "sql", "refs": [], "sources": [["baseballdatabank", "people"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.baseball_computer.baseballdatabank.people"]}, "compiled_path": null, "contract": {"enforced": true, "alias_types": true, "checksum": "e1331cc6e0d0f52d13f473542eddb64ee2172b57f03eae8780ae2175a345fed8"}, "access": "protected", "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true, "columns": ["databank_player_id"]}], "version": null, "latest_version": null, "deprecation_date": null}, "model.baseball_computer.stg_databank_fielding": {"database": "bc", "schema": "main_models", "name": "stg_databank_fielding", "resource_type": "model", "package_name": "baseball_computer", "path": "staging/baseballdatabank/stg_databank_fielding.sql", "original_file_path": "models/staging/baseballdatabank/stg_databank_fielding.sql", "unique_id": "model.baseball_computer.stg_databank_fielding", "fqn": ["baseball_computer", "staging", "baseballdatabank", "stg_databank_fielding"], "alias": "stg_databank_fielding", "checksum": {"name": "sha256", "checksum": "45cac225213731734e7ace8e1d41b976944d6095aeba5878ad054e8f702a50d6"}, "config": {"enabled": true, "alias": null, "schema": "models", "database": null, "tags": [], "meta": {"primary_keys": ["databank_player_id", "season", "stint", "fielding_position"]}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Aggregate fielding statistics by player, season, and stint with a given team.", "columns": {"databank_player_id": {"name": "databank_player_id", "description": "Baseball Databank player ID, which is different from Retrosheet's.\n    This ID must be used to join player data from the Baseball Databank\n    sources.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "season": {"name": "season", "description": "Year, 4-digit integer", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "stint": {"name": "stint", "description": "Nth team played for in a season. Increments with each team switch.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "team_id": {"name": "team_id", "description": "Retrosheet team ID, 3-character string which identifies the team\n    that a franchise was playing as at a given time.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "league_id": {"name": "league_id", "description": "League abbreviation", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "games": {"name": "games", "description": "Games played", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "games_started": {"name": "games_started", "description": "(GS) Number of games started by a player.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "outs_played": {"name": "outs_played", "description": "", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "putouts": {"name": "putouts", "description": "(PO) Outs credited to fielder based on who physically made the out, either by:\n        - Catching a ball on the fly\n        - Tagging a runner out\n        - Forcing a runner out\n        - Catching a called third strike\n        - Being the nearest fielder to a baserunner who is called out for interference\n\n    Putouts have been an important baseball statistic longer than MLB has been around,\n    so it has excellent historical coverage. Unassisted\n    putouts are very important in determining the location of batted balls.\n    \n    In modern baseball rules, each out in the game is credited as a putout, and at the play/event\n    level this will always be the case. However, in older games for which we only have box score or season-level\n    data, rare plays like baserunner interference may not be assigned to a specific fielder.\n    \n    Every play-by-play out has a putout, but the fielder who gets the putout may be unknown.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "assists": {"name": "assists", "description": "(A) Number of outs in which a fielder touched the ball before anothber fielder recorded a putout.\n    This is almost always a throw to another fielder, but it can also be a deflection.\n\n    Assists have excellent historical data coverage, and they are particularly useful in determining\n    the location of ground balls. The data is present in almost all season-level and game-level accounts.\n    However, individual plays with unknown-fielder putouts are likely to be missing assists entirely.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "errors": {"name": "errors", "description": "(E) Number of errors recorded by a fielder. This is recorded when a fielder either fails to make an out\n    that an average fielder should have made or makes a bad play that allows a baserunner to advance.\n    Errors are awarded at the scorekeeper's discretion, making them more subjective than the other two main\n    fielding stats.\n    \n    Errors used to be a much larger component of evaluating fielder quality.\n    When the stat was invented, routine plays were completed much less frequently than they are today.\n    As baseball evolved, routine plays became truly routine, and a fielder's ability to get to the ball\n    became more relevant than their ability\n    to reliably convert the out once they got there. While plenty of people as early as the 19th century were\n    aware of this, statistics mostly failed to reflect it until the 1980s, when Bill James and others\n    developed Range Factor and other stats that attempted to measure a fielder's ability to create chances.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "double_plays": {"name": "double_plays", "description": "(DP) Number of times a play ended in two outs being recorded.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "passed_balls": {"name": "passed_balls", "description": "(PB) Number of passed balls.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "wild_pitches": {"name": "wild_pitches", "description": "(WP) Number of wild pitches.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "stolen_bases": {"name": "stolen_bases", "description": "(SB) Number of successful stolen bases.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "caught_stealing": {"name": "caught_stealing", "description": "(CS) Number of times a runner was caught stealing.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "fielding_position": {"name": "fielding_position", "description": "A 1-byte integer for the traditional 1-9 fielder identification, along with additional\n    values for unknown fielders and batting-specific positions. Depending on the\n    context, this value may be NULL for batting positions.\n    ```\n    0 - Unknown\n    1 - Pitcher\n    2 - Catcher\n    3 - First baseman\n    4 - Second baseman\n    5 - Third baseman\n    6 - Shortstop\n    7 - Left fielder\n    8 - Center fielder\n    9 - Right fielder\n    10 - Designated Hitter\n    11 - Pinch Hitter\n    12 - Pinch Runner\n    ```", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "fielding_position_category": {"name": "fielding_position_category", "description": "Divided between P, C, IF, OF, and DH.\n    This is particularly important for 19th century data, where we don't know\n    which specific outfield position a player accumulated his stats at.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}}, "meta": {"primary_keys": ["databank_player_id", "season", "stint", "fielding_position"]}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "baseball_computer://models/staging/baseballdatabank/stg_databank_fielding.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "models", "contract": {"enforced": true}, "meta": {"primary_keys": ["databank_player_id", "season", "stint", "fielding_position"]}}, "created_at": 1702281449.008754, "relation_name": "\"bc\".\"main_models\".\"stg_databank_fielding\"", "raw_code": "WITH source AS (\n    SELECT * FROM {{ source('baseballdatabank', 'fielding') }}\n),\n\nrenamed AS (\n    SELECT\n        player_id AS databank_player_id,\n        year_id AS season,\n        stint,\n        team_id AS team_id,\n        lg_id AS league_id,\n        g AS games,\n        gs AS games_started,\n        inn_outs AS outs_played,\n        po AS putouts,\n        a AS assists,\n        e AS errors,\n        dp AS double_plays,\n        pb AS passed_balls,\n        wp AS wild_pitches,\n        sb AS stolen_bases,\n        cs AS caught_stealing,\n        CASE pos\n            WHEN 'P' THEN 1\n            WHEN 'C' THEN 2\n            WHEN '1B' THEN 3\n            WHEN '2B' THEN 4\n            WHEN '3B' THEN 5\n            WHEN 'SS' THEN 6\n            ELSE 0 \n        END AS fielding_position,\n        CASE\n            WHEN pos IN ('P', 'C', 'OF') THEN pos\n            WHEN pos IN ('1B', '2B', '3B', 'SS') THEN 'IF'\n        END AS fielding_position_category\n    FROM source\n)\n\nSELECT * FROM renamed", "language": "sql", "refs": [], "sources": [["baseballdatabank", "fielding"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.baseball_computer.baseballdatabank.fielding"]}, "compiled_path": null, "contract": {"enforced": true, "alias_types": true, "checksum": "c19e1982c9e7d518c5a3ab85328d54409cc66e8b4abade3e63d4d423836b6d8b"}, "access": "protected", "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true, "columns": ["databank_player_id", "season", "stint", "fielding_position"]}], "version": null, "latest_version": null, "deprecation_date": null}, "model.baseball_computer.stg_databank_pitching": {"database": "bc", "schema": "main_models", "name": "stg_databank_pitching", "resource_type": "model", "package_name": "baseball_computer", "path": "staging/baseballdatabank/stg_databank_pitching.sql", "original_file_path": "models/staging/baseballdatabank/stg_databank_pitching.sql", "unique_id": "model.baseball_computer.stg_databank_pitching", "fqn": ["baseball_computer", "staging", "baseballdatabank", "stg_databank_pitching"], "alias": "stg_databank_pitching", "checksum": {"name": "sha256", "checksum": "7bb857cfcf7e8cb8bbbadaeb9673f3e29e075126ddbde71d5b92e24bb1ada525"}, "config": {"enabled": true, "alias": null, "schema": "models", "database": null, "tags": [], "meta": {"primary_keys": ["databank_player_id", "season", "stint"]}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Aggregate pitching statistics by player, season, and stint with a given team.", "columns": {"databank_player_id": {"name": "databank_player_id", "description": "Baseball Databank player ID, which is different from Retrosheet's.\n    This ID must be used to join player data from the Baseball Databank\n    sources.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "season": {"name": "season", "description": "Year, 4-digit integer", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "stint": {"name": "stint", "description": "Nth team played for in a season. Increments with each team switch.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "team_id": {"name": "team_id", "description": "Retrosheet team ID, 3-character string which identifies the team\n    that a franchise was playing as at a given time.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "league_id": {"name": "league_id", "description": "League abbreviation", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "wins": {"name": "wins", "description": "(W) Number of games in which a pitcher was credited with the win.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "losses": {"name": "losses", "description": "(L) Number of games in which a pitcher was debited with the loss.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "games": {"name": "games", "description": "Games played", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "games_started": {"name": "games_started", "description": "(GS) Number of games started by a player.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "complete_games": {"name": "complete_games", "description": "(CG) Number of games in which a pitcher pitched the entire game, regardless of how long the game lasted.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "shutouts": {"name": "shutouts", "description": "(SHO) Number of games in which a pitcher recorded every out for his team and did not allow any runs,\n    earned or unearned, regardless of how long the game lasted. Note the subtle difference between the\n    definition of a shutout and a complete game: it is possible to pitch a shutout without a complete game\n    if the pitcher enters in relief when no outs have been recorded. AFAIK, the only reason this distinction\n    exists is for us to remember the time that Babe Ruth started a game, walked a batter, yelled at the umpire,\n    got ejected, punched the umpire, and then Ernie Shore came in and retired every batter he faced,\n    which is good enough for me.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "saves": {"name": "saves", "description": "(SV) Number of games in which a pitcher was credited with the save.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "outs_recorded": {"name": "outs_recorded", "description": "Number of outs recorded by a pitcher.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "hits": {"name": "hits", "description": "(H) Number of times a batter reached base safely without an error or fielder's choice.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "earned_runs": {"name": "earned_runs", "description": "(ER) Number of runs that are charged to a pitcher. This may include runs that scored after the pitcher\n    left the game (in the case of inherited runners), as well as runs that the scorekeeper deemed to be\n    the pitcher's responsibility in the absence of official inherited runner rules in the olden days.\n    Earned runs are only an official statistic at a game level: the earnedness of any given run is never\n    officially specified, only the total. It would be possible to make a very good guess algorithmically,\n    but that would be a huge pain for a stat that is not very useful in the first place.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "home_runs": {"name": "home_runs", "description": "(HR) Number of hits in which a batter reached home plate without the help of an error or an attempted\n    play on another runner (usually by hitting the ball out of the park).", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "walks": {"name": "walks", "description": "(BB, occasionally W) Number of times a batter reaches base on called balls out of the strike zone\n    (Four balls for all of MLB history after the 1880s).", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "strikeouts": {"name": "strikeouts", "description": "(K, SO) Number of times a batter struck out. This includes plays in which a batter reached base on\n    a dropped third strike.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "opponent_batting_average": {"name": "opponent_batting_average", "description": "", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "earned_run_average": {"name": "earned_run_average", "description": "(ERA) Earned runs per nine innings, the analogue of batting average for pitchers in both its\n    fame and its limitations. `earned_runs` are a subset of the total runs allowed by a pitcher:\n    those unaffected by fielding errors. ERA is a strange compromise between the desire to isolate\n    a pitcher's true defense-independent ability and to describe actually happened when they were on the mound.\n    Because fielding errors are a small component of overall luck and defense, it doesn't really remove much\n    noise and might even add more. In general, the idea is right but the execution is wrong.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "intentional_walks": {"name": "intentional_walks", "description": "(IBB, occasionally IW) Number of times a batter was intentionally walked. This number may be missing or undercounted\n    in earlier years, as intentional walks were not officially tracked until 1955.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "wild_pitches": {"name": "wild_pitches", "description": "(WP) Number of wild pitches.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "hit_by_pitches": {"name": "hit_by_pitches", "description": "(HBP) Number of times a batter was awarded first base after being hit by a pitch.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "balks": {"name": "balks", "description": "(BK) Number of balks.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "batters_faced": {"name": "batters_faced", "description": "Number of batters faced by a pitcher, generally equivalent to plate appearances (in old box-score-only games, this may not match up perfectly).", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "games_finished": {"name": "games_finished", "description": "(GF) Number of games in which a pitcher entered the game in relief and finished the game.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "runs": {"name": "runs", "description": "(R) Number of runs scored.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "sacrifice_hits": {"name": "sacrifice_hits", "description": "(SH) Number of times a batter performed a sacrifice bunt to advance another runner.\n    A bunt may count as a sacrifice even if the batter reaches base safely.\n    Unsuccessful attempts are not counted, nor are non-sacrifice bunts.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "sacrifice_flies": {"name": "sacrifice_flies", "description": "(SF) Number of times a batter hit a fly ball that resulted in an out (or error),\n    but allowed a runner to score on the throw.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "grounded_into_double_plays": {"name": "grounded_into_double_plays", "description": "(GIDP) Number of times a batter grounded into a double play. This is the conventional way\n    to record a double play and as such is an important statistic on its own. Games without\n    play-by-play accounts don't have data on the trajectory of the double play, so\n    this number is not populated for those games.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}}, "meta": {"primary_keys": ["databank_player_id", "season", "stint"]}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "baseball_computer://models/staging/baseballdatabank/stg_databank_pitching.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "models", "contract": {"enforced": true}, "meta": {"primary_keys": ["databank_player_id", "season", "stint"]}}, "created_at": 1702281449.006162, "relation_name": "\"bc\".\"main_models\".\"stg_databank_pitching\"", "raw_code": "WITH source AS (\n    SELECT * FROM {{ source('baseballdatabank', 'pitching') }}\n),\n\nrenamed AS (\n    SELECT\n        player_id AS databank_player_id,\n        year_id AS season,\n        stint,\n        team_id AS team_id,\n        lg_id AS league_id,\n        w AS wins,\n        l AS losses,\n        g AS games,\n        gs AS games_started,\n        cg AS complete_games,\n        sho AS shutouts,\n        sv AS saves,\n        ip_outs AS outs_recorded,\n        h AS hits,\n        er AS earned_runs,\n        hr AS home_runs,\n        bb AS walks,\n        so AS strikeouts,\n        -- OAV could be used in theory to back into at-bats against,\n        -- but isn't populated for the years we source from this data\n        ba_opp AS opponent_batting_average,\n        era AS earned_run_average,\n        ibb AS intentional_walks,\n        wp AS wild_pitches,\n        hbp AS hit_by_pitches,\n        bk AS balks,\n        bfp AS batters_faced,\n        gf AS games_finished,\n        r AS runs,\n        sh AS sacrifice_hits,\n        sf AS sacrifice_flies,\n        gidp AS grounded_into_double_plays\n    FROM source\n)\n\nSELECT * from renamed", "language": "sql", "refs": [], "sources": [["baseballdatabank", "pitching"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.baseball_computer.baseballdatabank.pitching"]}, "compiled_path": null, "contract": {"enforced": true, "alias_types": true, "checksum": "f052e7ec8d4e4c8e973c24cc9a2f495eb399682254770356bf375fc050746bd8"}, "access": "protected", "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true, "columns": ["databank_player_id", "season", "stint"]}], "version": null, "latest_version": null, "deprecation_date": null}, "model.baseball_computer.stg_box_score_team_fielding_lines": {"database": "bc", "schema": "main_models", "name": "stg_box_score_team_fielding_lines", "resource_type": "model", "package_name": "baseball_computer", "path": "staging/box_score/stg_box_score_team_fielding_lines.sql", "original_file_path": "models/staging/box_score/stg_box_score_team_fielding_lines.sql", "unique_id": "model.baseball_computer.stg_box_score_team_fielding_lines", "fqn": ["baseball_computer", "staging", "box_score", "stg_box_score_team_fielding_lines"], "alias": "stg_box_score_team_fielding_lines", "checksum": {"name": "sha256", "checksum": "ee78b6d094338085b90c696b1b4cf4256fb4d5153738b6329bd020b79cd062ca"}, "config": {"enabled": true, "alias": null, "schema": "models", "database": null, "tags": [], "meta": {"primary_keys": ["game_id", "side"]}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Team-level fielding lines from box score accounts.\nThese are generally rare and are only present in certain files.\n", "columns": {"game_id": {"name": "game_id", "description": "Retrosheet game ID, A 12-character string structured as follows:\n\n    - Chars 1-3: Home team ID\n    - Chars 4-11: Date (YYYYMMDD)\n    - Char 12: Game number (0 if only one game was played on that day)\n    \n    Example: MLN195607170", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "side": {"name": "side", "description": "The side, Home or Away, associated with the entity. A generic way\n    of identifying the two teams playing in a game.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "outs_played": {"name": "outs_played", "description": "", "meta": {}, "data_type": "bigint", "constraints": [], "quote": null, "tags": []}, "putouts": {"name": "putouts", "description": "(PO) Outs credited to fielder based on who physically made the out, either by:\n        - Catching a ball on the fly\n        - Tagging a runner out\n        - Forcing a runner out\n        - Catching a called third strike\n        - Being the nearest fielder to a baserunner who is called out for interference\n\n    Putouts have been an important baseball statistic longer than MLB has been around,\n    so it has excellent historical coverage. Unassisted\n    putouts are very important in determining the location of batted balls.\n    \n    In modern baseball rules, each out in the game is credited as a putout, and at the play/event\n    level this will always be the case. However, in older games for which we only have box score or season-level\n    data, rare plays like baserunner interference may not be assigned to a specific fielder.\n    \n    Every play-by-play out has a putout, but the fielder who gets the putout may be unknown.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "assists": {"name": "assists", "description": "(A) Number of outs in which a fielder touched the ball before anothber fielder recorded a putout.\n    This is almost always a throw to another fielder, but it can also be a deflection.\n\n    Assists have excellent historical data coverage, and they are particularly useful in determining\n    the location of ground balls. The data is present in almost all season-level and game-level accounts.\n    However, individual plays with unknown-fielder putouts are likely to be missing assists entirely.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "errors": {"name": "errors", "description": "(E) Number of errors recorded by a fielder. This is recorded when a fielder either fails to make an out\n    that an average fielder should have made or makes a bad play that allows a baserunner to advance.\n    Errors are awarded at the scorekeeper's discretion, making them more subjective than the other two main\n    fielding stats.\n    \n    Errors used to be a much larger component of evaluating fielder quality.\n    When the stat was invented, routine plays were completed much less frequently than they are today.\n    As baseball evolved, routine plays became truly routine, and a fielder's ability to get to the ball\n    became more relevant than their ability\n    to reliably convert the out once they got there. While plenty of people as early as the 19th century were\n    aware of this, statistics mostly failed to reflect it until the 1980s, when Bill James and others\n    developed Range Factor and other stats that attempted to measure a fielder's ability to create chances.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "double_plays": {"name": "double_plays", "description": "(DP) Number of times a play ended in two outs being recorded.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "triple_plays": {"name": "triple_plays", "description": "(TP) Number of times a play ended in three outs being recorded.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "passed_balls": {"name": "passed_balls", "description": "(PB) Number of passed balls.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}}, "meta": {"primary_keys": ["game_id", "side"]}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "baseball_computer://models/staging/box_score/stg_box_score_team_fielding_lines.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "models", "contract": {"enforced": true}, "meta": {"primary_keys": ["game_id", "side"]}}, "created_at": 1702281449.0434089, "relation_name": "\"bc\".\"main_models\".\"stg_box_score_team_fielding_lines\"", "raw_code": "WITH source AS (\n    SELECT * FROM {{ source('box_score', 'box_score_team_fielding_lines') }}\n),\n\nrenamed AS (\n    SELECT\n        game_id,\n        side,\n        outs_played,\n        putouts,\n        assists,\n        errors,\n        double_plays,\n        triple_plays,\n        passed_balls\n\n    FROM source\n)\n\nSELECT * FROM renamed", "language": "sql", "refs": [], "sources": [["box_score", "box_score_team_fielding_lines"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.baseball_computer.box_score.box_score_team_fielding_lines"]}, "compiled_path": null, "contract": {"enforced": true, "alias_types": true, "checksum": "1262e17bfd6e539489668851db8511b4501ffc35b6635e9f831a955b28fd05dd"}, "access": "protected", "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true, "columns": ["game_id", "side"]}], "version": null, "latest_version": null, "deprecation_date": null}, "model.baseball_computer.stg_box_score_double_plays": {"database": "bc", "schema": "main_models", "name": "stg_box_score_double_plays", "resource_type": "model", "package_name": "baseball_computer", "path": "staging/box_score/stg_box_score_double_plays.sql", "original_file_path": "models/staging/box_score/stg_box_score_double_plays.sql", "unique_id": "model.baseball_computer.stg_box_score_double_plays", "fqn": ["baseball_computer", "staging", "box_score", "stg_box_score_double_plays"], "alias": "stg_box_score_double_plays", "checksum": {"name": "sha256", "checksum": "befe6307ca1948b05f66b168bb382410a827967d5f612239d4552c313739bf3c"}, "config": {"enabled": true, "alias": null, "schema": "models", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Individually noted double play events from box score accounts,\nwith varying degrees of detail.\n", "columns": {"game_id": {"name": "game_id", "description": "Retrosheet game ID, A 12-character string structured as follows:\n\n    - Chars 1-3: Home team ID\n    - Chars 4-11: Date (YYYYMMDD)\n    - Char 12: Game number (0 if only one game was played on that day)\n    \n    Example: MLN195607170", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "defense_side": {"name": "defense_side", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "fielders": {"name": "fielders", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "baseball_computer://models/staging/box_score/stg_box_score_double_plays.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "models"}, "created_at": 1702281449.04397, "relation_name": "\"bc\".\"main_models\".\"stg_box_score_double_plays\"", "raw_code": "WITH source AS (\n    SELECT * FROM {{ source('box_score', 'box_score_double_plays') }}\n),\n\nrenamed AS (\n    SELECT\n        game_id,\n        defense_side,\n        fielders\n\n    FROM source\n)\n\nSELECT * FROM renamed", "language": "sql", "refs": [], "sources": [["box_score", "box_score_double_plays"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.baseball_computer.box_score.box_score_double_plays"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.baseball_computer.stg_box_score_pitching_lines": {"database": "bc", "schema": "main_models", "name": "stg_box_score_pitching_lines", "resource_type": "model", "package_name": "baseball_computer", "path": "staging/box_score/stg_box_score_pitching_lines.sql", "original_file_path": "models/staging/box_score/stg_box_score_pitching_lines.sql", "unique_id": "model.baseball_computer.stg_box_score_pitching_lines", "fqn": ["baseball_computer", "staging", "box_score", "stg_box_score_pitching_lines"], "alias": "stg_box_score_pitching_lines", "checksum": {"name": "sha256", "checksum": "850cb1dfa569422a63606f2f21f79b6abe61262e5fe3932866a0c5a3259ee176"}, "config": {"enabled": true, "alias": null, "schema": "models", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Aggregate pitching data for each player in each game,\nderived from Retroshet box score data.\n", "columns": {"game_id": {"name": "game_id", "description": "Retrosheet game ID, A 12-character string structured as follows:\n\n    - Chars 1-3: Home team ID\n    - Chars 4-11: Date (YYYYMMDD)\n    - Char 12: Game number (0 if only one game was played on that day)\n    \n    Example: MLN195607170", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "pitcher_id": {"name": "pitcher_id", "description": "Retrosheet 8-character person ID for the pitcher associated with the\n    entity.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "side": {"name": "side", "description": "The side, Home or Away, associated with the entity. A generic way\n    of identifying the two teams playing in a game.", "meta": {}, "data_type": "side", "constraints": [], "quote": null, "tags": []}, "nth_pitcher": {"name": "nth_pitcher", "description": "Nth player to pitch for this team in this game.\nDifferentiates appearances by the same player who switches between pitcher and other\npositions.\n", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "outs_recorded": {"name": "outs_recorded", "description": "Number of outs recorded by a pitcher.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "no_out_batters": {"name": "no_out_batters", "description": "Number of batters faced by this pitcher in his final inning of work,\nif he did not record an out in that inning.\n", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "batters_faced": {"name": "batters_faced", "description": "Number of batters faced by a pitcher, generally equivalent to plate appearances (in old box-score-only games, this may not match up perfectly).", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "hits": {"name": "hits", "description": "(H) Number of times a batter reached base safely without an error or fielder's choice.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "doubles": {"name": "doubles", "description": "(2B) Number of hits in which a batter reached second base without the help of an error or an attempted\n    play on another runner.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "triples": {"name": "triples", "description": "(3B) Number of hits in which a batter reached third base without the help of an error or an attempted\n    play on another runner.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "home_runs": {"name": "home_runs", "description": "(HR) Number of hits in which a batter reached home plate without the help of an error or an attempted\n    play on another runner (usually by hitting the ball out of the park).", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "runs": {"name": "runs", "description": "(R) Number of runs scored.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "earned_runs": {"name": "earned_runs", "description": "(ER) Number of runs that are charged to a pitcher. This may include runs that scored after the pitcher\n    left the game (in the case of inherited runners), as well as runs that the scorekeeper deemed to be\n    the pitcher's responsibility in the absence of official inherited runner rules in the olden days.\n    Earned runs are only an official statistic at a game level: the earnedness of any given run is never\n    officially specified, only the total. It would be possible to make a very good guess algorithmically,\n    but that would be a huge pain for a stat that is not very useful in the first place.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "walks": {"name": "walks", "description": "(BB, occasionally W) Number of times a batter reaches base on called balls out of the strike zone\n    (Four balls for all of MLB history after the 1880s).", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "intentional_walks": {"name": "intentional_walks", "description": "(IBB, occasionally IW) Number of times a batter was intentionally walked. This number may be missing or undercounted\n    in earlier years, as intentional walks were not officially tracked until 1955.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "strikeouts": {"name": "strikeouts", "description": "(K, SO) Number of times a batter struck out. This includes plays in which a batter reached base on\n    a dropped third strike.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "hit_by_pitches": {"name": "hit_by_pitches", "description": "(HBP) Number of times a batter was awarded first base after being hit by a pitch.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "wild_pitches": {"name": "wild_pitches", "description": "(WP) Number of wild pitches.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "balks": {"name": "balks", "description": "(BK) Number of balks.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "sacrifice_hits": {"name": "sacrifice_hits", "description": "(SH) Number of times a batter performed a sacrifice bunt to advance another runner.\n    A bunt may count as a sacrifice even if the batter reaches base safely.\n    Unsuccessful attempts are not counted, nor are non-sacrifice bunts.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "sacrifice_flies": {"name": "sacrifice_flies", "description": "(SF) Number of times a batter hit a fly ball that resulted in an out (or error),\n    but allowed a runner to score on the throw.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "singles": {"name": "singles", "description": "(1B) Number of hits in which a batter reached first base.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "total_bases": {"name": "total_bases", "description": "(TB) Number of bases a batter reached safely without the help of an error or an attempted\n    play on another runner. HR * 4 + 3B * 3 + 2B * 2 + (H - HR - 3B - 2B)", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "on_base_opportunities": {"name": "on_base_opportunities", "description": "Number of plate appearances in which a batter either did or did not reach base,\n    as defined by the formula for on-base percentage. Note that this is very similar to but different\n    from plate_appearances, as it does not include sacrifice hits or interference.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "on_base_successes": {"name": "on_base_successes", "description": "Number of hits, walks, and hit by pitches that serves as the numerator in the formula\n    for on-base percentage.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "games_started": {"name": "games_started", "description": "(GS) Number of games started by a player.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "games_relieved": {"name": "games_relieved", "description": "Number of games in which a pitcher entered the game in relief.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "games_finished": {"name": "games_finished", "description": "(GF) Number of games in which a pitcher entered the game in relief and finished the game.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "baseball_computer://models/staging/box_score/stg_box_score_pitching_lines.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "models"}, "created_at": 1702281449.0455801, "relation_name": "\"bc\".\"main_models\".\"stg_box_score_pitching_lines\"", "raw_code": "WITH source AS (\n    SELECT * FROM {{ source('box_score', 'box_score_pitching_lines') }}\n),\n\nrenamed AS (\n    SELECT\n        game_id,\n        pitcher_id,\n        side,\n        nth_pitcher,\n        outs_recorded,\n        no_out_batters,\n        batters_faced,\n        hits,\n        doubles,\n        triples,\n        home_runs,\n        runs,\n        earned_runs,\n        walks,\n        intentional_walks,\n        strikeouts,\n        -- TODO: Change in original\n        hit_batsmen AS hit_by_pitches,\n        wild_pitches,\n        balks,\n        sacrifice_hits,\n        sacrifice_flies,\n        -- TODO: Fix rows where XBH > H\n        CASE WHEN hits::INT - (home_runs + triples + doubles) < 0 THEN NULL\n            ELSE hits - (home_runs + triples + doubles)\n        END AS singles,\n        singles + doubles * 2 + triples * 3 + home_runs * 4 AS total_bases,\n        -- This is a different formula vs batting lines because we don't have at bats.\n        -- The one missing piece is catcher's interferfence, which is extremely rare \n        -- if not non-existent in box-score only games.\n        batters_faced - COALESCE(sacrifice_hits, 0) AS on_base_opportunities,\n        hits + COALESCE(walks, 0) + COALESCE(hit_by_pitches, 0) AS on_base_successes,\n        CASE WHEN nth_pitcher = 1 THEN 1 ELSE 0 END AS games_started,\n        CASE WHEN nth_pitcher != 1 THEN 1 ELSE 0 END AS games_relieved,\n        CASE WHEN nth_pitcher = MAX(nth_pitcher) OVER (PARTITION BY game_id, side)\n                THEN 1\n            ELSE 0\n        END AS games_finished,\n    FROM source\n)\n\nSELECT * FROM renamed", "language": "sql", "refs": [], "sources": [["box_score", "box_score_pitching_lines"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.baseball_computer.box_score.box_score_pitching_lines"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.baseball_computer.stg_box_score_comments": {"database": "bc", "schema": "main_models", "name": "stg_box_score_comments", "resource_type": "model", "package_name": "baseball_computer", "path": "staging/box_score/stg_box_score_comments.sql", "original_file_path": "models/staging/box_score/stg_box_score_comments.sql", "unique_id": "model.baseball_computer.stg_box_score_comments", "fqn": ["baseball_computer", "staging", "box_score", "stg_box_score_comments"], "alias": "stg_box_score_comments", "checksum": {"name": "sha256", "checksum": "17ba9913bdfa43cbeea40a0188c66ddb994c8e1c0c713574e20bc1d43ecd0b8b"}, "config": {"enabled": true, "alias": null, "schema": "models", "database": null, "tags": [], "meta": {"primary_keys": ["game_id", "sequence_id"]}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Comment lines from box score files, along with their associated game", "columns": {"game_id": {"name": "game_id", "description": "Retrosheet game ID, A 12-character string structured as follows:\n\n    - Chars 1-3: Home team ID\n    - Chars 4-11: Date (YYYYMMDD)\n    - Char 12: Game number (0 if only one game was played on that day)\n    \n    Example: MLN195607170", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "sequence_id": {"name": "sequence_id", "description": "The nth item of a given sequence, used to differentiate and order\n    multiple items of the same type within a single entity.", "meta": {}, "data_type": "bigint", "constraints": [], "quote": null, "tags": []}, "comment": {"name": "comment", "description": "Comment string from a Retrosheet file. Sometimes these are misc.\n    details and trivia from the game, but they are also used as adhoc\n    data structures for things like ejections.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}}, "meta": {"primary_keys": ["game_id", "sequence_id"]}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "baseball_computer://models/staging/box_score/stg_box_score_comments.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "models", "contract": {"enforced": true}, "meta": {"primary_keys": ["game_id", "sequence_id"]}}, "created_at": 1702281449.047084, "relation_name": "\"bc\".\"main_models\".\"stg_box_score_comments\"", "raw_code": "WITH source AS (\n    SELECT * FROM {{ source('box_score', 'box_score_comments') }}\n),\n\nrenamed AS (\n    SELECT\n        game_id,\n        sequence_id,\n        comment\n    FROM source\n)\n\nSELECT * FROM renamed", "language": "sql", "refs": [], "sources": [["box_score", "box_score_comments"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.baseball_computer.box_score.box_score_comments"]}, "compiled_path": null, "contract": {"enforced": true, "alias_types": true, "checksum": "0a0e002517f11c3e93697e1f21f923b59bd8564a24329824a935fbaa25e8f572"}, "access": "protected", "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true, "columns": ["game_id", "sequence_id"]}], "version": null, "latest_version": null, "deprecation_date": null}, "model.baseball_computer.stg_box_score_triple_plays": {"database": "bc", "schema": "main_models", "name": "stg_box_score_triple_plays", "resource_type": "model", "package_name": "baseball_computer", "path": "staging/box_score/stg_box_score_triple_plays.sql", "original_file_path": "models/staging/box_score/stg_box_score_triple_plays.sql", "unique_id": "model.baseball_computer.stg_box_score_triple_plays", "fqn": ["baseball_computer", "staging", "box_score", "stg_box_score_triple_plays"], "alias": "stg_box_score_triple_plays", "checksum": {"name": "sha256", "checksum": "6bef2fb1aab9bb67f4f4f93af19d08d31f02e01939e62542f2885a4900006c87"}, "config": {"enabled": true, "alias": null, "schema": "models", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Individually noted triple play events from box score accounts,\nwith varying degrees of detail.\n", "columns": {"game_id": {"name": "game_id", "description": "Retrosheet game ID, A 12-character string structured as follows:\n\n    - Chars 1-3: Home team ID\n    - Chars 4-11: Date (YYYYMMDD)\n    - Char 12: Game number (0 if only one game was played on that day)\n    \n    Example: MLN195607170", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "defense_side": {"name": "defense_side", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "fielders": {"name": "fielders", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "baseball_computer://models/staging/box_score/stg_box_score_triple_plays.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "models", "contract": {"enforced": true}}, "created_at": 1702281449.010725, "relation_name": "\"bc\".\"main_models\".\"stg_box_score_triple_plays\"", "raw_code": "WITH source AS (\n    SELECT * FROM {{ source('box_score', 'box_score_triple_plays') }}\n),\n\nrenamed AS (\n    SELECT\n        game_id,\n        defense_side,\n        fielders\n\n    FROM source\n)\n\nSELECT * FROM renamed", "language": "sql", "refs": [], "sources": [["box_score", "box_score_triple_plays"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.baseball_computer.box_score.box_score_triple_plays"]}, "compiled_path": null, "contract": {"enforced": true, "alias_types": true, "checksum": "ab3ec3d702fbb925da52bb874f6be1ef89b223046f148c85bc712dfa36637639"}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.baseball_computer.stg_box_score_stolen_bases": {"database": "bc", "schema": "main_models", "name": "stg_box_score_stolen_bases", "resource_type": "model", "package_name": "baseball_computer", "path": "staging/box_score/stg_box_score_stolen_bases.sql", "original_file_path": "models/staging/box_score/stg_box_score_stolen_bases.sql", "unique_id": "model.baseball_computer.stg_box_score_stolen_bases", "fqn": ["baseball_computer", "staging", "box_score", "stg_box_score_stolen_bases"], "alias": "stg_box_score_stolen_bases", "checksum": {"name": "sha256", "checksum": "6ddfe1799b99034e35bbfe330aaf3a6a1529d8c76cfcac81f77d3a5343ee0418"}, "config": {"enabled": true, "alias": null, "schema": "models", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Individually noted stolen base events from box score accounts,\nwith varying degrees of detail.\n", "columns": {"game_id": {"name": "game_id", "description": "Retrosheet game ID, A 12-character string structured as follows:\n\n    - Chars 1-3: Home team ID\n    - Chars 4-11: Date (YYYYMMDD)\n    - Char 12: Game number (0 if only one game was played on that day)\n    \n    Example: MLN195607170", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "running_side": {"name": "running_side", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "runner_id": {"name": "runner_id", "description": "Retrosheet 8-character person ID for the baserunner associated with the\n    entity.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "pitcher_id": {"name": "pitcher_id", "description": "Retrosheet 8-character person ID for the pitcher associated with the\n    entity.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "catcher_id": {"name": "catcher_id", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "inning": {"name": "inning", "description": "The inning during which the entity took place.", "meta": {}, "data_type": "bigint", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "baseball_computer://models/staging/box_score/stg_box_score_stolen_bases.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "models"}, "created_at": 1702281449.0387342, "relation_name": "\"bc\".\"main_models\".\"stg_box_score_stolen_bases\"", "raw_code": "WITH source AS (\n    SELECT * FROM {{ source('box_score', 'box_score_stolen_bases') }}\n),\n\nrenamed AS (\n    SELECT\n        game_id,\n        running_side,\n        runner_id,\n        pitcher_id,\n        catcher_id,\n        inning\n\n    FROM source\n)\n\nSELECT * FROM renamed", "language": "sql", "refs": [], "sources": [["box_score", "box_score_stolen_bases"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.baseball_computer.box_score.box_score_stolen_bases"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.baseball_computer.stg_box_score_team_batting_lines": {"database": "bc", "schema": "main_models", "name": "stg_box_score_team_batting_lines", "resource_type": "model", "package_name": "baseball_computer", "path": "staging/box_score/stg_box_score_team_batting_lines.sql", "original_file_path": "models/staging/box_score/stg_box_score_team_batting_lines.sql", "unique_id": "model.baseball_computer.stg_box_score_team_batting_lines", "fqn": ["baseball_computer", "staging", "box_score", "stg_box_score_team_batting_lines"], "alias": "stg_box_score_team_batting_lines", "checksum": {"name": "sha256", "checksum": "dda6b2dca2d3c99358c81ae06c1ae808ab0b510852fbf298d99dcd1dd1193a18"}, "config": {"enabled": true, "alias": null, "schema": "models", "database": null, "tags": [], "meta": {"primary_keys": ["game_id", "side"]}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Team-level batting lines from box score accounts.\nThese are generally rare and are only present in certain files.\n", "columns": {"game_id": {"name": "game_id", "description": "Retrosheet game ID, A 12-character string structured as follows:\n\n    - Chars 1-3: Home team ID\n    - Chars 4-11: Date (YYYYMMDD)\n    - Char 12: Game number (0 if only one game was played on that day)\n    \n    Example: MLN195607170", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "side": {"name": "side", "description": "The side, Home or Away, associated with the entity. A generic way\n    of identifying the two teams playing in a game.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "at_bats": {"name": "at_bats", "description": "(AB) Number of plate appearances that ended in either a hit or a non-sacrifice out.", "meta": {}, "data_type": "bigint", "constraints": [], "quote": null, "tags": []}, "runs": {"name": "runs", "description": "(R) Number of runs scored.", "meta": {}, "data_type": "bigint", "constraints": [], "quote": null, "tags": []}, "hits": {"name": "hits", "description": "(H) Number of times a batter reached base safely without an error or fielder's choice.", "meta": {}, "data_type": "bigint", "constraints": [], "quote": null, "tags": []}, "doubles": {"name": "doubles", "description": "(2B) Number of hits in which a batter reached second base without the help of an error or an attempted\n    play on another runner.", "meta": {}, "data_type": "bigint", "constraints": [], "quote": null, "tags": []}, "triples": {"name": "triples", "description": "(3B) Number of hits in which a batter reached third base without the help of an error or an attempted\n    play on another runner.", "meta": {}, "data_type": "bigint", "constraints": [], "quote": null, "tags": []}, "home_runs": {"name": "home_runs", "description": "(HR) Number of hits in which a batter reached home plate without the help of an error or an attempted\n    play on another runner (usually by hitting the ball out of the park).", "meta": {}, "data_type": "bigint", "constraints": [], "quote": null, "tags": []}, "rbi": {"name": "rbi", "description": "", "meta": {}, "data_type": "bigint", "constraints": [], "quote": null, "tags": []}, "sacrifice_hits": {"name": "sacrifice_hits", "description": "(SH) Number of times a batter performed a sacrifice bunt to advance another runner.\n    A bunt may count as a sacrifice even if the batter reaches base safely.\n    Unsuccessful attempts are not counted, nor are non-sacrifice bunts.", "meta": {}, "data_type": "bigint", "constraints": [], "quote": null, "tags": []}, "sacrifice_flies": {"name": "sacrifice_flies", "description": "(SF) Number of times a batter hit a fly ball that resulted in an out (or error),\n    but allowed a runner to score on the throw.", "meta": {}, "data_type": "bigint", "constraints": [], "quote": null, "tags": []}, "hit_by_pitches": {"name": "hit_by_pitches", "description": "(HBP) Number of times a batter was awarded first base after being hit by a pitch.", "meta": {}, "data_type": "bigint", "constraints": [], "quote": null, "tags": []}, "walks": {"name": "walks", "description": "(BB, occasionally W) Number of times a batter reaches base on called balls out of the strike zone\n    (Four balls for all of MLB history after the 1880s).", "meta": {}, "data_type": "bigint", "constraints": [], "quote": null, "tags": []}, "intentional_walks": {"name": "intentional_walks", "description": "(IBB, occasionally IW) Number of times a batter was intentionally walked. This number may be missing or undercounted\n    in earlier years, as intentional walks were not officially tracked until 1955.", "meta": {}, "data_type": "bigint", "constraints": [], "quote": null, "tags": []}, "strikeouts": {"name": "strikeouts", "description": "(K, SO) Number of times a batter struck out. This includes plays in which a batter reached base on\n    a dropped third strike.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "stolen_bases": {"name": "stolen_bases", "description": "(SB) Number of successful stolen bases.", "meta": {}, "data_type": "bigint", "constraints": [], "quote": null, "tags": []}, "caught_stealing": {"name": "caught_stealing", "description": "(CS) Number of times a runner was caught stealing.", "meta": {}, "data_type": "bigint", "constraints": [], "quote": null, "tags": []}, "grounded_into_double_plays": {"name": "grounded_into_double_plays", "description": "(GIDP) Number of times a batter grounded into a double play. This is the conventional way\n    to record a double play and as such is an important statistic on its own. Games without\n    play-by-play accounts don't have data on the trajectory of the double play, so\n    this number is not populated for those games.", "meta": {}, "data_type": "bigint", "constraints": [], "quote": null, "tags": []}, "reached_on_interference": {"name": "reached_on_interference", "description": "", "meta": {}, "data_type": "bigint", "constraints": [], "quote": null, "tags": []}}, "meta": {"primary_keys": ["game_id", "side"]}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "baseball_computer://models/staging/box_score/stg_box_score_team_batting_lines.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "models", "contract": {"enforced": true}, "meta": {"primary_keys": ["game_id", "side"]}}, "created_at": 1702281449.0132961, "relation_name": "\"bc\".\"main_models\".\"stg_box_score_team_batting_lines\"", "raw_code": "WITH source AS (\n    SELECT * FROM {{ source('box_score', 'box_score_team_batting_lines') }}\n),\n\nrenamed AS (\n    SELECT\n        game_id,\n        side,\n        at_bats,\n        runs,\n        hits,\n        doubles,\n        triples,\n        home_runs,\n        rbi,\n        sacrifice_hits,\n        sacrifice_flies,\n        hit_by_pitch AS hit_by_pitches,\n        walks,\n        intentional_walks,\n        strikeouts,\n        stolen_bases,\n        caught_stealing,\n        grounded_into_double_plays,\n        reached_on_interference\n    FROM source\n)\n\nSELECT * FROM renamed", "language": "sql", "refs": [], "sources": [["box_score", "box_score_team_batting_lines"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.baseball_computer.box_score.box_score_team_batting_lines"]}, "compiled_path": null, "contract": {"enforced": true, "alias_types": true, "checksum": "d44d356801d7896431b8b66ee009a69c7e1aca19570922cb08cfe4ef03b5d4b2"}, "access": "protected", "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true, "columns": ["game_id", "side"]}], "version": null, "latest_version": null, "deprecation_date": null}, "model.baseball_computer.stg_box_score_caught_stealing": {"database": "bc", "schema": "main_models", "name": "stg_box_score_caught_stealing", "resource_type": "model", "package_name": "baseball_computer", "path": "staging/box_score/stg_box_score_caught_stealing.sql", "original_file_path": "models/staging/box_score/stg_box_score_caught_stealing.sql", "unique_id": "model.baseball_computer.stg_box_score_caught_stealing", "fqn": ["baseball_computer", "staging", "box_score", "stg_box_score_caught_stealing"], "alias": "stg_box_score_caught_stealing", "checksum": {"name": "sha256", "checksum": "0f8f9561004226f9f12aa57342ada97c9c4e57f0803067d4e43e470a963437f2"}, "config": {"enabled": true, "alias": null, "schema": "models", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Individually noted caught stealing events from box score accounts,\nwith varying degrees of detail.\n", "columns": {"game_id": {"name": "game_id", "description": "Retrosheet game ID, A 12-character string structured as follows:\n\n    - Chars 1-3: Home team ID\n    - Chars 4-11: Date (YYYYMMDD)\n    - Char 12: Game number (0 if only one game was played on that day)\n    \n    Example: MLN195607170", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "running_side": {"name": "running_side", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "runner_id": {"name": "runner_id", "description": "Retrosheet 8-character person ID for the baserunner associated with the\n    entity.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "pitcher_id": {"name": "pitcher_id", "description": "Retrosheet 8-character person ID for the pitcher associated with the\n    entity.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "catcher_id": {"name": "catcher_id", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "inning": {"name": "inning", "description": "The inning during which the entity took place.", "meta": {}, "data_type": "bigint", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "baseball_computer://models/staging/box_score/stg_box_score_caught_stealing.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "models"}, "created_at": 1702281449.0393422, "relation_name": "\"bc\".\"main_models\".\"stg_box_score_caught_stealing\"", "raw_code": "WITH source AS (\n    SELECT * FROM {{ source('box_score', 'box_score_caught_stealing') }}\n),\n\nrenamed AS (\n    SELECT\n        game_id,\n        running_side,\n        runner_id,\n        pitcher_id,\n        catcher_id,\n        inning\n\n    FROM source\n)\n\nSELECT * FROM renamed\nWHERE substring(game_id, 4,4)::INT < 1919", "language": "sql", "refs": [], "sources": [["box_score", "box_score_caught_stealing"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.baseball_computer.box_score.box_score_caught_stealing"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.baseball_computer.stg_box_score_pinch_hitting_lines": {"database": "bc", "schema": "main_models", "name": "stg_box_score_pinch_hitting_lines", "resource_type": "model", "package_name": "baseball_computer", "path": "staging/box_score/stg_box_score_pinch_hitting_lines.sql", "original_file_path": "models/staging/box_score/stg_box_score_pinch_hitting_lines.sql", "unique_id": "model.baseball_computer.stg_box_score_pinch_hitting_lines", "fqn": ["baseball_computer", "staging", "box_score", "stg_box_score_pinch_hitting_lines"], "alias": "stg_box_score_pinch_hitting_lines", "checksum": {"name": "sha256", "checksum": "050b9d540cceb5502bf98685a2314a4d35ed9fe8ea325ebc5b30dce0c6837e0e"}, "config": {"enabled": true, "alias": null, "schema": "models", "database": null, "tags": [], "meta": {"primary_keys": ["game_id", "pinch_hitter_id", "inning"]}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Box score batting lines that are specific to stats accumulated\nwhile a player is pinch hitting.\n", "columns": {"game_id": {"name": "game_id", "description": "Retrosheet game ID, A 12-character string structured as follows:\n\n    - Chars 1-3: Home team ID\n    - Chars 4-11: Date (YYYYMMDD)\n    - Char 12: Game number (0 if only one game was played on that day)\n    \n    Example: MLN195607170", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "pinch_hitter_id": {"name": "pinch_hitter_id", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "inning": {"name": "inning", "description": "The inning during which the entity took place.", "meta": {}, "data_type": "bigint", "constraints": [], "quote": null, "tags": []}, "side": {"name": "side", "description": "The side, Home or Away, associated with the entity. A generic way\n    of identifying the two teams playing in a game.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "at_bats": {"name": "at_bats", "description": "(AB) Number of plate appearances that ended in either a hit or a non-sacrifice out.", "meta": {}, "data_type": "bigint", "constraints": [], "quote": null, "tags": []}, "runs": {"name": "runs", "description": "(R) Number of runs scored.", "meta": {}, "data_type": "bigint", "constraints": [], "quote": null, "tags": []}, "hits": {"name": "hits", "description": "(H) Number of times a batter reached base safely without an error or fielder's choice.", "meta": {}, "data_type": "bigint", "constraints": [], "quote": null, "tags": []}, "doubles": {"name": "doubles", "description": "(2B) Number of hits in which a batter reached second base without the help of an error or an attempted\n    play on another runner.", "meta": {}, "data_type": "bigint", "constraints": [], "quote": null, "tags": []}, "triples": {"name": "triples", "description": "(3B) Number of hits in which a batter reached third base without the help of an error or an attempted\n    play on another runner.", "meta": {}, "data_type": "bigint", "constraints": [], "quote": null, "tags": []}, "home_runs": {"name": "home_runs", "description": "(HR) Number of hits in which a batter reached home plate without the help of an error or an attempted\n    play on another runner (usually by hitting the ball out of the park).", "meta": {}, "data_type": "bigint", "constraints": [], "quote": null, "tags": []}, "rbi": {"name": "rbi", "description": "", "meta": {}, "data_type": "bigint", "constraints": [], "quote": null, "tags": []}, "sacrifice_hits": {"name": "sacrifice_hits", "description": "(SH) Number of times a batter performed a sacrifice bunt to advance another runner.\n    A bunt may count as a sacrifice even if the batter reaches base safely.\n    Unsuccessful attempts are not counted, nor are non-sacrifice bunts.", "meta": {}, "data_type": "bigint", "constraints": [], "quote": null, "tags": []}, "sacrifice_flies": {"name": "sacrifice_flies", "description": "(SF) Number of times a batter hit a fly ball that resulted in an out (or error),\n    but allowed a runner to score on the throw.", "meta": {}, "data_type": "bigint", "constraints": [], "quote": null, "tags": []}, "hit_by_pitches": {"name": "hit_by_pitches", "description": "(HBP) Number of times a batter was awarded first base after being hit by a pitch.", "meta": {}, "data_type": "bigint", "constraints": [], "quote": null, "tags": []}, "walks": {"name": "walks", "description": "(BB, occasionally W) Number of times a batter reaches base on called balls out of the strike zone\n    (Four balls for all of MLB history after the 1880s).", "meta": {}, "data_type": "bigint", "constraints": [], "quote": null, "tags": []}, "intentional_walks": {"name": "intentional_walks", "description": "(IBB, occasionally IW) Number of times a batter was intentionally walked. This number may be missing or undercounted\n    in earlier years, as intentional walks were not officially tracked until 1955.", "meta": {}, "data_type": "bigint", "constraints": [], "quote": null, "tags": []}, "strikeouts": {"name": "strikeouts", "description": "(K, SO) Number of times a batter struck out. This includes plays in which a batter reached base on\n    a dropped third strike.", "meta": {}, "data_type": "bigint", "constraints": [], "quote": null, "tags": []}, "stolen_bases": {"name": "stolen_bases", "description": "(SB) Number of successful stolen bases.", "meta": {}, "data_type": "bigint", "constraints": [], "quote": null, "tags": []}, "caught_stealing": {"name": "caught_stealing", "description": "(CS) Number of times a runner was caught stealing.", "meta": {}, "data_type": "bigint", "constraints": [], "quote": null, "tags": []}, "grounded_into_double_plays": {"name": "grounded_into_double_plays", "description": "(GIDP) Number of times a batter grounded into a double play. This is the conventional way\n    to record a double play and as such is an important statistic on its own. Games without\n    play-by-play accounts don't have data on the trajectory of the double play, so\n    this number is not populated for those games.", "meta": {}, "data_type": "bigint", "constraints": [], "quote": null, "tags": []}, "reached_on_interference": {"name": "reached_on_interference", "description": "", "meta": {}, "data_type": "bigint", "constraints": [], "quote": null, "tags": []}}, "meta": {"primary_keys": ["game_id", "pinch_hitter_id", "inning"]}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "baseball_computer://models/staging/box_score/stg_box_score_pinch_hitting_lines.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "models", "meta": {"primary_keys": ["game_id", "pinch_hitter_id", "inning"]}}, "created_at": 1702281449.0414872, "relation_name": "\"bc\".\"main_models\".\"stg_box_score_pinch_hitting_lines\"", "raw_code": "WITH source AS (\n    SELECT * FROM {{ source('box_score', 'box_score_pinch_hitting_lines') }}\n),\n\nrenamed AS (\n    SELECT\n        game_id,\n        pinch_hitter_id,\n        inning,\n        side,\n        at_bats,\n        runs,\n        hits,\n        doubles,\n        triples,\n        home_runs,\n        rbi,\n        sacrifice_hits,\n        sacrifice_flies,\n        hit_by_pitch AS hit_by_pitches,\n        walks,\n        intentional_walks,\n        strikeouts,\n        stolen_bases,\n        caught_stealing,\n        grounded_into_double_plays,\n        reached_on_interference\n\n    FROM source\n)\n\nSELECT * FROM renamed", "language": "sql", "refs": [], "sources": [["box_score", "box_score_pinch_hitting_lines"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.baseball_computer.box_score.box_score_pinch_hitting_lines"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.baseball_computer.stg_box_score_team_miscellaneous_lines": {"database": "bc", "schema": "main_models", "name": "stg_box_score_team_miscellaneous_lines", "resource_type": "model", "package_name": "baseball_computer", "path": "staging/box_score/stg_box_score_team_miscellaneous_lines.sql", "original_file_path": "models/staging/box_score/stg_box_score_team_miscellaneous_lines.sql", "unique_id": "model.baseball_computer.stg_box_score_team_miscellaneous_lines", "fqn": ["baseball_computer", "staging", "box_score", "stg_box_score_team_miscellaneous_lines"], "alias": "stg_box_score_team_miscellaneous_lines", "checksum": {"name": "sha256", "checksum": "1d67781b0dfc9d06b2fa7ef791c402f7f161c99c78334992ee38465a78c1d258"}, "config": {"enabled": true, "alias": null, "schema": "models", "database": null, "tags": [], "meta": {"primary_keys": ["game_id", "side"]}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Team-level miscellaneous lines from box score accounts,\nfeaturing stats that either only apply at a team level\nor were only tracked at a team level.\n", "columns": {"game_id": {"name": "game_id", "description": "Retrosheet game ID, A 12-character string structured as follows:\n\n    - Chars 1-3: Home team ID\n    - Chars 4-11: Date (YYYYMMDD)\n    - Char 12: Game number (0 if only one game was played on that day)\n    \n    Example: MLN195607170", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "side": {"name": "side", "description": "The side, Home or Away, associated with the entity. A generic way\n    of identifying the two teams playing in a game.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "left_on_base": {"name": "left_on_base", "description": "(LOB) At an individual level, the number of baserunners that a batter failed to advance during a plate appearance.\n    At a team level, the number of baserunners remaining on base at the end of an inning. In order to count, baserunners\n    must not have scored or been put out.", "meta": {}, "data_type": "bigint", "constraints": [], "quote": null, "tags": []}, "team_earned_runs": {"name": "team_earned_runs", "description": "", "meta": {}, "data_type": "bigint", "constraints": [], "quote": null, "tags": []}, "double_plays_turned": {"name": "double_plays_turned", "description": "", "meta": {}, "data_type": "bigint", "constraints": [], "quote": null, "tags": []}, "triple_plays_turned": {"name": "triple_plays_turned", "description": "", "meta": {}, "data_type": "bigint", "constraints": [], "quote": null, "tags": []}}, "meta": {"primary_keys": ["game_id", "side"]}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "baseball_computer://models/staging/box_score/stg_box_score_team_miscellaneous_lines.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "models", "contract": {"enforced": true}, "meta": {"primary_keys": ["game_id", "side"]}}, "created_at": 1702281449.057342, "relation_name": "\"bc\".\"main_models\".\"stg_box_score_team_miscellaneous_lines\"", "raw_code": "WITH source AS (\n    SELECT * FROM {{ source('box_score', 'box_score_team_miscellaneous_lines') }}\n),\n\nrenamed AS (\n    SELECT\n        game_id,\n        side,\n        left_on_base,\n        team_earned_runs,\n        double_plays_turned,\n        triple_plays_turned\n\n    FROM source\n)\n\nSELECT * FROM renamed", "language": "sql", "refs": [], "sources": [["box_score", "box_score_team_miscellaneous_lines"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.baseball_computer.box_score.box_score_team_miscellaneous_lines"]}, "compiled_path": null, "contract": {"enforced": true, "alias_types": true, "checksum": "be2523de501a3537295b306958a78bece16914b9a0636006bb7a5747bfb2e5bb"}, "access": "protected", "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true, "columns": ["game_id", "side"]}], "version": null, "latest_version": null, "deprecation_date": null}, "model.baseball_computer.stg_box_score_line_scores": {"database": "bc", "schema": "main_models", "name": "stg_box_score_line_scores", "resource_type": "model", "package_name": "baseball_computer", "path": "staging/box_score/stg_box_score_line_scores.sql", "original_file_path": "models/staging/box_score/stg_box_score_line_scores.sql", "unique_id": "model.baseball_computer.stg_box_score_line_scores", "fqn": ["baseball_computer", "staging", "box_score", "stg_box_score_line_scores"], "alias": "stg_box_score_line_scores", "checksum": {"name": "sha256", "checksum": "1f7c9cf2274b1893a67f9602ffa97858b9a618567ae00230e6a9474975202ed2"}, "config": {"enabled": true, "alias": null, "schema": "models", "database": null, "tags": [], "meta": {"primary_keys": ["game_id", "batting_side", "inning"]}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Inning-by-inning run totals from box score accounts.\n", "columns": {"game_id": {"name": "game_id", "description": "Retrosheet game ID, A 12-character string structured as follows:\n\n    - Chars 1-3: Home team ID\n    - Chars 4-11: Date (YYYYMMDD)\n    - Char 12: Game number (0 if only one game was played on that day)\n    \n    Example: MLN195607170", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "batting_side": {"name": "batting_side", "description": "The side that was batting when the entity took place.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "inning": {"name": "inning", "description": "The inning during which the entity took place.", "meta": {}, "data_type": "bigint", "constraints": [], "quote": null, "tags": []}, "runs": {"name": "runs", "description": "(R) Number of runs scored.", "meta": {}, "data_type": "bigint", "constraints": [], "quote": null, "tags": []}}, "meta": {"primary_keys": ["game_id", "batting_side", "inning"]}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "baseball_computer://models/staging/box_score/stg_box_score_line_scores.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "models", "contract": {"enforced": true}, "meta": {"primary_keys": ["game_id", "batting_side", "inning"]}}, "created_at": 1702281449.055639, "relation_name": "\"bc\".\"main_models\".\"stg_box_score_line_scores\"", "raw_code": "WITH source AS (\n    SELECT * FROM {{ source('box_score', 'box_score_line_scores') }}\n),\n\nrenamed AS (\n    SELECT\n        game_id,\n        side AS batting_side,\n        inning,\n        runs\n    FROM source\n)\n\nSELECT * FROM renamed", "language": "sql", "refs": [], "sources": [["box_score", "box_score_line_scores"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.baseball_computer.box_score.box_score_line_scores"]}, "compiled_path": null, "contract": {"enforced": true, "alias_types": true, "checksum": "f12e9678740cbbe5e4747a578a2b7336a319bd37b60867abec00b3ac1fa30663"}, "access": "protected", "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true, "columns": ["game_id", "batting_side", "inning"]}], "version": null, "latest_version": null, "deprecation_date": null}, "model.baseball_computer.stg_box_score_hit_by_pitches": {"database": "bc", "schema": "main_models", "name": "stg_box_score_hit_by_pitches", "resource_type": "model", "package_name": "baseball_computer", "path": "staging/box_score/stg_box_score_hit_by_pitches.sql", "original_file_path": "models/staging/box_score/stg_box_score_hit_by_pitches.sql", "unique_id": "model.baseball_computer.stg_box_score_hit_by_pitches", "fqn": ["baseball_computer", "staging", "box_score", "stg_box_score_hit_by_pitches"], "alias": "stg_box_score_hit_by_pitches", "checksum": {"name": "sha256", "checksum": "7b6b31fafea23338b3f453ba58ea8f69c0e3196eff27e24a296e4cdc49905f06"}, "config": {"enabled": true, "alias": null, "schema": "models", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Individually noted hit by pitch events from box score accounts,\nwith varying degrees of detail.\n", "columns": {"game_id": {"name": "game_id", "description": "Retrosheet game ID, A 12-character string structured as follows:\n\n    - Chars 1-3: Home team ID\n    - Chars 4-11: Date (YYYYMMDD)\n    - Char 12: Game number (0 if only one game was played on that day)\n    \n    Example: MLN195607170", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "pitching_side": {"name": "pitching_side", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "pitcher_id": {"name": "pitcher_id", "description": "Retrosheet 8-character person ID for the pitcher associated with the\n    entity.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "batter_id": {"name": "batter_id", "description": "Retrosheet 8-character person ID for the batter associated with the\n    entity.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "baseball_computer://models/staging/box_score/stg_box_score_hit_by_pitches.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "models", "contract": {"enforced": true}}, "created_at": 1702281449.058848, "relation_name": "\"bc\".\"main_models\".\"stg_box_score_hit_by_pitches\"", "raw_code": "WITH source AS (\n    SELECT * FROM {{ source('box_score', 'box_score_hit_by_pitches') }}\n),\n\nrenamed AS (\n    SELECT\n        game_id,\n        pitching_side,\n        pitcher_id,\n        batter_id\n\n    FROM source\n)\n\nSELECT * FROM renamed", "language": "sql", "refs": [], "sources": [["box_score", "box_score_hit_by_pitches"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.baseball_computer.box_score.box_score_hit_by_pitches"]}, "compiled_path": null, "contract": {"enforced": true, "alias_types": true, "checksum": "356c64e4a93e836a4c66d7270814a949302fe49745253071479d72d04afb340a"}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.baseball_computer.stg_box_score_batting_lines": {"database": "bc", "schema": "main_models", "name": "stg_box_score_batting_lines", "resource_type": "model", "package_name": "baseball_computer", "path": "staging/box_score/stg_box_score_batting_lines.sql", "original_file_path": "models/staging/box_score/stg_box_score_batting_lines.sql", "unique_id": "model.baseball_computer.stg_box_score_batting_lines", "fqn": ["baseball_computer", "staging", "box_score", "stg_box_score_batting_lines"], "alias": "stg_box_score_batting_lines", "checksum": {"name": "sha256", "checksum": "ca9ffc4a983fadddd070559e1ceac52f7be4f1d68e4ecd2bef42d51229c47200"}, "config": {"enabled": true, "alias": null, "schema": "models", "database": null, "tags": [], "meta": {"primary_keys": ["game_id", "side", "batter_id"]}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Aggregate offensive data for each player in each game,\nderived from Retroshet box score data.\n", "columns": {"game_id": {"name": "game_id", "description": "Retrosheet game ID, A 12-character string structured as follows:\n\n    - Chars 1-3: Home team ID\n    - Chars 4-11: Date (YYYYMMDD)\n    - Char 12: Game number (0 if only one game was played on that day)\n    \n    Example: MLN195607170", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "batter_id": {"name": "batter_id", "description": "Retrosheet 8-character person ID for the batter associated with the\n    entity.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "side": {"name": "side", "description": "The side, Home or Away, associated with the entity. A generic way\n    of identifying the two teams playing in a game.", "meta": {}, "data_type": "side", "constraints": [], "quote": null, "tags": []}, "lineup_position": {"name": "lineup_position", "description": "1-byte integer for the traditional 1-9 batting order position, along with\n    10 for the pitcher in games with a DH. With very few exceptions, a player will\n    only appear in one lineup position per game. The exceptions are from courtesy\n    runners and the Ohtani rule.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "nth_player_at_position": {"name": "nth_player_at_position", "description": "The nth player to occupy this spot in the order during the game", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "at_bats": {"name": "at_bats", "description": "(AB) Number of plate appearances that ended in either a hit or a non-sacrifice out.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "runs": {"name": "runs", "description": "(R) Number of runs scored.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "hits": {"name": "hits", "description": "(H) Number of times a batter reached base safely without an error or fielder's choice.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "doubles": {"name": "doubles", "description": "(2B) Number of hits in which a batter reached second base without the help of an error or an attempted\n    play on another runner.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "triples": {"name": "triples", "description": "(3B) Number of hits in which a batter reached third base without the help of an error or an attempted\n    play on another runner.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "home_runs": {"name": "home_runs", "description": "(HR) Number of hits in which a batter reached home plate without the help of an error or an attempted\n    play on another runner (usually by hitting the ball out of the park).", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "runs_batted_in": {"name": "runs_batted_in", "description": "(RBI) Number of runs that scored as a result of a batter's plate appearance. This is usually\n    the number of runs that scored on the play, but errors and other similar cases may cause\n    some runs not to be credited to the batter. Scorerkeeper discretion occasionally causes differences\n    between the number in the database and the official MLB total.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "sacrifice_hits": {"name": "sacrifice_hits", "description": "(SH) Number of times a batter performed a sacrifice bunt to advance another runner.\n    A bunt may count as a sacrifice even if the batter reaches base safely.\n    Unsuccessful attempts are not counted, nor are non-sacrifice bunts.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "sacrifice_flies": {"name": "sacrifice_flies", "description": "(SF) Number of times a batter hit a fly ball that resulted in an out (or error),\n    but allowed a runner to score on the throw.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "hit_by_pitches": {"name": "hit_by_pitches", "description": "(HBP) Number of times a batter was awarded first base after being hit by a pitch.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "walks": {"name": "walks", "description": "(BB, occasionally W) Number of times a batter reaches base on called balls out of the strike zone\n    (Four balls for all of MLB history after the 1880s).", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "intentional_walks": {"name": "intentional_walks", "description": "(IBB, occasionally IW) Number of times a batter was intentionally walked. This number may be missing or undercounted\n    in earlier years, as intentional walks were not officially tracked until 1955.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "strikeouts": {"name": "strikeouts", "description": "(K, SO) Number of times a batter struck out. This includes plays in which a batter reached base on\n    a dropped third strike.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "stolen_bases": {"name": "stolen_bases", "description": "(SB) Number of successful stolen bases.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "caught_stealing": {"name": "caught_stealing", "description": "(CS) Number of times a runner was caught stealing.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "grounded_into_double_plays": {"name": "grounded_into_double_plays", "description": "(GIDP) Number of times a batter grounded into a double play. This is the conventional way\n    to record a double play and as such is an important statistic on its own. Games without\n    play-by-play accounts don't have data on the trajectory of the double play, so\n    this number is not populated for those games.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "reached_on_interferences": {"name": "reached_on_interferences", "description": "Number of times a batter was awarded first base for being illegally hindered\n    by a fielder, usually the catcher.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "singles": {"name": "singles", "description": "(1B) Number of hits in which a batter reached first base.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "total_bases": {"name": "total_bases", "description": "(TB) Number of bases a batter reached safely without the help of an error or an attempted\n    play on another runner. HR * 4 + 3B * 3 + 2B * 2 + (H - HR - 3B - 2B)", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "plate_appearances": {"name": "plate_appearances", "description": "(PA) Number of times a batter came to the plate, including walks, hit by pitches, sacrifices, and at-bats.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "on_base_opportunities": {"name": "on_base_opportunities", "description": "Number of plate appearances in which a batter either did or did not reach base,\n    as defined by the formula for on-base percentage. Note that this is very similar to but different\n    from plate_appearances, as it does not include sacrifice hits or interference.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "on_base_successes": {"name": "on_base_successes", "description": "Number of hits, walks, and hit by pitches that serves as the numerator in the formula\n    for on-base percentage.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "batting_outs": {"name": "batting_outs", "description": "Number of outs that \"should\" have been recorded as a result of a batter's plate apperances.\n    A batting out is still counted if no actual out is recorded on an error or a failed fielder's choice.\n    Outs on baserunners (including the batter trying to stretch a hit) do not count here.\n    Grounded-into-double-plays count as two outs, but other types of double plays do not (the \n    idea here is that the baserunner is responsible on other types of double plays).\n    Unofficial stat, but designed here to be generally useful in determining rates of official stats.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}}, "meta": {"primary_keys": ["game_id", "side", "batter_id"]}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "baseball_computer://models/staging/box_score/stg_box_score_batting_lines.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "models", "contract": {"enforced": true}, "meta": {"primary_keys": ["game_id", "side", "batter_id"]}}, "created_at": 1702281449.049651, "relation_name": "\"bc\".\"main_models\".\"stg_box_score_batting_lines\"", "raw_code": "WITH source AS (\n    SELECT * FROM {{ source('box_score', 'box_score_batting_lines') }}\n),\n\nrenamed AS (\n    SELECT\n        game_id,\n        batter_id,\n        side,\n        lineup_position,\n        nth_player_at_position,\n        at_bats,\n        runs,\n        hits,\n        doubles,\n        triples,\n        home_runs,\n        -- TODO: Change in source\n        rbi AS runs_batted_in,\n        sacrifice_hits,\n        sacrifice_flies,\n        -- TODO: Change in source\n        hit_by_pitch AS hit_by_pitches,\n        walks,\n        intentional_walks,\n        strikeouts,\n        stolen_bases,\n        caught_stealing,\n        grounded_into_double_plays,\n        -- TODO: Change in source\n        reached_on_interference AS reached_on_interferences,\n        -- TODO: Fix rows with 0 hits but 1+ XBH and where hits > AB\n        CASE WHEN hits = 0 AND doubles + triples + home_runs > 0 THEN NULL \n            ELSE hits - home_runs - triples - doubles\n        END::UTINYINT AS singles,\n        (singles + doubles * 2 + triples * 3 + home_runs * 4)::UTINYINT AS total_bases,\n        (at_bats + COALESCE(walks, 0) + COALESCE(hit_by_pitches, 0) + COALESCE(sacrifice_flies, 0)\n        + COALESCE(sacrifice_hits, 0) + COALESCE(reached_on_interferences, 0))::UTINYINT\n        AS plate_appearances,\n        (at_bats + COALESCE(walks, 0) + COALESCE(hit_by_pitches, 0) + COALESCE(sacrifice_flies, 0))::UTINYINT\n        AS on_base_opportunities,\n        (hits + COALESCE(walks, 0) + COALESCE(hit_by_pitches, 0))::UTINYINT AS on_base_successes,\n        CASE WHEN hits > at_bats THEN NULL\n            ELSE at_bats - hits + COALESCE(grounded_into_double_plays, 0)\n        END::UTINYINT AS batting_outs,\n    FROM source\n)\n\nSELECT * FROM renamed", "language": "sql", "refs": [], "sources": [["box_score", "box_score_batting_lines"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.baseball_computer.box_score.box_score_batting_lines"]}, "compiled_path": null, "contract": {"enforced": true, "alias_types": true, "checksum": "ffbe79ab80e8d8b22a836bcc9a5ef7a74482ad538ee3afe68f8a2e494becc32f"}, "access": "protected", "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true, "columns": ["game_id", "side", "batter_id"]}], "version": null, "latest_version": null, "deprecation_date": null}, "model.baseball_computer.stg_box_score_fielding_lines": {"database": "bc", "schema": "main_models", "name": "stg_box_score_fielding_lines", "resource_type": "model", "package_name": "baseball_computer", "path": "staging/box_score/stg_box_score_fielding_lines.sql", "original_file_path": "models/staging/box_score/stg_box_score_fielding_lines.sql", "unique_id": "model.baseball_computer.stg_box_score_fielding_lines", "fqn": ["baseball_computer", "staging", "box_score", "stg_box_score_fielding_lines"], "alias": "stg_box_score_fielding_lines", "checksum": {"name": "sha256", "checksum": "20af6355f225223b40638b6889bd1297b493144a24420de879b273804e0d8ee6"}, "config": {"enabled": true, "alias": null, "schema": "models", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Aggregate defensive data for each player in each game,\nderived from Retroshet box score data.\n", "columns": {"game_id": {"name": "game_id", "description": "Retrosheet game ID, A 12-character string structured as follows:\n\n    - Chars 1-3: Home team ID\n    - Chars 4-11: Date (YYYYMMDD)\n    - Char 12: Game number (0 if only one game was played on that day)\n    \n    Example: MLN195607170", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "fielder_id": {"name": "fielder_id", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "side": {"name": "side", "description": "The side, Home or Away, associated with the entity. A generic way\n    of identifying the two teams playing in a game.", "meta": {}, "data_type": "side", "constraints": [], "quote": null, "tags": []}, "fielding_position": {"name": "fielding_position", "description": "A 1-byte integer for the traditional 1-9 fielder identification, along with additional\n    values for unknown fielders and batting-specific positions. Depending on the\n    context, this value may be NULL for batting positions.\n    ```\n    0 - Unknown\n    1 - Pitcher\n    2 - Catcher\n    3 - First baseman\n    4 - Second baseman\n    5 - Third baseman\n    6 - Shortstop\n    7 - Left fielder\n    8 - Center fielder\n    9 - Right fielder\n    10 - Designated Hitter\n    11 - Pinch Hitter\n    12 - Pinch Runner\n    ```", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "nth_position_played_by_player": {"name": "nth_position_played_by_player", "description": "Number increments on position switch, even if to a previous position", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "outs_played": {"name": "outs_played", "description": "", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "putouts": {"name": "putouts", "description": "(PO) Outs credited to fielder based on who physically made the out, either by:\n        - Catching a ball on the fly\n        - Tagging a runner out\n        - Forcing a runner out\n        - Catching a called third strike\n        - Being the nearest fielder to a baserunner who is called out for interference\n\n    Putouts have been an important baseball statistic longer than MLB has been around,\n    so it has excellent historical coverage. Unassisted\n    putouts are very important in determining the location of batted balls.\n    \n    In modern baseball rules, each out in the game is credited as a putout, and at the play/event\n    level this will always be the case. However, in older games for which we only have box score or season-level\n    data, rare plays like baserunner interference may not be assigned to a specific fielder.\n    \n    Every play-by-play out has a putout, but the fielder who gets the putout may be unknown.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "assists": {"name": "assists", "description": "(A) Number of outs in which a fielder touched the ball before anothber fielder recorded a putout.\n    This is almost always a throw to another fielder, but it can also be a deflection.\n\n    Assists have excellent historical data coverage, and they are particularly useful in determining\n    the location of ground balls. The data is present in almost all season-level and game-level accounts.\n    However, individual plays with unknown-fielder putouts are likely to be missing assists entirely.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "errors": {"name": "errors", "description": "(E) Number of errors recorded by a fielder. This is recorded when a fielder either fails to make an out\n    that an average fielder should have made or makes a bad play that allows a baserunner to advance.\n    Errors are awarded at the scorekeeper's discretion, making them more subjective than the other two main\n    fielding stats.\n    \n    Errors used to be a much larger component of evaluating fielder quality.\n    When the stat was invented, routine plays were completed much less frequently than they are today.\n    As baseball evolved, routine plays became truly routine, and a fielder's ability to get to the ball\n    became more relevant than their ability\n    to reliably convert the out once they got there. While plenty of people as early as the 19th century were\n    aware of this, statistics mostly failed to reflect it until the 1980s, when Bill James and others\n    developed Range Factor and other stats that attempted to measure a fielder's ability to create chances.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "double_plays": {"name": "double_plays", "description": "(DP) Number of times a play ended in two outs being recorded.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "triple_plays": {"name": "triple_plays", "description": "(TP) Number of times a play ended in three outs being recorded.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "passed_balls": {"name": "passed_balls", "description": "(PB) Number of passed balls.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "baseball_computer://models/staging/box_score/stg_box_score_fielding_lines.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "models", "contract": {"enforced": true}}, "created_at": 1702281449.052057, "relation_name": "\"bc\".\"main_models\".\"stg_box_score_fielding_lines\"", "raw_code": "WITH source AS (\n    SELECT * FROM {{ source('box_score', 'box_score_fielding_lines') }}\n),\n\nrenamed AS (\n    SELECT\n        game_id,\n        fielder_id,\n        side,\n        fielding_position,\n        nth_position_played_by_player,\n        outs_played,\n        putouts,\n        assists,\n        errors,\n        double_plays,\n        triple_plays,\n        passed_balls\n\n    FROM source\n)\n\nSELECT * FROM renamed", "language": "sql", "refs": [], "sources": [["box_score", "box_score_fielding_lines"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.baseball_computer.box_score.box_score_fielding_lines"]}, "compiled_path": null, "contract": {"enforced": true, "alias_types": true, "checksum": "3019d0f22e80294e2fc0dfb03dbf7e59df15fb5aaed0e669566a0d7550c896c3"}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.baseball_computer.stg_box_score_home_runs": {"database": "bc", "schema": "main_models", "name": "stg_box_score_home_runs", "resource_type": "model", "package_name": "baseball_computer", "path": "staging/box_score/stg_box_score_home_runs.sql", "original_file_path": "models/staging/box_score/stg_box_score_home_runs.sql", "unique_id": "model.baseball_computer.stg_box_score_home_runs", "fqn": ["baseball_computer", "staging", "box_score", "stg_box_score_home_runs"], "alias": "stg_box_score_home_runs", "checksum": {"name": "sha256", "checksum": "52a55589fc7ad7cc30672c8fc54da41a1dffe1cd8ad78680d0fcf96142ce4489"}, "config": {"enabled": true, "alias": null, "schema": "models", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Individually noted home run events from box score accounts,\nwith varying degrees of detail.\n", "columns": {"game_id": {"name": "game_id", "description": "Retrosheet game ID, A 12-character string structured as follows:\n\n    - Chars 1-3: Home team ID\n    - Chars 4-11: Date (YYYYMMDD)\n    - Char 12: Game number (0 if only one game was played on that day)\n    \n    Example: MLN195607170", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "batting_side": {"name": "batting_side", "description": "The side that was batting when the entity took place.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "batter_id": {"name": "batter_id", "description": "Retrosheet 8-character person ID for the batter associated with the\n    entity.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "pitcher_id": {"name": "pitcher_id", "description": "Retrosheet 8-character person ID for the pitcher associated with the\n    entity.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "inning": {"name": "inning", "description": "The inning during which the entity took place.", "meta": {}, "data_type": "bigint", "constraints": [], "quote": null, "tags": []}, "runners_on": {"name": "runners_on", "description": "", "meta": {}, "data_type": "bigint", "constraints": [], "quote": null, "tags": []}, "outs": {"name": "outs", "description": "", "meta": {}, "data_type": "bigint", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "baseball_computer://models/staging/box_score/stg_box_score_home_runs.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "models"}, "created_at": 1702281449.050337, "relation_name": "\"bc\".\"main_models\".\"stg_box_score_home_runs\"", "raw_code": "WITH source AS (\n    SELECT * FROM {{ source('box_score', 'box_score_home_runs') }}\n),\n\nrenamed AS (\n    SELECT\n        game_id,\n        batting_side,\n        batter_id,\n        pitcher_id,\n        inning,\n        runners_on,\n        outs\n\n    FROM source\n)\n\nSELECT * FROM renamed", "language": "sql", "refs": [], "sources": [["box_score", "box_score_home_runs"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.baseball_computer.box_score.box_score_home_runs"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.baseball_computer.stg_box_score_pinch_running_lines": {"database": "bc", "schema": "main_models", "name": "stg_box_score_pinch_running_lines", "resource_type": "model", "package_name": "baseball_computer", "path": "staging/box_score/stg_box_score_pinch_running_lines.sql", "original_file_path": "models/staging/box_score/stg_box_score_pinch_running_lines.sql", "unique_id": "model.baseball_computer.stg_box_score_pinch_running_lines", "fqn": ["baseball_computer", "staging", "box_score", "stg_box_score_pinch_running_lines"], "alias": "stg_box_score_pinch_running_lines", "checksum": {"name": "sha256", "checksum": "c6af31ede9df88b1e0b7ed587fbb464130eb1e5b11962828af9d0352fa912b19"}, "config": {"enabled": true, "alias": null, "schema": "models", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Box score batting lines that are specific to stats accumulated\nwhile a player is pinch hitting.\n", "columns": {"game_id": {"name": "game_id", "description": "Retrosheet game ID, A 12-character string structured as follows:\n\n    - Chars 1-3: Home team ID\n    - Chars 4-11: Date (YYYYMMDD)\n    - Char 12: Game number (0 if only one game was played on that day)\n    \n    Example: MLN195607170", "meta": {}, "data_type": "varchar", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "pinch_runner_id": {"name": "pinch_runner_id", "description": "", "meta": {}, "data_type": "varchar", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "inning": {"name": "inning", "description": "The inning during which the entity took place.", "meta": {}, "data_type": "bigint", "constraints": [], "quote": null, "tags": []}, "side": {"name": "side", "description": "The side, Home or Away, associated with the entity. A generic way\n    of identifying the two teams playing in a game.", "meta": {}, "data_type": "varchar", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "runs": {"name": "runs", "description": "(R) Number of runs scored.", "meta": {}, "data_type": "bigint", "constraints": [], "quote": null, "tags": []}, "stolen_bases": {"name": "stolen_bases", "description": "(SB) Number of successful stolen bases.", "meta": {}, "data_type": "bigint", "constraints": [], "quote": null, "tags": []}, "caught_stealing": {"name": "caught_stealing", "description": "(CS) Number of times a runner was caught stealing.", "meta": {}, "data_type": "bigint", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "baseball_computer://models/staging/box_score/stg_box_score_pinch_running_lines.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "models", "contract": {"enforced": true}}, "created_at": 1702281449.053764, "relation_name": "\"bc\".\"main_models\".\"stg_box_score_pinch_running_lines\"", "raw_code": "WITH source AS (\n    SELECT * FROM {{ source('box_score', 'box_score_pinch_running_lines') }}\n),\n\nrenamed AS (\n    SELECT\n        game_id,\n        pinch_runner_id,\n        inning,\n        side,\n        runs,\n        stolen_bases,\n        caught_stealing\n\n    FROM source\n)\n\nSELECT * FROM renamed", "language": "sql", "refs": [], "sources": [["box_score", "box_score_pinch_running_lines"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.baseball_computer.box_score.box_score_pinch_running_lines"]}, "compiled_path": null, "contract": {"enforced": true, "alias_types": true, "checksum": "03d6ee449206e716fa9c7dc190787877e919a74f030ad9da908fce8f33cf6de8"}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.baseball_computer.stg_game_earned_runs": {"database": "bc", "schema": "main_models", "name": "stg_game_earned_runs", "resource_type": "model", "package_name": "baseball_computer", "path": "staging/game/stg_game_earned_runs.sql", "original_file_path": "models/staging/game/stg_game_earned_runs.sql", "unique_id": "model.baseball_computer.stg_game_earned_runs", "fqn": ["baseball_computer", "staging", "game", "stg_game_earned_runs"], "alias": "stg_game_earned_runs", "checksum": {"name": "sha256", "checksum": "7b44e07a27a93beb71d82357b1be05c55fb86345fb1b0b3237bbed2aeba9e103"}, "config": {"enabled": true, "alias": null, "schema": "models", "database": null, "tags": [], "meta": {"primary_keys": ["game_id", "player_id"]}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {"game_id": {"name": "game_id", "description": "Retrosheet game ID, A 12-character string structured as follows:\n\n    - Chars 1-3: Home team ID\n    - Chars 4-11: Date (YYYYMMDD)\n    - Char 12: Game number (0 if only one game was played on that day)\n    \n    Example: MLN195607170", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "player_id": {"name": "player_id", "description": "Retrosheet 8-character person ID for a player, which consists of\n    the first four characters of the last name, the first character\n    of the first name, and then three digits to disambiguate between\n    players with the same five characters.", "meta": {}, "data_type": "varchar", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "earned_runs": {"name": "earned_runs", "description": "(ER) Number of runs that are charged to a pitcher. This may include runs that scored after the pitcher\n    left the game (in the case of inherited runners), as well as runs that the scorekeeper deemed to be\n    the pitcher's responsibility in the absence of official inherited runner rules in the olden days.\n    Earned runs are only an official statistic at a game level: the earnedness of any given run is never\n    officially specified, only the total. It would be possible to make a very good guess algorithmically,\n    but that would be a huge pain for a stat that is not very useful in the first place.", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}}, "meta": {"primary_keys": ["game_id", "player_id"]}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "baseball_computer://models/staging/game/stg_game_earned_runs.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "models", "contract": {"enforced": true}, "meta": {"primary_keys": ["game_id", "player_id"]}}, "created_at": 1702281449.1922078, "relation_name": "\"bc\".\"main_models\".\"stg_game_earned_runs\"", "raw_code": "WITH source AS (\n    SELECT * FROM {{ source('game', 'game_earned_runs') }}\n),\n\nrenamed AS (\n    SELECT\n        game_id,\n        player_id,\n        earned_runs\n    FROM source\n)\n\nSELECT * FROM renamed", "language": "sql", "refs": [], "sources": [["game", "game_earned_runs"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.baseball_computer.game.game_earned_runs"]}, "compiled_path": null, "contract": {"enforced": true, "alias_types": true, "checksum": "b63046ddb09e403507c73837ac616423c1f89a8602c526dedd405c5e92c70792"}, "access": "protected", "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true, "columns": ["game_id", "player_id"]}], "version": null, "latest_version": null, "deprecation_date": null}, "model.baseball_computer.stg_game_lineup_appearances": {"database": "bc", "schema": "main_models", "name": "stg_game_lineup_appearances", "resource_type": "model", "package_name": "baseball_computer", "path": "staging/game/stg_game_lineup_appearances.sql", "original_file_path": "models/staging/game/stg_game_lineup_appearances.sql", "unique_id": "model.baseball_computer.stg_game_lineup_appearances", "fqn": ["baseball_computer", "staging", "game", "stg_game_lineup_appearances"], "alias": "stg_game_lineup_appearances", "checksum": {"name": "sha256", "checksum": "1259429550871c130dce94b69ddff13e6ac881dbdf8c6f6dc25ae35858c79250"}, "config": {"enabled": true, "alias": null, "schema": "models", "database": null, "tags": [], "meta": {"primary_keys": ["game_id", "player_id", "lineup_position", "start_event_id"]}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {"game_id": {"name": "game_id", "description": "Retrosheet game ID, A 12-character string structured as follows:\n\n    - Chars 1-3: Home team ID\n    - Chars 4-11: Date (YYYYMMDD)\n    - Char 12: Game number (0 if only one game was played on that day)\n    \n    Example: MLN195607170", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "player_id": {"name": "player_id", "description": "Retrosheet 8-character person ID for a player, which consists of\n    the first four characters of the last name, the first character\n    of the first name, and then three digits to disambiguate between\n    players with the same five characters.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "side": {"name": "side", "description": "The side, Home or Away, associated with the entity. A generic way\n    of identifying the two teams playing in a game.", "meta": {}, "data_type": "side", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "lineup_position": {"name": "lineup_position", "description": "1-byte integer for the traditional 1-9 batting order position, along with\n    10 for the pitcher in games with a DH. With very few exceptions, a player will\n    only appear in one lineup position per game. The exceptions are from courtesy\n    runners and the Ohtani rule.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "entered_game_as": {"name": "entered_game_as", "description": "", "meta": {}, "data_type": "varchar", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "start_event_id": {"name": "start_event_id", "description": "", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "end_event_id": {"name": "end_event_id", "description": "", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}}, "meta": {"primary_keys": ["game_id", "player_id", "lineup_position", "start_event_id"]}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "baseball_computer://models/staging/game/stg_game_lineup_appearances.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "models", "contract": {"enforced": true}, "meta": {"primary_keys": ["game_id", "player_id", "lineup_position", "start_event_id"]}}, "created_at": 1702281449.0659258, "relation_name": "\"bc\".\"main_models\".\"stg_game_lineup_appearances\"", "raw_code": "WITH source AS (\n    SELECT * FROM {{ source('game', 'game_lineup_appearances') }}\n),\n\nrenamed AS (\n    SELECT\n        game_id,\n        player_id,\n        side,\n        lineup_position,\n        entered_game_as,\n        start_event_id,\n        end_event_id,\n\n    FROM source\n)\n\nSELECT * FROM renamed", "language": "sql", "refs": [], "sources": [["game", "game_lineup_appearances"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.baseball_computer.game.game_lineup_appearances"]}, "compiled_path": null, "contract": {"enforced": true, "alias_types": true, "checksum": "585ea7e2761b9a9ac33bfa8e0c1cbec8eafb4976f4680f286c1fa61b07563270"}, "access": "protected", "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true, "columns": ["game_id", "player_id", "lineup_position", "start_event_id"]}], "version": null, "latest_version": null, "deprecation_date": null}, "model.baseball_computer.stg_games": {"database": "bc", "schema": "main_models", "name": "stg_games", "resource_type": "model", "package_name": "baseball_computer", "path": "staging/game/stg_games.sql", "original_file_path": "models/staging/game/stg_games.sql", "unique_id": "model.baseball_computer.stg_games", "fqn": ["baseball_computer", "staging", "game", "stg_games"], "alias": "stg_games", "checksum": {"name": "sha256", "checksum": "25f29d89f95f3d75f0286742ff9a95086c89513203976873de0d968af1b2b72e"}, "config": {"enabled": true, "alias": null, "schema": "models", "database": null, "tags": [], "meta": {"primary_keys": ["game_id"]}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {"game_id": {"name": "game_id", "description": "Retrosheet game ID, A 12-character string structured as follows:\n\n    - Chars 1-3: Home team ID\n    - Chars 4-11: Date (YYYYMMDD)\n    - Char 12: Game number (0 if only one game was played on that day)\n    \n    Example: MLN195607170", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "game_key": {"name": "game_key", "description": "", "meta": {}, "data_type": "uinteger", "constraints": [{"type": "unique", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "date": {"name": "date", "description": "Date on which the entity took place.", "meta": {}, "data_type": "date", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "start_time": {"name": "start_time", "description": "The specific date and time when the game started (local time).\n    Data here is generally pretty spotty until the 2000s.", "meta": {}, "data_type": "timestamp", "constraints": [], "quote": null, "tags": []}, "doubleheader_status": {"name": "doubleheader_status", "description": "", "meta": {}, "data_type": "doubleheader_status", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "time_of_day": {"name": "time_of_day", "description": "A day game/night game indicator for the entity. This value\n    is close to 100% populated for the pre-night-baseball era and from 1949 on,\n    and is still well-populated for the years in between. By far the most reliably\n    populated data point for game environmental conditions.", "meta": {}, "data_type": "time_of_day", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "game_type": {"name": "game_type", "description": "The context in which a game took place, such as the regular season,\n    a specific playoff round, or an all-star game.", "meta": {}, "data_type": "game_type", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "bat_first_side": {"name": "bat_first_side", "description": "The side that batted in the top of the inning during the game.\n    This is almost always the Away side, but there are a good number of\n    home-team-bats-first games in the 19th century and 2020.\n    See this SABR article for historical context: https://sabr.org/journal/article/the-death-and-rebirth-of-the-home-team-batting-first/", "meta": {}, "data_type": "side", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "sky": {"name": "sky", "description": "Enum describing the sky conditions.", "meta": {}, "data_type": "sky", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "field_condition": {"name": "field_condition", "description": "Enum describing the field conditions,\n    particularly with respect to wetness. This\n    can be different from precipitation if, for\n    example, there was rain before the game.", "meta": {}, "data_type": "field_condition", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "precipitation": {"name": "precipitation", "description": "Enum describing precipitation level.", "meta": {}, "data_type": "precipitation", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "wind_direction": {"name": "wind_direction", "description": "Enum describing wind direction in terms\n    of one part of the field to another.", "meta": {}, "data_type": "wind_direction", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "park_id": {"name": "park_id", "description": "Retrosheet park ID, 3-character string which identifies the ballpark\n    associated with this entity. See `stg_parks` for full park info.", "meta": {}, "data_type": "park_id", "constraints": [], "quote": null, "tags": []}, "temperature_fahrenheit": {"name": "temperature_fahrenheit", "description": "Temperature in degrees Fahrenheit.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "attendance": {"name": "attendance", "description": "The number of people in attendance at the game.\n    The source for this number is not consistent over time\n    and may refer to paid attendance or some other way\n    of estimating the number. Attendance data is is very well-populated\n    historically, but there is a zero-or-missing ambiguity in Retrosheet\n    data. At the moment, we NULL out 0 attendance for all years\n    other than 2020, which contains almost all of the true-zero-attendance\n    games in history.", "meta": {}, "data_type": "UINTEGER", "constraints": [], "quote": null, "tags": []}, "wind_speed_mph": {"name": "wind_speed_mph", "description": "Wind speed in miles per hour.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "use_dh": {"name": "use_dh", "description": "", "meta": {}, "data_type": "boolean", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "winning_pitcher_id": {"name": "winning_pitcher_id", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "losing_pitcher_id": {"name": "losing_pitcher_id", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "save_pitcher_id": {"name": "save_pitcher_id", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "game_winning_rbi_player_id": {"name": "game_winning_rbi_player_id", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "duration_minutes": {"name": "duration_minutes", "description": "", "meta": {}, "data_type": "bigint", "constraints": [], "quote": null, "tags": []}, "protest_info": {"name": "protest_info", "description": "", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "completion_info": {"name": "completion_info", "description": "", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "scorer": {"name": "scorer", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "scoring_method": {"name": "scoring_method", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "inputter": {"name": "inputter", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "translator": {"name": "translator", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "date_inputted": {"name": "date_inputted", "description": "", "meta": {}, "data_type": "timestamp", "constraints": [], "quote": null, "tags": []}, "date_edited": {"name": "date_edited", "description": "", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "account_type": {"name": "account_type", "description": "", "meta": {}, "data_type": "account_type", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "filename": {"name": "filename", "description": "Name of the Retrosheet file that this data is derived from.\n    Helpful for debugging.", "meta": {}, "data_type": "varchar", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "source_type": {"name": "source_type", "description": "Broad categorization of the source of the data.\n    - PlayByPlay: Retrosheet play-by-play files (either from an account or deduced)\n    - BoxScore: Retrosheet box score files\n    - GameLog: Retrosheet game log files", "meta": {}, "data_type": "varchar", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "away_team_id": {"name": "away_team_id", "description": "Retrosheet team ID, 3-character string which identifies the team\n    that a franchise was playing as at a given time.", "meta": {}, "data_type": "team_id", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "home_team_id": {"name": "home_team_id", "description": "Retrosheet team ID, 3-character string which identifies the team\n    that a franchise was playing as at a given time.", "meta": {}, "data_type": "team_id", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "umpire_home_id": {"name": "umpire_home_id", "description": "Retrosheet person ID of the umpire at home plate.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "umpire_first_id": {"name": "umpire_first_id", "description": "Retrosheet person ID of the umpire at first base.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "umpire_second_id": {"name": "umpire_second_id", "description": "Retrosheet person ID of the umpire at second base.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "umpire_third_id": {"name": "umpire_third_id", "description": "Retrosheet person ID of the umpire at third base.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "umpire_left_id": {"name": "umpire_left_id", "description": "Retrosheet person ID of the umpire in left field.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "umpire_right_id": {"name": "umpire_right_id", "description": "Retrosheet person ID of the umpire in right field.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "season": {"name": "season", "description": "Year, 4-digit integer", "meta": {}, "data_type": "smallint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}}, "meta": {"primary_keys": ["game_id"]}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "baseball_computer://models/staging/game/stg_games.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "models", "contract": {"enforced": true}, "meta": {"primary_keys": ["game_id"]}}, "created_at": 1702281449.200325, "relation_name": "\"bc\".\"main_models\".\"stg_games\"", "raw_code": "WITH from_box_scores AS (\n    SELECT *\n    FROM {{ source('box_score', 'box_score_games') }}\n    WHERE game_id NOT IN (SELECT game_id FROM {{ source('game', 'games') }})\n),\n\nunioned AS (\n    SELECT\n        *,\n        'PlayByPlay' AS source_type\n    FROM {{ source('game', 'games') }}\n    UNION ALL\n    SELECT\n        *,\n        'BoxScore' AS source_type\n    FROM from_box_scores\n),\n\nrenamed AS (\n    SELECT\n        game_id,\n        game_key,\n        date,\n        start_time,\n        doubleheader_status,\n        time_of_day,\n        -- TODO: Fix all-star games without game type in raw data\n        CASE WHEN REGEXP_FULL_MATCH(filename, '\\d{4}AS.EVE')\n                THEN 'AllStarGame'::GAME_TYPE\n            ELSE game_type\n        END AS game_type,\n        bat_first_side,\n        sky,\n        field_condition,\n        precipitation,\n        wind_direction,\n        park_id,\n        temperature_fahrenheit,\n        CASE\n            WHEN attendance = 0 AND EXTRACT(YEAR FROM date) != 2020\n                THEN NULL\n            ELSE attendance\n        END::UINTEGER AS attendance,\n        wind_speed_mph,\n        use_dh,\n        -- TODO: Change in source\n        winning_pitcher AS winning_pitcher_id,\n        losing_pitcher AS losing_pitcher_id,\n        save_pitcher AS save_pitcher_id,\n        game_winning_rbi AS game_winning_rbi_player_id,\n        time_of_game_minutes AS duration_minutes,\n        protest_info,\n        completion_info,\n        scorer,\n        scoring_method,\n        inputter,\n        translator,\n        date_inputted,\n        date_edited,\n        account_type,\n        filename,\n        source_type,\n        away_team_id,\n        home_team_id,\n        umpire_home_id,\n        umpire_first_id,\n        umpire_second_id,\n        umpire_third_id,\n        umpire_left_id,\n        umpire_right_id,\n        EXTRACT(YEAR FROM date)::INT2 AS season,\n    FROM unioned\n)\n\nSELECT * FROM renamed", "language": "sql", "refs": [], "sources": [["box_score", "box_score_games"], ["game", "games"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.baseball_computer.box_score.box_score_games", "source.baseball_computer.game.games"]}, "compiled_path": null, "contract": {"enforced": true, "alias_types": true, "checksum": "801997ded9f7dd6a2a05a48b6be423b504cec915f1a6d5ea322608f768400844"}, "access": "protected", "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true, "columns": ["game_id"]}], "version": null, "latest_version": null, "deprecation_date": null}, "model.baseball_computer.stg_game_fielding_appearances": {"database": "bc", "schema": "main_models", "name": "stg_game_fielding_appearances", "resource_type": "model", "package_name": "baseball_computer", "path": "staging/game/stg_game_fielding_appearances.sql", "original_file_path": "models/staging/game/stg_game_fielding_appearances.sql", "unique_id": "model.baseball_computer.stg_game_fielding_appearances", "fqn": ["baseball_computer", "staging", "game", "stg_game_fielding_appearances"], "alias": "stg_game_fielding_appearances", "checksum": {"name": "sha256", "checksum": "92d4d734b3b122b2b543883d18a9ecff38374df716386fa15201305905d55c74"}, "config": {"enabled": true, "alias": null, "schema": "models", "database": null, "tags": [], "meta": {"primary_keys": ["game_id", "player_id", "fielding_position", "start_event_id"]}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {"game_id": {"name": "game_id", "description": "Retrosheet game ID, A 12-character string structured as follows:\n\n    - Chars 1-3: Home team ID\n    - Chars 4-11: Date (YYYYMMDD)\n    - Char 12: Game number (0 if only one game was played on that day)\n    \n    Example: MLN195607170", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "player_id": {"name": "player_id", "description": "Retrosheet 8-character person ID for a player, which consists of\n    the first four characters of the last name, the first character\n    of the first name, and then three digits to disambiguate between\n    players with the same five characters.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "side": {"name": "side", "description": "The side, Home or Away, associated with the entity. A generic way\n    of identifying the two teams playing in a game.", "meta": {}, "data_type": "side", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "fielding_position": {"name": "fielding_position", "description": "A 1-byte integer for the traditional 1-9 fielder identification, along with additional\n    values for unknown fielders and batting-specific positions. Depending on the\n    context, this value may be NULL for batting positions.\n    ```\n    0 - Unknown\n    1 - Pitcher\n    2 - Catcher\n    3 - First baseman\n    4 - Second baseman\n    5 - Third baseman\n    6 - Shortstop\n    7 - Left fielder\n    8 - Center fielder\n    9 - Right fielder\n    10 - Designated Hitter\n    11 - Pinch Hitter\n    12 - Pinch Runner\n    ```", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "start_event_id": {"name": "start_event_id", "description": "", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "end_event_id": {"name": "end_event_id", "description": "", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}}, "meta": {"primary_keys": ["game_id", "player_id", "fielding_position", "start_event_id"]}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "baseball_computer://models/staging/game/stg_game_fielding_appearances.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "models", "contract": {"enforced": true}, "meta": {"primary_keys": ["game_id", "player_id", "fielding_position", "start_event_id"]}}, "created_at": 1702281449.207041, "relation_name": "\"bc\".\"main_models\".\"stg_game_fielding_appearances\"", "raw_code": "WITH source AS (\n    SELECT * FROM {{ source('game', 'game_fielding_appearances') }}\n),\n\nrenamed AS (\n    SELECT\n        game_id,\n        player_id,\n        side,\n        fielding_position,\n        start_event_id,\n        end_event_id,\n    FROM source\n)\n\nSELECT * FROM renamed", "language": "sql", "refs": [], "sources": [["game", "game_fielding_appearances"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.baseball_computer.game.game_fielding_appearances"]}, "compiled_path": null, "contract": {"enforced": true, "alias_types": true, "checksum": "8643a269138c0188b4dbca20781f37b3fcf8b5e5d4e9ec669e59610db7af42be"}, "access": "protected", "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true, "columns": ["game_id", "player_id", "fielding_position", "start_event_id"]}], "version": null, "latest_version": null, "deprecation_date": null}, "model.baseball_computer.stg_event_audit": {"database": "bc", "schema": "main_models", "name": "stg_event_audit", "resource_type": "model", "package_name": "baseball_computer", "path": "staging/event/stg_event_audit.sql", "original_file_path": "models/staging/event/stg_event_audit.sql", "unique_id": "model.baseball_computer.stg_event_audit", "fqn": ["baseball_computer", "staging", "event", "stg_event_audit"], "alias": "stg_event_audit", "checksum": {"name": "sha256", "checksum": "ea2fa9e2a22d0bc75fab40bc54b80cad9ca1ad7ecc09e99c6611fe16377a02da"}, "config": {"enabled": true, "alias": null, "schema": "models", "database": null, "tags": [], "meta": {"primary_keys": ["event_key"]}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Connects each event to the raw Retrosheet data to enable QA/debugging.\nSee the Retosheet event file spec for more info:\nhttps://www.retrosheet.org/eventfile.htm\n", "columns": {"game_id": {"name": "game_id", "description": "Retrosheet game ID, A 12-character string structured as follows:\n\n    - Chars 1-3: Home team ID\n    - Chars 4-11: Date (YYYYMMDD)\n    - Char 12: Game number (0 if only one game was played on that day)\n    \n    Example: MLN195607170", "meta": {}, "data_type": "varchar", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "event_id": {"name": "event_id", "description": "1-byte integer that uniquely identifies, in order, an event within a single game.\n    This value will remain the same across multiple versions as long as events\n    are not added or removed from that specific game, and should align exactly\n    with the event_id produced by Retrosheet's BEVENT software.", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "filename": {"name": "filename", "description": "Name of the Retrosheet file that this data is derived from.\n    Helpful for debugging.", "meta": {}, "data_type": "varchar", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "line_number": {"name": "line_number", "description": "Line number of the file on which the event was found", "meta": {}, "data_type": "uinteger", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "event_key": {"name": "event_key", "description": "4-byte integer that uniquely identifies an event across the entire\n    dataset (contrast with event_id, which is game-specific). The key\n    is generated deterministically given the same dataset, but it may\n    change when the data is updated. It is guaranteed to follow the \n    order of events within a single game.", "meta": {}, "data_type": "uinteger", "constraints": [], "quote": null, "tags": []}, "raw_play": {"name": "raw_play", "description": "The string representation of the play", "meta": {}, "data_type": "varchar", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}}, "meta": {"primary_keys": ["event_key"]}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "baseball_computer://models/staging/event/stg_event_audit.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "models", "contract": {"enforced": true}, "meta": {"primary_keys": ["event_key"]}}, "created_at": 1702281449.2407591, "relation_name": "\"bc\".\"main_models\".\"stg_event_audit\"", "raw_code": "WITH source AS (\n    SELECT * FROM {{ source('event', 'event_audit') }}\n),\n\nrenamed AS (\n    SELECT\n        game_id,\n        event_id,\n        filename,\n        line_number,\n        event_key,\n        raw_play\n    FROM source\n)\n\nSELECT * FROM renamed", "language": "sql", "refs": [], "sources": [["event", "event_audit"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.baseball_computer.event.event_audit"]}, "compiled_path": null, "contract": {"enforced": true, "alias_types": true, "checksum": "6811b113f80a8276bd3263a7b54185fcf368f1234cfa0b72797abb89f43abc07"}, "access": "protected", "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true, "columns": ["event_key"]}], "version": null, "latest_version": null, "deprecation_date": null}, "model.baseball_computer.stg_event_pitch_sequences": {"database": "bc", "schema": "main_models", "name": "stg_event_pitch_sequences", "resource_type": "model", "package_name": "baseball_computer", "path": "staging/event/stg_event_pitch_sequences.sql", "original_file_path": "models/staging/event/stg_event_pitch_sequences.sql", "unique_id": "model.baseball_computer.stg_event_pitch_sequences", "fqn": ["baseball_computer", "staging", "event", "stg_event_pitch_sequences"], "alias": "stg_event_pitch_sequences", "checksum": {"name": "sha256", "checksum": "14cd46703738160d0e0fa12a3a41eeb7cc0306231f7c32257743e407e78262aa"}, "config": {"enabled": true, "alias": null, "schema": "models", "database": null, "tags": [], "meta": {"primary_keys": ["event_key", "sequence_id"]}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Pitch-by-pitch sequence for events where we have\npitch-level information. A pitch sequence includes ball/strike\ninfo, as well as items that are not themselves pitches, such as\npickoff attempts and balls blocked in the dirt. Pitch data is\nvery well populated from the 90s on, but is spotty before that.\nPresence of pitch data for one event does not guarantee that\nit will be present for other events in the same game.\nNon-pitch items have sporadic coverage, so their absence is\nnot necessarily an indicator of real-world absence.\n", "columns": {"game_id": {"name": "game_id", "description": "Retrosheet game ID, A 12-character string structured as follows:\n\n    - Chars 1-3: Home team ID\n    - Chars 4-11: Date (YYYYMMDD)\n    - Char 12: Game number (0 if only one game was played on that day)\n    \n    Example: MLN195607170", "meta": {}, "data_type": "varchar", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "event_id": {"name": "event_id", "description": "1-byte integer that uniquely identifies, in order, an event within a single game.\n    This value will remain the same across multiple versions as long as events\n    are not added or removed from that specific game, and should align exactly\n    with the event_id produced by Retrosheet's BEVENT software.", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "event_key": {"name": "event_key", "description": "4-byte integer that uniquely identifies an event across the entire\n    dataset (contrast with event_id, which is game-specific). The key\n    is generated deterministically given the same dataset, but it may\n    change when the data is updated. It is guaranteed to follow the \n    order of events within a single game.", "meta": {}, "data_type": "uinteger", "constraints": [], "quote": null, "tags": []}, "sequence_id": {"name": "sequence_id", "description": "The nth item of a given sequence, used to differentiate and order\n    multiple items of the same type within a single entity.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "sequence_item": {"name": "sequence_item", "description": "See `seed_pitch_types` for metadata on each item", "meta": {}, "data_type": "pitch_sequence_item", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "runners_going_flag": {"name": "runners_going_flag", "description": "True if any runners are attempting to advance during the pitch", "meta": {}, "data_type": "boolean", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "blocked_by_catcher_flag": {"name": "blocked_by_catcher_flag", "description": "True if the pitch was blocked by the catcher.", "meta": {}, "data_type": "boolean", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "catcher_pickoff_attempt_at_base": {"name": "catcher_pickoff_attempt_at_base", "description": "The base at which the catcher attempted a pickoff after the pitch, if applicable", "meta": {}, "data_type": "base", "constraints": [], "quote": null, "tags": []}, "date": {"name": "date", "description": "Date on which the entity took place.", "meta": {}, "data_type": "date", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "season": {"name": "season", "description": "Year, 4-digit integer", "meta": {}, "data_type": "smallint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}}, "meta": {"primary_keys": ["event_key", "sequence_id"]}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "baseball_computer://models/staging/event/stg_event_pitch_sequences.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "models", "contract": {"enforced": true}, "meta": {"primary_keys": ["event_key", "sequence_id"]}}, "created_at": 1702281449.2306938, "relation_name": "\"bc\".\"main_models\".\"stg_event_pitch_sequences\"", "raw_code": "WITH source AS (\n    SELECT * FROM {{ source('event', 'event_pitch_sequences') }}\n),\n\nrenamed AS (\n    SELECT\n        game_id,\n        event_id,\n        event_key,\n        sequence_id,\n        sequence_item,\n        runners_going_flag,\n        blocked_by_catcher_flag,\n        catcher_pickoff_attempt_at_base,\n        STRPTIME(SUBSTRING(game_id, 4, 8), '%Y%m%d')::DATE AS date,\n        SUBSTRING(game_id, 4, 4)::INT2 AS season,\n\n    FROM source\n)\n\nSELECT * FROM renamed", "language": "sql", "refs": [], "sources": [["event", "event_pitch_sequences"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.baseball_computer.event.event_pitch_sequences"]}, "compiled_path": null, "contract": {"enforced": true, "alias_types": true, "checksum": "711dcb36883b902abb18c0135f5ee7b4ec23b1d9d644e4fdefe1cbb537504bf8"}, "access": "protected", "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true, "columns": ["event_key", "sequence_id"]}], "version": null, "latest_version": null, "deprecation_date": null}, "model.baseball_computer.stg_event_fielding_plays": {"database": "bc", "schema": "main_models", "name": "stg_event_fielding_plays", "resource_type": "model", "package_name": "baseball_computer", "path": "staging/event/stg_event_fielding_plays.sql", "original_file_path": "models/staging/event/stg_event_fielding_plays.sql", "unique_id": "model.baseball_computer.stg_event_fielding_plays", "fqn": ["baseball_computer", "staging", "event", "stg_event_fielding_plays"], "alias": "stg_event_fielding_plays", "checksum": {"name": "sha256", "checksum": "157b44cd9f2c50ddc5fbfdd892dad1ab77d0f5a31cb9cd5a0d4c29d816812ec9"}, "config": {"enabled": true, "alias": null, "schema": "models", "database": null, "tags": [], "meta": {"primary_keys": ["event_key", "sequence_id"]}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Each fielding play that occurs during an event,\nin the order in which it occured.\n\nUnless you have a specific interest in the order in which the plays occurred on an event,\nit is recommended that you use `calc_fielding_play_agg` table instead, as there are some quirks\nin the way that some metrics are calculated that require knowledge of other parts of the event (most \nnotably that a player can be credited with at most one assist on any given putout).\n", "columns": {"game_id": {"name": "game_id", "description": "Retrosheet game ID, A 12-character string structured as follows:\n\n    - Chars 1-3: Home team ID\n    - Chars 4-11: Date (YYYYMMDD)\n    - Char 12: Game number (0 if only one game was played on that day)\n    \n    Example: MLN195607170", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "event_id": {"name": "event_id", "description": "1-byte integer that uniquely identifies, in order, an event within a single game.\n    This value will remain the same across multiple versions as long as events\n    are not added or removed from that specific game, and should align exactly\n    with the event_id produced by Retrosheet's BEVENT software.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "event_key": {"name": "event_key", "description": "4-byte integer that uniquely identifies an event across the entire\n    dataset (contrast with event_id, which is game-specific). The key\n    is generated deterministically given the same dataset, but it may\n    change when the data is updated. It is guaranteed to follow the \n    order of events within a single game.", "meta": {}, "data_type": "uinteger", "constraints": [], "quote": null, "tags": []}, "sequence_id": {"name": "sequence_id", "description": "The nth item of a given sequence, used to differentiate and order\n    multiple items of the same type within a single entity.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "fielding_position": {"name": "fielding_position", "description": "A 1-byte integer for the traditional 1-9 fielder identification, along with additional\n    values for unknown fielders and batting-specific positions. Depending on the\n    context, this value may be NULL for batting positions.\n    ```\n    0 - Unknown\n    1 - Pitcher\n    2 - Catcher\n    3 - First baseman\n    4 - Second baseman\n    5 - Third baseman\n    6 - Shortstop\n    7 - Left fielder\n    8 - Center fielder\n    9 - Right fielder\n    10 - Designated Hitter\n    11 - Pinch Hitter\n    12 - Pinch Runner\n    ```", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "fielding_play": {"name": "fielding_play", "description": "Enum representation of the type of fielding play", "meta": {}, "data_type": "varchar", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}}, "meta": {"primary_keys": ["event_key", "sequence_id"]}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "baseball_computer://models/staging/event/stg_event_fielding_plays.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "models", "contract": {"enforced": true}, "meta": {"primary_keys": ["event_key", "sequence_id"]}}, "created_at": 1702281449.253945, "relation_name": "\"bc\".\"main_models\".\"stg_event_fielding_plays\"", "raw_code": "WITH source AS (\n    SELECT * FROM {{ source('event', 'event_fielding_play') }}\n),\n\nrenamed AS (\n    SELECT\n        game_id,\n        event_id,\n        event_key,\n        sequence_id,\n        fielding_position,\n        fielding_play,\n\n    FROM source\n)\n\nSELECT * FROM renamed", "language": "sql", "refs": [], "sources": [["event", "event_fielding_play"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.baseball_computer.event.event_fielding_play"]}, "compiled_path": null, "contract": {"enforced": true, "alias_types": true, "checksum": "b0bbd6bf596ed0e8e7b66924059a078c6bff0f1a94001a117c3160be63604aaf"}, "access": "protected", "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true, "columns": ["event_key", "sequence_id"]}], "version": null, "latest_version": null, "deprecation_date": null}, "model.baseball_computer.stg_event_baserunners": {"database": "bc", "schema": "main_models", "name": "stg_event_baserunners", "resource_type": "model", "package_name": "baseball_computer", "path": "staging/event/stg_event_baserunners.sql", "original_file_path": "models/staging/event/stg_event_baserunners.sql", "unique_id": "model.baseball_computer.stg_event_baserunners", "fqn": ["baseball_computer", "staging", "event", "stg_event_baserunners"], "alias": "stg_event_baserunners", "checksum": {"name": "sha256", "checksum": "ca56be424f8dc6060ce5dcbb8babe5be9c733088da1f8fda0c511cc3f720fde0"}, "config": {"enabled": true, "alias": null, "schema": "models", "database": null, "tags": [], "meta": {"primary_keys": ["event_key", "baserunner"]}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Event-level info for each baserunner present at an event.\nThis includes all baserunners present at the start of the event,\nas well as the batter if they end up active on the bases during the play.\n", "columns": {"game_id": {"name": "game_id", "description": "Retrosheet game ID, A 12-character string structured as follows:\n\n    - Chars 1-3: Home team ID\n    - Chars 4-11: Date (YYYYMMDD)\n    - Char 12: Game number (0 if only one game was played on that day)\n    \n    Example: MLN195607170", "meta": {}, "data_type": "varchar", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "event_id": {"name": "event_id", "description": "1-byte integer that uniquely identifies, in order, an event within a single game.\n    This value will remain the same across multiple versions as long as events\n    are not added or removed from that specific game, and should align exactly\n    with the event_id produced by Retrosheet's BEVENT software.", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "event_key": {"name": "event_key", "description": "4-byte integer that uniquely identifies an event across the entire\n    dataset (contrast with event_id, which is game-specific). The key\n    is generated deterministically given the same dataset, but it may\n    change when the data is updated. It is guaranteed to follow the \n    order of events within a single game.", "meta": {}, "data_type": "uinteger", "constraints": [], "quote": null, "tags": []}, "baserunner": {"name": "baserunner", "description": "Enum indicating the specific baserunner associated with the entity.\n    Baserunner is designated by the state at the start of an event.", "meta": {}, "data_type": "baserunner", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "runner_lineup_position": {"name": "runner_lineup_position", "description": "1-byte integer for the traditional 1-9 batting order position, along with\n    10 for the pitcher in games with a DH. With very few exceptions, a player will\n    only appear in one lineup position per game. The exceptions are from courtesy\n    runners and the Ohtani rule.", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "runner_id": {"name": "runner_id", "description": "Retrosheet 8-character person ID for a player, which consists of\n    the first four characters of the last name, the first character\n    of the first name, and then three digits to disambiguate between\n    players with the same five characters.", "meta": {}, "data_type": "varchar", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "charge_event_id": {"name": "charge_event_id", "description": "The event ID that this baserunner is charged to,\n    for the purpose of keeping tracked of inherited/bequeathed runners.\n    The pitcher/catcher present at the charge_event_id are on the hook\n    for the earned run. This doesn't necessarily remain constant\n    throughout a baserunning apperance, as force-outs can change\n    the inheritance of a particular runner.", "meta": {}, "data_type": "uinteger", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "reached_on_event_id": {"name": "reached_on_event_id", "description": "Event id on which this baserunner originally reached base,\n    if applicable.", "meta": {}, "data_type": "uinteger", "constraints": [], "quote": null, "tags": []}, "explicit_charged_pitcher_id": {"name": "explicit_charged_pitcher_id", "description": "For some games prior to the establishment of official inherited runner rules,\n    a pitcher could be explicitly noted as the one charged with a runner. When\n    this is present, it overrides the pitcher from `charge_event_id`.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "attempted_advance_to_base": {"name": "attempted_advance_to_base", "description": "Populated for events where the runner attempts to advance to a base.\nIn specific cases, this can be identical the initial base, such as when\na runner is picked off or otherwise put out after trying to get back to the bag.\n", "meta": {}, "data_type": "base", "constraints": [], "quote": null, "tags": []}, "baserunning_play_type": {"name": "baserunning_play_type", "description": "Populated for events that specifically have a baserunning play,\nas opposed to an advance on a batting play. Some plays apply to\nall runners present, while others apply to a specific runner.\nSee `seed_baserunning_play_types` for more info.\n", "meta": {}, "data_type": "baserunning_play", "constraints": [], "quote": null, "tags": []}, "is_out": {"name": "is_out", "description": "Whether or not the runner is out at the end of the play", "meta": {}, "data_type": "boolean", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "base_end": {"name": "base_end", "description": "The runner's base at the end of the play, if applicable", "meta": {}, "data_type": "base", "constraints": [], "quote": null, "tags": []}, "advanced_on_error_flag": {"name": "advanced_on_error_flag", "description": "True if the runner advanced on an error specifically associated\nwith a play on this runner, as opposed to a play on the batter.\n", "meta": {}, "data_type": "boolean", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "explicit_out_flag": {"name": "explicit_out_flag", "description": "True if the raw data specifically described the runner as out\non an advance.\n", "meta": {}, "data_type": "boolean", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "run_scored_flag": {"name": "run_scored_flag", "description": "True if the runner scored on the play", "meta": {}, "data_type": "boolean", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "rbi_flag": {"name": "rbi_flag", "description": "True if the runner scored and the batter was credited with the RBI", "meta": {}, "data_type": "boolean", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "reached_on_event_key": {"name": "reached_on_event_key", "description": "`event_key` corresponding to `reached_on_event_id`, see that field\n    for more detail.", "meta": {}, "data_type": "uinteger", "constraints": [], "quote": null, "tags": []}, "charge_event_key": {"name": "charge_event_key", "description": "`event_key` corresponding to `charge_event_id`, see that field\n    for more detail.", "meta": {}, "data_type": "uinteger", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "baserunner_bit": {"name": "baserunner_bit", "description": "The bitwise representation of the runner's position:\n- 1st: 1 (001)\n- 2nd: 2 (010)\n- 3rd: 4 (100)\n\nThis is a useful way to represent the runner's position\nbecause you can do a bitwise OR to get the full base state\nfor the event.\n", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "is_advance_attempt": {"name": "is_advance_attempt", "description": "True if the runner attempted to advance on the play.\nIncludes plays where the runner is subject to a force play.\n", "meta": {}, "data_type": "boolean", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}}, "meta": {"primary_keys": ["event_key", "baserunner"]}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "baseball_computer://models/staging/event/stg_event_baserunners.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "models", "contract": {"enforced": true}, "meta": {"primary_keys": ["event_key", "baserunner"]}}, "created_at": 1702281449.265022, "relation_name": "\"bc\".\"main_models\".\"stg_event_baserunners\"", "raw_code": "WITH source AS (\n    SELECT * FROM {{ source('event', 'event_baserunners') }}\n),\n\nrenamed AS (\n    SELECT\n        game_id,\n        event_id,\n        event_key,\n        baserunner,\n        runner_lineup_position,\n        runner_id,\n        charge_event_id,\n        reached_on_event_id,\n        explicit_charged_pitcher_id,\n        attempted_advance_to_base,\n        baserunning_play_type,\n        is_out,\n        base_end,\n        advanced_on_error_flag,\n        explicit_out_flag,\n        run_scored_flag,\n        rbi_flag,\n        {{ event_id_to_key(\"reached_on_event_id\", \"event_key\") }} AS reached_on_event_key,\n        {{ event_id_to_key(\"charge_event_id\", \"event_key\") }} AS charge_event_key,\n        -- Bitwise agg of this gives us the full base_state\n        CASE baserunner\n            WHEN 'First' THEN 1\n            WHEN 'Second' THEN 2\n            WHEN 'Third' THEN 4\n        END AS baserunner_bit,\n        attempted_advance_to_base IS NOT NULL AS is_advance_attempt,\n\n    FROM source\n)\n\nSELECT * FROM renamed", "language": "sql", "refs": [], "sources": [["event", "event_baserunners"]], "metrics": [], "depends_on": {"macros": ["macro.baseball_computer.event_id_to_key"], "nodes": ["source.baseball_computer.event.event_baserunners"]}, "compiled_path": null, "contract": {"enforced": true, "alias_types": true, "checksum": "c8dd3396290fb20a2b12a300e2143d413b00fdaffda84d9565de38b0de59dc64"}, "access": "protected", "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true, "columns": ["event_key", "baserunner"]}], "version": null, "latest_version": null, "deprecation_date": null}, "model.baseball_computer.stg_event_comments": {"database": "bc", "schema": "main_models", "name": "stg_event_comments", "resource_type": "model", "package_name": "baseball_computer", "path": "staging/event/stg_event_comments.sql", "original_file_path": "models/staging/event/stg_event_comments.sql", "unique_id": "model.baseball_computer.stg_event_comments", "fqn": ["baseball_computer", "staging", "event", "stg_event_comments"], "alias": "stg_event_comments", "checksum": {"name": "sha256", "checksum": "b4fa3a8cded0e5d1bdc7f3beb355f33c9c5410c019cdd6c132f74e88ef724818"}, "config": {"enabled": true, "alias": null, "schema": "models", "database": null, "tags": [], "meta": {"primary_keys": ["event_key", "comment"]}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Comment lines from event files, along with their associated event\n", "columns": {"event_key": {"name": "event_key", "description": "4-byte integer that uniquely identifies an event across the entire\n    dataset (contrast with event_id, which is game-specific). The key\n    is generated deterministically given the same dataset, but it may\n    change when the data is updated. It is guaranteed to follow the \n    order of events within a single game.", "meta": {}, "data_type": "uinteger", "constraints": [], "quote": null, "tags": []}, "comment": {"name": "comment", "description": "Comment string from a Retrosheet file. Sometimes these are misc.\n    details and trivia from the game, but they are also used as adhoc\n    data structures for things like ejections.", "meta": {}, "data_type": "varchar", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}}, "meta": {"primary_keys": ["event_key", "comment"]}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "baseball_computer://models/staging/event/stg_event_comments.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "models", "contract": {"enforced": true}, "meta": {"primary_keys": ["event_key", "comment"]}}, "created_at": 1702281449.275578, "relation_name": "\"bc\".\"main_models\".\"stg_event_comments\"", "raw_code": "WITH source AS (\n    SELECT * FROM {{ source('event', 'event_comments') }}\n),\n\nrenamed AS (\n    SELECT DISTINCT\n        event_key,\n        comment\n    FROM source\n    WHERE comment IS NOT NULL\n)\n\nSELECT * FROM renamed", "language": "sql", "refs": [], "sources": [["event", "event_comments"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.baseball_computer.event.event_comments"]}, "compiled_path": null, "contract": {"enforced": true, "alias_types": true, "checksum": "c3e7aa9a4fbdc50952f1b3204d7f47da1e6aa187bc10faf5eb3a356eaf3f1e3c"}, "access": "protected", "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true, "columns": ["event_key", "comment"]}], "version": null, "latest_version": null, "deprecation_date": null}, "model.baseball_computer.stg_event_flags": {"database": "bc", "schema": "main_models", "name": "stg_event_flags", "resource_type": "model", "package_name": "baseball_computer", "path": "staging/event/stg_event_flags.sql", "original_file_path": "models/staging/event/stg_event_flags.sql", "unique_id": "model.baseball_computer.stg_event_flags", "fqn": ["baseball_computer", "staging", "event", "stg_event_flags"], "alias": "stg_event_flags", "checksum": {"name": "sha256", "checksum": "bce247ecda01f9343a4623b1a5561ba3ce16e8c4efb4731d293a2588d0f4cf66"}, "config": {"enabled": true, "alias": null, "schema": "models", "database": null, "tags": [], "meta": {"primary_keys": ["event_key", "sequence_id"]}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Representation of flags that can appear on each event\nin a Retrosheet file. They are helpful for identifying\nplays like sacrifices, double plays, and other miscellany.\nSee the Retrosheet event file spec for more info:\nhttps://www.retrosheet.org/eventfile.htm\n", "columns": {"event_key": {"name": "event_key", "description": "4-byte integer that uniquely identifies an event across the entire\n    dataset (contrast with event_id, which is game-specific). The key\n    is generated deterministically given the same dataset, but it may\n    change when the data is updated. It is guaranteed to follow the \n    order of events within a single game.", "meta": {}, "data_type": "uinteger", "constraints": [], "quote": null, "tags": []}, "sequence_id": {"name": "sequence_id", "description": "The nth item of a given sequence, used to differentiate and order\n    multiple items of the same type within a single entity.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "flag": {"name": "flag", "description": "Prettified version of the flag as it appeared in the raw play", "meta": {}, "data_type": "varchar", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}}, "meta": {"primary_keys": ["event_key", "sequence_id"]}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "baseball_computer://models/staging/event/stg_event_flags.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "models", "contract": {"enforced": true}, "meta": {"primary_keys": ["event_key", "sequence_id"]}}, "created_at": 1702281449.2736971, "relation_name": "\"bc\".\"main_models\".\"stg_event_flags\"", "raw_code": "WITH source AS (\n    SELECT * FROM {{ source('event', 'event_flags') }}\n),\n\nrenamed AS (\n    SELECT\n        event_key,\n        sequence_id,\n        flag,\n\n    FROM source\n)\n\nSELECT * FROM renamed", "language": "sql", "refs": [], "sources": [["event", "event_flags"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.baseball_computer.event.event_flags"]}, "compiled_path": null, "contract": {"enforced": true, "alias_types": true, "checksum": "5954adf8c148991c939e44e9c8c1de5f1a9a634ff6e5a6c677036c77ce5aa031"}, "access": "protected", "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true, "columns": ["event_key", "sequence_id"]}], "version": null, "latest_version": null, "deprecation_date": null}, "model.baseball_computer.stg_events": {"database": "bc", "schema": "main_models", "name": "stg_events", "resource_type": "model", "package_name": "baseball_computer", "path": "staging/event/stg_events.sql", "original_file_path": "models/staging/event/stg_events.sql", "unique_id": "model.baseball_computer.stg_events", "fqn": ["baseball_computer", "staging", "event", "stg_events"], "alias": "stg_events", "checksum": {"name": "sha256", "checksum": "b558fc55dd9ca90e8283dbf854728d9657b17c3a6ace1653338c340d536ebdca"}, "config": {"enabled": true, "alias": null, "schema": "models", "database": null, "tags": [], "meta": {"primary_keys": ["event_key"]}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "access": "protected"}, "tags": [], "description": "The single most important staging table in the database,\n`stg_events` has one row for each event in the Retrosheet play-by-play data.\n\nAn \"event\" has no inherent meaning in baseball, but is instead a\nRetrosheet-specific concept that represents discrete sets of plays.\nAn event can be categorized into one of three types:\n- Plate appearance result\n- Baserunning-only play(s)\n- No play\n\nA plate appearance result can also include baserunning plays,\nbut an event never contains more than one plate appearance.\nNo-plays serve as markers in the data to place substitutions.\nIn cases where multiple baserunning plays or substitutions occur\nover a single plate apperance, the PA is split across those events,\nbut is considered to have occurred on the final event. In the case\nof a baserunning play ending an inning, it is also possible that a plate\nappearance to not occur at all.\n\n`stg_events` has the following information:\n- The game state (inning, frame, outs, runners on, batter up, etc.)\n- The plate appearance result (if applicable)\n- The batted ball information (if applicable)\n- Basic results of the event (runs scored, outs recorded)\n- Other rare miscellaneous information (e.g. the batter batting from an unusual side)\n\nSee the Retrosheet event file spec:\nhttps://www.retrosheet.org/eventfile.htm\n\nAs well as the batted ball location diagram:\nhttps://www.retrosheet.org/location.htm\n", "columns": {"game_id": {"name": "game_id", "description": "Retrosheet game ID, A 12-character string structured as follows:\n\n    - Chars 1-3: Home team ID\n    - Chars 4-11: Date (YYYYMMDD)\n    - Char 12: Game number (0 if only one game was played on that day)\n    \n    Example: MLN195607170", "meta": {}, "data_type": "varchar", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "event_id": {"name": "event_id", "description": "1-byte integer that uniquely identifies, in order, an event within a single game.\n    This value will remain the same across multiple versions as long as events\n    are not added or removed from that specific game, and should align exactly\n    with the event_id produced by Retrosheet's BEVENT software.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "event_key": {"name": "event_key", "description": "4-byte integer that uniquely identifies an event across the entire\n    dataset (contrast with event_id, which is game-specific). The key\n    is generated deterministically given the same dataset, but it may\n    change when the data is updated. It is guaranteed to follow the \n    order of events within a single game.", "meta": {}, "data_type": "uinteger", "constraints": [], "quote": null, "tags": []}, "batting_side": {"name": "batting_side", "description": "The side that was batting when the entity took place.", "meta": {}, "data_type": "side", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "inning": {"name": "inning", "description": "The inning during which the entity took place.", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "frame": {"name": "frame", "description": "Top or bottom of the inning.", "meta": {}, "data_type": "frame", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "batter_lineup_position": {"name": "batter_lineup_position", "description": "1-byte integer for the traditional 1-9 batting order position, along with\n    10 for the pitcher in games with a DH. With very few exceptions, a player will\n    only appear in one lineup position per game. The exceptions are from courtesy\n    runners and the Ohtani rule.", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "batter_id": {"name": "batter_id", "description": "Retrosheet 8-character person ID for the batter associated with the\n    entity.", "meta": {}, "data_type": "varchar", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "pitcher_id": {"name": "pitcher_id", "description": "Retrosheet 8-character person ID for the pitcher associated with the\n    entity.", "meta": {}, "data_type": "varchar", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "batting_team_id": {"name": "batting_team_id", "description": "Retrosheet team ID, 3-character string which identifies the team\n    that a franchise was playing as at a given time.", "meta": {}, "data_type": "team_id", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "fielding_team_id": {"name": "fielding_team_id", "description": "Retrosheet team ID, 3-character string which identifies the team\n    that a franchise was playing as at a given time.", "meta": {}, "data_type": "team_id", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "outs": {"name": "outs", "description": "The number of outs at the start of the event.", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "count_balls": {"name": "count_balls", "description": "The number of balls at the time that the event occurred.\n", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "count_strikes": {"name": "count_strikes", "description": "The number of strikes at the time that the event occurred.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "base_state": {"name": "base_state", "description": "A binary representation of the baserunners present at the start of the event,\nrepresented as a 0-7 base 10 integer:\n```\n0 - Bases empty (000)\n1 - Runner on 1st (001)\n2 - Runner on 2nd (010)\n3 - Runner on 1st and 2nd (011)\n4 - Runner on 3rd (100)\n5 - Runner on 1st and 3rd (101)\n6 - Runner on 2nd and 3rd (110)\n7 - Bases loaded (111)\n```\n\nRepresenting the base state this way might seem counterintuitive at first,\nbut it ends up being very useful and easier to work with in many cases. It's\nalso a common convention.\nSee `seed_base_state` for more info.\n", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "specified_batter_hand": {"name": "specified_batter_hand", "description": "A rare data point that indicates the batter batted from a different side\nthan he would normally. In all other cases, roster/bio data is more authoritative.\n", "meta": {}, "data_type": "hand", "constraints": [], "quote": null, "tags": []}, "specified_pitcher_hand": {"name": "specified_pitcher_hand", "description": "A rare data point that indicates the pitcher threw from a different side\nthan he would normally. In all other cases, roster/bio data is more authoritative.\nThis is mostly just Pat Venditte against switch hitters.\n", "meta": {}, "data_type": "hand", "constraints": [], "quote": null, "tags": []}, "strikeout_responsible_batter_id": {"name": "strikeout_responsible_batter_id", "description": "This is the batter who, if the plate appearance ends in a strikeout, is charged with the strikeout.\nThis is only applicable for mid-plate-appearance substitutions. There is a specific set of\ncases in which the original batter is charged with the strikeout. For all other statistics,\nthe final batter is the one who is credited.\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "walk_responsible_pitcher_id": {"name": "walk_responsible_pitcher_id", "description": "This is the pitcher who, if the plate appearance ends in a walk, is charged with the walk.\nThis is only applicable for mid-plate-appearance substitutions. There is a specific set of\ncases in which the original pitcher is charged with the walk. For all other statistics,\nthe final pitcher is the one who is credited.\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "plate_appearance_result": {"name": "plate_appearance_result", "description": "This field is present for all events in which a plate appearance finished,\n    and absent for all other types of events.\n    It is an enum describing the result of the plate appearance, e.g. Single,\n    InPlayOut, etc. See `seed_plate_appearance_results` for more info.", "meta": {}, "data_type": "plate_appearance_result", "constraints": [], "quote": null, "tags": []}, "batted_trajectory": {"name": "batted_trajectory", "description": "An enum indicating the trajectory of the batted ball. This field is\n*always* populated for plate appearances that end in a batted ball,\nregardless of whether we know the trajectory. It is filled with `Unknown`\nin those cases where no trajectory was recorded. This data is sparse prior\nto 1988, but many of the missing values can be deduced based on other details.\n", "meta": {}, "data_type": "trajectory", "constraints": [], "quote": null, "tags": []}, "batted_to_fielder": {"name": "batted_to_fielder", "description": "The fielder who fielded the batted ball as a 1-byte integer, if applicable. This field is\n    *always* populated for plate appearances that end with a ball in play,\n    regardless of whether we know the fielder. It is filled with 0\n    in those cases where no fielder was recorded. On in-play outs,\n    this field has excellent historical coverage going back as far as we have data.\n    Hits have much spottier coverage, but there is still a large amount of data across\n    all years. For most of baseball history, this ends up being our best proxy\n    for batted ball location and trajectory.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "batted_location_general": {"name": "batted_location_general", "description": "baseball.computer's parser interprets Retrosheet's hit location codes as having\n    a general location followed by modifiers that add specificity. This field\n    contains the general location, which correspond to each fielding position\n    as well as the gaps between each position, e.g. Third and ThirdShortstop.\n\n    Note that the for air balls, the location is defined according to where the\n    ball was fielded or landed. For ground balls, the location is defined according\n    to where the ball was fielded by an infielder, or where the ball left the infield\n    if it made it through to the outfield.", "meta": {}, "data_type": "location_general", "constraints": [], "quote": null, "tags": []}, "batted_location_depth": {"name": "batted_location_depth", "description": "Refers to the depth of the batted ball within the area of the general location\n    (as opposed to the depth of the general location itself). The data here can\n    be difficult to interpret, as 'Default' can either mean the ball was hit to the\n    medium depth of the general location, or that the detaial was not recorded.", "meta": {}, "data_type": "location_depth", "constraints": [], "quote": null, "tags": []}, "batted_location_angle": {"name": "batted_location_angle", "description": "Refers to the angle of the batted ball within the area of the general location,\n    either towards the foul line or the middle of the field. Only a few of the\n    general locations have this modifier. The data here can\n    be difficult to interpret, as 'Default' can either mean the ball was hit to the\n    middle of the general location, or that the detaial was not recorded.", "meta": {}, "data_type": "location_angle", "constraints": [], "quote": null, "tags": []}, "batted_contact_strength": {"name": "batted_contact_strength", "description": "A modifier indicating that the ball was sharply or softly hit. Prior to the Statcast era,\n    this detail is rarely specified and does not have any standard definition.\n    In the Statcast era, hard-hit balls are explicitly defined as 95+ miles per hour\n    exit velocity, and soft-hit balls are explicitly defined as 59- miles per hour.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "outs_on_play": {"name": "outs_on_play", "description": "The total number of outs that were recorded during the event.\n    Mutually exclusive with all other events.", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "runs_on_play": {"name": "runs_on_play", "description": "The total number of runs that scored during the event.\n    Mutually exclusive with all other events.", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "runs_batted_in": {"name": "runs_batted_in", "description": "(RBI) Number of runs that scored as a result of a batter's plate appearance. This is usually\n    the number of runs that scored on the play, but errors and other similar cases may cause\n    some runs not to be credited to the batter. Scorerkeeper discretion occasionally causes differences\n    between the number in the database and the official MLB total.", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "team_unearned_runs": {"name": "team_unearned_runs", "description": "Number of runs that are charged as earned to the pitcher, but unearned to the team.\n    This happens when a pitcher enters an inning which should have been over already because\n    of an error and then the pitcher allows a run to score without the help of any additional\n    errors. This is a rare occurrence and it might seem unnecessary to track,\n    but it is absolutely essential that we do so in order to preserve the space-time continuu-\n    T\u0355he\u030a\u0346\u0328\u035c y\u036a\u0363e\u0321\u0303\u0313\u030ea\u0347r\u0350\u0355\u035c\u035d i\u0313\u035a\u0314\u0324\u033a\u033b\u035bs 20\u032e\u033f89\u032a\u030a an\u032b\u032b\u035e\u0326\u0305d\u0331\u033f\u0369 E\u0361\u0354\u0330\u0351\u0320s\u036d\u0366t\u0351\u0359\u035de\u0303\u0352\u0310b\u0301\u036e\u0359a\u0361\u0359\u0310\u0301\u0330\u0330\u0320n\u036f\u0352\u035f Y\u032a\u0318\u0311a\u035c\u0302\u031c\u031a\u036c\u0345\u0360n\u0304\u0301\u0309 h\u035c\u0314\u0306a\u0359\u033e\u031d\u035f\u0361\u0308\u0301\u0351s\u035f\u0338 fu\u0326\u036d\u030f\u032e\u0306\u030dl\u033a\u0347\u0311\u0349\u034c\u0305\u0303l\u0345\u030f\u0308\u036a\u033f\u031dy\u0312\u0313\u034b\u036e\u0332\u0347 m\u0326\u030a\u0363e\u0365\u034a\u0367\u0320\u0325rg\u0347\u0366\u0300e\u0309\u0339\u031c\u031f\u0353\u0331\u0319d\u0331\u0327 wi\u0307\u034eth\u0366\u0361\u031b\u036d\u0358 t\u031d\u0362\u035d\u0328\u035e\u0342h\u0336\u0357\u031e\u032d\u035f\u0319e\u0322\u030a\u0321\u032f w\u0300\u0329\u0309\u032co\u036d\u0349r\u0311\u0367\u0327\u0360\u036a\u0327\u036cm\u034c\u031c.", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "no_play_flag": {"name": "no_play_flag", "description": "True if nothing happened on the play.\nThis will be false in the specific case of an error on a foul ball,\nwhich is marked as a no-play in the Retrosheet data but is not treated\nthat way for our purposes. This field is a useful way to filter out\nunneeded events, especially in the context of determining the personnel\nin a game.\n", "meta": {}, "data_type": "boolean", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "date": {"name": "date", "description": "Date on which the entity took place.", "meta": {}, "data_type": "date", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "season": {"name": "season", "description": "Year, 4-digit integer", "meta": {}, "data_type": "smallint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "runners_count": {"name": "runners_count", "description": "The total number of runners on base at the start of the event.\nRedundant with `base_state`, but provided for convenience.\n", "meta": {}, "data_type": "tinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}}, "meta": {"primary_keys": ["event_key"]}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "baseball_computer://models/staging/event/stg_events.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "models", "contract": {"enforced": true}, "meta": {"primary_keys": ["event_key"]}}, "created_at": 1702281449.248693, "relation_name": "\"bc\".\"main_models\".\"stg_events\"", "raw_code": "WITH source AS (\n    SELECT * FROM {{ source('event', 'events') }}\n),\n\nrenamed AS (\n    SELECT\n        game_id,\n        event_id,\n        event_key,\n        -- TODO: Add plate appearance id\n        batting_side,\n        inning,\n        frame,\n        batter_lineup_position,\n        batter_id,\n        pitcher_id,\n        batting_team_id,\n        fielding_team_id,\n        outs,\n        count_balls,\n        count_strikes,\n        base_state,\n        LEFT(specified_batter_hand, 1)::HAND AS specified_batter_hand,\n        LEFT(specified_pitcher_hand, 1)::HAND AS specified_pitcher_hand,\n        strikeout_responsible_batter_id,\n        walk_responsible_pitcher_id,\n        plate_appearance_result,\n        batted_trajectory,\n        batted_to_fielder,\n        batted_location_general,\n        batted_location_depth,\n        batted_location_angle,\n        batted_contact_strength,\n        outs_on_play,\n        runs_on_play,\n        runs_batted_in,\n        team_unearned_runs,\n        no_play_flag,\n        STRPTIME(SUBSTRING(game_id, 4, 8), '%Y%m%d')::DATE AS date,\n        SUBSTRING(game_id, 4, 4)::INT2 AS season,\n        BIT_COUNT(base_state) AS runners_count,\n    from source\n)\n\nSELECT * from renamed", "language": "sql", "refs": [], "sources": [["event", "events"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.baseball_computer.event.events"]}, "compiled_path": null, "contract": {"enforced": true, "alias_types": true, "checksum": "1d0baeb3a7e34558977b1926cbe91f388cd59b9fd66984cf5827a16698ebd35b"}, "access": "protected", "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true, "columns": ["event_key"]}], "version": null, "latest_version": null, "deprecation_date": null}, "model.baseball_computer.player_team_season_pitching_stats": {"database": "bc", "schema": "main_models", "name": "player_team_season_pitching_stats", "resource_type": "model", "package_name": "baseball_computer", "path": "intermediate/player_season_level/player_team_season_pitching_stats.sql", "original_file_path": "models/intermediate/player_season_level/player_team_season_pitching_stats.sql", "unique_id": "model.baseball_computer.player_team_season_pitching_stats", "fqn": ["baseball_computer", "intermediate", "player_season_level", "player_team_season_pitching_stats"], "alias": "player_team_season_pitching_stats", "checksum": {"name": "sha256", "checksum": "132ce81a4a809200024ef26a6a4eee64e2e2507eacc8add159e4a817ac7328ee"}, "config": {"enabled": true, "alias": null, "schema": "models", "database": null, "tags": [], "meta": {"primary_keys": ["season", "team_id", "player_id", "game_type"]}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {"season": {"name": "season", "description": "Year, 4-digit integer", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "team_id": {"name": "team_id", "description": "Retrosheet team ID, 3-character string which identifies the team\n    that a franchise was playing as at a given time.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "player_id": {"name": "player_id", "description": "Retrosheet 8-character person ID for a player, which consists of\n    the first four characters of the last name, the first character\n    of the first name, and then three digits to disambiguate between\n    players with the same five characters.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "game_type": {"name": "game_type", "description": "The context in which a game took place, such as the regular season,\n    a specific playoff round, or an all-star game.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "innings_pitched": {"name": "innings_pitched", "description": "(IP) Number of innings pitched by a pitcher. Fractional innings are given by .33 and .67 here,\n    but they are often formatted as .1 and .2 elsewhere.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "games": {"name": "games", "description": "Games played", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batters_faced": {"name": "batters_faced", "description": "Number of batters faced by a pitcher, generally equivalent to plate appearances (in old box-score-only games, this may not match up perfectly).", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "outs_recorded": {"name": "outs_recorded", "description": "Number of outs recorded by a pitcher.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "inherited_runners_scored": {"name": "inherited_runners_scored", "description": "(IRS) Number of inherited runners that scored while a pitcher was on the mound.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "bequeathed_runners_scored": {"name": "bequeathed_runners_scored", "description": "Number of bequeathed runners that scored after a pitcher left the game.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "team_unearned_runs": {"name": "team_unearned_runs", "description": "Number of runs that are charged as earned to the pitcher, but unearned to the team.\n    This happens when a pitcher enters an inning which should have been over already because\n    of an error and then the pitcher allows a run to score without the help of any additional\n    errors. This is a rare occurrence and it might seem unnecessary to track,\n    but it is absolutely essential that we do so in order to preserve the space-time continuu-\n    T\u0355he\u030a\u0346\u0328\u035c y\u036a\u0363e\u0321\u0303\u0313\u030ea\u0347r\u0350\u0355\u035c\u035d i\u0313\u035a\u0314\u0324\u033a\u033b\u035bs 20\u032e\u033f89\u032a\u030a an\u032b\u032b\u035e\u0326\u0305d\u0331\u033f\u0369 E\u0361\u0354\u0330\u0351\u0320s\u036d\u0366t\u0351\u0359\u035de\u0303\u0352\u0310b\u0301\u036e\u0359a\u0361\u0359\u0310\u0301\u0330\u0330\u0320n\u036f\u0352\u035f Y\u032a\u0318\u0311a\u035c\u0302\u031c\u031a\u036c\u0345\u0360n\u0304\u0301\u0309 h\u035c\u0314\u0306a\u0359\u033e\u031d\u035f\u0361\u0308\u0301\u0351s\u035f\u0338 fu\u0326\u036d\u030f\u032e\u0306\u030dl\u033a\u0347\u0311\u0349\u034c\u0305\u0303l\u0345\u030f\u0308\u036a\u033f\u031dy\u0312\u0313\u034b\u036e\u0332\u0347 m\u0326\u030a\u0363e\u0365\u034a\u0367\u0320\u0325rg\u0347\u0366\u0300e\u0309\u0339\u031c\u031f\u0353\u0331\u0319d\u0331\u0327 wi\u0307\u034eth\u0366\u0361\u031b\u036d\u0358 t\u031d\u0362\u035d\u0328\u035e\u0342h\u0336\u0357\u031e\u032d\u035f\u0319e\u0322\u030a\u0321\u032f w\u0300\u0329\u0309\u032co\u036d\u0349r\u0311\u0367\u0327\u0360\u036a\u0327\u036cm\u034c\u031c.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "at_bats": {"name": "at_bats", "description": "(AB) Number of plate appearances that ended in either a hit or a non-sacrifice out.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "hits": {"name": "hits", "description": "(H) Number of times a batter reached base safely without an error or fielder's choice.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "singles": {"name": "singles", "description": "(1B) Number of hits in which a batter reached first base.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "doubles": {"name": "doubles", "description": "(2B) Number of hits in which a batter reached second base without the help of an error or an attempted\n    play on another runner.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "triples": {"name": "triples", "description": "(3B) Number of hits in which a batter reached third base without the help of an error or an attempted\n    play on another runner.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "home_runs": {"name": "home_runs", "description": "(HR) Number of hits in which a batter reached home plate without the help of an error or an attempted\n    play on another runner (usually by hitting the ball out of the park).", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "total_bases": {"name": "total_bases", "description": "(TB) Number of bases a batter reached safely without the help of an error or an attempted\n    play on another runner. HR * 4 + 3B * 3 + 2B * 2 + (H - HR - 3B - 2B)", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "strikeouts": {"name": "strikeouts", "description": "(K, SO) Number of times a batter struck out. This includes plays in which a batter reached base on\n    a dropped third strike.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "walks": {"name": "walks", "description": "(BB, occasionally W) Number of times a batter reaches base on called balls out of the strike zone\n    (Four balls for all of MLB history after the 1880s).", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "intentional_walks": {"name": "intentional_walks", "description": "(IBB, occasionally IW) Number of times a batter was intentionally walked. This number may be missing or undercounted\n    in earlier years, as intentional walks were not officially tracked until 1955.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "hit_by_pitches": {"name": "hit_by_pitches", "description": "(HBP) Number of times a batter was awarded first base after being hit by a pitch.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "sacrifice_hits": {"name": "sacrifice_hits", "description": "(SH) Number of times a batter performed a sacrifice bunt to advance another runner.\n    A bunt may count as a sacrifice even if the batter reaches base safely.\n    Unsuccessful attempts are not counted, nor are non-sacrifice bunts.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "sacrifice_flies": {"name": "sacrifice_flies", "description": "(SF) Number of times a batter hit a fly ball that resulted in an out (or error),\n    but allowed a runner to score on the throw.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "reached_on_errors": {"name": "reached_on_errors", "description": "(ROE) Number of times a batter reached base safely due to an error.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "reached_on_interferences": {"name": "reached_on_interferences", "description": "Number of times a batter was awarded first base for being illegally hindered\n    by a fielder, usually the catcher.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "inside_the_park_home_runs": {"name": "inside_the_park_home_runs", "description": "Number of times a batter hit a home run without the ball leaving the field of play.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "ground_rule_doubles": {"name": "ground_rule_doubles", "description": "Number of times a batter was awarded a double on a ball that went out of play after\n    bouncing in fair territory.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "infield_hits": {"name": "infield_hits", "description": "Number of times a batter reached base safely on a hit that did not reach the outfield.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "on_base_opportunities": {"name": "on_base_opportunities", "description": "Number of plate appearances in which a batter either did or did not reach base,\n    as defined by the formula for on-base percentage. Note that this is very similar to but different\n    from plate_appearances, as it does not include sacrifice hits or interference.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "on_base_successes": {"name": "on_base_successes", "description": "Number of hits, walks, and hit by pitches that serves as the numerator in the formula\n    for on-base percentage.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "grounded_into_double_plays": {"name": "grounded_into_double_plays", "description": "(GIDP) Number of times a batter grounded into a double play. This is the conventional way\n    to record a double play and as such is an important statistic on its own. Games without\n    play-by-play accounts don't have data on the trajectory of the double play, so\n    this number is not populated for those games.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "double_plays": {"name": "double_plays", "description": "(DP) Number of times a play ended in two outs being recorded.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "triple_plays": {"name": "triple_plays", "description": "(TP) Number of times a play ended in three outs being recorded.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batting_outs": {"name": "batting_outs", "description": "Number of outs that \"should\" have been recorded as a result of a batter's plate apperances.\n    A batting out is still counted if no actual out is recorded on an error or a failed fielder's choice.\n    Outs on baserunners (including the batter trying to stretch a hit) do not count here.\n    Grounded-into-double-plays count as two outs, but other types of double plays do not (the \n    idea here is that the baserunner is responsible on other types of double plays).\n    Unofficial stat, but designed here to be generally useful in determining rates of official stats.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "balls_in_play": {"name": "balls_in_play", "description": "Number of plate appearances that resulted in a live\n    ball on the field of play. The difference between this and batted_balls is that\n    balls_in_play does not include out-of-the-park home runs. This distinction is important\n    for calculating batting average on balls in play, a stat designed to isolate at_bats\n    in which the defense was involved.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "balls_batted": {"name": "balls_batted", "description": "Number of plate appearances that ended in a fair ball or a foul flyout. This is equivalent\n    to balls_in_play + home_runs, and may be a more useful denominator for \"in play\" stats depending\n    on the context.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "trajectory_fly_ball": {"name": "trajectory_fly_ball", "description": "(FB) Number of plate appearances that ended in a fly ball. A fly ball is defined here\n    as the subset of balls hit in the air that are neither line drives nor pop flies.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "trajectory_ground_ball": {"name": "trajectory_ground_ball", "description": "(GB) Number of plate appearances that ended in a ground ball, also called a grounder. A ground ball is defined\n    here to only include swings, not bunts, although older data may not have a proper distinction. Ground\n    balls tend to be easy to distinguish between other types of contact, but Statcast-era data defines it\n    as balls with a launch angle under 10 degrees.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "trajectory_line_drive": {"name": "trajectory_line_drive", "description": "(LD) Number of plate appearances that ended in a line drive, also called a liner. Line drives are distiguished\n    from fly balls by some combination of angle and exit velocity. In the Statcast era, line drives\n    are defined purely in terms of launch angle (10-25 degrees), but just about any colloquial definition\n    involves hard-hitness as well. The line-drive-fly-ball distinction is by far the most arbitrary\n    and subjective trajectory categorization. Many scorekeepers never included line drives, while others counted\n    any successful in-play air-hit as a line drive. Nevertheless, the distinction is a crucial one,\n    as line drives are by far the most likely type of batted ball to result in a hit (even when they are not hit very hard).", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "trajectory_pop_up": {"name": "trajectory_pop_up", "description": "(sometimes PU)  Number of plate appearances that ended in a pop-up, also called a pop fly.\n    Pop-ups are distinguished from fly balls in that they are hit at a higher angle, tend to be\n    hit with less exit velocity, and (as a result) end up in the infield or shallow outfield. Before\n    Statcast-era standardization, the distinction between a fly ball and a pop-up was a matter of\n    scorerkeeper judgement, and many unofficial scorekeepers did not distinguish between the two.\n    Statcast determines pop flies exclusively by angle (> 50 degrees).", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "trajectory_unknown": {"name": "trajectory_unknown", "description": "Number of plate appearances ending in a batted ball whose trajectory was not recorded and cannot\n    be reliably deduced from context. This number includes balls that we know were hit in the air,\n    but do not know which kind of air ball (FB/PU/LD) they were (see trajectory_broad_classification_unknown\n    for a number that does not include those balls). The strong majority of batted balls prior to 1988\n    fall into this category, especially hits.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "trajectory_known": {"name": "trajectory_known", "description": "Number of plate appearances ending in a batted ball whose trajectory was recorded or was reliably deduced\n    from the context. An example of reliable deduction is an at-bat with the fielding play 6-3, which\n    almost always is a ground ball fielded by the shortstop and thrown to the first baseman. See\n    `calc_batted_ball_type` for the deduction logic.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "trajectory_broad_air_ball": {"name": "trajectory_broad_air_ball", "description": "Number of plate appearances that ended in an air ball (a fly ball, line drive, or pop-up).\n    Because it is much easier to deduce that a ball was hit in the air than it is to deduce the exact\n    trajectory, this number field is more reliably populated than any of its three consituent parts.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "trajectory_broad_ground_ball": {"name": "trajectory_broad_ground_ball", "description": "Same as `trajectory_ground_ball`.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "trajectory_broad_unknown": {"name": "trajectory_broad_unknown", "description": "Number of plate appearances ending in a batted ball whose trajectory was not recorded and cannot\n    be reliably deduced from context, even to the extent of knowing whether it was a ground ball or an air ball.\n    This will include a disproportionate number of hits, which are more likely to be missing trajectory data\n    and harder to make deductions about.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "trajectory_broad_known": {"name": "trajectory_broad_known", "description": "Number of plate appearances ending in a batted ball whose ground/air status was recorded or\n    reliably deduced from the context. This is the sum of `trajectory_broad_air_ball` and\n    `trajectory_broad_ground_ball`. Outs in play have excellent coverage historically here,\n    even for older games.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "bunts": {"name": "bunts", "description": "Number of plate appearances ending in an in-play bunt.\n    This does not include strikeouts on foul bunts with two strikes.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_distance_plate": {"name": "batted_distance_plate", "description": "Number of plate appearances in which the ball was batted to catcher's area around home plate.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_distance_infield": {"name": "batted_distance_infield", "description": "Number of plate appearances in which the ball was batted to the infield (not including the catcher).\n    All ground balls are included here, regardless of whether they made it through to the outfield.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_distance_outfield": {"name": "batted_distance_outfield", "description": "Number of plate appearances in which the ball was hit on the fly to the outfield.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_distance_unknown": {"name": "batted_distance_unknown", "description": "Number of plate appearances in which the ball was hit, but the distance was not recorded\n    and cannot be reliably deduced from context.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_distance_known": {"name": "batted_distance_known", "description": "Number of plate appearances in which the ball was hit, and the distance was either\n    recorded or reliably deduced from context.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "fielded_by_battery": {"name": "fielded_by_battery", "description": "Number of plate appearances in which the ball was fielded by the pitcher or catcher.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "fielded_by_infielder": {"name": "fielded_by_infielder", "description": "Number of plate appearances in which the ball was fielded by an infielder.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "fielded_by_outfielder": {"name": "fielded_by_outfielder", "description": "Number of plate appearances in which the ball was fielded by an outfielder.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "fielded_by_known": {"name": "fielded_by_known", "description": "Number of plate appearances in which the ball was fielded by a player, and the player was recorded.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "fielded_by_unknown": {"name": "fielded_by_unknown", "description": "Number of plate appearances in which the ball was fielded by a player, but the player was not recorded.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_angle_left": {"name": "batted_angle_left", "description": "Number of plate appearances in which the ball was batted to the left side of the field.\n    This includes balls where the location was not recorded, but the fielder is on the left side\n    (3B, LF). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_angle_right": {"name": "batted_angle_right", "description": "Number of plate appearances in which the ball was batted to the right side of the field.\n    This includes balls where the location was not recorded, but the fielder is on the right side\n    (1B, RF). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_angle_middle": {"name": "batted_angle_middle", "description": "Number of plate appearances in which the ball was batted to the middle of the field.\n    This includes balls where the location was not recorded, but the fielder is up the middle\n    (P, 2B, SS, CF). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_angle_unknown": {"name": "batted_angle_unknown", "description": "Number of plate appearances in which the ball was batted, but we don't have enough location\n    to determine the spray angle.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_angle_known": {"name": "batted_angle_known", "description": "Number of plate appearances in which the ball was hit and we have enough location to determine\n    the spray angle.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_location_plate": {"name": "batted_location_plate", "description": "Number of plate appearances in which the ball was batted to the catcher's area around home plate.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_location_right_infield": {"name": "batted_location_right_infield", "description": "Number of plate appearances in which the ball was batted to the right side of the infield.\n    This includes balls where the location was not recorded, but the fielder is on the right side\n    (1B). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_location_middle_infield": {"name": "batted_location_middle_infield", "description": "Number of plate appearances in which the ball was batted to the middle of the infield.\n    This includes balls where the location was not recorded, but the fielder is up the middle\n    (P, SS, 2B). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_location_left_infield": {"name": "batted_location_left_infield", "description": "Number of plate appearances in which the ball was batted to the left side of the infield.\n    This includes balls where the location was not recorded, but the fielder is on the left side\n    (3B). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_location_left_field": {"name": "batted_location_left_field", "description": "Number of plate appearances in which the ball was batted to the left side of the outfield.\n    This includes balls where the location was not recorded, but the fielder is on the left side\n    (LF). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_location_center_field": {"name": "batted_location_center_field", "description": "Number of plate appearances in which the ball was batted to the center of the outfield.\n    This includes balls where the location was not recorded, but the fielder is up the middle\n    (CF). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_location_right_field": {"name": "batted_location_right_field", "description": "Number of plate appearances in which the ball was batted to the right side of the outfield.\n    This includes balls where the location was not recorded, but the fielder is on the right side\n    (RF, CF). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_location_unknown": {"name": "batted_location_unknown", "description": "Number of plate appearances in which the ball was batted, but we don't have enough location\n    to determine the specific location.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_location_known": {"name": "batted_location_known", "description": "Number of plate appearances in which the ball was batted and we have enough location to determine\n    the specific location.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_balls_pulled": {"name": "batted_balls_pulled", "description": "Number of plate appearances in which the ball was pulled (the left side for right-handed batters, the right side for left-handed batters).", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_balls_opposite_field": {"name": "batted_balls_opposite_field", "description": "Number of plate appearances in which the ball was hit to the opposite field (the right side for right-handed batters, the left side for left-handed batters).", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "runs": {"name": "runs", "description": "(R) Number of runs scored.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "times_reached_base": {"name": "times_reached_base", "description": "Number of times a batter ended a plate appearance on base, even if it was through a fielder's choice, error, etc.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "stolen_bases": {"name": "stolen_bases", "description": "(SB) Number of successful stolen bases.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "caught_stealing": {"name": "caught_stealing", "description": "(CS) Number of times a runner was caught stealing.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "picked_off": {"name": "picked_off", "description": "(PO, at risk of confusion with putouts) Number of times a runner was picked off.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "picked_off_caught_stealing": {"name": "picked_off_caught_stealing", "description": "(POCS) Number of times a runner was picked off, but instead of going back to the bag,\n    tried to run to the next base and was put out.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "outs_on_basepaths": {"name": "outs_on_basepaths", "description": "Number of outs recorded by a baserunner (this is not mutually exclusive with outs recorded by the batter\n    in cases like failed advances or dropped third-strike putouts).", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "unforced_outs_on_basepaths": {"name": "unforced_outs_on_basepaths", "description": "Number of outs recorded by a baserunner that was not the result of a force on the runner.\n    \"Unforced\" is meant to be in both the literal sense of a force not being in play, but also\n    the figurative sense of the runner being responsible for the out. The latter may or may not\n    be the best interpretation of any given play, but it is useful to assign responsibility to the\n    runner by default in those contexts.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "outs_avoided_on_errors": {"name": "outs_avoided_on_errors", "description": "Number of times that a baserunner would have been out, but an error allowed them to remain\n    on the basepaths (either staying put or advancing).", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "advances_on_wild_pitches": {"name": "advances_on_wild_pitches", "description": "(WP) Number of times a baserunner advanced on a wild pitch.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "advances_on_passed_balls": {"name": "advances_on_passed_balls", "description": "(PB) Number of times a baserunner advanced on a passed ball.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "advances_on_balks": {"name": "advances_on_balks", "description": "(sometimes BK) Number of times a baserunner advanced on a balk.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "advances_on_unspecified_plays": {"name": "advances_on_unspecified_plays", "description": "Number of times a baserunner advanced for an unspecified reason.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "advances_on_defensive_indifference": {"name": "advances_on_defensive_indifference", "description": "(DI) Number of times a baserunner advanced on defensive indifference.\n   Defensive indifference is a judgement call by the official scorer that the defense\n   did not try to stop the runner from stealing a base. This usually happens\n   when the defense has a lead late in the game.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "advances_on_errors": {"name": "advances_on_errors", "description": "Number of times a baserunner advanced on an error.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "extra_base_advance_attempts": {"name": "extra_base_advance_attempts", "description": "Number of times a baserunner tried to advance by a greater number of bases than the batter.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "bases_advanced": {"name": "bases_advanced", "description": "Number of bases advanced by a baserunner, including the batter.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "bases_advanced_on_balls_in_play": {"name": "bases_advanced_on_balls_in_play", "description": "Number of bases advanced by a baserunner on a ball in play, including the batter.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "surplus_bases_advanced_on_balls_in_play": {"name": "surplus_bases_advanced_on_balls_in_play", "description": "Number of bases advanced by a baserunner on a ball in play minus the number of total bases\n    accumulated by the batter on the same play. For example, if a runner goes from first to third\n    on a single, this number is 1 (3 - 2). If a runner only goes from second to third on a double,\n    this number is -1 (1 - 2).", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "outs_on_extra_base_advance_attempts": {"name": "outs_on_extra_base_advance_attempts", "description": "Number of times a baserunner was out attempting to advance\n    by a greater number of bases than the batter. This includes\n    batters who were put out trying to stretch a hit to the next base.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "pitches": {"name": "pitches", "description": "Number of pitches thrown.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "swings": {"name": "swings", "description": "Number of pitches that were swung at.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "swings_with_contact": {"name": "swings_with_contact", "description": "Number of pitches that were swung at and made contact.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "strikes": {"name": "strikes", "description": "Number of pitches that were called or swinging strikes.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "strikes_called": {"name": "strikes_called", "description": "Number of pitches that were called strikes.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "strikes_swinging": {"name": "strikes_swinging", "description": "Number of pitches that were swung on and missed (mutually exclusive\n    with `swings_with_contact`, which also count as strikes).", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "strikes_foul": {"name": "strikes_foul", "description": "Number of pitches that were fouled off.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "strikes_foul_tip": {"name": "strikes_foul_tip", "description": "Number of pitches that were fouled off and caught by the catcher for strike three.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "strikes_in_play": {"name": "strikes_in_play", "description": "Number of pitches that were swung on and batted into play.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "strikes_unknown": {"name": "strikes_unknown", "description": "Number of pitches that we know were strikes, but don't know what kind.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "balls": {"name": "balls", "description": "Number of pitches that were called balls.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "balls_called": {"name": "balls_called", "description": "Number of pitches that were called balls (as opposed to automatic balls that were\n    not actually thrown).", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "balls_intentional": {"name": "balls_intentional", "description": "Number of pitches that were called balls as part of an intentional walk.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "balls_automatic": {"name": "balls_automatic", "description": "Number of pitches that were called balls on an automatic walk or a delay penalty.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "unknown_pitches": {"name": "unknown_pitches", "description": "Number of pitches that were thrown without any other information recorded.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "pitchouts": {"name": "pitchouts", "description": "Number of pitches that were thrown as pitchouts. A pitchout is a pitch that is thrown\n    intentionally very far outside in order to make it easier for the catcher to throw out\n    a baserunner who is likely to steal.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "pitcher_pickoff_attempts": {"name": "pitcher_pickoff_attempts", "description": "Number of times the pitcher attempted to pick off a baserunner.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "catcher_pickoff_attempts": {"name": "catcher_pickoff_attempts", "description": "Number of times the catcher attempted to pick off a baserunner.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "pitches_blocked_by_catcher": {"name": "pitches_blocked_by_catcher", "description": "Number of pitches that were blocked by the catcher.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "pitches_with_runners_going": {"name": "pitches_with_runners_going", "description": "Number of pitches that were thrown while a baserunner was on the move\n    (as part of a steal or hit-and-run).", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "passed_balls": {"name": "passed_balls", "description": "(PB) Number of passed balls.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "wild_pitches": {"name": "wild_pitches", "description": "(WP) Number of wild pitches.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "balks": {"name": "balks", "description": "(BK) Number of balks.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "left_on_base": {"name": "left_on_base", "description": "(LOB) At an individual level, the number of baserunners that a batter failed to advance during a plate appearance.\n    At a team level, the number of baserunners remaining on base at the end of an inning. In order to count, baserunners\n    must not have scored or been put out.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "left_on_base_with_two_outs": {"name": "left_on_base_with_two_outs", "description": "(LOB) At an individual level, the number of baserunners that remain on base (unscored and not out) after a plate appearance that ends with the third out recorded. At a team level, this is interchangable with `left_on_base`.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "games_started": {"name": "games_started", "description": "(GS) Number of games started by a player.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "inherited_runners": {"name": "inherited_runners", "description": "(IR) Number of runners on base when a pitcher entered the game.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "bequeathed_runners": {"name": "bequeathed_runners", "description": "Number of runners on base when a pitcher left the game.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "games_relieved": {"name": "games_relieved", "description": "Number of games in which a pitcher entered the game in relief.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "games_finished": {"name": "games_finished", "description": "(GF) Number of games in which a pitcher entered the game in relief and finished the game.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "save_situations_entered": {"name": "save_situations_entered", "description": "Number of games in which a pitcher entered the game in a save situation. A save situation is defined\n    as when the pitcher enters the game ineligible to get the win with one of the following conditions:\n\n    - A lead of three runs or less and ineligible to get the win\n    - Any lead with the tying run on base, at bat, or on deck\n\n    If a pitcher pitches the final three innings of a game with any lead, they are credited with a save\n    but are not considered to have entered a save situation unless one of the above conditions is met.\n    Note the difference between this field and `save_opportunities`, which does not count games in which\n    the pitcher exited without completing or blowing the save.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "holds": {"name": "holds", "description": "(HLD, H) Number of holds recorded by a pitcher. A hold is defined as a relief appearance in which\n    the pitcher enters the game in a save situation, records at least one out, and leaves the game\n    with the lead intact.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "blown_saves": {"name": "blown_saves", "description": "(BS) Number of games in which a pitcher entered the game in a save situation and gave up the lead.\n    The status of inherited runners is irrelevant in determining who blew the save - it is entirely\n    a function of who was on the mount when the lead as lost.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "saves_by_rule": {"name": "saves_by_rule", "description": "Number of games in which a pitcher earned a save according to the default rules.\n    This may be different than the actual number of saves, as the official scorer may award\n    the player a win instead of a save at their discretion in rare cases.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "save_opportunities": {"name": "save_opportunities", "description": "(SVO) The sum of saves and blown saves.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "wins": {"name": "wins", "description": "(W) Number of games in which a pitcher was credited with the win.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "losses": {"name": "losses", "description": "(L) Number of games in which a pitcher was debited with the loss.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "saves": {"name": "saves", "description": "(SV) Number of games in which a pitcher was credited with the save.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "earned_runs": {"name": "earned_runs", "description": "(ER) Number of runs that are charged to a pitcher. This may include runs that scored after the pitcher\n    left the game (in the case of inherited runners), as well as runs that the scorekeeper deemed to be\n    the pitcher's responsibility in the absence of official inherited runner rules in the olden days.\n    Earned runs are only an official statistic at a game level: the earnedness of any given run is never\n    officially specified, only the total. It would be possible to make a very good guess algorithmically,\n    but that would be a huge pain for a stat that is not very useful in the first place.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "complete_games": {"name": "complete_games", "description": "(CG) Number of games in which a pitcher pitched the entire game, regardless of how long the game lasted.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "shutouts": {"name": "shutouts", "description": "(SHO) Number of games in which a pitcher recorded every out for his team and did not allow any runs,\n    earned or unearned, regardless of how long the game lasted. Note the subtle difference between the\n    definition of a shutout and a complete game: it is possible to pitch a shutout without a complete game\n    if the pitcher enters in relief when no outs have been recorded. AFAIK, the only reason this distinction\n    exists is for us to remember the time that Babe Ruth started a game, walked a batter, yelled at the umpire,\n    got ejected, punched the umpire, and then Ernie Shore came in and retired every batter he faced,\n    which is good enough for me.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "quality_starts": {"name": "quality_starts", "description": "(QS) Number of games in which a starting pitcher pitched at least six innings and allowed three or fewer earned runs.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "cheap_wins": {"name": "cheap_wins", "description": "Number of wins in which a starting pitcher did not record a quality start.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "tough_losses": {"name": "tough_losses", "description": "Number of losses in which a starting pitcher record a quality start.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "no_decisions": {"name": "no_decisions", "description": "(ND) Number of games in which a pitcher pitched but did not recieve a win or a loss.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "no_hitters": {"name": "no_hitters", "description": "At an individual level, the number of games in which a pitcher was the only pitcher for their team and pitched a full-length game without allowing any hits.\n    At a team level, the \"only pitcher\" requirement is dropped.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "perfect_games": {"name": "perfect_games", "description": "Number of games in which a pitcher was the only pitcher for their team and pitched the entire game\n    without allowing any baserunners. At a team level, the \"only pitcher\" requirement is dropped.\n    Generally considered the most impressive single-game pitching accomplishment.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "stolen_bases_second": {"name": "stolen_bases_second", "description": "Number of successful steals of second base.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "stolen_bases_third": {"name": "stolen_bases_third", "description": "Number of successful steals of third base.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "stolen_bases_home": {"name": "stolen_bases_home", "description": "Number of successful steals of home.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "caught_stealing_second": {"name": "caught_stealing_second", "description": "Number of times a runner was caught stealing second base.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "caught_stealing_third": {"name": "caught_stealing_third", "description": "Number of times a runner was caught stealing third base.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "caught_stealing_home": {"name": "caught_stealing_home", "description": "Number of times a runner was caught stealing home.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "stolen_base_opportunities": {"name": "stolen_base_opportunities", "description": "Number of events in which a runner had an opportunity to steal a base as the\n    lead basestealer OR the runner recorded a SB/CS in any situation.\n    \"Opportunity\" is defined as a situation in which the next base\n    was empty at the start of the event (not including the batter).\n    No-play events excluded, but events without plate appearances are included.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "stolen_base_opportunities_second": {"name": "stolen_base_opportunities_second", "description": "Number of opportunities to steal second base (see `stolen_base_opportunities` for detailed criteria).", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "stolen_base_opportunities_third": {"name": "stolen_base_opportunities_third", "description": "Number of opportunities to steal third base (see `stolen_base_opportunities` for detailed criteria).", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "stolen_base_opportunities_home": {"name": "stolen_base_opportunities_home", "description": "Number of opportunities to steal home (see `stolen_base_opportunities` for detailed criteria).", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "picked_off_first": {"name": "picked_off_first", "description": "Number of times a runner was picked off first base.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "picked_off_second": {"name": "picked_off_second", "description": "Number of times a runner was picked off second base.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "picked_off_third": {"name": "picked_off_third", "description": "Number of times a runner was picked off third base.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "extra_base_chances": {"name": "extra_base_chances", "description": "", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "extra_bases_taken": {"name": "extra_bases_taken", "description": "", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "plate_appearances": {"name": "plate_appearances", "description": "(PA) Number of times a batter came to the plate, including walks, hit by pitches, sacrifices, and at-bats.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}}, "meta": {"primary_keys": ["season", "team_id", "player_id", "game_type"]}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "baseball_computer://models/intermediate/player_season_level/player_team_season_pitching_stats.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "models", "contract": {"enforced": true}, "meta": {"primary_keys": ["season", "team_id", "player_id", "game_type"]}}, "created_at": 1702281449.28913, "relation_name": "\"bc\".\"main_models\".\"player_team_season_pitching_stats\"", "raw_code": "{{\n  config(\n    materialized = 'table',\n    )\n}}\nWITH databank AS (\n    SELECT\n        pitch.season,\n        pitch.team_id,\n        people.retrosheet_player_id AS player_id,\n        'RegularSeason' AS game_type,\n        SUM(pitch.wins)::INT AS wins,\n        SUM(pitch.losses)::INT AS losses,\n        SUM(pitch.games)::INT AS games,\n        SUM(pitch.games_started)::INT AS games_started,\n        SUM(pitch.complete_games)::INT AS complete_games,\n        SUM(pitch.shutouts)::INT AS shutouts,\n        SUM(pitch.saves)::INT AS saves,\n        SUM(pitch.outs_recorded)::INT AS outs_recorded,\n        SUM(pitch.hits)::INT AS hits,\n        SUM(pitch.earned_runs)::INT AS earned_runs,\n        SUM(pitch.home_runs)::INT AS home_runs,\n        SUM(pitch.walks)::INT AS walks,\n        SUM(pitch.strikeouts)::INT AS strikeouts,\n        SUM(pitch.intentional_walks)::INT AS intentional_walks,\n        SUM(pitch.wild_pitches)::INT AS wild_pitches,\n        SUM(pitch.hit_by_pitches)::INT AS hit_by_pitches,\n        SUM(pitch.balks)::INT AS balks,\n        SUM(pitch.batters_faced)::INT AS batters_faced,\n        SUM(pitch.games_finished)::INT AS games_finished,\n        SUM(pitch.runs)::INT AS runs,\n        SUM(pitch.sacrifice_hits)::INT AS sacrifice_hits,\n        SUM(pitch.sacrifice_flies)::INT AS sacrifice_flies,\n        SUM(pitch.grounded_into_double_plays)::INT AS grounded_into_double_plays,\n    FROM {{ ref('stg_databank_pitching') }} AS pitch\n    INNER JOIN {{ ref('stg_people') }} AS people USING (databank_player_id)\n    -- We'd need to do something different for partial coverage seasons but\n    -- currently box scores are all or nothing for a given year\n    WHERE pitch.season NOT IN (SELECT DISTINCT season FROM {{ ref('stg_games') }})\n    GROUP BY 1, 2, 3\n),\n\nretrosheet AS (\n    SELECT\n        games.season,\n        stats.team_id,\n        stats.player_id,\n        games.game_type,\n        COUNT(*)::INT AS games,\n        {% for stat in event_level_pitching_stats() + game_level_pitching_stats() -%}\n            SUM({{ stat }})::INT AS {{ stat }},\n        {% endfor %}\n    FROM {{ ref('stg_games') }} AS games\n    INNER JOIN {{ ref('player_game_pitching_stats') }} AS stats USING (game_id)\n    GROUP BY 1, 2, 3, 4\n),\n\nreround_ip AS (\n    SELECT * REPLACE (\n        ROUND(outs_recorded / 3, 2) AS innings_pitched\n    )\n    FROM retrosheet\n)\n\nSELECT * FROM reround_ip\nUNION ALL BY NAME\nSELECT * FROM databank", "language": "sql", "refs": [{"name": "stg_databank_pitching", "package": null, "version": null}, {"name": "stg_people", "package": null, "version": null}, {"name": "stg_games", "package": null, "version": null}, {"name": "stg_games", "package": null, "version": null}, {"name": "player_game_pitching_stats", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.baseball_computer.event_level_pitching_stats", "macro.baseball_computer.game_level_pitching_stats"], "nodes": ["model.baseball_computer.stg_databank_pitching", "model.baseball_computer.stg_people", "model.baseball_computer.stg_games", "model.baseball_computer.player_game_pitching_stats"]}, "compiled_path": null, "contract": {"enforced": true, "alias_types": true, "checksum": "511265b6e239599470cf96ef3b2198a3472b3d81ab439fd7438aa3b9aa150a03"}, "access": "protected", "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true, "columns": ["season", "team_id", "player_id", "game_type"]}], "version": null, "latest_version": null, "deprecation_date": null}, "model.baseball_computer.player_position_team_season_fielding_stats": {"database": "bc", "schema": "main_models", "name": "player_position_team_season_fielding_stats", "resource_type": "model", "package_name": "baseball_computer", "path": "intermediate/player_season_level/player_position_team_season_fielding_stats.sql", "original_file_path": "models/intermediate/player_season_level/player_position_team_season_fielding_stats.sql", "unique_id": "model.baseball_computer.player_position_team_season_fielding_stats", "fqn": ["baseball_computer", "intermediate", "player_season_level", "player_position_team_season_fielding_stats"], "alias": "player_position_team_season_fielding_stats", "checksum": {"name": "sha256", "checksum": "189a11af382c62a17b94dca79800b6ae55c00cddcbaa69347b4522976c11389f"}, "config": {"enabled": true, "alias": null, "schema": "models", "database": null, "tags": [], "meta": {"primary_keys": ["season", "team_id", "player_id", "fielding_position", "game_type"]}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {"season": {"name": "season", "description": "Year, 4-digit integer", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "team_id": {"name": "team_id", "description": "Retrosheet team ID, 3-character string which identifies the team\n    that a franchise was playing as at a given time.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "player_id": {"name": "player_id", "description": "Retrosheet 8-character person ID for a player, which consists of\n    the first four characters of the last name, the first character\n    of the first name, and then three digits to disambiguate between\n    players with the same five characters.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "fielding_position": {"name": "fielding_position", "description": "A 1-byte integer for the traditional 1-9 fielder identification, along with additional\n    values for unknown fielders and batting-specific positions. Depending on the\n    context, this value may be NULL for batting positions.\n    ```\n    0 - Unknown\n    1 - Pitcher\n    2 - Catcher\n    3 - First baseman\n    4 - Second baseman\n    5 - Third baseman\n    6 - Shortstop\n    7 - Left fielder\n    8 - Center fielder\n    9 - Right fielder\n    10 - Designated Hitter\n    11 - Pinch Hitter\n    12 - Pinch Runner\n    ```", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "game_type": {"name": "game_type", "description": "The context in which a game took place, such as the regular season,\n    a specific playoff round, or an all-star game.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "fielding_position_category": {"name": "fielding_position_category", "description": "Divided between P, C, IF, OF, and DH.\n    This is particularly important for 19th century data, where we don't know\n    which specific outfield position a player accumulated his stats at.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "games": {"name": "games", "description": "Games played", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "games_started": {"name": "games_started", "description": "(GS) Number of games started by a player.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "outs_played": {"name": "outs_played", "description": "", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "plate_appearances_in_field": {"name": "plate_appearances_in_field", "description": "", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "plate_appearances_in_field_with_ball_in_play": {"name": "plate_appearances_in_field_with_ball_in_play", "description": "", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "putouts": {"name": "putouts", "description": "(PO) Outs credited to fielder based on who physically made the out, either by:\n        - Catching a ball on the fly\n        - Tagging a runner out\n        - Forcing a runner out\n        - Catching a called third strike\n        - Being the nearest fielder to a baserunner who is called out for interference\n\n    Putouts have been an important baseball statistic longer than MLB has been around,\n    so it has excellent historical coverage. Unassisted\n    putouts are very important in determining the location of batted balls.\n    \n    In modern baseball rules, each out in the game is credited as a putout, and at the play/event\n    level this will always be the case. However, in older games for which we only have box score or season-level\n    data, rare plays like baserunner interference may not be assigned to a specific fielder.\n    \n    Every play-by-play out has a putout, but the fielder who gets the putout may be unknown.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "assists": {"name": "assists", "description": "(A) Number of outs in which a fielder touched the ball before anothber fielder recorded a putout.\n    This is almost always a throw to another fielder, but it can also be a deflection.\n\n    Assists have excellent historical data coverage, and they are particularly useful in determining\n    the location of ground balls. The data is present in almost all season-level and game-level accounts.\n    However, individual plays with unknown-fielder putouts are likely to be missing assists entirely.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "errors": {"name": "errors", "description": "(E) Number of errors recorded by a fielder. This is recorded when a fielder either fails to make an out\n    that an average fielder should have made or makes a bad play that allows a baserunner to advance.\n    Errors are awarded at the scorekeeper's discretion, making them more subjective than the other two main\n    fielding stats.\n    \n    Errors used to be a much larger component of evaluating fielder quality.\n    When the stat was invented, routine plays were completed much less frequently than they are today.\n    As baseball evolved, routine plays became truly routine, and a fielder's ability to get to the ball\n    became more relevant than their ability\n    to reliably convert the out once they got there. While plenty of people as early as the 19th century were\n    aware of this, statistics mostly failed to reflect it until the 1980s, when Bill James and others\n    developed Range Factor and other stats that attempted to measure a fielder's ability to create chances.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "fielders_choices": {"name": "fielders_choices", "description": "(FC) Number of times a fielder who fielded the ball attempted to put out a baserunner other than the batter.\n    A fielder's choice can be assigned when the attempt fails, even if there was no error on the play.\n\n    Fielder's choices are only available on play-by-play data and tend to be recorded when the attempt was\n    a tag and not a force. Force plays are explicitly noted and have little overlap with fielder's choices.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "reaching_errors": {"name": "reaching_errors", "description": "", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "double_plays": {"name": "double_plays", "description": "(DP) Number of times a play ended in two outs being recorded.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "triple_plays": {"name": "triple_plays", "description": "(TP) Number of times a play ended in three outs being recorded.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "ground_ball_double_plays": {"name": "ground_ball_double_plays", "description": "", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "passed_balls": {"name": "passed_balls", "description": "(PB) Number of passed balls.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "balls_hit_to": {"name": "balls_hit_to", "description": "", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "stolen_bases": {"name": "stolen_bases", "description": "(SB) Number of successful stolen bases.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "caught_stealing": {"name": "caught_stealing", "description": "(CS) Number of times a runner was caught stealing.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "games_left_field": {"name": "games_left_field", "description": "", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "games_center_field": {"name": "games_center_field", "description": "", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "games_right_field": {"name": "games_right_field", "description": "", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "unknown_putouts_while_fielding": {"name": "unknown_putouts_while_fielding", "description": "", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "assisted_putouts": {"name": "assisted_putouts", "description": "Number of putouts by the fielder that had at least one recorded, associated assist. For older games, this may be a subset\n    of the true total assisted putouts, as unknown-fielder putouts almost never have recorded assists.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "in_play_putouts": {"name": "in_play_putouts", "description": "", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "in_play_assists": {"name": "in_play_assists", "description": "", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "pickoffs": {"name": "pickoffs", "description": "", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "double_plays_started": {"name": "double_plays_started", "description": "", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "ground_ball_double_plays_started": {"name": "ground_ball_double_plays_started", "description": "", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}}, "meta": {"primary_keys": ["season", "team_id", "player_id", "fielding_position", "game_type"]}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "baseball_computer://models/intermediate/player_season_level/player_position_team_season_fielding_stats.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "models", "contract": {"enforced": true}, "meta": {"primary_keys": ["season", "team_id", "player_id", "fielding_position", "game_type"]}}, "created_at": 1702281449.291879, "relation_name": "\"bc\".\"main_models\".\"player_position_team_season_fielding_stats\"", "raw_code": "{{\n  config(\n    materialized = 'table',\n    )\n}}\nWITH databank AS (\n    SELECT\n        field.season,\n        field.team_id,\n        people.retrosheet_player_id AS player_id,\n        COALESCE(field.fielding_position, 0) AS fielding_position,\n        ANY_VALUE('RegularSeason') AS game_type,\n        ANY_VALUE(field.fielding_position_category) AS fielding_position_category,\n        SUM(field.games)::USMALLINT AS games,\n        SUM(field.games_started)::USMALLINT AS games_started,\n        CASE WHEN ANY_VALUE(field.fielding_position_category) = 'OF'\n                THEN COALESCE(SUM(of_games.games_left_field), 0)\n            ELSE 0\n        END::USMALLINT AS games_left_field,\n        CASE WHEN ANY_VALUE(field.fielding_position_category) = 'OF'\n                THEN COALESCE(SUM(of_games.games_center_field), 0)\n            ELSE 0\n        END::USMALLINT AS games_center_field,\n        CASE WHEN ANY_VALUE(field.fielding_position_category) = 'OF'\n                THEN COALESCE(SUM(of_games.games_right_field), 0)\n            ELSE 0\n        END::USMALLINT AS games_right_field,\n        SUM(field.outs_played)::USMALLINT AS outs_played,\n        SUM(field.putouts)::USMALLINT AS putouts,\n        SUM(field.assists)::USMALLINT AS assists,\n        SUM(field.errors)::USMALLINT AS errors,\n        SUM(field.double_plays)::USMALLINT AS double_plays,\n        SUM(field.passed_balls)::USMALLINT AS passed_balls,\n        SUM(field.stolen_bases)::USMALLINT AS stolen_bases,\n        SUM(field.caught_stealing)::USMALLINT AS caught_stealing,\n    FROM {{ ref('stg_databank_fielding') }} AS field\n    LEFT JOIN {{ ref('stg_databank_fielding_of') }} AS of_games USING (databank_player_id, season, stint)\n    INNER JOIN {{ ref('stg_people') }} AS people USING (databank_player_id)\n    -- We'd need to do something different for partial coverage seasons but\n    -- currently box scores are all or nothing for a given year\n    WHERE field.season NOT IN (SELECT DISTINCT season FROM {{ ref('stg_games') }})\n    GROUP BY 1, 2, 3, 4\n),\n\ngame_agg AS (\n    SELECT\n        games.season,\n        stats.team_id,\n        stats.player_id,\n        stats.fielding_position,\n        games.game_type,\n        ANY_VALUE(CASE\n            WHEN stats.fielding_position = 1 THEN 'P'\n            WHEN stats.fielding_position = 2 THEN 'C'\n            WHEN stats.fielding_position BETWEEN 3 AND 6 THEN 'IF'\n            WHEN stats.fielding_position BETWEEN 7 AND 9 THEN 'OF'\n            WHEN stats.fielding_position = 10 THEN 'DH'\n        END) AS fielding_position_category,\n        COUNT(*)::USMALLINT AS games,\n        SUM(stats.games_started)::USMALLINT AS games_started,\n        SUM(stats.outs_played)::USMALLINT AS outs_played,\n        SUM(stats.plate_appearances_in_field)::USMALLINT AS plate_appearances_in_field,\n        SUM(stats.plate_appearances_in_field_with_ball_in_play)::USMALLINT AS plate_appearances_in_field_with_ball_in_play,\n        SUM(stats.putouts)::USMALLINT AS putouts,\n        SUM(stats.assists)::USMALLINT AS assists,\n        SUM(stats.errors)::USMALLINT AS errors,\n        SUM(stats.fielders_choices)::USMALLINT AS fielders_choices,\n        SUM(stats.reaching_errors)::USMALLINT AS reaching_errors,\n        SUM(stats.double_plays)::USMALLINT AS double_plays,\n        SUM(stats.triple_plays)::USMALLINT AS triple_plays,\n        SUM(stats.ground_ball_double_plays)::USMALLINT AS ground_ball_double_plays,\n        SUM(stats.passed_balls)::USMALLINT AS passed_balls,\n        SUM(stats.balls_hit_to)::USMALLINT AS balls_hit_to,\n        SUM(stats.stolen_bases)::USMALLINT AS stolen_bases,\n        SUM(stats.caught_stealing)::USMALLINT AS caught_stealing,\n        SUM(stats.unknown_putouts_while_fielding)::USMALLINT AS unknown_putouts_while_fielding,\n        SUM(stats.assisted_putouts)::USMALLINT AS assisted_putouts,\n        SUM(stats.in_play_putouts)::USMALLINT AS in_play_putouts,\n        SUM(stats.in_play_assists)::USMALLINT AS in_play_assists,\n        SUM(stats.pickoffs)::USMALLINT AS pickoffs,\n        SUM(stats.double_plays_started)::USMALLINT AS double_plays_started,\n        SUM(stats.ground_ball_double_plays_started)::USMALLINT AS ground_ball_double_plays_started,\n        COUNT_IF(stats.fielding_position = 7)::USMALLINT AS games_left_field,\n        COUNT_IF(stats.fielding_position = 8)::USMALLINT AS games_center_field,\n        COUNT_IF(stats.fielding_position = 9)::USMALLINT AS games_right_field,\n    FROM {{ ref('stg_games') }} AS games\n    INNER JOIN {{ ref('player_position_game_fielding_stats') }} AS stats USING (game_id)\n    GROUP BY 1, 2, 3, 4, 5\n),\n\nfinal AS (\n    SELECT * FROM game_agg\n    UNION ALL BY NAME\n    SELECT * FROM databank\n)\n\nSELECT * FROM final", "language": "sql", "refs": [{"name": "stg_databank_fielding", "package": null, "version": null}, {"name": "stg_databank_fielding_of", "package": null, "version": null}, {"name": "stg_people", "package": null, "version": null}, {"name": "stg_games", "package": null, "version": null}, {"name": "stg_games", "package": null, "version": null}, {"name": "player_position_game_fielding_stats", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.baseball_computer.stg_databank_fielding", "model.baseball_computer.stg_databank_fielding_of", "model.baseball_computer.stg_people", "model.baseball_computer.stg_games", "model.baseball_computer.player_position_game_fielding_stats"]}, "compiled_path": null, "contract": {"enforced": true, "alias_types": true, "checksum": "af025168ec677a0c5fff96be512bdd5c02226029b178d701a84d78a10adb5b4d"}, "access": "protected", "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true, "columns": ["season", "team_id", "player_id", "fielding_position", "game_type"]}], "version": null, "latest_version": null, "deprecation_date": null}, "model.baseball_computer.team_season_fielding_stats": {"database": "bc", "schema": "main_models", "name": "team_season_fielding_stats", "resource_type": "model", "package_name": "baseball_computer", "path": "intermediate/season_level/team_season_fielding_stats.sql", "original_file_path": "models/intermediate/season_level/team_season_fielding_stats.sql", "unique_id": "model.baseball_computer.team_season_fielding_stats", "fqn": ["baseball_computer", "intermediate", "season_level", "team_season_fielding_stats"], "alias": "team_season_fielding_stats", "checksum": {"name": "sha256", "checksum": "e4c5ea6a84f12af04f1b7ab1d81d454e2abd0feb77748aac84536b8ff2d78c02"}, "config": {"enabled": true, "alias": null, "schema": "models", "database": null, "tags": [], "meta": {"primary_keys": ["season", "team_id", "game_type"]}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {"season": {"name": "season", "description": "Year, 4-digit integer", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "team_id": {"name": "team_id", "description": "Retrosheet team ID, 3-character string which identifies the team\n    that a franchise was playing as at a given time.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "game_type": {"name": "game_type", "description": "The context in which a game took place, such as the regular season,\n    a specific playoff round, or an all-star game.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "games": {"name": "games", "description": "Games played", "meta": {}, "data_type": "usmallint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "outs_played": {"name": "outs_played", "description": "", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "putouts": {"name": "putouts", "description": "(PO) Outs credited to fielder based on who physically made the out, either by:\n        - Catching a ball on the fly\n        - Tagging a runner out\n        - Forcing a runner out\n        - Catching a called third strike\n        - Being the nearest fielder to a baserunner who is called out for interference\n\n    Putouts have been an important baseball statistic longer than MLB has been around,\n    so it has excellent historical coverage. Unassisted\n    putouts are very important in determining the location of batted balls.\n    \n    In modern baseball rules, each out in the game is credited as a putout, and at the play/event\n    level this will always be the case. However, in older games for which we only have box score or season-level\n    data, rare plays like baserunner interference may not be assigned to a specific fielder.\n    \n    Every play-by-play out has a putout, but the fielder who gets the putout may be unknown.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "assists": {"name": "assists", "description": "(A) Number of outs in which a fielder touched the ball before anothber fielder recorded a putout.\n    This is almost always a throw to another fielder, but it can also be a deflection.\n\n    Assists have excellent historical data coverage, and they are particularly useful in determining\n    the location of ground balls. The data is present in almost all season-level and game-level accounts.\n    However, individual plays with unknown-fielder putouts are likely to be missing assists entirely.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "errors": {"name": "errors", "description": "(E) Number of errors recorded by a fielder. This is recorded when a fielder either fails to make an out\n    that an average fielder should have made or makes a bad play that allows a baserunner to advance.\n    Errors are awarded at the scorekeeper's discretion, making them more subjective than the other two main\n    fielding stats.\n    \n    Errors used to be a much larger component of evaluating fielder quality.\n    When the stat was invented, routine plays were completed much less frequently than they are today.\n    As baseball evolved, routine plays became truly routine, and a fielder's ability to get to the ball\n    became more relevant than their ability\n    to reliably convert the out once they got there. While plenty of people as early as the 19th century were\n    aware of this, statistics mostly failed to reflect it until the 1980s, when Bill James and others\n    developed Range Factor and other stats that attempted to measure a fielder's ability to create chances.", "meta": {}, "data_type": "usmallint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "passed_balls": {"name": "passed_balls", "description": "(PB) Number of passed balls.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "stolen_bases": {"name": "stolen_bases", "description": "(SB) Number of successful stolen bases.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "caught_stealing": {"name": "caught_stealing", "description": "(CS) Number of times a runner was caught stealing.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "plate_appearances_in_field": {"name": "plate_appearances_in_field", "description": "", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "plate_appearances_in_field_with_ball_in_play": {"name": "plate_appearances_in_field_with_ball_in_play", "description": "", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "fielders_choices": {"name": "fielders_choices", "description": "(FC) Number of times a fielder who fielded the ball attempted to put out a baserunner other than the batter.\n    A fielder's choice can be assigned when the attempt fails, even if there was no error on the play.\n\n    Fielder's choices are only available on play-by-play data and tend to be recorded when the attempt was\n    a tag and not a force. Force plays are explicitly noted and have little overlap with fielder's choices.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "reaching_errors": {"name": "reaching_errors", "description": "", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "pickoffs": {"name": "pickoffs", "description": "", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "double_plays": {"name": "double_plays", "description": "(DP) Number of times a play ended in two outs being recorded.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "triple_plays": {"name": "triple_plays", "description": "(TP) Number of times a play ended in three outs being recorded.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "ground_ball_double_plays": {"name": "ground_ball_double_plays", "description": "", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}}, "meta": {"primary_keys": ["season", "team_id", "game_type"]}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "baseball_computer://models/intermediate/season_level/team_season_fielding_stats.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "models", "contract": {"enforced": true}, "meta": {"primary_keys": ["season", "team_id", "game_type"]}}, "created_at": 1702281449.3024142, "relation_name": "\"bc\".\"main_models\".\"team_season_fielding_stats\"", "raw_code": "{{\n  config(\n    materialized = 'table',\n    )\n}}\nWITH game_agg AS (\n    SELECT\n        season,\n        team_id,\n        game_type,\n        COUNT(*) AS games\n    FROM {{ ref('team_game_start_info') }}\n    GROUP BY 1, 2, 3\n),\n\n-- Need player-level data for seasons without box scores\ndatabank AS (\n    SELECT\n        season,\n        team_id,\n        ANY_VALUE('RegularSeason') AS game_type,\n        ANY_VALUE(game_agg.games)::USMALLINT AS games,\n        SUM(f.putouts)::USMALLINT AS outs_played,\n        SUM(f.putouts)::USMALLINT AS putouts,\n        SUM(f.assists)::USMALLINT AS assists,\n        SUM(f.errors)::USMALLINT AS errors,\n        SUM(f.passed_balls)::USMALLINT AS passed_balls,\n        -- These stats aren't duplicated because they only\n        -- appear for catchers, not pitchers\n        SUM(f.stolen_bases)::USMALLINT AS stolen_bases,\n        SUM(f.caught_stealing)::USMALLINT AS caught_stealing,\n    FROM {{ ref('player_position_team_season_fielding_stats') }} AS f\n    INNER JOIN game_agg USING (season, team_id)\n    WHERE f.season NOT IN (SELECT DISTINCT season FROM {{ ref('game_start_info') }})\n    GROUP BY 1, 2\n),\n\nretrosheet AS (\n    SELECT\n        games.season,\n        stats.team_id,\n        games.game_type,\n        COUNT(*)::USMALLINT AS games,\n        SUM(stats.outs_played)::USMALLINT AS outs_played,\n        SUM(stats.plate_appearances_in_field)::USMALLINT AS plate_appearances_in_field,\n        SUM(stats.plate_appearances_in_field_with_ball_in_play)::USMALLINT AS plate_appearances_in_field_with_ball_in_play,\n        SUM(stats.putouts)::USMALLINT AS putouts,\n        SUM(stats.assists)::USMALLINT AS assists,\n        SUM(stats.errors)::USMALLINT AS errors,\n        SUM(stats.fielders_choices)::USMALLINT AS fielders_choices,\n        SUM(stats.reaching_errors)::USMALLINT AS reaching_errors,\n        SUM(stats.stolen_bases)::USMALLINT AS stolen_bases,\n        SUM(stats.caught_stealing)::USMALLINT AS caught_stealing,\n        SUM(stats.pickoffs)::USMALLINT AS pickoffs,\n        SUM(stats.passed_balls)::USMALLINT AS passed_balls,\n        SUM(stats.double_plays)::USMALLINT AS double_plays,\n        SUM(stats.triple_plays)::USMALLINT AS triple_plays,\n        SUM(stats.ground_ball_double_plays)::USMALLINT AS ground_ball_double_plays\n    FROM {{ ref('game_start_info') }} AS games\n    INNER JOIN {{ ref('team_game_fielding_stats') }} AS stats USING (game_id)\n    GROUP BY 1, 2, 3\n),\n\nfinal AS (\n    SELECT * FROM databank\n    UNION ALL BY NAME\n    SELECT * FROM retrosheet\n)\n\nSELECT * FROM final", "language": "sql", "refs": [{"name": "team_game_start_info", "package": null, "version": null}, {"name": "player_position_team_season_fielding_stats", "package": null, "version": null}, {"name": "game_start_info", "package": null, "version": null}, {"name": "game_start_info", "package": null, "version": null}, {"name": "team_game_fielding_stats", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.baseball_computer.team_game_start_info", "model.baseball_computer.player_position_team_season_fielding_stats", "model.baseball_computer.game_start_info", "model.baseball_computer.team_game_fielding_stats"]}, "compiled_path": null, "contract": {"enforced": true, "alias_types": true, "checksum": "f3db19dbaf6a763b435dced936be8de7a9562c7f5ba841860391f46810a41a52"}, "access": "protected", "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true, "columns": ["season", "team_id", "game_type"]}], "version": null, "latest_version": null, "deprecation_date": null}, "model.baseball_computer.calc_park_factors_basic": {"database": "bc", "schema": "main_models", "name": "calc_park_factors_basic", "resource_type": "model", "package_name": "baseball_computer", "path": "intermediate/park_factors/calc_park_factors_basic.sql", "original_file_path": "models/intermediate/park_factors/calc_park_factors_basic.sql", "unique_id": "model.baseball_computer.calc_park_factors_basic", "fqn": ["baseball_computer", "intermediate", "park_factors", "calc_park_factors_basic"], "alias": "calc_park_factors_basic", "checksum": {"name": "sha256", "checksum": "705af350a250870d571205246278ef21f1453cc638c97282e7ed81e6e0269bf3"}, "config": {"enabled": true, "alias": null, "schema": "models", "database": null, "tags": [], "meta": {"primary_keys": ["park_id", "season", "league"]}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {"park_id": {"name": "park_id", "description": "Retrosheet park ID, 3-character string which identifies the ballpark\n    associated with this entity. See `stg_parks` for full park info.", "meta": {}, "data_type": "park_id", "constraints": [], "quote": null, "tags": []}, "season": {"name": "season", "description": "Year, 4-digit integer", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "league": {"name": "league", "description": "Abbreviation for the league associated with this entity. NULL\n    indicates that a team is not part of a league (e.g. all-star games\n    or Negro League barnstorming teams).", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "sqrt_sample_size": {"name": "sqrt_sample_size", "description": "", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "avg_this_runs_per_inning": {"name": "avg_this_runs_per_inning", "description": "", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "avg_other_runs_per_inning": {"name": "avg_other_runs_per_inning", "description": "", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "basic_park_factor": {"name": "basic_park_factor", "description": "", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}}, "meta": {"primary_keys": ["park_id", "season", "league"]}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "baseball_computer://models/intermediate/park_factors/calc_park_factors_basic.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "models", "contract": {"enforced": true}, "meta": {"primary_keys": ["park_id", "season", "league"]}}, "created_at": 1702281449.312363, "relation_name": "\"bc\".\"main_models\".\"calc_park_factors_basic\"", "raw_code": "{{\n  config(\n    materialized = 'table',\n    )\n}}\n-- This needs to cover games with the lowest possible coverage\n-- (run totals for each team)\nWITH batting_agg AS (\n    SELECT\n        s.park_id,\n        s.season,\n        s.league,\n        s.team_id,\n        s.opponent_id,\n        SUM(r.runs_scored + r.runs_allowed) AS runs,\n        -- Estimate innings for games without box score/pbp data\n        SUM(COALESCE(r.innings_pitched + r.opponent_innings_pitched, 18)) AS innings,\n    FROM {{ ref('team_game_start_info') }} AS s\n    INNER JOIN {{ ref('team_game_results') }} AS r USING (game_id, team_id)\n    WHERE s.game_type = 'RegularSeason'\n        AND NOT s.is_interleague\n    GROUP BY 1, 2, 3, 4, 5\n),\n\naverages AS (\n    SELECT DISTINCT ON (season, league)\n        season,\n        league,\n        SUM(runs) OVER w / SUM(innings) OVER w AS run_rate_league,\n        SUM(runs) OVER () / SUM(innings) OVER () AS run_rate_all,\n        run_rate_league / run_rate_all AS run_factor\n    FROM batting_agg\n    WINDOW w AS (PARTITION BY season, league)\n),\n\nmulti_year_range AS (\n    SELECT\n        ba.park_id,\n        ba.season,\n        ba.league,\n        ba.team_id,\n        ba.opponent_id,\n        -- Adjust to handle wide year-to-year differences\n        -- common in 19th century\n        SUM(ba.runs) OVER w / averages.run_factor AS runs,\n        SUM(ba.innings) OVER w AS innings,\n    FROM batting_agg AS ba\n    INNER JOIN averages USING (season, league)\n    WINDOW w AS (\n        PARTITION BY park_id, league, team_id, opponent_id\n        ORDER BY season\n        ROWS BETWEEN 2 PRECEDING AND CURRENT ROW\n    )\n),\n\nself_joined AS (\n    SELECT\n        this.park_id AS this_park_id,\n        other.park_id AS other_park_id,\n        this.season,\n        this.league,\n        this.team_id,\n        this.opponent_id,\n        -- Restrict avg runs per inning to between 0.1 AND 1\n        GREATEST(0.1, LEAST(1, this.runs / this.innings)) AS this_runs_per_inning,\n        GREATEST(0.1, LEAST(1, other.runs / other.innings)) AS other_runs_per_inning,\n        SQRT(LEAST(this.innings, other.innings)) AS sample_size,\n        SUM(sample_size) OVER (PARTITION BY this_park_id, this.season, this.league) AS sum_sample_size\n    FROM multi_year_range AS this\n    INNER JOIN multi_year_range AS other\n        ON this.park_id != other.park_id\n            AND this.season = other.season\n            AND this.league = other.league\n            AND this.team_id = other.team_id\n            AND this.opponent_id = other.opponent_id\n),\n\nrate_calculation AS (\n    SELECT\n        *,\n        -- Find the park pair with the highest sample size, and upweight all other pairs to match\n        MAX(sum_sample_size) OVER (PARTITION BY this_park_id, season, league) AS scaling_factor,\n        sample_size * (scaling_factor / sum_sample_size) AS sample_weight\n    FROM self_joined\n),\n\nfinal AS (\n    SELECT\n        this_park_id AS park_id,\n        season,\n        league,\n        SUM(sample_size) AS sqrt_sample_size,\n        SUM(this_runs_per_inning * sample_weight) / SUM(sample_weight) AS avg_this_runs_per_inning,\n        SUM(other_runs_per_inning * sample_weight) / SUM(sample_weight) AS avg_other_runs_per_inning,\n        avg_this_runs_per_inning / avg_other_runs_per_inning AS basic_park_factor\n    FROM rate_calculation\n    GROUP BY 1, 2, 3\n)\n\nSELECT * FROM final", "language": "sql", "refs": [{"name": "team_game_start_info", "package": null, "version": null}, {"name": "team_game_results", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.baseball_computer.team_game_start_info", "model.baseball_computer.team_game_results"]}, "compiled_path": null, "contract": {"enforced": true, "alias_types": true, "checksum": "7095da30dc424686eadc030d3e853be2ca4f241defba36b8aea05ff9cc5418bb"}, "access": "protected", "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true, "columns": ["park_id", "season", "league"]}], "version": null, "latest_version": null, "deprecation_date": null}, "model.baseball_computer.park_factors": {"database": "bc", "schema": "main_models", "name": "park_factors", "resource_type": "model", "package_name": "baseball_computer", "path": "intermediate/park_factors/park_factors.sql", "original_file_path": "models/intermediate/park_factors/park_factors.sql", "unique_id": "model.baseball_computer.park_factors", "fqn": ["baseball_computer", "intermediate", "park_factors", "park_factors"], "alias": "park_factors", "checksum": {"name": "sha256", "checksum": "f75112b47e24736a3c0a36722c66893127562b13663c5ea896b9aca5f0154420"}, "config": {"enabled": true, "alias": null, "schema": "models", "database": null, "tags": [], "meta": {"primary_keys": ["park_id", "season", "league"]}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {"season": {"name": "season", "description": "Year, 4-digit integer", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "park_id": {"name": "park_id", "description": "Retrosheet park ID, 3-character string which identifies the ballpark\n    associated with this entity. See `stg_parks` for full park info.", "meta": {}, "data_type": "park_id", "constraints": [], "quote": null, "tags": []}, "league": {"name": "league", "description": "Abbreviation for the league associated with this entity. NULL\n    indicates that a team is not part of a league (e.g. all-star games\n    or Negro League barnstorming teams).", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "basic_park_factor": {"name": "basic_park_factor", "description": "", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "singles_park_factor": {"name": "singles_park_factor", "description": "", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "doubles_park_factor": {"name": "doubles_park_factor", "description": "", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "triples_park_factor": {"name": "triples_park_factor", "description": "", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "home_runs_park_factor": {"name": "home_runs_park_factor", "description": "", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "strikeouts_park_factor": {"name": "strikeouts_park_factor", "description": "", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "walks_park_factor": {"name": "walks_park_factor", "description": "", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "batting_outs_park_factor": {"name": "batting_outs_park_factor", "description": "", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "runs_park_factor": {"name": "runs_park_factor", "description": "", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "balls_in_play_park_factor": {"name": "balls_in_play_park_factor", "description": "", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "trajectory_fly_ball_park_factor": {"name": "trajectory_fly_ball_park_factor", "description": "", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "trajectory_ground_ball_park_factor": {"name": "trajectory_ground_ball_park_factor", "description": "", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "trajectory_line_drive_park_factor": {"name": "trajectory_line_drive_park_factor", "description": "", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "trajectory_pop_up_park_factor": {"name": "trajectory_pop_up_park_factor", "description": "", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "trajectory_unknown_park_factor": {"name": "trajectory_unknown_park_factor", "description": "", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "batted_distance_infield_park_factor": {"name": "batted_distance_infield_park_factor", "description": "", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "batted_distance_outfield_park_factor": {"name": "batted_distance_outfield_park_factor", "description": "", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "batted_distance_unknown_park_factor": {"name": "batted_distance_unknown_park_factor", "description": "", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "batted_angle_left_park_factor": {"name": "batted_angle_left_park_factor", "description": "", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "batted_angle_right_park_factor": {"name": "batted_angle_right_park_factor", "description": "", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "batted_angle_middle_park_factor": {"name": "batted_angle_middle_park_factor", "description": "", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "overall_park_factor": {"name": "overall_park_factor", "description": "", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}}, "meta": {"primary_keys": ["park_id", "season", "league"]}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "baseball_computer://models/intermediate/park_factors/park_factors.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "models", "contract": {"enforced": true}, "meta": {"primary_keys": ["park_id", "season", "league"]}}, "created_at": 1702281449.309991, "relation_name": "\"bc\".\"main_models\".\"park_factors\"", "raw_code": "{% set advanced_cols = dbt_utils.get_filtered_columns_in_relation(from=ref('calc_park_factors_advanced')) %}\n\nWITH final AS (\n    SELECT\n        b.season,\n        b.park_id,\n        b.league,\n        b.basic_park_factor,\n        {% for c in advanced_cols if c.endswith(\"_park_factor\") %}\n            a.{{ c }},\n        {% endfor %}\n        COALESCE(a.runs_park_factor, b.basic_park_factor) AS overall_park_factor\n    FROM {{ ref('calc_park_factors_basic') }} AS b\n    LEFT JOIN {{ ref('calc_park_factors_advanced') }} AS a USING (season, park_id, league)\n)\n\nSELECT * FROM final", "language": "sql", "refs": [{"name": "calc_park_factors_advanced", "package": null, "version": null}, {"name": "calc_park_factors_basic", "package": null, "version": null}, {"name": "calc_park_factors_advanced", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.get_filtered_columns_in_relation"], "nodes": ["model.baseball_computer.calc_park_factors_advanced", "model.baseball_computer.calc_park_factors_basic"]}, "compiled_path": null, "contract": {"enforced": true, "alias_types": true, "checksum": "ddc279155ad22e1d5e955b847eff16c2d413639740b8fb49db6464870fa92c6f"}, "access": "protected", "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true, "columns": ["park_id", "season", "league"]}], "version": null, "latest_version": null, "deprecation_date": null}, "model.baseball_computer.calc_park_factors_advanced": {"database": "bc", "schema": "main_models", "name": "calc_park_factors_advanced", "resource_type": "model", "package_name": "baseball_computer", "path": "intermediate/park_factors/calc_park_factors_advanced.sql", "original_file_path": "models/intermediate/park_factors/calc_park_factors_advanced.sql", "unique_id": "model.baseball_computer.calc_park_factors_advanced", "fqn": ["baseball_computer", "intermediate", "park_factors", "calc_park_factors_advanced"], "alias": "calc_park_factors_advanced", "checksum": {"name": "sha256", "checksum": "d32247d1c4ab9c31fdd2985c51fd7190b89a55421f1c3f239333a67e9d797bf0"}, "config": {"enabled": true, "alias": null, "schema": "models", "database": null, "tags": [], "meta": {"primary_keys": ["park_id", "season", "league"]}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {"park_id": {"name": "park_id", "description": "Retrosheet park ID, 3-character string which identifies the ballpark\n    associated with this entity. See `stg_parks` for full park info.", "meta": {}, "data_type": "park_id", "constraints": [], "quote": null, "tags": []}, "season": {"name": "season", "description": "Year, 4-digit integer", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "league": {"name": "league", "description": "Abbreviation for the league associated with this entity. NULL\n    indicates that a team is not part of a league (e.g. all-star games\n    or Negro League barnstorming teams).", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "sqrt_sample_size": {"name": "sqrt_sample_size", "description": "", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "singles_park_factor": {"name": "singles_park_factor", "description": "", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "doubles_park_factor": {"name": "doubles_park_factor", "description": "", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "triples_park_factor": {"name": "triples_park_factor", "description": "", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "home_runs_park_factor": {"name": "home_runs_park_factor", "description": "", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "strikeouts_park_factor": {"name": "strikeouts_park_factor", "description": "", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "walks_park_factor": {"name": "walks_park_factor", "description": "", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "batting_outs_park_factor": {"name": "batting_outs_park_factor", "description": "", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "runs_park_factor": {"name": "runs_park_factor", "description": "", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "balls_in_play_park_factor": {"name": "balls_in_play_park_factor", "description": "", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "trajectory_fly_ball_park_factor": {"name": "trajectory_fly_ball_park_factor", "description": "", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "trajectory_ground_ball_park_factor": {"name": "trajectory_ground_ball_park_factor", "description": "", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "trajectory_line_drive_park_factor": {"name": "trajectory_line_drive_park_factor", "description": "", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "trajectory_pop_up_park_factor": {"name": "trajectory_pop_up_park_factor", "description": "", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "trajectory_unknown_park_factor": {"name": "trajectory_unknown_park_factor", "description": "", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "batted_distance_infield_park_factor": {"name": "batted_distance_infield_park_factor", "description": "", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "batted_distance_outfield_park_factor": {"name": "batted_distance_outfield_park_factor", "description": "", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "batted_distance_unknown_park_factor": {"name": "batted_distance_unknown_park_factor", "description": "", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "batted_angle_left_park_factor": {"name": "batted_angle_left_park_factor", "description": "", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "batted_angle_right_park_factor": {"name": "batted_angle_right_park_factor", "description": "", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "batted_angle_middle_park_factor": {"name": "batted_angle_middle_park_factor", "description": "", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}}, "meta": {"primary_keys": ["park_id", "season", "league"]}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "baseball_computer://models/intermediate/park_factors/calc_park_factors_advanced.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "models", "contract": {"enforced": true}, "meta": {"primary_keys": ["park_id", "season", "league"]}}, "created_at": 1702281449.314892, "relation_name": "\"bc\".\"main_models\".\"calc_park_factors_advanced\"", "raw_code": "{{\n  config(\n    materialized = 'table',\n    )\n}}\n{% set stats = [\"plate_appearances\", \"singles\", \"doubles\", \"triples\", \n                \"home_runs\", \"strikeouts\", \"walks\", \"batting_outs\", \"runs\", \"balls_in_play\",\n                \"trajectory_fly_ball\", \"trajectory_ground_ball\", \"trajectory_line_drive\", \"trajectory_pop_up\",\n                \"trajectory_unknown\", \"batted_distance_infield\", \"batted_distance_outfield\",\n                \"batted_distance_unknown\", \"batted_angle_left\", \"batted_angle_right\", \"batted_angle_middle\"] %}\n{% set rate_stats = stats[1:] %}\n{% set prior_sample_size = \"1000::SMALLINT\" %}\n\nWITH unique_park_seasons AS (\n    SELECT\n        park_id,\n        season,\n        home_league AS league\n    FROM {{ ref('game_start_info') }}\n    WHERE game_type = 'RegularSeason'\n    GROUP BY 1, 2, 3\n    HAVING COUNT(*) > 25\n),\n\nbatting_agg AS (\n    SELECT\n        states.park_id,\n        states.season,\n        states.league,\n        states.batter_id,\n        states.pitcher_id,\n        {%- for stat in stats %}\n            SUM(batting.{{ stat }})::INT AS {{ stat }},\n        {%- endfor %}\n    FROM {{ ref('event_states_full') }} AS states\n    INNER JOIN {{ ref('event_offense_stats') }} AS batting USING (event_key)\n    -- Restrict to parks with decent sample\n    INNER JOIN unique_park_seasons USING (season, league, park_id)\n    WHERE states.game_type = 'RegularSeason'\n        AND NOT states.is_interleague\n    GROUP BY 1, 2, 3, 4, 5\n),\n\nmulti_year_range AS MATERIALIZED (\n    SELECT\n        park_id,\n        season,\n        league,\n        batter_id,\n        pitcher_id,\n        {%- for stat in stats %}\n            SUM({{ stat }})\n                OVER (\n                    PARTITION BY park_id, batter_id, pitcher_id, league\n                    ORDER BY season\n                    RANGE BETWEEN 2 PRECEDING AND CURRENT ROW\n            )::INT\n            AS {{ stat }},\n        {%- endfor %}\n    FROM batting_agg\n),\n\naverages AS MATERIALIZED (\n    SELECT\n        season,\n        league,\n        {%- for stat in rate_stats %}\n            SUM({{ stat }}) / SUM(plate_appearances) AS avg_{{ stat }}_per_pa,\n        {%- endfor %}\n    FROM multi_year_range\n    GROUP BY 1, 2\n),\n\n-- Give each park pair a batter-pitcher matchup at the league average\n-- with {{ prior_sample_size }} PA per park\nwith_priors AS (\n    SELECT *\n    FROM multi_year_range\n    UNION ALL\n    SELECT\n        unique_park_seasons.park_id,\n        season,\n        league,\n        'MARK' AS batter_id,\n        'PRIOR' AS pitcher_id,\n        {{ prior_sample_size }} AS plate_appearances,\n        {%- for stat in rate_stats %}\n            averages.avg_{{ stat }}_per_pa * {{ prior_sample_size }} AS {{ stat }},\n        {%- endfor %}\n    FROM averages\n    INNER JOIN unique_park_seasons USING (season, league)\n),\n\nself_joined AS (\n    SELECT\n        this.park_id AS this_park_id,\n        other.park_id AS other_park_id,\n        this.season,\n        this.league,  \n        this.batter_id,\n        this.pitcher_id,\n        {%- for stat in stats %}\n            this.{{ stat }} AS this_{{ stat }},\n            other.{{ stat }} AS other_{{ stat }},\n        {%- endfor %}\n        SQRT(LEAST(this_plate_appearances, other_plate_appearances)) AS sample_size,\n        SUM(sample_size) OVER (PARTITION BY this.park_id, other.park_id, this.season, this.league) AS sum_sample_size,\n    FROM with_priors AS this\n    INNER JOIN with_priors AS other\n        ON this.park_id != other.park_id\n            AND this.season = other.season\n            AND this.batter_id = other.batter_id\n            AND this.pitcher_id = other.pitcher_id\n),\n\nrate_calculation AS (\n    SELECT\n        *,\n        {%- for stat in rate_stats %}\n            this_{{ stat }} / this_plate_appearances AS this_{{ stat }}_per_pa,\n            other_{{ stat }} / other_plate_appearances AS other_{{ stat }}_per_pa,\n        {%- endfor %}\n        -- Find the park pair with the highest sample size, and upweight all other pairs to match\n        MAX(sum_sample_size) OVER (PARTITION BY this_park_id, season, league) AS scaling_factor,\n        sample_size * (scaling_factor / sum_sample_size) AS sample_weight\n    FROM self_joined\n),\n\nweighted_average AS (\n    SELECT\n        this_park_id AS park_id,\n        season,\n        league,\n        SUM(sample_size) AS sqrt_sample_size,\n        {%- for stat in rate_stats %}\n            SUM(this_{{ stat }}_per_pa * sample_weight)\n            / SUM(sample_weight) AS avg_this_{{ stat }}_per_pa,\n            SUM(other_{{ stat }}_per_pa * sample_weight)\n            / SUM(sample_weight) AS avg_other_{{ stat }}_per_pa,\n            avg_this_{{ stat }}_per_pa\n            / (1 - avg_this_{{ stat }}_per_pa) AS this_{{ stat }}_odds,\n            avg_other_{{ stat }}_per_pa\n            / (1 - avg_other_{{ stat }}_per_pa) AS other_{{ stat }}_odds,\n            this_{{ stat }}_odds\n            / other_{{ stat }}_odds AS {{ stat }}_park_factor,\n        {%- endfor %}\n    FROM rate_calculation\n    GROUP BY 1, 2, 3\n),\n\nfinal AS (\n    SELECT\n        park_id,\n        season,\n        league,\n        ROUND(sqrt_sample_size, 0) AS sqrt_sample_size,\n        {%- for stat in rate_stats %}\n            ROUND({{ stat }}_park_factor, 2) AS {{ stat }}_park_factor,\n        {%- endfor %}\n    FROM weighted_average\n)\n\nSELECT * FROM final", "language": "sql", "refs": [{"name": "game_start_info", "package": null, "version": null}, {"name": "event_states_full", "package": null, "version": null}, {"name": "event_offense_stats", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.baseball_computer.game_start_info", "model.baseball_computer.event_states_full", "model.baseball_computer.event_offense_stats"]}, "compiled_path": null, "contract": {"enforced": true, "alias_types": true, "checksum": "cd7f9c338fd425f3450c362c6502e387ca0e2f6c27c66a5a3f2abe5e1b7bfe70"}, "access": "protected", "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true, "columns": ["park_id", "season", "league"]}], "version": null, "latest_version": null, "deprecation_date": null}, "model.baseball_computer.event_pitching_flags": {"database": "bc", "schema": "main_models", "name": "event_pitching_flags", "resource_type": "model", "package_name": "baseball_computer", "path": "intermediate/flags/event_pitching_flags.sql", "original_file_path": "models/intermediate/flags/event_pitching_flags.sql", "unique_id": "model.baseball_computer.event_pitching_flags", "fqn": ["baseball_computer", "intermediate", "flags", "event_pitching_flags"], "alias": "event_pitching_flags", "checksum": {"name": "sha256", "checksum": "c967324d359e30b73319274c24269f6b54992a7f410844e9569b3b5fd7d76631"}, "config": {"enabled": true, "alias": null, "schema": "models", "database": null, "tags": [], "meta": {"primary_keys": ["event_key"]}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {"game_id": {"name": "game_id", "description": "Retrosheet game ID, A 12-character string structured as follows:\n\n    - Chars 1-3: Home team ID\n    - Chars 4-11: Date (YYYYMMDD)\n    - Char 12: Game number (0 if only one game was played on that day)\n    \n    Example: MLN195607170", "meta": {}, "data_type": "varchar", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "event_key": {"name": "event_key", "description": "4-byte integer that uniquely identifies an event across the entire\n    dataset (contrast with event_id, which is game-specific). The key\n    is generated deterministically given the same dataset, but it may\n    change when the data is updated. It is guaranteed to follow the \n    order of events within a single game.", "meta": {}, "data_type": "uinteger", "constraints": [], "quote": null, "tags": []}, "event_id": {"name": "event_id", "description": "1-byte integer that uniquely identifies, in order, an event within a single game.\n    This value will remain the same across multiple versions as long as events\n    are not added or removed from that specific game, and should align exactly\n    with the event_id produced by Retrosheet's BEVENT software.", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "previous_pitcher_id": {"name": "previous_pitcher_id", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "pitcher_id": {"name": "pitcher_id", "description": "Retrosheet 8-character person ID for the pitcher associated with the\n    entity.", "meta": {}, "data_type": "varchar", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "starting_pitcher_flag": {"name": "starting_pitcher_flag", "description": "", "meta": {}, "data_type": "boolean", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "bequeathed_runners": {"name": "bequeathed_runners", "description": "Number of runners on base when a pitcher left the game.", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "inherited_runners": {"name": "inherited_runners", "description": "(IR) Number of runners on base when a pitcher entered the game.", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "new_relief_pitcher_flag": {"name": "new_relief_pitcher_flag", "description": "", "meta": {}, "data_type": "boolean", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "pitcher_exit_flag": {"name": "pitcher_exit_flag", "description": "", "meta": {}, "data_type": "boolean", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "pitcher_finish_flag": {"name": "pitcher_finish_flag", "description": "", "meta": {}, "data_type": "boolean", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "starting_pitcher_exit_flag": {"name": "starting_pitcher_exit_flag", "description": "", "meta": {}, "data_type": "boolean", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "starting_pitcher_early_exit_flag": {"name": "starting_pitcher_early_exit_flag", "description": "", "meta": {}, "data_type": "boolean", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "save_situation_start_flag": {"name": "save_situation_start_flag", "description": "", "meta": {}, "data_type": "boolean", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "hold_flag": {"name": "hold_flag", "description": "", "meta": {}, "data_type": "boolean", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "save_flag": {"name": "save_flag", "description": "", "meta": {}, "data_type": "boolean", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "blown_save_flag": {"name": "blown_save_flag", "description": "", "meta": {}, "data_type": "boolean", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "blown_long_save_flag": {"name": "blown_long_save_flag", "description": "", "meta": {}, "data_type": "boolean", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}}, "meta": {"primary_keys": ["event_key"]}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "baseball_computer://models/intermediate/flags/event_pitching_flags.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "models", "contract": {"enforced": true}, "meta": {"primary_keys": ["event_key"]}}, "created_at": 1702281449.319962, "relation_name": "\"bc\".\"main_models\".\"event_pitching_flags\"", "raw_code": "{{\n  config(\n    materialized = 'table',\n    )\n}}\nWITH init_flags AS (\n    SELECT\n        game_id,\n        event_key,\n        event_id,\n        batting_side,\n        pitcher_id,\n        batting_team_margin_start,\n        inning_in_outs_start,\n        runners_count_start,\n        pitching_team_starting_pitcher_id = pitcher_id AS starting_pitcher_flag,\n        LAG(pitcher_id) OVER game_side AS previous_pitcher_id,\n        COALESCE(previous_pitcher_id != pitcher_id, TRUE) AS new_pitcher_flag,\n        -- This specifically excludes finishing pitchers\n        COALESCE(LEAD(pitcher_id) OVER game_side != pitcher_id, FALSE) AS pitcher_exit_flag,\n        LEAD(pitcher_id) OVER game_side IS NULL AS pitcher_finish_flag,\n\n        CASE WHEN new_pitcher_flag\n                THEN runners_count_start\n            ELSE 0\n        END AS inherited_runners,\n\n        CASE WHEN pitcher_exit_flag\n                THEN LEAD(runners_count_start) OVER game_side\n            ELSE 0\n        END AS bequeathed_runners,\n\n        -- A new relief pitcher can enter the game as the first pitcher in rare cases\n        new_pitcher_flag\n        AND pitching_team_starting_pitcher_id != pitcher_id\n        AS new_relief_pitcher_flag,\n\n        COALESCE(new_pitcher_flag AND previous_pitcher_id = pitching_team_starting_pitcher_id, FALSE)\n        AS starting_pitcher_exit_flag,\n\n        starting_pitcher_exit_flag\n        AND inning_in_outs_start < 15\n        AS starting_pitcher_early_exit_flag,\n\n        -- Conditions (necessary but not sufficient) for all 3 save situation types:\n        -- A new pitcher enters the game with a lead unless they are replacing a starter who\n        -- has pitched fewer than 5 innings\n        new_relief_pitcher_flag\n        AND NOT starting_pitcher_early_exit_flag\n        AND batting_team_margin_start < 0\n        AS save_situation_base,\n\n        save_situation_base\n        AND batting_team_margin_start >= -3\n        -- In this situation, the pitcher must pitch a full inning,\n        -- which is only possible if he enters before the 9th inning\n        -- or at the start of a frame (or if he enters without a lead,\n        -- in which case it would not be a save situation)\n        AND (inning_in_outs_start <= 24 OR inning_in_outs_start % 3 = 0)\n        AS save_situation_1_flag,\n\n        save_situation_base\n        AND batting_team_margin_start >= -5\n        -- Tying run is on deck, at the plate, or on the bases\n        AND batting_team_margin_start + runners_count_start + 2 >= 0\n        AS save_situation_2_flag,\n\n        -- There's a bit of an arcane distinction between #1-2 and 3:\n        -- The first two are classified as a \"save situation\" while the third\n        -- makes the pitcher eligible for a save if he finishes the game.\n        -- The main difference is that a pitcher qualfiies for a hold in the first two,\n        -- but not in the third.\n        CASE WHEN save_situation_base\n                THEN inning_in_outs_start <= 18\n        END AS long_save_eligible_start_flag,\n\n        -- This is non-null only on the first event for each new pitcher,\n        -- which allows LAG to work properly in the subsequent query\n        CASE WHEN new_pitcher_flag\n                THEN save_situation_1_flag OR save_situation_2_flag\n        END AS save_situation_start_flag,\n\n        CASE WHEN new_pitcher_flag\n                THEN save_situation_1_flag OR save_situation_2_flag OR long_save_eligible_start_flag\n        END AS save_eligible_start_flag,\n\n        -- These flags only apply if the exiting/finishing pitcher\n        -- came in in a save situation\n        pitcher_exit_flag\n        AND batting_team_margin_end < 0\n        AS conditional_hold_flag,\n\n        pitcher_finish_flag\n        AND batting_team_margin_end < 0\n        AS conditional_save_flag,\n\n        -- A blown save happens as soon as the game is tied, not\n        -- when the pitcher leaves\n        batting_team_margin_end >= 0 AS conditional_blown_save_flag\n\n    FROM {{ ref('event_states_full') }}\n    WINDOW\n        game_side AS (\n            PARTITION BY game_id, batting_side\n            ORDER BY event_id\n        )\n),\n\nsave_flags AS (\n    SELECT\n        *,\n        CASE WHEN LAG(save_situation_start_flag IGNORE NULLS) OVER pitcher_appearance\n                THEN conditional_hold_flag\n            ELSE FALSE\n        END AS hold_flag,\n        CASE WHEN LAG(save_eligible_start_flag IGNORE NULLS) OVER pitcher_appearance\n                THEN conditional_save_flag\n            ELSE FALSE\n        END AS save_flag,\n        -- TODO: Is it possible to blow a 3-inning save? Baseball Reference and MLB.com appear\n        -- to differ - see the Cardinals-Pirates 2022-06-13 game for an example.\n        -- We'll say that it is possible because it's funnier.\n        CASE WHEN LAG(save_eligible_start_flag IGNORE NULLS) OVER pitcher_appearance\n                -- This ensures that only a single event is marked as a blown save,\n                -- and that the event is the one on which the save was blown\n                AND NOT LAG(conditional_blown_save_flag) OVER pitcher_appearance\n                THEN conditional_blown_save_flag\n            ELSE FALSE\n        END AS blown_save_flag,\n        CASE WHEN LAG(long_save_eligible_start_flag IGNORE NULLS) OVER pitcher_appearance\n                AND NOT LAG(save_situation_start_flag IGNORE NULLS) OVER pitcher_appearance\n                AND NOT LAG(conditional_blown_save_flag) OVER pitcher_appearance\n                THEN conditional_blown_save_flag\n            ELSE FALSE\n        END AS blown_long_save_flag,\n    FROM init_flags\n    WINDOW\n        pitcher_appearance AS (\n            PARTITION BY game_id, batting_side, pitcher_id\n            ORDER BY event_id\n        )\n),\n\nfinal AS (\n    SELECT\n        game_id,\n        event_key,\n        event_id,\n        previous_pitcher_id,\n        pitcher_id,\n        starting_pitcher_flag,\n        bequeathed_runners::UTINYINT AS bequeathed_runners,\n        inherited_runners::UTINYINT AS inherited_runners,\n        COALESCE(new_relief_pitcher_flag, FALSE) AS new_relief_pitcher_flag,\n        COALESCE(pitcher_exit_flag, FALSE) AS pitcher_exit_flag,\n        COALESCE(pitcher_finish_flag, FALSE) AS pitcher_finish_flag,\n        COALESCE(starting_pitcher_exit_flag, FALSE) AS starting_pitcher_exit_flag,\n        COALESCE(starting_pitcher_early_exit_flag, FALSE) AS starting_pitcher_early_exit_flag,\n        COALESCE(save_situation_start_flag, FALSE) AS save_situation_start_flag,\n        COALESCE(hold_flag, FALSE) AS hold_flag,\n        COALESCE(save_flag, FALSE) AS save_flag,\n        COALESCE(blown_save_flag, FALSE) AS blown_save_flag,\n        COALESCE(blown_long_save_flag, FALSE) AS blown_long_save_flag,\n    FROM save_flags\n)\n\nSELECT * FROM final", "language": "sql", "refs": [{"name": "event_states_full", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.baseball_computer.event_states_full"]}, "compiled_path": null, "contract": {"enforced": true, "alias_types": true, "checksum": "28d43969b4ee93e91e55ce1287e32134809624c8f008039cdb8b8331eb4c58eb"}, "access": "protected", "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true, "columns": ["event_key"]}], "version": null, "latest_version": null, "deprecation_date": null}, "model.baseball_computer.ml_event_outcomes": {"database": "bc", "schema": "main_models", "name": "ml_event_outcomes", "resource_type": "model", "package_name": "baseball_computer", "path": "intermediate/machine_learning/ml_event_outcomes.sql", "original_file_path": "models/intermediate/machine_learning/ml_event_outcomes.sql", "unique_id": "model.baseball_computer.ml_event_outcomes", "fqn": ["baseball_computer", "intermediate", "machine_learning", "ml_event_outcomes"], "alias": "ml_event_outcomes", "checksum": {"name": "sha256", "checksum": "e60ea312e2a75966334abd15a92313363888db8a09666db8f411d66ae7b0d75f"}, "config": {"enabled": true, "alias": null, "schema": "models", "database": null, "tags": [], "meta": {"primary_keys": ["event_key"]}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {"event_key": {"name": "event_key", "description": "4-byte integer that uniquely identifies an event across the entire\n    dataset (contrast with event_id, which is game-specific). The key\n    is generated deterministically given the same dataset, but it may\n    change when the data is updated. It is guaranteed to follow the \n    order of events within a single game.", "meta": {}, "data_type": "uinteger", "constraints": [], "quote": null, "tags": []}, "outcome_has_batting_bin": {"name": "outcome_has_batting_bin", "description": "", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "outcome_is_in_play_bin": {"name": "outcome_is_in_play_bin", "description": "", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "outcome_batted_trajectory_cat": {"name": "outcome_batted_trajectory_cat", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "outcome_batted_location_cat": {"name": "outcome_batted_location_cat", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "outcome_plate_appearance_cat": {"name": "outcome_plate_appearance_cat", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "outcome_baserunning_cat": {"name": "outcome_baserunning_cat", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "outcome_runs_following_num": {"name": "outcome_runs_following_num", "description": "", "meta": {}, "data_type": "float", "constraints": [], "quote": null, "tags": []}, "outcome_is_win_bin": {"name": "outcome_is_win_bin", "description": "", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "generic_sample_weight": {"name": "generic_sample_weight", "description": "", "meta": {}, "data_type": "float", "constraints": [], "quote": null, "tags": []}, "plate_appearance_sample_weight": {"name": "plate_appearance_sample_weight", "description": "", "meta": {}, "data_type": "float", "constraints": [], "quote": null, "tags": []}, "in_play_sample_weight": {"name": "in_play_sample_weight", "description": "", "meta": {}, "data_type": "float", "constraints": [], "quote": null, "tags": []}, "trajectory_sample_weight": {"name": "trajectory_sample_weight", "description": "", "meta": {}, "data_type": "float", "constraints": [], "quote": null, "tags": []}, "location_sample_weight": {"name": "location_sample_weight", "description": "", "meta": {}, "data_type": "float", "constraints": [], "quote": null, "tags": []}, "baserunning_play_sample_weight": {"name": "baserunning_play_sample_weight", "description": "", "meta": {}, "data_type": "float", "constraints": [], "quote": null, "tags": []}, "win_sample_weight": {"name": "win_sample_weight", "description": "", "meta": {}, "data_type": "float", "constraints": [], "quote": null, "tags": []}}, "meta": {"primary_keys": ["event_key"]}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "baseball_computer://models/intermediate/machine_learning/ml_event_outcomes.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "models", "contract": {"enforced": true}, "meta": {"primary_keys": ["event_key"]}}, "created_at": 1702281449.325469, "relation_name": "\"bc\".\"main_models\".\"ml_event_outcomes\"", "raw_code": "{{\n  config(\n    materialized = 'table',\n    )\n}}\nWITH pa_map AS (\n    SELECT\n        e.game_id,\n        e.season,\n        e.event_key,\n        e.outs_on_play,\n        e.batting_side,\n        SUM(e.runs_on_play) OVER rest_of_inning::FLOAT AS outcome_runs_following_num,\n        result_types.result_category AS pa_result,\n        result_types.is_in_play,\n        bb.trajectory,\n        bb.location_depth,\n        bb.location_side,\n    FROM {{ ref('stg_events') }} AS e\n    LEFT JOIN {{ ref('seed_plate_appearance_result_types')}} AS result_types USING (plate_appearance_result)\n    LEFT JOIN {{ ref('calc_batted_ball_type') }} AS bb USING (event_key)\n    WINDOW\n        rest_of_inning AS (\n            PARTITION BY e.game_id, e.inning, e.frame\n            ORDER BY e.event_id\n            ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING\n        )\n),\n\nbaserunning_map AS (\n    SELECT\n        e.event_key,\n        LIST(\n            CASE \n                WHEN is_out THEN play_types.result_category_out\n                ELSE play_types.result_category_safe\n            END\n            ORDER BY play_types.priority\n        )[1] AS baserunning_result,\n    FROM {{ ref('stg_event_baserunners') }} e\n    INNER JOIN {{ ref('seed_baserunning_play_types') }} AS play_types USING (baserunning_play_type)\n    GROUP BY e.event_key\n),\n\njoined AS (\n    SELECT\n        event_key,\n        pa_map.season,\n        (pa_map.pa_result IS NOT NULL)::UTINYINT AS outcome_has_batting_bin,\n        COALESCE(pa_map.is_in_play, FALSE)::UTINYINT AS outcome_is_in_play_bin,\n        COALESCE(pa_map.pa_result, 'Other') AS outcome_plate_appearance_cat,\n        COALESCE(baserunning_map.baserunning_result, 'Other') AS outcome_baserunning_cat,\n        COALESCE(pa_map.trajectory, 'Other') AS outcome_batted_trajectory_cat,\n        COALESCE(pa_map.location_depth || '-' || pa_map.location_side, 'Other') AS outcome_batted_location_cat,\n        pa_map.outcome_runs_following_num,\n        COALESCE(game_end.winning_side = pa_map.batting_side, FALSE)::UTINYINT AS outcome_is_win_bin,\n        COALESCE(pa_map.trajectory != 'Unknown', FALSE)::UTINYINT AS has_known_contact,\n        COALESCE('Unknown' NOT IN (pa_map.location_depth, pa_map.location_side), FALSE)::UTINYINT AS has_known_location,\n        (game_end.winning_side IS NOT NULL)::UTINYINT AS is_full_game,\n        1 / (COUNT(*) OVER (PARTITION BY GREATEST(1913, pa_map.season)) / COUNT(*) OVER ()::FLOAT) AS season_sample_factor,\n    FROM pa_map\n    LEFT JOIN baserunning_map USING (event_key)\n    INNER JOIN {{ ref('game_results') }} AS game_end USING (game_id)\n    WHERE pa_map.pa_result IS NOT NULL OR baserunning_map.baserunning_result IS NOT NULL\n),\n\nadd_weights AS (\n    SELECT\n        event_key,\n        outcome_has_batting_bin,\n        outcome_is_in_play_bin,\n        outcome_batted_trajectory_cat,\n        outcome_batted_location_cat,\n        outcome_plate_appearance_cat,\n        outcome_baserunning_cat,\n        outcome_runs_following_num,\n        outcome_is_win_bin,\n        season_sample_factor / AVG(season_sample_factor) OVER ()::FLOAT AS generic_sample_weight,\n        generic_sample_weight * outcome_has_batting_bin::FLOAT AS plate_appearance_sample_weight,\n        generic_sample_weight * outcome_has_batting_bin::FLOAT AS in_play_sample_weight,\n        generic_sample_weight * has_known_contact::FLOAT AS trajectory_sample_weight,\n        generic_sample_weight * has_known_location::FLOAT AS location_sample_weight,\n        generic_sample_weight * (1 - outcome_has_batting_bin)::FLOAT AS baserunning_play_sample_weight,\n        generic_sample_weight * is_full_game::FLOAT AS win_sample_weight,\n    FROM joined\n\n),\n\nfinal AS (\n    SELECT * REPLACE (\n        plate_appearance_sample_weight / AVG(plate_appearance_sample_weight) OVER ()::FLOAT AS plate_appearance_sample_weight,\n        in_play_sample_weight / AVG(in_play_sample_weight) OVER ()::FLOAT AS in_play_sample_weight,\n        trajectory_sample_weight / AVG(trajectory_sample_weight) OVER ()::FLOAT AS trajectory_sample_weight,\n        location_sample_weight / AVG(location_sample_weight) OVER ()::FLOAT AS location_sample_weight,\n        baserunning_play_sample_weight / AVG(baserunning_play_sample_weight) OVER ()::FLOAT AS baserunning_play_sample_weight,\n        win_sample_weight / AVG(win_sample_weight) OVER ()::FLOAT AS win_sample_weight,\n    )\n    FROM add_weights\n)\n\nSELECT *\nFROM final\nORDER BY RANDOM()", "language": "sql", "refs": [{"name": "stg_events", "package": null, "version": null}, {"name": "seed_plate_appearance_result_types", "package": null, "version": null}, {"name": "calc_batted_ball_type", "package": null, "version": null}, {"name": "stg_event_baserunners", "package": null, "version": null}, {"name": "seed_baserunning_play_types", "package": null, "version": null}, {"name": "game_results", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.baseball_computer.stg_events", "seed.baseball_computer.seed_plate_appearance_result_types", "model.baseball_computer.calc_batted_ball_type", "model.baseball_computer.stg_event_baserunners", "seed.baseball_computer.seed_baserunning_play_types", "model.baseball_computer.game_results"]}, "compiled_path": null, "contract": {"enforced": true, "alias_types": true, "checksum": "bcd51fa5251a182eaf17d67897f31da7a77d3b3ce6e7c61fbd33405e4657d67a"}, "access": "protected", "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true, "columns": ["event_key"]}], "version": null, "latest_version": null, "deprecation_date": null}, "model.baseball_computer.ml_features": {"database": "bc", "schema": "main_models", "name": "ml_features", "resource_type": "model", "package_name": "baseball_computer", "path": "intermediate/machine_learning/ml_features.sql", "original_file_path": "models/intermediate/machine_learning/ml_features.sql", "unique_id": "model.baseball_computer.ml_features", "fqn": ["baseball_computer", "intermediate", "machine_learning", "ml_features"], "alias": "ml_features", "checksum": {"name": "sha256", "checksum": "cfcbfffb977028116fea745fc306ec311486d9edcfabca030fa60c9896f950ae"}, "config": {"enabled": true, "alias": null, "schema": "models", "database": null, "tags": [], "meta": {"primary_keys": ["event_key"]}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {"event_key": {"name": "event_key", "description": "4-byte integer that uniquely identifies an event across the entire\n    dataset (contrast with event_id, which is game-specific). The key\n    is generated deterministically given the same dataset, but it may\n    change when the data is updated. It is guaranteed to follow the \n    order of events within a single game.", "meta": {}, "data_type": "uinteger", "constraints": [], "quote": null, "tags": []}, "outcome_has_batting_bin": {"name": "outcome_has_batting_bin", "description": "", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "outcome_is_in_play_bin": {"name": "outcome_is_in_play_bin", "description": "", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "outcome_batted_trajectory_cat": {"name": "outcome_batted_trajectory_cat", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "outcome_batted_location_cat": {"name": "outcome_batted_location_cat", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "outcome_plate_appearance_cat": {"name": "outcome_plate_appearance_cat", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "outcome_baserunning_cat": {"name": "outcome_baserunning_cat", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "outcome_runs_following_num": {"name": "outcome_runs_following_num", "description": "", "meta": {}, "data_type": "float", "constraints": [], "quote": null, "tags": []}, "outcome_is_win_bin": {"name": "outcome_is_win_bin", "description": "", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "generic_sample_weight": {"name": "generic_sample_weight", "description": "", "meta": {}, "data_type": "float", "constraints": [], "quote": null, "tags": []}, "plate_appearance_sample_weight": {"name": "plate_appearance_sample_weight", "description": "", "meta": {}, "data_type": "float", "constraints": [], "quote": null, "tags": []}, "in_play_sample_weight": {"name": "in_play_sample_weight", "description": "", "meta": {}, "data_type": "float", "constraints": [], "quote": null, "tags": []}, "trajectory_sample_weight": {"name": "trajectory_sample_weight", "description": "", "meta": {}, "data_type": "float", "constraints": [], "quote": null, "tags": []}, "location_sample_weight": {"name": "location_sample_weight", "description": "", "meta": {}, "data_type": "float", "constraints": [], "quote": null, "tags": []}, "baserunning_play_sample_weight": {"name": "baserunning_play_sample_weight", "description": "", "meta": {}, "data_type": "float", "constraints": [], "quote": null, "tags": []}, "win_sample_weight": {"name": "win_sample_weight", "description": "", "meta": {}, "data_type": "float", "constraints": [], "quote": null, "tags": []}, "season_num": {"name": "season_num", "description": "", "meta": {}, "data_type": "float", "constraints": [], "quote": null, "tags": []}, "day_of_year_num": {"name": "day_of_year_num", "description": "", "meta": {}, "data_type": "float", "constraints": [], "quote": null, "tags": []}, "inning_num": {"name": "inning_num", "description": "", "meta": {}, "data_type": "float", "constraints": [], "quote": null, "tags": []}, "frame_num": {"name": "frame_num", "description": "", "meta": {}, "data_type": "float", "constraints": [], "quote": null, "tags": []}, "is_night_game_num": {"name": "is_night_game_num", "description": "", "meta": {}, "data_type": "float", "constraints": [], "quote": null, "tags": []}, "score_batting_team_num": {"name": "score_batting_team_num", "description": "", "meta": {}, "data_type": "float", "constraints": [], "quote": null, "tags": []}, "score_fielding_team_num": {"name": "score_fielding_team_num", "description": "", "meta": {}, "data_type": "float", "constraints": [], "quote": null, "tags": []}, "park_cat": {"name": "park_cat", "description": "", "meta": {}, "data_type": "park_id", "constraints": [], "quote": null, "tags": []}, "game_type_cat": {"name": "game_type_cat", "description": "", "meta": {}, "data_type": "game_type", "constraints": [], "quote": null, "tags": []}, "league_cat": {"name": "league_cat", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "base_state_cat": {"name": "base_state_cat", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "batter_player": {"name": "batter_player", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "runner_first_player": {"name": "runner_first_player", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "runner_second_player": {"name": "runner_second_player", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "runner_third_player": {"name": "runner_third_player", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "pitcher_player": {"name": "pitcher_player", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "meta_train_test_split": {"name": "meta_train_test_split", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}}, "meta": {"primary_keys": ["event_key"]}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "baseball_computer://models/intermediate/machine_learning/ml_features.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "models", "contract": {"enforced": true}, "meta": {"primary_keys": ["event_key"]}}, "created_at": 1702281449.3317602, "relation_name": "\"bc\".\"main_models\".\"ml_features\"", "raw_code": "{{\n  config(\n    materialized=\"table\"\n    )\n}}\nWITH final AS (\n    SELECT\n        o.event_key,\n        o.outcome_has_batting_bin,\n        o.outcome_is_in_play_bin,\n        o.outcome_batted_trajectory_cat,\n        o.outcome_batted_location_cat,\n        o.outcome_plate_appearance_cat,\n        o.outcome_baserunning_cat,\n        o.outcome_runs_following_num,\n        o.outcome_is_win_bin,\n        o.generic_sample_weight,\n        o.plate_appearance_sample_weight,\n        o.in_play_sample_weight,\n        o.trajectory_sample_weight,\n        o.location_sample_weight,\n        o.baserunning_play_sample_weight,\n        o.win_sample_weight,\n        e.season::FLOAT AS season_num,\n        DATE_PART('dayofyear', e.date)::FLOAT AS day_of_year_num,\n        LEAST(e.inning_start, 10)::FLOAT AS inning_num,\n        CASE WHEN e.frame_start = 'Top' THEN 0 ELSE 1 END::FLOAT AS frame_num,\n        CASE WHEN e.time_of_day = 'Night' THEN 1 ELSE 0 END::FLOAT AS is_night_game_num,\n        CASE\n            WHEN e.batting_side = 'Home'\n                THEN e.score_home_start\n            ELSE e.score_away_start\n        END::FLOAT AS score_batting_team_num,\n        CASE\n            WHEN e.batting_side = 'Home'\n                THEN e.score_away_start\n            ELSE e.score_home_start\n        END::FLOAT AS score_fielding_team_num,\n        e.park_id AS park_cat,\n        e.game_type AS game_type_cat,\n        COALESCE(e.league, 'None') AS league_cat,\n        e.base_state_start::VARCHAR AS base_state_cat,\n        e.batter_id AS batter_player,\n        COALESCE(e.runner_first_id_start, 'N/A') AS runner_first_player,\n        COALESCE(e.runner_second_id_start, 'N/A') AS runner_second_player,\n        COALESCE(e.runner_third_id_start, 'N/A') AS runner_third_player,\n        e.pitcher_id AS pitcher_player,\n        CASE\n            WHEN HASH(e.game_id)::HUGEINT % 100 BETWEEN 0 AND 97 THEN 'TRAIN'\n            ELSE 'TEST'\n        END AS meta_train_test_split,\n\n    FROM {{ ref('ml_event_outcomes') }} AS o\n    -- This is really an inner join but using o as the base table\n    -- preserves the random order\n    LEFT JOIN {{ ref('event_states_full') }} AS e USING (event_key)\n)\n\nSELECT * FROM final", "language": "sql", "refs": [{"name": "ml_event_outcomes", "package": null, "version": null}, {"name": "event_states_full", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.baseball_computer.ml_event_outcomes", "model.baseball_computer.event_states_full"]}, "compiled_path": null, "contract": {"enforced": true, "alias_types": true, "checksum": "f85e4277ea01df5fede55d10fffca3164d5a0fcf03c23c5d2f05720278a0cc7a"}, "access": "protected", "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true, "columns": ["event_key"]}], "version": null, "latest_version": null, "deprecation_date": null}, "model.baseball_computer.linear_weights": {"database": "bc", "schema": "main_models", "name": "linear_weights", "resource_type": "model", "package_name": "baseball_computer", "path": "intermediate/expectancy/linear_weights.sql", "original_file_path": "models/intermediate/expectancy/linear_weights.sql", "unique_id": "model.baseball_computer.linear_weights", "fqn": ["baseball_computer", "intermediate", "expectancy", "linear_weights"], "alias": "linear_weights", "checksum": {"name": "sha256", "checksum": "b380ee163debcc3a96a90170aed1c9e5127adf8a7749f01af111b3935925478e"}, "config": {"enabled": true, "alias": null, "schema": "models", "database": null, "tags": [], "meta": {"primary_keys": ["season", "league", "play"]}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {"season": {"name": "season", "description": "Year, 4-digit integer", "meta": {}, "data_type": "smallint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "league": {"name": "league", "description": "Abbreviation for the league associated with this entity. NULL\n    indicates that a team is not part of a league (e.g. all-star games\n    or Negro League barnstorming teams).", "meta": {}, "data_type": "varchar", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "play": {"name": "play", "description": "", "meta": {}, "data_type": "varchar", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "play_category": {"name": "play_category", "description": "", "meta": {}, "data_type": "varchar", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "average_run_value": {"name": "average_run_value", "description": "", "meta": {}, "data_type": "double", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "average_win_value": {"name": "average_win_value", "description": "", "meta": {}, "data_type": "double", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "relative_run_value": {"name": "relative_run_value", "description": "", "meta": {}, "data_type": "double", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "std_dev_run_value": {"name": "std_dev_run_value", "description": "", "meta": {}, "data_type": "double", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "std_dev_win_value": {"name": "std_dev_win_value", "description": "", "meta": {}, "data_type": "double", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "is_imputed": {"name": "is_imputed", "description": "", "meta": {}, "data_type": "boolean", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}}, "meta": {"primary_keys": ["season", "league", "play"]}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "baseball_computer://models/intermediate/expectancy/linear_weights.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "models", "contract": {"enforced": true}, "meta": {"primary_keys": ["season", "league", "play"]}}, "created_at": 1702281449.341658, "relation_name": "\"bc\".\"main_models\".\"linear_weights\"", "raw_code": "{{\n  config(\n    materialized = 'table',\n    )\n}}\nWITH valid_leagues AS (\n    SELECT\n        season,\n        league,\n        AVG(runs_scored) AS average_runs_scored,\n    FROM {{ ref('team_game_results') }}\n    GROUP BY 1, 2\n),\n\nunion_plays AS (\n    SELECT\n        e.event_key,\n        CASE WHEN cat.result_category = 'InPlayOut' AND e.outs_on_play > 1\n                THEN 'DoublePlay'\n            ELSE cat.result_category\n        END AS play,\n        'BATTING' AS play_category,\n    FROM {{ ref('stg_events') }} AS e\n    INNER JOIN {{ ref('seed_plate_appearance_result_types') }} AS cat USING (plate_appearance_result)\n    -- Only include plays that didn't have simultaneous baserunning plays,\n    -- or plays with an atypical number of outs recorded for its type (e.g. single with an out)\n    WHERE e.event_key NOT IN (\n        SELECT event_key FROM {{ ref('stg_event_baserunners') }} WHERE baserunning_play_type IS NOT NULL\n    )\n    UNION ALL BY NAME\n    -- Only consider baserunning plays with a single event for now.\n    -- We can still handle these cases downstream by assigning the value\n    -- to each item of the event, e.g. 2xSB for a double steal, which is probably\n    -- wrong but not too far off.\n    SELECT\n        e.event_key,\n        FIRST(CASE WHEN e.is_out THEN cat.result_category_out ELSE cat.result_category_safe END) AS play,\n        FIRST('BASERUNNING') AS play_category,\n    FROM {{ ref('stg_event_baserunners') }} AS e\n    INNER JOIN {{ ref('seed_baserunning_play_types') }} AS cat USING (baserunning_play_type)\n    WHERE e.event_key NOT IN (\n            SELECT event_key FROM {{ ref('stg_events') }} WHERE plate_appearance_result IS NOT NULL\n        )\n    GROUP BY 1\n    HAVING COUNT(*) = 1\n),\n\njoined AS (\n    SELECT\n        trans.season,\n        trans.league,\n        union_plays.play,\n        union_plays.play_category,\n        trans.expected_runs_change,\n        trans.expected_batting_win_change\n    FROM union_plays\n    INNER JOIN {{ ref('event_transition_values') }} AS trans USING (event_key)\n),\n\nagg_specific AS (\n    SELECT DISTINCT ON (season, league, play)\n        season,\n        league,\n        play,\n        play_category,\n        AVG(expected_runs_change) OVER all_league AS average_run_value_all,\n        AVG(expected_runs_change) OVER result AS average_run_value_result,\n        STDDEV_SAMP(expected_runs_change) OVER result AS std_dev_run_value_result,\n        AVG(expected_batting_win_change) OVER all_league AS average_win_value_all,\n        AVG(expected_batting_win_change) OVER result AS average_win_value_result,\n        STDDEV_SAMP(expected_batting_win_change) OVER result AS std_dev_win_value_result,\n        FALSE AS is_imputed\n    FROM joined\n    WINDOW\n        all_league AS (PARTITION BY season, league),\n        result AS (PARTITION BY season, league, play)\n    QUALIFY COUNT(*) OVER result > 100\n),\n\ngeneric_values AS (\n    SELECT DISTINCT ON (play)\n        play,\n        play_category,\n        AVG(expected_runs_change) OVER () AS average_run_value_all,\n        AVG(expected_runs_change) OVER result AS average_run_value_result,\n        STDDEV_SAMP(expected_runs_change) OVER result AS std_dev_run_value_result,\n        AVG(expected_batting_win_change) OVER () AS average_win_value_all,\n        AVG(expected_batting_win_change) OVER result AS average_win_value_result,\n        STDDEV_SAMP(expected_batting_win_change) OVER result AS std_dev_win_value_result,\n    FROM joined\n    WINDOW result AS (PARTITION BY play)\n),\n\nimputed AS (\n    SELECT\n        valid_leagues.*,\n        generic_values.*,\n        TRUE AS is_imputed\n    FROM generic_values\n    CROSS JOIN valid_leagues\n    LEFT JOIN agg_specific USING (season, league, play)\n    WHERE agg_specific.season IS NULL\n),\n\nunioned AS (\n    SELECT * FROM agg_specific\n    UNION ALL BY NAME\n    SELECT * FROM imputed\n),\n\nfinal AS (\n    SELECT\n        season,\n        COALESCE(league, 'N/A') AS league,\n        play,\n        play_category,\n        ROUND(average_run_value_result - average_run_value_all, 3) AS average_run_value,\n        ROUND(average_win_value_result - average_win_value_all, 3) AS average_win_value,\n        average_run_value_result\n            - FIRST(CASE WHEN play = 'InPlayOut' THEN average_run_value_result END IGNORE NULLS) OVER w\n        AS relative_run_value,\n        ROUND(std_dev_run_value_result, 3) AS std_dev_run_value,\n        ROUND(std_dev_win_value_result, 3) AS std_dev_win_value,\n        is_imputed\n    FROM unioned\n    WINDOW w AS (PARTITION BY season, league)\n)\n\nSELECT * FROM final", "language": "sql", "refs": [{"name": "team_game_results", "package": null, "version": null}, {"name": "stg_events", "package": null, "version": null}, {"name": "seed_plate_appearance_result_types", "package": null, "version": null}, {"name": "stg_event_baserunners", "package": null, "version": null}, {"name": "stg_event_baserunners", "package": null, "version": null}, {"name": "seed_baserunning_play_types", "package": null, "version": null}, {"name": "stg_events", "package": null, "version": null}, {"name": "event_transition_values", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.baseball_computer.team_game_results", "model.baseball_computer.stg_events", "seed.baseball_computer.seed_plate_appearance_result_types", "model.baseball_computer.stg_event_baserunners", "seed.baseball_computer.seed_baserunning_play_types", "model.baseball_computer.event_transition_values"]}, "compiled_path": null, "contract": {"enforced": true, "alias_types": true, "checksum": "33676798dd8ca5fc0c6cfc30c32e33609ab9861484675b00bb28723c76cc86d1"}, "access": "protected", "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true, "columns": ["season", "league", "play"]}], "version": null, "latest_version": null, "deprecation_date": null}, "model.baseball_computer.event_transition_values": {"database": "bc", "schema": "main_models", "name": "event_transition_values", "resource_type": "model", "package_name": "baseball_computer", "path": "intermediate/expectancy/event_transition_values.sql", "original_file_path": "models/intermediate/expectancy/event_transition_values.sql", "unique_id": "model.baseball_computer.event_transition_values", "fqn": ["baseball_computer", "intermediate", "expectancy", "event_transition_values"], "alias": "event_transition_values", "checksum": {"name": "sha256", "checksum": "fb6a5dc6d122f2d106b1663256c8cc5739e3d99ffbafd7e698381299e3c0631b"}, "config": {"enabled": true, "alias": null, "schema": "models", "database": null, "tags": [], "meta": {"primary_keys": ["event_key"]}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {"event_key": {"name": "event_key", "description": "4-byte integer that uniquely identifies an event across the entire\n    dataset (contrast with event_id, which is game-specific). The key\n    is generated deterministically given the same dataset, but it may\n    change when the data is updated. It is guaranteed to follow the \n    order of events within a single game.", "meta": {}, "data_type": "uinteger", "constraints": [], "quote": null, "tags": []}, "run_expectancy_start_key": {"name": "run_expectancy_start_key", "description": "", "meta": {}, "data_type": "varchar", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "run_expectancy_end_key": {"name": "run_expectancy_end_key", "description": "", "meta": {}, "data_type": "varchar", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "win_expectancy_start_key": {"name": "win_expectancy_start_key", "description": "", "meta": {}, "data_type": "varchar", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "win_expectancy_end_key": {"name": "win_expectancy_end_key", "description": "", "meta": {}, "data_type": "varchar", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "season": {"name": "season", "description": "Year, 4-digit integer", "meta": {}, "data_type": "smallint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "league": {"name": "league", "description": "Abbreviation for the league associated with this entity. NULL\n    indicates that a team is not part of a league (e.g. all-star games\n    or Negro League barnstorming teams).", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "game_type": {"name": "game_type", "description": "The context in which a game took place, such as the regular season,\n    a specific playoff round, or an all-star game.", "meta": {}, "data_type": "game_type", "constraints": [], "quote": null, "tags": []}, "inning_start": {"name": "inning_start", "description": "The inning at the start of the event.", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "frame_start": {"name": "frame_start", "description": "Top or bottom of the inning at the start of the play.", "meta": {}, "data_type": "frame", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "truncated_home_margin_start": {"name": "truncated_home_margin_start", "description": "", "meta": {}, "data_type": "tinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "batting_side": {"name": "batting_side", "description": "The side that was batting when the entity took place.", "meta": {}, "data_type": "side", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "base_state_start": {"name": "base_state_start", "description": "The base state at the start of the event, a base-10 representation of a binary number. See `base_state` for more info.", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "outs_start": {"name": "outs_start", "description": "The number of outs at the start of the event.", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "inning_end": {"name": "inning_end", "description": "The inning at the end of the event.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "frame_end": {"name": "frame_end", "description": "Top or bottom of the inning at the end of the play.", "meta": {}, "data_type": "frame", "constraints": [], "quote": null, "tags": []}, "truncated_home_margin_end": {"name": "truncated_home_margin_end", "description": "", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "base_state_end": {"name": "base_state_end", "description": "The base state at the end of the event, a base-10 representation of a binary number. See `base_state` for more info.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "outs_end": {"name": "outs_end", "description": "The number of outs at the end of the event.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "runs_on_play": {"name": "runs_on_play", "description": "The total number of runs that scored during the event.\n    Mutually exclusive with all other events.", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "game_end_flag": {"name": "game_end_flag", "description": "Whether the event was the last event of the game.", "meta": {}, "data_type": "boolean", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "expected_runs_change": {"name": "expected_runs_change", "description": "", "meta": {}, "data_type": "decimal(18,3)", "constraints": [], "quote": null, "tags": []}, "expected_home_win_change": {"name": "expected_home_win_change", "description": "", "meta": {}, "data_type": "decimal(14,3)", "constraints": [], "quote": null, "tags": []}, "expected_batting_win_change": {"name": "expected_batting_win_change", "description": "", "meta": {}, "data_type": "decimal(14,3)", "constraints": [], "quote": null, "tags": []}}, "meta": {"primary_keys": ["event_key"]}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "baseball_computer://models/intermediate/expectancy/event_transition_values.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "models", "contract": {"enforced": true}, "meta": {"primary_keys": ["event_key"]}}, "created_at": 1702281449.348638, "relation_name": "\"bc\".\"main_models\".\"event_transition_values\"", "raw_code": "{{\n  config(\n    materialized = 'table',\n    )\n}}\nWITH final AS (\n    SELECT\n        states.event_key,\n        states.run_expectancy_start_key,\n        states.run_expectancy_end_key,\n        states.win_expectancy_start_key,\n        states.win_expectancy_end_key,\n        states.season,\n        states.league,\n        states.game_type,\n        states.inning_start,\n        states.frame_start,\n        states.truncated_home_margin_start,\n        states.batting_side,\n        states.base_state_start,\n        states.outs_start,\n        states.inning_end,\n        states.frame_end,\n        states.truncated_home_margin_end,\n        states.base_state_end,\n        states.outs_end,\n        states.runs_on_play,\n        states.game_end_flag,\n        ROUND(\n            states.runs_on_play\n            + COALESCE(runs_end.avg_runs_scored, 0)\n            - runs_start.avg_runs_scored,\n            3\n        ) AS expected_runs_change,\n        ROUND(\n            CASE\n                WHEN states.game_end_flag AND states.truncated_home_margin_end > 0\n                    THEN 1 - wins_start.home_win_rate\n                WHEN states.game_end_flag AND states.truncated_home_margin_end < 0\n                    THEN 0 - wins_start.home_win_rate\n                WHEN states.game_end_flag\n                    THEN NULL\n                ELSE wins_end.home_win_rate - wins_start.home_win_rate\n            END,\n            3\n        ) AS expected_home_win_change,\n        CASE WHEN states.batting_side = 'Home' THEN expected_home_win_change\n            ELSE -expected_home_win_change\n        END AS expected_batting_win_change\n    FROM {{ ref('event_states_full') }} AS states\n    LEFT JOIN {{ ref('run_expectancy_matrix') }} AS runs_start\n        ON runs_start.run_expectancy_key = states.run_expectancy_start_key\n    LEFT JOIN {{ ref('run_expectancy_matrix') }} AS runs_end\n        ON runs_end.run_expectancy_key = states.run_expectancy_end_key\n    LEFT JOIN {{ ref('win_expectancy_matrix' ) }} AS wins_start\n        ON wins_start.win_expectancy_key = states.win_expectancy_start_key\n    LEFT JOIN {{ ref('win_expectancy_matrix' ) }} AS wins_end\n        ON wins_end.win_expectancy_key = states.win_expectancy_end_key\n    WHERE states.game_type = 'RegularSeason'\n        -- We can include plays from called games, but not the very last one\n        AND NOT (states.game_end_flag AND states.truncated_home_margin_end = 0)\n)\n\nSELECT * FROM final", "language": "sql", "refs": [{"name": "event_states_full", "package": null, "version": null}, {"name": "run_expectancy_matrix", "package": null, "version": null}, {"name": "run_expectancy_matrix", "package": null, "version": null}, {"name": "win_expectancy_matrix", "package": null, "version": null}, {"name": "win_expectancy_matrix", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.baseball_computer.event_states_full", "model.baseball_computer.run_expectancy_matrix", "model.baseball_computer.win_expectancy_matrix"]}, "compiled_path": null, "contract": {"enforced": true, "alias_types": true, "checksum": "84a6b6c9a10b2646d0d4b1d05b39e50a988c44936ca31c74ac613633cfda6021"}, "access": "protected", "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true, "columns": ["event_key"]}], "version": null, "latest_version": null, "deprecation_date": null}, "model.baseball_computer.unknown_fielding_play_shares": {"database": "bc", "schema": "main_models", "name": "unknown_fielding_play_shares", "resource_type": "model", "package_name": "baseball_computer", "path": "intermediate/expectancy/unknown_fielding_play_shares.sql", "original_file_path": "models/intermediate/expectancy/unknown_fielding_play_shares.sql", "unique_id": "model.baseball_computer.unknown_fielding_play_shares", "fqn": ["baseball_computer", "intermediate", "expectancy", "unknown_fielding_play_shares"], "alias": "unknown_fielding_play_shares", "checksum": {"name": "sha256", "checksum": "73c19b649a6ba63c356dc46df75265156d3804ae6aa234f6f4df2a57372e18e8"}, "config": {"enabled": true, "alias": null, "schema": "models", "database": null, "tags": [], "meta": {"primary_keys": ["game_id", "player_id", "fielding_position"]}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {"game_id": {"name": "game_id", "description": "Retrosheet game ID, A 12-character string structured as follows:\n\n    - Chars 1-3: Home team ID\n    - Chars 4-11: Date (YYYYMMDD)\n    - Char 12: Game number (0 if only one game was played on that day)\n    \n    Example: MLN195607170", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "team_id": {"name": "team_id", "description": "Retrosheet team ID, 3-character string which identifies the team\n    that a franchise was playing as at a given time.", "meta": {}, "data_type": "team_id", "constraints": [], "quote": null, "tags": []}, "fielding_position": {"name": "fielding_position", "description": "A 1-byte integer for the traditional 1-9 fielder identification, along with additional\n    values for unknown fielders and batting-specific positions. Depending on the\n    context, this value may be NULL for batting positions.\n    ```\n    0 - Unknown\n    1 - Pitcher\n    2 - Catcher\n    3 - First baseman\n    4 - Second baseman\n    5 - Third baseman\n    6 - Shortstop\n    7 - Left fielder\n    8 - Center fielder\n    9 - Right fielder\n    10 - Designated Hitter\n    11 - Pinch Hitter\n    12 - Pinch Runner\n    ```", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "player_id": {"name": "player_id", "description": "Retrosheet 8-character person ID for a player, which consists of\n    the first four characters of the last name, the first character\n    of the first name, and then three digits to disambiguate between\n    players with the same five characters.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "estimated_unknown_plays": {"name": "estimated_unknown_plays", "description": "", "meta": {}, "data_type": "double", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "estimated_unknown_plays_team": {"name": "estimated_unknown_plays_team", "description": "", "meta": {}, "data_type": "double", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "play_share": {"name": "play_share", "description": "", "meta": {}, "data_type": "double", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "play_share_subset_assists": {"name": "play_share_subset_assists", "description": "", "meta": {}, "data_type": "double", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "play_share_subset_putouts": {"name": "play_share_subset_putouts", "description": "", "meta": {}, "data_type": "double", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}}, "meta": {"primary_keys": ["game_id", "player_id", "fielding_position"]}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "baseball_computer://models/intermediate/expectancy/unknown_fielding_play_shares.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "models", "contract": {"enforced": true}, "meta": {"primary_keys": ["game_id", "player_id", "fielding_position"]}}, "created_at": 1702281449.334771, "relation_name": "\"bc\".\"main_models\".\"unknown_fielding_play_shares\"", "raw_code": "{{\n  config(\n    materialized = 'table',\n    )\n}}\nWITH incomplete_games AS (\n    SELECT\n        game_id,\n        team_id\n    FROM {{ ref('team_game_fielding_stats') }}\n    WHERE unknown_putouts > 0\n),\n\nunassisted_putout_rates AS (\n    SELECT\n        f.fielding_position,\n        SUM(f.putouts) AS total,\n        SUM(f.putouts - f.assisted_putouts) AS unassisted,\n        unassisted / total AS unassisted_putout_rate\n    FROM {{ ref('calc_fielding_play_agg') }} f\n    INNER JOIN {{ ref('stg_events') }} AS e USING (event_key)\n    WHERE e.plate_appearance_result = 'InPlayOut'\n        AND e.batted_to_fielder > 0\n        AND e.outs_on_play = 1\n    GROUP BY 1\n),\n\nteam_totals AS (\n    SELECT\n        game_id,\n        team_id,\n        GREATEST(SUM(surplus_box_putouts), 0) AS total_surplus_putouts,\n        GREATEST(SUM(CASE WHEN fielding_position > 6 THEN surplus_box_putouts END), 0) AS surplus_of_putouts,\n        GREATEST(SUM(CASE WHEN fielding_position < 6 THEN surplus_box_assists END), 0) AS surplus_if_assists,\n        GREATEST(total_surplus_putouts - surplus_of_putouts - surplus_if_assists, 0) AS surplus_if_unassisted_putouts\n    FROM {{ ref('player_position_game_fielding_stats') }}\n    INNER JOIN incomplete_games USING (game_id, team_id)\n    GROUP BY 1, 2\n),\n\n-- Outfielder shares: surplus putouts\n-- Infielder shares: surplus assists + surplus unassisted putouts\n-- Need to estimate the total number of surplus unassisted infield putouts\n-- method: total unknown putouts - OF surplus putouts - IF surplus assists\n-- Then we need to estimate the share that went to each infielder\n-- First adjust each number based historical rate of unassisted putouts\n-- on in-play outs at each position\n-- Then split based on the normalized total\ncalc_shares AS (\n    SELECT\n        p.*,\n        \n        CASE WHEN fielding_position <= 6 AND t.surplus_if_unassisted_putouts > 0\n                THEN p.surplus_box_putouts / t.surplus_if_unassisted_putouts\n            ELSE 0\n        END AS unadjusted_if_putout_rate,\n        GREATEST(unadjusted_if_putout_rate * r.unassisted_putout_rate, 0) AS adjusted_if_putout_rate,\n        COALESCE(adjusted_if_putout_rate / SUM(adjusted_if_putout_rate) OVER w, 0) AS if_putout_share,\n\n        GREATEST(\n            CASE WHEN fielding_position > 6\n                    THEN p.surplus_box_putouts\n                ELSE (if_putout_share * t.surplus_if_unassisted_putouts)\n            END, 0\n        ) AS estimated_unknown_plays_putouts,\n        GREATEST(\n            CASE WHEN fielding_position > 6\n                    THEN 0\n                ELSE p.surplus_box_assists\n            END, 0\n        ) AS estimated_unknown_plays_assists,\n        estimated_unknown_plays_putouts + estimated_unknown_plays_assists AS estimated_unknown_plays\n    FROM {{ ref('player_position_game_fielding_stats') }} AS p\n    INNER JOIN team_totals AS t USING (game_id, team_id)\n    INNER JOIN unassisted_putout_rates AS r USING (fielding_position)\n    WINDOW w AS (PARTITION BY game_id, team_id)\n),\n\nfinal AS (\n    SELECT\n        game_id,\n        team_id,\n        fielding_position,\n        player_id,\n        estimated_unknown_plays,\n        SUM(estimated_unknown_plays) OVER w AS estimated_unknown_plays_team,\n        estimated_unknown_plays / estimated_unknown_plays_team AS play_share,\n        estimated_unknown_plays_assists / estimated_unknown_plays_team AS play_share_subset_assists,\n        estimated_unknown_plays_putouts / estimated_unknown_plays_team AS play_share_subset_putouts,\n    FROM calc_shares\n    WHERE estimated_unknown_plays > 0\n    WINDOW w AS (PARTITION BY game_id, team_id)\n)\n\nSELECT * FROM final", "language": "sql", "refs": [{"name": "team_game_fielding_stats", "package": null, "version": null}, {"name": "calc_fielding_play_agg", "package": null, "version": null}, {"name": "stg_events", "package": null, "version": null}, {"name": "player_position_game_fielding_stats", "package": null, "version": null}, {"name": "player_position_game_fielding_stats", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.baseball_computer.team_game_fielding_stats", "model.baseball_computer.calc_fielding_play_agg", "model.baseball_computer.stg_events", "model.baseball_computer.player_position_game_fielding_stats"]}, "compiled_path": null, "contract": {"enforced": true, "alias_types": true, "checksum": "a8daf692fd0e7fa22bd980498a8daf29ea6a3c35cd238c987cf5d80a2c2c210a"}, "access": "protected", "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true, "columns": ["game_id", "player_id", "fielding_position"]}], "version": null, "latest_version": null, "deprecation_date": null}, "model.baseball_computer.leverage_index": {"database": "bc", "schema": "main_models", "name": "leverage_index", "resource_type": "model", "package_name": "baseball_computer", "path": "intermediate/expectancy/leverage_index.sql", "original_file_path": "models/intermediate/expectancy/leverage_index.sql", "unique_id": "model.baseball_computer.leverage_index", "fqn": ["baseball_computer", "intermediate", "expectancy", "leverage_index"], "alias": "leverage_index", "checksum": {"name": "sha256", "checksum": "ef43dacd1056a675bf6216077edb33345e9dd1327800917e55b5585bf047c3be"}, "config": {"enabled": true, "alias": null, "schema": "models", "database": null, "tags": [], "meta": {"primary_keys": ["win_expectancy_start_key"]}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {"win_expectancy_start_key": {"name": "win_expectancy_start_key", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "win_leverage_unscaled": {"name": "win_leverage_unscaled", "description": "", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "run_leverage_unscaled": {"name": "run_leverage_unscaled", "description": "", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "win_leverage_index": {"name": "win_leverage_index", "description": "", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "run_leverage_index": {"name": "run_leverage_index", "description": "", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "agg_sample_size": {"name": "agg_sample_size", "description": "", "meta": {}, "data_type": "hugeint", "constraints": [], "quote": null, "tags": []}}, "meta": {"primary_keys": ["win_expectancy_start_key"]}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "baseball_computer://models/intermediate/expectancy/leverage_index.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "models", "contract": {"enforced": true}, "meta": {"primary_keys": ["win_expectancy_start_key"]}}, "created_at": 1702281449.337943, "relation_name": "\"bc\".\"main_models\".\"leverage_index\"", "raw_code": "{{\n  config(\n    materialized = 'table',\n    )\n}}\nWITH trans AS (\n    SELECT\n        win_expectancy_start_key,\n        win_expectancy_end_key,\n        COUNT(*) AS sample_size,\n        -- We use the win key instead of the run key because we aren't\n        -- including league/time in the leverage calc\n        AVG(ABS(expected_home_win_change)) AS absolute_expected_home_win_change,\n        AVG(ABS(expected_runs_change)) AS absolute_expected_runs_change,\n    FROM {{ ref('event_transition_values') }}\n    GROUP BY 1, 2\n),\n\nweighted AS (\n    SELECT\n        win_expectancy_start_key,\n        SUM(sample_size) AS agg_sample_size,\n        -- Weighted averages\n        SUM(absolute_expected_home_win_change * sample_size)\n        / SUM(sample_size) AS win_leverage_unscaled,\n        SUM(absolute_expected_runs_change * sample_size)\n        / SUM(sample_size) AS run_leverage_unscaled,\n        -- Note that this is a window function applied after the aggregation\n        SUM(win_leverage_unscaled * agg_sample_size) OVER ()\n        / SUM(agg_sample_size) OVER () AS avg_win_leverage_unscaled,\n        SUM(run_leverage_unscaled * agg_sample_size) OVER ()\n        / SUM(agg_sample_size) OVER () AS avg_run_leverage_unscaled,\n    FROM trans\n    GROUP BY 1\n),\n\nfinal AS (\n    SELECT\n        win_expectancy_start_key,\n        ROUND(win_leverage_unscaled, 3) AS win_leverage_unscaled,\n        ROUND(run_leverage_unscaled, 3) AS run_leverage_unscaled,\n        ROUND(win_leverage_unscaled / avg_win_leverage_unscaled, 2) AS win_leverage_index,\n        ROUND(run_leverage_unscaled / avg_run_leverage_unscaled, 2) AS run_leverage_index,\n        agg_sample_size\n    FROM weighted\n)\n\nSELECT * FROM final", "language": "sql", "refs": [{"name": "event_transition_values", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.baseball_computer.event_transition_values"]}, "compiled_path": null, "contract": {"enforced": true, "alias_types": true, "checksum": "f407ec24ee6a880ada4ff728e2cb2ff92ba25b8b28cf9b84075abe0007596dea"}, "access": "protected", "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true, "columns": ["win_expectancy_start_key"]}], "version": null, "latest_version": null, "deprecation_date": null}, "model.baseball_computer.win_expectancy_matrix": {"database": "bc", "schema": "main_models", "name": "win_expectancy_matrix", "resource_type": "model", "package_name": "baseball_computer", "path": "intermediate/expectancy/win_expectancy_matrix.sql", "original_file_path": "models/intermediate/expectancy/win_expectancy_matrix.sql", "unique_id": "model.baseball_computer.win_expectancy_matrix", "fqn": ["baseball_computer", "intermediate", "expectancy", "win_expectancy_matrix"], "alias": "win_expectancy_matrix", "checksum": {"name": "sha256", "checksum": "b5806d763001d681185003b8cd506ca2fe6632ddc3001e02a7df3b4fab4481f1"}, "config": {"enabled": true, "alias": null, "schema": "models", "database": null, "tags": [], "meta": {"primary_keys": ["win_expectancy_key"]}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {"win_expectancy_key": {"name": "win_expectancy_key", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "inning": {"name": "inning", "description": "The inning during which the entity took place.", "meta": {}, "data_type": "varchar", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "frame": {"name": "frame", "description": "Top or bottom of the inning.", "meta": {}, "data_type": "frame", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "truncated_home_margin": {"name": "truncated_home_margin", "description": "", "meta": {}, "data_type": "tinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "outs": {"name": "outs", "description": "", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "base_state": {"name": "base_state", "description": "", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "home_win_rate": {"name": "home_win_rate", "description": "", "meta": {}, "data_type": "decimal(4,3)", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}}, "meta": {"primary_keys": ["win_expectancy_key"]}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "baseball_computer://models/intermediate/expectancy/win_expectancy_matrix.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "models", "contract": {"enforced": true}, "meta": {"primary_keys": ["win_expectancy_key"]}}, "created_at": 1702281449.369278, "relation_name": "\"bc\".\"main_models\".\"win_expectancy_matrix\"", "raw_code": "{{ \n    config(\n        materialized = 'table',\n    )\n}}\nWITH states AS (\n    SELECT\n        -- Treat 9th and later as the same to increase sample size\n        -- TODO: Put add upstream `truncated_inning` col\n        win_expectancy_start_key AS win_expectancy_key,\n        inning_group_start AS inning,\n        truncated_home_margin_start AS truncated_home_margin,\n        frame_start AS frame,\n        outs_start AS outs,\n        base_state_start AS base_state,\n        -- Buckets for merging low-sample-size states, see next query for integration\n        ROUND(CASE\n            WHEN home_margin_start = 0 THEN 0\n            WHEN home_margin_start BETWEEN 1 AND 3 THEN 1\n            WHEN home_margin_start BETWEEN 4 AND 6 THEN 2\n            WHEN home_margin_start >= 7 THEN 3\n            WHEN home_margin_start BETWEEN -3 AND -1 THEN -1\n            WHEN home_margin_start BETWEEN -6 AND -4 THEN -2\n            ELSE -3\n        END, 0) AS home_margin_bucket,\n        base_state_start > 0 AS any_runners_on,\n        LAST(score_home_end::INT - score_away_end > 0) OVER rest_of_game AS home_team_win\n    FROM {{ ref('event_states_full') }}\n    -- Exclude the rare cases where the home team bats first\n    -- TODO: Should also exclude/differentiate any bullshit extra innings runner on 2nd stuff\n    WHERE bat_first_side = 'Away'\n    WINDOW\n        rest_of_game AS (\n            PARTITION BY game_id\n            ORDER BY event_id\n            ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING\n        )\n    -- Eliminate ties or games that lasted under 9 innings\n    QUALIFY LAST(score_away_end::INT - score_home_end !=0) OVER rest_of_game\n        AND LAST(inning) OVER rest_of_game >= 9\n\n),\n\nagg AS (\n    SELECT DISTINCT ON (win_expectancy_key)\n        win_expectancy_key,\n        inning,\n        frame,\n        truncated_home_margin,\n        outs,\n        base_state,\n        SUM(home_team_win::NUMERIC) OVER narrow AS home_team_wins_narrow,\n        COUNT(*) OVER narrow AS sample_size_narrow,\n        SUM(home_team_win::NUMERIC) OVER broad / COUNT(*) OVER broad AS win_rate_broad,\n    FROM states\n    WINDOW\n        narrow AS (\n            PARTITION BY win_expectancy_key\n        ),\n        broad AS (\n            PARTITION BY inning, frame, home_margin_bucket, any_runners_on\n        )\n),\n\nfinal AS (\n    SELECT\n        win_expectancy_key,\n        inning,\n        frame,\n        truncated_home_margin,\n        outs,\n        base_state,\n        -- Use the \"broad\" category as a prior to smooth out rare states\n        ROUND(\n            (home_team_wins_narrow + win_rate_broad * 10) / (sample_size_narrow + 10), 3\n        )::DECIMAL(4, 3) AS home_win_rate,\n    FROM agg\n)\n\nSELECT * FROM final\nORDER BY home_win_rate DESC", "language": "sql", "refs": [{"name": "event_states_full", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.baseball_computer.event_states_full"]}, "compiled_path": null, "contract": {"enforced": true, "alias_types": true, "checksum": "ab16ae8afa351c31f70fcdadf40469cb508a75b6bf87a713e1ffb7b61b05038a"}, "access": "protected", "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true, "columns": ["win_expectancy_key"]}], "version": null, "latest_version": null, "deprecation_date": null}, "model.baseball_computer.run_expectancy_matrix": {"database": "bc", "schema": "main_models", "name": "run_expectancy_matrix", "resource_type": "model", "package_name": "baseball_computer", "path": "intermediate/expectancy/run_expectancy_matrix.sql", "original_file_path": "models/intermediate/expectancy/run_expectancy_matrix.sql", "unique_id": "model.baseball_computer.run_expectancy_matrix", "fqn": ["baseball_computer", "intermediate", "expectancy", "run_expectancy_matrix"], "alias": "run_expectancy_matrix", "checksum": {"name": "sha256", "checksum": "e45d70a653dc5f859cbc2695f812bc625b2ebbfde7fd5e0838ff68ebf2f6bfb7"}, "config": {"enabled": true, "alias": null, "schema": "models", "database": null, "tags": [], "meta": {"primary_keys": ["run_expectancy_key"]}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {"run_expectancy_key": {"name": "run_expectancy_key", "description": "", "meta": {}, "data_type": "varchar", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "league_group": {"name": "league_group", "description": "", "meta": {}, "data_type": "varchar", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "season_group": {"name": "season_group", "description": "", "meta": {}, "data_type": "bigint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "outs": {"name": "outs", "description": "", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "base_state": {"name": "base_state", "description": "", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "avg_runs_scored": {"name": "avg_runs_scored", "description": "", "meta": {}, "data_type": "decimal(18,3)", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "variance_runs_scored": {"name": "variance_runs_scored", "description": "", "meta": {}, "data_type": "decimal(18,3)", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "sample_size": {"name": "sample_size", "description": "", "meta": {}, "data_type": "bigint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}}, "meta": {"primary_keys": ["run_expectancy_key"]}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "baseball_computer://models/intermediate/expectancy/run_expectancy_matrix.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "models", "contract": {"enforced": true}, "meta": {"primary_keys": ["run_expectancy_key"]}}, "created_at": 1702281449.366533, "relation_name": "\"bc\".\"main_models\".\"run_expectancy_matrix\"", "raw_code": "{{ \n    config(\n        materialized = 'table',\n    )\n}}\nWITH next_runs AS (\n    SELECT\n        run_expectancy_start_key AS run_expectancy_key,\n        league_group,\n        season_group,\n        outs_start,\n        base_state_start,\n        SUM(runs_on_play) OVER rest_of_inning AS runs_scored,\n    FROM {{ ref('event_states_full') }}\n    WHERE game_type = 'RegularSeason'\n        -- Final/extra innings have atypical expectencies\n        AND inning_start < 9\n    WINDOW\n        rest_of_inning AS (\n            PARTITION BY game_id, frame_start, inning_start\n            ORDER BY event_id\n            ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING\n        )\n    QUALIFY NOT BOOL_OR(truncated_frame_flag) OVER rest_of_inning\n),\n\nfinal AS (\n    SELECT\n        run_expectancy_key,\n        ANY_VALUE(league_group) AS league_group,\n        ANY_VALUE(season_group) AS season_group,\n        ANY_VALUE(outs_start) AS outs,\n        ANY_VALUE(base_state_start) AS base_state,\n        ROUND(AVG(runs_scored), 2)::DECIMAL AS avg_runs_scored,\n        ROUND(COALESCE(VAR_SAMP(runs_scored), 2), 0)::DECIMAL AS variance_runs_scored,\n        COUNT(*) AS sample_size\n    FROM next_runs\n    GROUP BY 1\n)\n\nSELECT * FROM final", "language": "sql", "refs": [{"name": "event_states_full", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.baseball_computer.event_states_full"]}, "compiled_path": null, "contract": {"enforced": true, "alias_types": true, "checksum": "bfde43c4969f93b82f88887a083d2e813b0fd3885f06979cafe568e66474de7d"}, "access": "protected", "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true, "columns": ["run_expectancy_key"]}], "version": null, "latest_version": null, "deprecation_date": null}, "model.baseball_computer.player_game_appearances": {"database": "bc", "schema": "main_models", "name": "player_game_appearances", "resource_type": "model", "package_name": "baseball_computer", "path": "intermediate/player_game_level/player_game_appearances.sql", "original_file_path": "models/intermediate/player_game_level/player_game_appearances.sql", "unique_id": "model.baseball_computer.player_game_appearances", "fqn": ["baseball_computer", "intermediate", "player_game_level", "player_game_appearances"], "alias": "player_game_appearances", "checksum": {"name": "sha256", "checksum": "938aeac39ec2147d0e8e1ae9baad80f525fd4102cb107820250b6535f8045554"}, "config": {"enabled": true, "alias": null, "schema": "models", "database": null, "tags": [], "meta": {"primary_keys": ["game_id", "player_id"]}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {"game_id": {"name": "game_id", "description": "Retrosheet game ID, A 12-character string structured as follows:\n\n    - Chars 1-3: Home team ID\n    - Chars 4-11: Date (YYYYMMDD)\n    - Char 12: Game number (0 if only one game was played on that day)\n    \n    Example: MLN195607170", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "player_id": {"name": "player_id", "description": "Retrosheet 8-character person ID for a player, which consists of\n    the first four characters of the last name, the first character\n    of the first name, and then three digits to disambiguate between\n    players with the same five characters.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "side": {"name": "side", "description": "The side, Home or Away, associated with the entity. A generic way\n    of identifying the two teams playing in a game.", "meta": {}, "data_type": "side", "constraints": [], "quote": null, "tags": []}, "games_started": {"name": "games_started", "description": "(GS) Number of games started by a player.", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "games_pinch_hit": {"name": "games_pinch_hit", "description": "", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "games_pinch_run": {"name": "games_pinch_run", "description": "", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "games_defensive_sub": {"name": "games_defensive_sub", "description": "", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "games_ohtani_rule": {"name": "games_ohtani_rule", "description": "", "meta": {}, "data_type": "integer", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "lineup_position": {"name": "lineup_position", "description": "1-byte integer for the traditional 1-9 batting order position, along with\n    10 for the pitcher in games with a DH. With very few exceptions, a player will\n    only appear in one lineup position per game. The exceptions are from courtesy\n    runners and the Ohtani rule.", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "first_fielding_position": {"name": "first_fielding_position", "description": "", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "fielding_positions": {"name": "fielding_positions", "description": "", "meta": {}, "data_type": "utinyint[]", "constraints": [], "quote": null, "tags": []}}, "meta": {"primary_keys": ["game_id", "player_id"]}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "baseball_computer://models/intermediate/player_game_level/player_game_appearances.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "models", "contract": {"enforced": true}, "meta": {"primary_keys": ["game_id", "player_id"]}}, "created_at": 1702281449.372962, "relation_name": "\"bc\".\"main_models\".\"player_game_appearances\"", "raw_code": "{{\n  config(\n    materialized = 'table',\n    )\n}}\nWITH event_based AS (\n    SELECT game_id\n    FROM {{ ref('stg_games') }}\n    WHERE source_type = 'PlayByPlay'\n),\n\nbox_offense AS (\n    SELECT\n        bat.game_id,\n        bat.batter_id AS player_id,\n        bat.side,\n        bat.lineup_position,\n        CASE\n            WHEN bat.nth_player_at_position = 1 THEN 'Starter'\n            WHEN pinch_hit.pinch_hitter_id IS NOT NULL THEN 'PinchHitter'\n            WHEN pinch_run.pinch_runner_id IS NOT NULL THEN 'PinchRunner'\n            ELSE 'DefensiveSubstitution'\n        END AS entered_game_as,\n        bat.nth_player_at_position AS position_order\n    FROM {{ ref('stg_box_score_batting_lines') }} AS bat\n    LEFT JOIN {{ ref('stg_box_score_pinch_hitting_lines') }} AS pinch_hit\n        ON pinch_hit.game_id = bat.game_id\n            AND pinch_hit.pinch_hitter_id = bat.batter_id\n            AND pinch_hit.side = bat.side\n    LEFT JOIN {{ ref('stg_box_score_pinch_running_lines') }} AS pinch_run\n        ON pinch_run.game_id = bat.game_id\n            AND pinch_run.pinch_runner_id = bat.batter_id\n            AND pinch_run.side = bat.side\n),\n\noffense_union AS (\n    SELECT\n        game_id,\n        player_id,\n        side,\n        lineup_position,\n        entered_game_as,\n        -- We're just using this to order so gaps don't matter\n        start_event_id AS position_order\n    FROM {{ ref('stg_game_lineup_appearances') }}\n    UNION ALL\n    SELECT\n        game_id,\n        player_id,\n        side,\n        lineup_position,\n        entered_game_as,\n        position_order\n    FROM box_offense\n    WHERE game_id NOT IN (SELECT game_id FROM event_based)\n),\n\nfielding_union AS (\n    SELECT\n        game_id,\n        player_id,\n        side,\n        fielding_position,\n        start_event_id AS position_order\n    FROM {{ ref('stg_game_fielding_appearances') }}\n    UNION ALL\n    SELECT\n        game_id,\n        fielder_id AS player_id,\n        side,\n        fielding_position,\n        nth_position_played_by_player AS position_order\n    FROM {{ ref('stg_box_score_fielding_lines') }}\n    WHERE game_id NOT IN (SELECT game_id FROM event_based)\n),\n\noffense_agg AS (\n    SELECT\n        game_id,\n        player_id,\n        ANY_VALUE(side) AS side,\n        BOOL_OR(entered_game_as = 'Starter')::UTINYINT AS games_started,\n        BOOL_OR(entered_game_as = 'PinchHitter')::UTINYINT AS games_pinch_hit,\n        BOOL_OR(entered_game_as = 'PinchRunner')::UTINYINT AS games_pinch_run,\n        BOOL_OR(entered_game_as = 'DefensiveSubstitution')::UTINYINT AS games_defensive_sub,\n        -- Just choose first sub location - We can track courtesy runner situations somewhere else\n        FIRST(lineup_position) AS lineup_position\n    -- Ignore pitcher in DH lineups\n    FROM offense_union\n    WHERE lineup_position > 0\n    GROUP BY 1, 2\n),\n\nfielding_agg AS (\n    SELECT\n        game_id,\n        player_id,\n        ANY_VALUE(side) AS side,\n        -- Sort by fielding position to choose pitcher first in event of Ohtani rule\n        LIST(fielding_position ORDER BY position_order, fielding_position) AS fielding_positions,\n        (BOOL_OR(fielding_position = 1 AND position_order = 1)\n            AND BOOL_OR(fielding_position = 10 AND position_order = 1) \n        )::UTINYINT AS games_ohtani_rule\n    FROM fielding_union\n    -- Keep DH, but ignore PH/PR\n    WHERE fielding_position BETWEEN 1 AND 10\n    GROUP BY 1, 2 \n),\n\nfinal AS (\n    SELECT\n        game_id,\n        player_id,\n        offense_agg.side,\n        offense_agg.games_started,\n        offense_agg.games_pinch_hit,\n        offense_agg.games_pinch_run,\n        offense_agg.games_defensive_sub,\n        COALESCE(fielding_agg.games_ohtani_rule, 0) AS games_ohtani_rule,\n        offense_agg.lineup_position,\n        fielding_agg.fielding_positions[1] AS first_fielding_position,\n        fielding_agg.fielding_positions,\n    FROM offense_agg\n    LEFT JOIN fielding_agg USING (game_id, player_id)\n)\n\nSELECT * FROM final", "language": "sql", "refs": [{"name": "stg_games", "package": null, "version": null}, {"name": "stg_box_score_batting_lines", "package": null, "version": null}, {"name": "stg_box_score_pinch_hitting_lines", "package": null, "version": null}, {"name": "stg_box_score_pinch_running_lines", "package": null, "version": null}, {"name": "stg_game_lineup_appearances", "package": null, "version": null}, {"name": "stg_game_fielding_appearances", "package": null, "version": null}, {"name": "stg_box_score_fielding_lines", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.baseball_computer.stg_games", "model.baseball_computer.stg_box_score_batting_lines", "model.baseball_computer.stg_box_score_pinch_hitting_lines", "model.baseball_computer.stg_box_score_pinch_running_lines", "model.baseball_computer.stg_game_lineup_appearances", "model.baseball_computer.stg_game_fielding_appearances", "model.baseball_computer.stg_box_score_fielding_lines"]}, "compiled_path": null, "contract": {"enforced": true, "alias_types": true, "checksum": "fa040dd00924e587649669971f7f1ae5f6c7c959594df7f90eab07bc47dab3dd"}, "access": "protected", "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true, "columns": ["game_id", "player_id"]}], "version": null, "latest_version": null, "deprecation_date": null}, "model.baseball_computer.player_game_offense_stats": {"database": "bc", "schema": "main_models", "name": "player_game_offense_stats", "resource_type": "model", "package_name": "baseball_computer", "path": "intermediate/player_game_level/player_game_offense_stats.sql", "original_file_path": "models/intermediate/player_game_level/player_game_offense_stats.sql", "unique_id": "model.baseball_computer.player_game_offense_stats", "fqn": ["baseball_computer", "intermediate", "player_game_level", "player_game_offense_stats"], "alias": "player_game_offense_stats", "checksum": {"name": "sha256", "checksum": "63e3e7bcdd16c5e7743dbdd71bae3ebe6a4780bf044ce5a601406d2acd10f335"}, "config": {"enabled": true, "alias": null, "schema": "models", "database": null, "tags": [], "meta": {"primary_keys": ["game_id", "player_id", "team_id"]}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {"game_id": {"name": "game_id", "description": "Retrosheet game ID, A 12-character string structured as follows:\n\n    - Chars 1-3: Home team ID\n    - Chars 4-11: Date (YYYYMMDD)\n    - Char 12: Game number (0 if only one game was played on that day)\n    \n    Example: MLN195607170", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "team_id": {"name": "team_id", "description": "Retrosheet team ID, 3-character string which identifies the team\n    that a franchise was playing as at a given time.", "meta": {}, "data_type": "team_id", "constraints": [], "quote": null, "tags": []}, "player_id": {"name": "player_id", "description": "Retrosheet 8-character person ID for a player, which consists of\n    the first four characters of the last name, the first character\n    of the first name, and then three digits to disambiguate between\n    players with the same five characters.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "plate_appearances": {"name": "plate_appearances", "description": "(PA) Number of times a batter came to the plate, including walks, hit by pitches, sacrifices, and at-bats.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "at_bats": {"name": "at_bats", "description": "(AB) Number of plate appearances that ended in either a hit or a non-sacrifice out.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "hits": {"name": "hits", "description": "(H) Number of times a batter reached base safely without an error or fielder's choice.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "singles": {"name": "singles", "description": "(1B) Number of hits in which a batter reached first base.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "doubles": {"name": "doubles", "description": "(2B) Number of hits in which a batter reached second base without the help of an error or an attempted\n    play on another runner.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "triples": {"name": "triples", "description": "(3B) Number of hits in which a batter reached third base without the help of an error or an attempted\n    play on another runner.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "home_runs": {"name": "home_runs", "description": "(HR) Number of hits in which a batter reached home plate without the help of an error or an attempted\n    play on another runner (usually by hitting the ball out of the park).", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "total_bases": {"name": "total_bases", "description": "(TB) Number of bases a batter reached safely without the help of an error or an attempted\n    play on another runner. HR * 4 + 3B * 3 + 2B * 2 + (H - HR - 3B - 2B)", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "strikeouts": {"name": "strikeouts", "description": "(K, SO) Number of times a batter struck out. This includes plays in which a batter reached base on\n    a dropped third strike.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "walks": {"name": "walks", "description": "(BB, occasionally W) Number of times a batter reaches base on called balls out of the strike zone\n    (Four balls for all of MLB history after the 1880s).", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "intentional_walks": {"name": "intentional_walks", "description": "(IBB, occasionally IW) Number of times a batter was intentionally walked. This number may be missing or undercounted\n    in earlier years, as intentional walks were not officially tracked until 1955.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "hit_by_pitches": {"name": "hit_by_pitches", "description": "(HBP) Number of times a batter was awarded first base after being hit by a pitch.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "sacrifice_hits": {"name": "sacrifice_hits", "description": "(SH) Number of times a batter performed a sacrifice bunt to advance another runner.\n    A bunt may count as a sacrifice even if the batter reaches base safely.\n    Unsuccessful attempts are not counted, nor are non-sacrifice bunts.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "sacrifice_flies": {"name": "sacrifice_flies", "description": "(SF) Number of times a batter hit a fly ball that resulted in an out (or error),\n    but allowed a runner to score on the throw.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "reached_on_errors": {"name": "reached_on_errors", "description": "(ROE) Number of times a batter reached base safely due to an error.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "reached_on_interferences": {"name": "reached_on_interferences", "description": "Number of times a batter was awarded first base for being illegally hindered\n    by a fielder, usually the catcher.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "inside_the_park_home_runs": {"name": "inside_the_park_home_runs", "description": "Number of times a batter hit a home run without the ball leaving the field of play.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "ground_rule_doubles": {"name": "ground_rule_doubles", "description": "Number of times a batter was awarded a double on a ball that went out of play after\n    bouncing in fair territory.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "infield_hits": {"name": "infield_hits", "description": "Number of times a batter reached base safely on a hit that did not reach the outfield.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "on_base_opportunities": {"name": "on_base_opportunities", "description": "Number of plate appearances in which a batter either did or did not reach base,\n    as defined by the formula for on-base percentage. Note that this is very similar to but different\n    from plate_appearances, as it does not include sacrifice hits or interference.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "on_base_successes": {"name": "on_base_successes", "description": "Number of hits, walks, and hit by pitches that serves as the numerator in the formula\n    for on-base percentage.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "runs_batted_in": {"name": "runs_batted_in", "description": "(RBI) Number of runs that scored as a result of a batter's plate appearance. This is usually\n    the number of runs that scored on the play, but errors and other similar cases may cause\n    some runs not to be credited to the batter. Scorerkeeper discretion occasionally causes differences\n    between the number in the database and the official MLB total.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "grounded_into_double_plays": {"name": "grounded_into_double_plays", "description": "(GIDP) Number of times a batter grounded into a double play. This is the conventional way\n    to record a double play and as such is an important statistic on its own. Games without\n    play-by-play accounts don't have data on the trajectory of the double play, so\n    this number is not populated for those games.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "double_plays": {"name": "double_plays", "description": "(DP) Number of times a play ended in two outs being recorded.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "triple_plays": {"name": "triple_plays", "description": "(TP) Number of times a play ended in three outs being recorded.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "batting_outs": {"name": "batting_outs", "description": "Number of outs that \"should\" have been recorded as a result of a batter's plate apperances.\n    A batting out is still counted if no actual out is recorded on an error or a failed fielder's choice.\n    Outs on baserunners (including the batter trying to stretch a hit) do not count here.\n    Grounded-into-double-plays count as two outs, but other types of double plays do not (the \n    idea here is that the baserunner is responsible on other types of double plays).\n    Unofficial stat, but designed here to be generally useful in determining rates of official stats.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "balls_in_play": {"name": "balls_in_play", "description": "Number of plate appearances that resulted in a live\n    ball on the field of play. The difference between this and batted_balls is that\n    balls_in_play does not include out-of-the-park home runs. This distinction is important\n    for calculating batting average on balls in play, a stat designed to isolate at_bats\n    in which the defense was involved.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "balls_batted": {"name": "balls_batted", "description": "Number of plate appearances that ended in a fair ball or a foul flyout. This is equivalent\n    to balls_in_play + home_runs, and may be a more useful denominator for \"in play\" stats depending\n    on the context.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "trajectory_fly_ball": {"name": "trajectory_fly_ball", "description": "(FB) Number of plate appearances that ended in a fly ball. A fly ball is defined here\n    as the subset of balls hit in the air that are neither line drives nor pop flies.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "trajectory_ground_ball": {"name": "trajectory_ground_ball", "description": "(GB) Number of plate appearances that ended in a ground ball, also called a grounder. A ground ball is defined\n    here to only include swings, not bunts, although older data may not have a proper distinction. Ground\n    balls tend to be easy to distinguish between other types of contact, but Statcast-era data defines it\n    as balls with a launch angle under 10 degrees.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "trajectory_line_drive": {"name": "trajectory_line_drive", "description": "(LD) Number of plate appearances that ended in a line drive, also called a liner. Line drives are distiguished\n    from fly balls by some combination of angle and exit velocity. In the Statcast era, line drives\n    are defined purely in terms of launch angle (10-25 degrees), but just about any colloquial definition\n    involves hard-hitness as well. The line-drive-fly-ball distinction is by far the most arbitrary\n    and subjective trajectory categorization. Many scorekeepers never included line drives, while others counted\n    any successful in-play air-hit as a line drive. Nevertheless, the distinction is a crucial one,\n    as line drives are by far the most likely type of batted ball to result in a hit (even when they are not hit very hard).", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "trajectory_pop_up": {"name": "trajectory_pop_up", "description": "(sometimes PU)  Number of plate appearances that ended in a pop-up, also called a pop fly.\n    Pop-ups are distinguished from fly balls in that they are hit at a higher angle, tend to be\n    hit with less exit velocity, and (as a result) end up in the infield or shallow outfield. Before\n    Statcast-era standardization, the distinction between a fly ball and a pop-up was a matter of\n    scorerkeeper judgement, and many unofficial scorekeepers did not distinguish between the two.\n    Statcast determines pop flies exclusively by angle (> 50 degrees).", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "trajectory_unknown": {"name": "trajectory_unknown", "description": "Number of plate appearances ending in a batted ball whose trajectory was not recorded and cannot\n    be reliably deduced from context. This number includes balls that we know were hit in the air,\n    but do not know which kind of air ball (FB/PU/LD) they were (see trajectory_broad_classification_unknown\n    for a number that does not include those balls). The strong majority of batted balls prior to 1988\n    fall into this category, especially hits.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "trajectory_known": {"name": "trajectory_known", "description": "Number of plate appearances ending in a batted ball whose trajectory was recorded or was reliably deduced\n    from the context. An example of reliable deduction is an at-bat with the fielding play 6-3, which\n    almost always is a ground ball fielded by the shortstop and thrown to the first baseman. See\n    `calc_batted_ball_type` for the deduction logic.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "trajectory_broad_air_ball": {"name": "trajectory_broad_air_ball", "description": "Number of plate appearances that ended in an air ball (a fly ball, line drive, or pop-up).\n    Because it is much easier to deduce that a ball was hit in the air than it is to deduce the exact\n    trajectory, this number field is more reliably populated than any of its three consituent parts.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "trajectory_broad_ground_ball": {"name": "trajectory_broad_ground_ball", "description": "Same as `trajectory_ground_ball`.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "trajectory_broad_unknown": {"name": "trajectory_broad_unknown", "description": "Number of plate appearances ending in a batted ball whose trajectory was not recorded and cannot\n    be reliably deduced from context, even to the extent of knowing whether it was a ground ball or an air ball.\n    This will include a disproportionate number of hits, which are more likely to be missing trajectory data\n    and harder to make deductions about.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "trajectory_broad_known": {"name": "trajectory_broad_known", "description": "Number of plate appearances ending in a batted ball whose ground/air status was recorded or\n    reliably deduced from the context. This is the sum of `trajectory_broad_air_ball` and\n    `trajectory_broad_ground_ball`. Outs in play have excellent coverage historically here,\n    even for older games.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "bunts": {"name": "bunts", "description": "Number of plate appearances ending in an in-play bunt.\n    This does not include strikeouts on foul bunts with two strikes.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "batted_distance_plate": {"name": "batted_distance_plate", "description": "Number of plate appearances in which the ball was batted to catcher's area around home plate.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "batted_distance_infield": {"name": "batted_distance_infield", "description": "Number of plate appearances in which the ball was batted to the infield (not including the catcher).\n    All ground balls are included here, regardless of whether they made it through to the outfield.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "batted_distance_outfield": {"name": "batted_distance_outfield", "description": "Number of plate appearances in which the ball was hit on the fly to the outfield.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "batted_distance_unknown": {"name": "batted_distance_unknown", "description": "Number of plate appearances in which the ball was hit, but the distance was not recorded\n    and cannot be reliably deduced from context.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "batted_distance_known": {"name": "batted_distance_known", "description": "Number of plate appearances in which the ball was hit, and the distance was either\n    recorded or reliably deduced from context.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "fielded_by_battery": {"name": "fielded_by_battery", "description": "Number of plate appearances in which the ball was fielded by the pitcher or catcher.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "fielded_by_infielder": {"name": "fielded_by_infielder", "description": "Number of plate appearances in which the ball was fielded by an infielder.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "fielded_by_outfielder": {"name": "fielded_by_outfielder", "description": "Number of plate appearances in which the ball was fielded by an outfielder.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "fielded_by_known": {"name": "fielded_by_known", "description": "Number of plate appearances in which the ball was fielded by a player, and the player was recorded.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "fielded_by_unknown": {"name": "fielded_by_unknown", "description": "Number of plate appearances in which the ball was fielded by a player, but the player was not recorded.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "batted_angle_left": {"name": "batted_angle_left", "description": "Number of plate appearances in which the ball was batted to the left side of the field.\n    This includes balls where the location was not recorded, but the fielder is on the left side\n    (3B, LF). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "batted_angle_right": {"name": "batted_angle_right", "description": "Number of plate appearances in which the ball was batted to the right side of the field.\n    This includes balls where the location was not recorded, but the fielder is on the right side\n    (1B, RF). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "batted_angle_middle": {"name": "batted_angle_middle", "description": "Number of plate appearances in which the ball was batted to the middle of the field.\n    This includes balls where the location was not recorded, but the fielder is up the middle\n    (P, 2B, SS, CF). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "batted_angle_unknown": {"name": "batted_angle_unknown", "description": "Number of plate appearances in which the ball was batted, but we don't have enough location\n    to determine the spray angle.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "batted_angle_known": {"name": "batted_angle_known", "description": "Number of plate appearances in which the ball was hit and we have enough location to determine\n    the spray angle.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "batted_location_plate": {"name": "batted_location_plate", "description": "Number of plate appearances in which the ball was batted to the catcher's area around home plate.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "batted_location_right_infield": {"name": "batted_location_right_infield", "description": "Number of plate appearances in which the ball was batted to the right side of the infield.\n    This includes balls where the location was not recorded, but the fielder is on the right side\n    (1B). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "batted_location_middle_infield": {"name": "batted_location_middle_infield", "description": "Number of plate appearances in which the ball was batted to the middle of the infield.\n    This includes balls where the location was not recorded, but the fielder is up the middle\n    (P, SS, 2B). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "batted_location_left_infield": {"name": "batted_location_left_infield", "description": "Number of plate appearances in which the ball was batted to the left side of the infield.\n    This includes balls where the location was not recorded, but the fielder is on the left side\n    (3B). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "batted_location_left_field": {"name": "batted_location_left_field", "description": "Number of plate appearances in which the ball was batted to the left side of the outfield.\n    This includes balls where the location was not recorded, but the fielder is on the left side\n    (LF). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "batted_location_center_field": {"name": "batted_location_center_field", "description": "Number of plate appearances in which the ball was batted to the center of the outfield.\n    This includes balls where the location was not recorded, but the fielder is up the middle\n    (CF). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "batted_location_right_field": {"name": "batted_location_right_field", "description": "Number of plate appearances in which the ball was batted to the right side of the outfield.\n    This includes balls where the location was not recorded, but the fielder is on the right side\n    (RF, CF). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "batted_location_unknown": {"name": "batted_location_unknown", "description": "Number of plate appearances in which the ball was batted, but we don't have enough location\n    to determine the specific location.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "batted_location_known": {"name": "batted_location_known", "description": "Number of plate appearances in which the ball was batted and we have enough location to determine\n    the specific location.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "batted_balls_pulled": {"name": "batted_balls_pulled", "description": "Number of plate appearances in which the ball was pulled (the left side for right-handed batters, the right side for left-handed batters).", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "batted_balls_opposite_field": {"name": "batted_balls_opposite_field", "description": "Number of plate appearances in which the ball was hit to the opposite field (the right side for right-handed batters, the left side for left-handed batters).", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "runs": {"name": "runs", "description": "(R) Number of runs scored.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "times_reached_base": {"name": "times_reached_base", "description": "Number of times a batter ended a plate appearance on base, even if it was through a fielder's choice, error, etc.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "stolen_bases": {"name": "stolen_bases", "description": "(SB) Number of successful stolen bases.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "caught_stealing": {"name": "caught_stealing", "description": "(CS) Number of times a runner was caught stealing.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "picked_off": {"name": "picked_off", "description": "(PO, at risk of confusion with putouts) Number of times a runner was picked off.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "picked_off_caught_stealing": {"name": "picked_off_caught_stealing", "description": "(POCS) Number of times a runner was picked off, but instead of going back to the bag,\n    tried to run to the next base and was put out.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "outs_on_basepaths": {"name": "outs_on_basepaths", "description": "Number of outs recorded by a baserunner (this is not mutually exclusive with outs recorded by the batter\n    in cases like failed advances or dropped third-strike putouts).", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "unforced_outs_on_basepaths": {"name": "unforced_outs_on_basepaths", "description": "Number of outs recorded by a baserunner that was not the result of a force on the runner.\n    \"Unforced\" is meant to be in both the literal sense of a force not being in play, but also\n    the figurative sense of the runner being responsible for the out. The latter may or may not\n    be the best interpretation of any given play, but it is useful to assign responsibility to the\n    runner by default in those contexts.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "outs_avoided_on_errors": {"name": "outs_avoided_on_errors", "description": "Number of times that a baserunner would have been out, but an error allowed them to remain\n    on the basepaths (either staying put or advancing).", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "advances_on_wild_pitches": {"name": "advances_on_wild_pitches", "description": "(WP) Number of times a baserunner advanced on a wild pitch.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "advances_on_passed_balls": {"name": "advances_on_passed_balls", "description": "(PB) Number of times a baserunner advanced on a passed ball.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "advances_on_balks": {"name": "advances_on_balks", "description": "(sometimes BK) Number of times a baserunner advanced on a balk.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "advances_on_unspecified_plays": {"name": "advances_on_unspecified_plays", "description": "Number of times a baserunner advanced for an unspecified reason.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "advances_on_defensive_indifference": {"name": "advances_on_defensive_indifference", "description": "(DI) Number of times a baserunner advanced on defensive indifference.\n   Defensive indifference is a judgement call by the official scorer that the defense\n   did not try to stop the runner from stealing a base. This usually happens\n   when the defense has a lead late in the game.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "advances_on_errors": {"name": "advances_on_errors", "description": "Number of times a baserunner advanced on an error.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "plate_appearances_while_on_base": {"name": "plate_appearances_while_on_base", "description": "Number of plate appearances in which the baserunner started on 1st, 2nd, or 3rd base.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "balls_in_play_while_running": {"name": "balls_in_play_while_running", "description": "Number of balls in play while either batting or on base.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "balls_in_play_while_on_base": {"name": "balls_in_play_while_on_base", "description": "Number of balls in play in which the baserunner started on 1st, 2nd, or 3rd base.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "batter_total_bases_while_running": {"name": "batter_total_bases_while_running", "description": "Number of total bases accumulated by the batter while the baserunner was running, including the batter.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "batter_total_bases_while_on_base": {"name": "batter_total_bases_while_on_base", "description": "Number of total bases accumulated by the batter while the baserunner was on base, excluding the batter.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "extra_base_advance_attempts": {"name": "extra_base_advance_attempts", "description": "Number of times a baserunner tried to advance by a greater number of bases than the batter.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "bases_advanced": {"name": "bases_advanced", "description": "Number of bases advanced by a baserunner, including the batter.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "bases_advanced_on_balls_in_play": {"name": "bases_advanced_on_balls_in_play", "description": "Number of bases advanced by a baserunner on a ball in play, including the batter.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "surplus_bases_advanced_on_balls_in_play": {"name": "surplus_bases_advanced_on_balls_in_play", "description": "Number of bases advanced by a baserunner on a ball in play minus the number of total bases\n    accumulated by the batter on the same play. For example, if a runner goes from first to third\n    on a single, this number is 1 (3 - 2). If a runner only goes from second to third on a double,\n    this number is -1 (1 - 2).", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "outs_on_extra_base_advance_attempts": {"name": "outs_on_extra_base_advance_attempts", "description": "Number of times a baserunner was out attempting to advance\n    by a greater number of bases than the batter. This includes\n    batters who were put out trying to stretch a hit to the next base.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "pitches": {"name": "pitches", "description": "Number of pitches thrown.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "swings": {"name": "swings", "description": "Number of pitches that were swung at.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "swings_with_contact": {"name": "swings_with_contact", "description": "Number of pitches that were swung at and made contact.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "strikes": {"name": "strikes", "description": "Number of pitches that were called or swinging strikes.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "strikes_called": {"name": "strikes_called", "description": "Number of pitches that were called strikes.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "strikes_swinging": {"name": "strikes_swinging", "description": "Number of pitches that were swung on and missed (mutually exclusive\n    with `swings_with_contact`, which also count as strikes).", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "strikes_foul": {"name": "strikes_foul", "description": "Number of pitches that were fouled off.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "strikes_foul_tip": {"name": "strikes_foul_tip", "description": "Number of pitches that were fouled off and caught by the catcher for strike three.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "strikes_in_play": {"name": "strikes_in_play", "description": "Number of pitches that were swung on and batted into play.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "strikes_unknown": {"name": "strikes_unknown", "description": "Number of pitches that we know were strikes, but don't know what kind.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "balls": {"name": "balls", "description": "Number of pitches that were called balls.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "balls_called": {"name": "balls_called", "description": "Number of pitches that were called balls (as opposed to automatic balls that were\n    not actually thrown).", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "balls_intentional": {"name": "balls_intentional", "description": "Number of pitches that were called balls as part of an intentional walk.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "balls_automatic": {"name": "balls_automatic", "description": "Number of pitches that were called balls on an automatic walk or a delay penalty.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "unknown_pitches": {"name": "unknown_pitches", "description": "Number of pitches that were thrown without any other information recorded.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "pitchouts": {"name": "pitchouts", "description": "Number of pitches that were thrown as pitchouts. A pitchout is a pitch that is thrown\n    intentionally very far outside in order to make it easier for the catcher to throw out\n    a baserunner who is likely to steal.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "pitcher_pickoff_attempts": {"name": "pitcher_pickoff_attempts", "description": "Number of times the pitcher attempted to pick off a baserunner.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "catcher_pickoff_attempts": {"name": "catcher_pickoff_attempts", "description": "Number of times the catcher attempted to pick off a baserunner.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "pitches_blocked_by_catcher": {"name": "pitches_blocked_by_catcher", "description": "Number of pitches that were blocked by the catcher.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "pitches_with_runners_going": {"name": "pitches_with_runners_going", "description": "Number of pitches that were thrown while a baserunner was on the move\n    (as part of a steal or hit-and-run).", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "passed_balls": {"name": "passed_balls", "description": "(PB) Number of passed balls.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "wild_pitches": {"name": "wild_pitches", "description": "(WP) Number of wild pitches.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "balks": {"name": "balks", "description": "(BK) Number of balks.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "left_on_base": {"name": "left_on_base", "description": "(LOB) At an individual level, the number of baserunners that a batter failed to advance during a plate appearance.\n    At a team level, the number of baserunners remaining on base at the end of an inning. In order to count, baserunners\n    must not have scored or been put out.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "left_on_base_with_two_outs": {"name": "left_on_base_with_two_outs", "description": "(LOB) At an individual level, the number of baserunners that remain on base (unscored and not out) after a plate appearance that ends with the third out recorded. At a team level, this is interchangable with `left_on_base`.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "stolen_bases_second": {"name": "stolen_bases_second", "description": "Number of successful steals of second base.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "stolen_bases_third": {"name": "stolen_bases_third", "description": "Number of successful steals of third base.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "stolen_bases_home": {"name": "stolen_bases_home", "description": "Number of successful steals of home.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "caught_stealing_second": {"name": "caught_stealing_second", "description": "Number of times a runner was caught stealing second base.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "caught_stealing_third": {"name": "caught_stealing_third", "description": "Number of times a runner was caught stealing third base.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "caught_stealing_home": {"name": "caught_stealing_home", "description": "Number of times a runner was caught stealing home.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "stolen_base_opportunities": {"name": "stolen_base_opportunities", "description": "Number of events in which a runner had an opportunity to steal a base as the\n    lead basestealer OR the runner recorded a SB/CS in any situation.\n    \"Opportunity\" is defined as a situation in which the next base\n    was empty at the start of the event (not including the batter).\n    No-play events excluded, but events without plate appearances are included.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "stolen_base_opportunities_second": {"name": "stolen_base_opportunities_second", "description": "Number of opportunities to steal second base (see `stolen_base_opportunities` for detailed criteria).", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "stolen_base_opportunities_third": {"name": "stolen_base_opportunities_third", "description": "Number of opportunities to steal third base (see `stolen_base_opportunities` for detailed criteria).", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "stolen_base_opportunities_home": {"name": "stolen_base_opportunities_home", "description": "Number of opportunities to steal home (see `stolen_base_opportunities` for detailed criteria).", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "picked_off_first": {"name": "picked_off_first", "description": "Number of times a runner was picked off first base.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "picked_off_second": {"name": "picked_off_second", "description": "Number of times a runner was picked off second base.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "picked_off_third": {"name": "picked_off_third", "description": "Number of times a runner was picked off third base.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "times_force_on_runner": {"name": "times_force_on_runner", "description": "Number of events that a force existed on the runner's next base.\n    The batter is counted as having a force on them (at first).\n    No-play events excluded, but events without plate appearances are included.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "times_lead_runner": {"name": "times_lead_runner", "description": "Number of events that a runner was the lead runner on a play\n    (the runner who is furthest along the basepaths).\n    Batter is never counted as the lead runner. No-play events excluded,\n    but events without plate appearances are included.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "times_next_base_empty": {"name": "times_next_base_empty", "description": "Number of events that the runner's next base was empty.\n    The batter is counted on events where first base is empty.\n    No-play events excluded, but events without plate appearances are included.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "extra_base_chances": {"name": "extra_base_chances", "description": "", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "extra_bases_taken": {"name": "extra_bases_taken", "description": "", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}}, "meta": {"primary_keys": ["game_id", "player_id", "team_id"]}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "baseball_computer://models/intermediate/player_game_level/player_game_offense_stats.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "models", "contract": {"enforced": true}, "meta": {"primary_keys": ["game_id", "player_id", "team_id"]}}, "created_at": 1702281449.379672, "relation_name": "\"bc\".\"main_models\".\"player_game_offense_stats\"", "raw_code": "{{\n  config(\n    materialized = 'table',\n    )\n}}\nWITH box_score AS (\n    SELECT\n        CASE WHEN bat.side = 'Home' THEN games.home_team_id ELSE games.away_team_id END AS team_id,\n        bat.*\n    FROM {{ ref('stg_box_score_batting_lines') }} AS bat\n    -- This join ensures that we only get the box score lines for games that\n    -- do not have an event file.\n    INNER JOIN {{ ref('game_start_info') }} AS games USING (game_id)\n    WHERE games.source_type = 'BoxScore'\n),\n\nfinal AS (\n    SELECT\n        game_id,\n        team_id,\n        player_id,\n        {% for stat in event_level_offense_stats() -%}\n            {% set dtype = \"INT1\" if stat.startswith(\"surplus\") else \"UTINYINT\" %}\n            SUM({{ stat }})::{{ dtype }} AS {{ stat }},\n        {% endfor %}\n    FROM {{ ref('event_offense_stats') }}\n    GROUP BY 1, 2, 3\n    UNION ALL BY NAME\n    SELECT\n        game_id,\n        team_id,\n        batter_id AS player_id,\n        at_bats,\n        runs,\n        hits,\n        doubles,\n        triples,\n        home_runs,\n        runs_batted_in,\n        strikeouts,\n        walks,\n        intentional_walks,\n        hit_by_pitches,\n        sacrifice_hits,\n        sacrifice_flies,\n        NULL AS reached_on_errors,\n        NULL AS reached_on_interferences,\n        grounded_into_double_plays,\n        NULL AS double_plays,\n        NULL AS triple_plays,\n        singles,\n        total_bases,\n        plate_appearances,\n        on_base_opportunities,\n        on_base_successes,\n        batting_outs,\n        stolen_bases,\n        caught_stealing,\n    FROM box_score\n)\n\nSELECT * FROM final", "language": "sql", "refs": [{"name": "stg_box_score_batting_lines", "package": null, "version": null}, {"name": "game_start_info", "package": null, "version": null}, {"name": "event_offense_stats", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.baseball_computer.event_level_offense_stats"], "nodes": ["model.baseball_computer.stg_box_score_batting_lines", "model.baseball_computer.game_start_info", "model.baseball_computer.event_offense_stats"]}, "compiled_path": null, "contract": {"enforced": true, "alias_types": true, "checksum": "608eaeca316e5e2379e4e5e567607b8bbe3c7a9952906136155f9531153beeec"}, "access": "protected", "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true, "columns": ["game_id", "player_id", "team_id"]}], "version": null, "latest_version": null, "deprecation_date": null}, "model.baseball_computer.player_game_pitching_stats": {"database": "bc", "schema": "main_models", "name": "player_game_pitching_stats", "resource_type": "model", "package_name": "baseball_computer", "path": "intermediate/player_game_level/player_game_pitching_stats.sql", "original_file_path": "models/intermediate/player_game_level/player_game_pitching_stats.sql", "unique_id": "model.baseball_computer.player_game_pitching_stats", "fqn": ["baseball_computer", "intermediate", "player_game_level", "player_game_pitching_stats"], "alias": "player_game_pitching_stats", "checksum": {"name": "sha256", "checksum": "ab7fc017c01c905e237e9dd610199d4d894113828ff75e1a71c1b5bbe396104e"}, "config": {"enabled": true, "alias": null, "schema": "models", "database": null, "tags": [], "meta": {"primary_keys": ["game_id", "player_id"]}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {"game_id": {"name": "game_id", "description": "Retrosheet game ID, A 12-character string structured as follows:\n\n    - Chars 1-3: Home team ID\n    - Chars 4-11: Date (YYYYMMDD)\n    - Char 12: Game number (0 if only one game was played on that day)\n    \n    Example: MLN195607170", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "player_id": {"name": "player_id", "description": "Retrosheet 8-character person ID for a player, which consists of\n    the first four characters of the last name, the first character\n    of the first name, and then three digits to disambiguate between\n    players with the same five characters.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "team_id": {"name": "team_id", "description": "Retrosheet team ID, 3-character string which identifies the team\n    that a franchise was playing as at a given time.", "meta": {}, "data_type": "team_id", "constraints": [], "quote": null, "tags": []}, "innings_pitched": {"name": "innings_pitched", "description": "(IP) Number of innings pitched by a pitcher. Fractional innings are given by .33 and .67 here,\n    but they are often formatted as .1 and .2 elsewhere.", "meta": {}, "data_type": "decimal(6,4)", "constraints": [], "quote": null, "tags": []}, "wins": {"name": "wins", "description": "(W) Number of games in which a pitcher was credited with the win.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "losses": {"name": "losses", "description": "(L) Number of games in which a pitcher was debited with the loss.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "saves": {"name": "saves", "description": "(SV) Number of games in which a pitcher was credited with the save.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "earned_runs": {"name": "earned_runs", "description": "(ER) Number of runs that are charged to a pitcher. This may include runs that scored after the pitcher\n    left the game (in the case of inherited runners), as well as runs that the scorekeeper deemed to be\n    the pitcher's responsibility in the absence of official inherited runner rules in the olden days.\n    Earned runs are only an official statistic at a game level: the earnedness of any given run is never\n    officially specified, only the total. It would be possible to make a very good guess algorithmically,\n    but that would be a huge pain for a stat that is not very useful in the first place.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "batters_faced": {"name": "batters_faced", "description": "Number of batters faced by a pitcher, generally equivalent to plate appearances (in old box-score-only games, this may not match up perfectly).", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "outs_recorded": {"name": "outs_recorded", "description": "Number of outs recorded by a pitcher.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "inherited_runners_scored": {"name": "inherited_runners_scored", "description": "(IRS) Number of inherited runners that scored while a pitcher was on the mound.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "bequeathed_runners_scored": {"name": "bequeathed_runners_scored", "description": "Number of bequeathed runners that scored after a pitcher left the game.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "team_unearned_runs": {"name": "team_unearned_runs", "description": "Number of runs that are charged as earned to the pitcher, but unearned to the team.\n    This happens when a pitcher enters an inning which should have been over already because\n    of an error and then the pitcher allows a run to score without the help of any additional\n    errors. This is a rare occurrence and it might seem unnecessary to track,\n    but it is absolutely essential that we do so in order to preserve the space-time continuu-\n    T\u0355he\u030a\u0346\u0328\u035c y\u036a\u0363e\u0321\u0303\u0313\u030ea\u0347r\u0350\u0355\u035c\u035d i\u0313\u035a\u0314\u0324\u033a\u033b\u035bs 20\u032e\u033f89\u032a\u030a an\u032b\u032b\u035e\u0326\u0305d\u0331\u033f\u0369 E\u0361\u0354\u0330\u0351\u0320s\u036d\u0366t\u0351\u0359\u035de\u0303\u0352\u0310b\u0301\u036e\u0359a\u0361\u0359\u0310\u0301\u0330\u0330\u0320n\u036f\u0352\u035f Y\u032a\u0318\u0311a\u035c\u0302\u031c\u031a\u036c\u0345\u0360n\u0304\u0301\u0309 h\u035c\u0314\u0306a\u0359\u033e\u031d\u035f\u0361\u0308\u0301\u0351s\u035f\u0338 fu\u0326\u036d\u030f\u032e\u0306\u030dl\u033a\u0347\u0311\u0349\u034c\u0305\u0303l\u0345\u030f\u0308\u036a\u033f\u031dy\u0312\u0313\u034b\u036e\u0332\u0347 m\u0326\u030a\u0363e\u0365\u034a\u0367\u0320\u0325rg\u0347\u0366\u0300e\u0309\u0339\u031c\u031f\u0353\u0331\u0319d\u0331\u0327 wi\u0307\u034eth\u0366\u0361\u031b\u036d\u0358 t\u031d\u0362\u035d\u0328\u035e\u0342h\u0336\u0357\u031e\u032d\u035f\u0319e\u0322\u030a\u0321\u032f w\u0300\u0329\u0309\u032co\u036d\u0349r\u0311\u0367\u0327\u0360\u036a\u0327\u036cm\u034c\u031c.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "at_bats": {"name": "at_bats", "description": "(AB) Number of plate appearances that ended in either a hit or a non-sacrifice out.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "hits": {"name": "hits", "description": "(H) Number of times a batter reached base safely without an error or fielder's choice.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "singles": {"name": "singles", "description": "(1B) Number of hits in which a batter reached first base.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "doubles": {"name": "doubles", "description": "(2B) Number of hits in which a batter reached second base without the help of an error or an attempted\n    play on another runner.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "triples": {"name": "triples", "description": "(3B) Number of hits in which a batter reached third base without the help of an error or an attempted\n    play on another runner.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "home_runs": {"name": "home_runs", "description": "(HR) Number of hits in which a batter reached home plate without the help of an error or an attempted\n    play on another runner (usually by hitting the ball out of the park).", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "total_bases": {"name": "total_bases", "description": "(TB) Number of bases a batter reached safely without the help of an error or an attempted\n    play on another runner. HR * 4 + 3B * 3 + 2B * 2 + (H - HR - 3B - 2B)", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "strikeouts": {"name": "strikeouts", "description": "(K, SO) Number of times a batter struck out. This includes plays in which a batter reached base on\n    a dropped third strike.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "walks": {"name": "walks", "description": "(BB, occasionally W) Number of times a batter reaches base on called balls out of the strike zone\n    (Four balls for all of MLB history after the 1880s).", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "intentional_walks": {"name": "intentional_walks", "description": "(IBB, occasionally IW) Number of times a batter was intentionally walked. This number may be missing or undercounted\n    in earlier years, as intentional walks were not officially tracked until 1955.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "hit_by_pitches": {"name": "hit_by_pitches", "description": "(HBP) Number of times a batter was awarded first base after being hit by a pitch.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "sacrifice_hits": {"name": "sacrifice_hits", "description": "(SH) Number of times a batter performed a sacrifice bunt to advance another runner.\n    A bunt may count as a sacrifice even if the batter reaches base safely.\n    Unsuccessful attempts are not counted, nor are non-sacrifice bunts.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "sacrifice_flies": {"name": "sacrifice_flies", "description": "(SF) Number of times a batter hit a fly ball that resulted in an out (or error),\n    but allowed a runner to score on the throw.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "reached_on_errors": {"name": "reached_on_errors", "description": "(ROE) Number of times a batter reached base safely due to an error.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "reached_on_interferences": {"name": "reached_on_interferences", "description": "Number of times a batter was awarded first base for being illegally hindered\n    by a fielder, usually the catcher.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "inside_the_park_home_runs": {"name": "inside_the_park_home_runs", "description": "Number of times a batter hit a home run without the ball leaving the field of play.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "ground_rule_doubles": {"name": "ground_rule_doubles", "description": "Number of times a batter was awarded a double on a ball that went out of play after\n    bouncing in fair territory.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "infield_hits": {"name": "infield_hits", "description": "Number of times a batter reached base safely on a hit that did not reach the outfield.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "on_base_opportunities": {"name": "on_base_opportunities", "description": "Number of plate appearances in which a batter either did or did not reach base,\n    as defined by the formula for on-base percentage. Note that this is very similar to but different\n    from plate_appearances, as it does not include sacrifice hits or interference.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "on_base_successes": {"name": "on_base_successes", "description": "Number of hits, walks, and hit by pitches that serves as the numerator in the formula\n    for on-base percentage.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "grounded_into_double_plays": {"name": "grounded_into_double_plays", "description": "(GIDP) Number of times a batter grounded into a double play. This is the conventional way\n    to record a double play and as such is an important statistic on its own. Games without\n    play-by-play accounts don't have data on the trajectory of the double play, so\n    this number is not populated for those games.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "double_plays": {"name": "double_plays", "description": "(DP) Number of times a play ended in two outs being recorded.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "triple_plays": {"name": "triple_plays", "description": "(TP) Number of times a play ended in three outs being recorded.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "batting_outs": {"name": "batting_outs", "description": "Number of outs that \"should\" have been recorded as a result of a batter's plate apperances.\n    A batting out is still counted if no actual out is recorded on an error or a failed fielder's choice.\n    Outs on baserunners (including the batter trying to stretch a hit) do not count here.\n    Grounded-into-double-plays count as two outs, but other types of double plays do not (the \n    idea here is that the baserunner is responsible on other types of double plays).\n    Unofficial stat, but designed here to be generally useful in determining rates of official stats.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "balls_in_play": {"name": "balls_in_play", "description": "Number of plate appearances that resulted in a live\n    ball on the field of play. The difference between this and batted_balls is that\n    balls_in_play does not include out-of-the-park home runs. This distinction is important\n    for calculating batting average on balls in play, a stat designed to isolate at_bats\n    in which the defense was involved.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "balls_batted": {"name": "balls_batted", "description": "Number of plate appearances that ended in a fair ball or a foul flyout. This is equivalent\n    to balls_in_play + home_runs, and may be a more useful denominator for \"in play\" stats depending\n    on the context.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "trajectory_fly_ball": {"name": "trajectory_fly_ball", "description": "(FB) Number of plate appearances that ended in a fly ball. A fly ball is defined here\n    as the subset of balls hit in the air that are neither line drives nor pop flies.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "trajectory_ground_ball": {"name": "trajectory_ground_ball", "description": "(GB) Number of plate appearances that ended in a ground ball, also called a grounder. A ground ball is defined\n    here to only include swings, not bunts, although older data may not have a proper distinction. Ground\n    balls tend to be easy to distinguish between other types of contact, but Statcast-era data defines it\n    as balls with a launch angle under 10 degrees.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "trajectory_line_drive": {"name": "trajectory_line_drive", "description": "(LD) Number of plate appearances that ended in a line drive, also called a liner. Line drives are distiguished\n    from fly balls by some combination of angle and exit velocity. In the Statcast era, line drives\n    are defined purely in terms of launch angle (10-25 degrees), but just about any colloquial definition\n    involves hard-hitness as well. The line-drive-fly-ball distinction is by far the most arbitrary\n    and subjective trajectory categorization. Many scorekeepers never included line drives, while others counted\n    any successful in-play air-hit as a line drive. Nevertheless, the distinction is a crucial one,\n    as line drives are by far the most likely type of batted ball to result in a hit (even when they are not hit very hard).", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "trajectory_pop_up": {"name": "trajectory_pop_up", "description": "(sometimes PU)  Number of plate appearances that ended in a pop-up, also called a pop fly.\n    Pop-ups are distinguished from fly balls in that they are hit at a higher angle, tend to be\n    hit with less exit velocity, and (as a result) end up in the infield or shallow outfield. Before\n    Statcast-era standardization, the distinction between a fly ball and a pop-up was a matter of\n    scorerkeeper judgement, and many unofficial scorekeepers did not distinguish between the two.\n    Statcast determines pop flies exclusively by angle (> 50 degrees).", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "trajectory_unknown": {"name": "trajectory_unknown", "description": "Number of plate appearances ending in a batted ball whose trajectory was not recorded and cannot\n    be reliably deduced from context. This number includes balls that we know were hit in the air,\n    but do not know which kind of air ball (FB/PU/LD) they were (see trajectory_broad_classification_unknown\n    for a number that does not include those balls). The strong majority of batted balls prior to 1988\n    fall into this category, especially hits.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "trajectory_known": {"name": "trajectory_known", "description": "Number of plate appearances ending in a batted ball whose trajectory was recorded or was reliably deduced\n    from the context. An example of reliable deduction is an at-bat with the fielding play 6-3, which\n    almost always is a ground ball fielded by the shortstop and thrown to the first baseman. See\n    `calc_batted_ball_type` for the deduction logic.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "trajectory_broad_air_ball": {"name": "trajectory_broad_air_ball", "description": "Number of plate appearances that ended in an air ball (a fly ball, line drive, or pop-up).\n    Because it is much easier to deduce that a ball was hit in the air than it is to deduce the exact\n    trajectory, this number field is more reliably populated than any of its three consituent parts.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "trajectory_broad_ground_ball": {"name": "trajectory_broad_ground_ball", "description": "Same as `trajectory_ground_ball`.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "trajectory_broad_unknown": {"name": "trajectory_broad_unknown", "description": "Number of plate appearances ending in a batted ball whose trajectory was not recorded and cannot\n    be reliably deduced from context, even to the extent of knowing whether it was a ground ball or an air ball.\n    This will include a disproportionate number of hits, which are more likely to be missing trajectory data\n    and harder to make deductions about.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "trajectory_broad_known": {"name": "trajectory_broad_known", "description": "Number of plate appearances ending in a batted ball whose ground/air status was recorded or\n    reliably deduced from the context. This is the sum of `trajectory_broad_air_ball` and\n    `trajectory_broad_ground_ball`. Outs in play have excellent coverage historically here,\n    even for older games.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "bunts": {"name": "bunts", "description": "Number of plate appearances ending in an in-play bunt.\n    This does not include strikeouts on foul bunts with two strikes.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "batted_distance_plate": {"name": "batted_distance_plate", "description": "Number of plate appearances in which the ball was batted to catcher's area around home plate.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "batted_distance_infield": {"name": "batted_distance_infield", "description": "Number of plate appearances in which the ball was batted to the infield (not including the catcher).\n    All ground balls are included here, regardless of whether they made it through to the outfield.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "batted_distance_outfield": {"name": "batted_distance_outfield", "description": "Number of plate appearances in which the ball was hit on the fly to the outfield.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "batted_distance_unknown": {"name": "batted_distance_unknown", "description": "Number of plate appearances in which the ball was hit, but the distance was not recorded\n    and cannot be reliably deduced from context.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "batted_distance_known": {"name": "batted_distance_known", "description": "Number of plate appearances in which the ball was hit, and the distance was either\n    recorded or reliably deduced from context.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "fielded_by_battery": {"name": "fielded_by_battery", "description": "Number of plate appearances in which the ball was fielded by the pitcher or catcher.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "fielded_by_infielder": {"name": "fielded_by_infielder", "description": "Number of plate appearances in which the ball was fielded by an infielder.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "fielded_by_outfielder": {"name": "fielded_by_outfielder", "description": "Number of plate appearances in which the ball was fielded by an outfielder.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "fielded_by_known": {"name": "fielded_by_known", "description": "Number of plate appearances in which the ball was fielded by a player, and the player was recorded.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "fielded_by_unknown": {"name": "fielded_by_unknown", "description": "Number of plate appearances in which the ball was fielded by a player, but the player was not recorded.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "batted_angle_left": {"name": "batted_angle_left", "description": "Number of plate appearances in which the ball was batted to the left side of the field.\n    This includes balls where the location was not recorded, but the fielder is on the left side\n    (3B, LF). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "batted_angle_right": {"name": "batted_angle_right", "description": "Number of plate appearances in which the ball was batted to the right side of the field.\n    This includes balls where the location was not recorded, but the fielder is on the right side\n    (1B, RF). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "batted_angle_middle": {"name": "batted_angle_middle", "description": "Number of plate appearances in which the ball was batted to the middle of the field.\n    This includes balls where the location was not recorded, but the fielder is up the middle\n    (P, 2B, SS, CF). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "batted_angle_unknown": {"name": "batted_angle_unknown", "description": "Number of plate appearances in which the ball was batted, but we don't have enough location\n    to determine the spray angle.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "batted_angle_known": {"name": "batted_angle_known", "description": "Number of plate appearances in which the ball was hit and we have enough location to determine\n    the spray angle.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "batted_location_plate": {"name": "batted_location_plate", "description": "Number of plate appearances in which the ball was batted to the catcher's area around home plate.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "batted_location_right_infield": {"name": "batted_location_right_infield", "description": "Number of plate appearances in which the ball was batted to the right side of the infield.\n    This includes balls where the location was not recorded, but the fielder is on the right side\n    (1B). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "batted_location_middle_infield": {"name": "batted_location_middle_infield", "description": "Number of plate appearances in which the ball was batted to the middle of the infield.\n    This includes balls where the location was not recorded, but the fielder is up the middle\n    (P, SS, 2B). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "batted_location_left_infield": {"name": "batted_location_left_infield", "description": "Number of plate appearances in which the ball was batted to the left side of the infield.\n    This includes balls where the location was not recorded, but the fielder is on the left side\n    (3B). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "batted_location_left_field": {"name": "batted_location_left_field", "description": "Number of plate appearances in which the ball was batted to the left side of the outfield.\n    This includes balls where the location was not recorded, but the fielder is on the left side\n    (LF). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "batted_location_center_field": {"name": "batted_location_center_field", "description": "Number of plate appearances in which the ball was batted to the center of the outfield.\n    This includes balls where the location was not recorded, but the fielder is up the middle\n    (CF). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "batted_location_right_field": {"name": "batted_location_right_field", "description": "Number of plate appearances in which the ball was batted to the right side of the outfield.\n    This includes balls where the location was not recorded, but the fielder is on the right side\n    (RF, CF). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "batted_location_unknown": {"name": "batted_location_unknown", "description": "Number of plate appearances in which the ball was batted, but we don't have enough location\n    to determine the specific location.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "batted_location_known": {"name": "batted_location_known", "description": "Number of plate appearances in which the ball was batted and we have enough location to determine\n    the specific location.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "batted_balls_pulled": {"name": "batted_balls_pulled", "description": "Number of plate appearances in which the ball was pulled (the left side for right-handed batters, the right side for left-handed batters).", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "batted_balls_opposite_field": {"name": "batted_balls_opposite_field", "description": "Number of plate appearances in which the ball was hit to the opposite field (the right side for right-handed batters, the left side for left-handed batters).", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "runs": {"name": "runs", "description": "(R) Number of runs scored.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "times_reached_base": {"name": "times_reached_base", "description": "Number of times a batter ended a plate appearance on base, even if it was through a fielder's choice, error, etc.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "stolen_bases": {"name": "stolen_bases", "description": "(SB) Number of successful stolen bases.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "caught_stealing": {"name": "caught_stealing", "description": "(CS) Number of times a runner was caught stealing.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "picked_off": {"name": "picked_off", "description": "(PO, at risk of confusion with putouts) Number of times a runner was picked off.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "picked_off_caught_stealing": {"name": "picked_off_caught_stealing", "description": "(POCS) Number of times a runner was picked off, but instead of going back to the bag,\n    tried to run to the next base and was put out.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "outs_on_basepaths": {"name": "outs_on_basepaths", "description": "Number of outs recorded by a baserunner (this is not mutually exclusive with outs recorded by the batter\n    in cases like failed advances or dropped third-strike putouts).", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "unforced_outs_on_basepaths": {"name": "unforced_outs_on_basepaths", "description": "Number of outs recorded by a baserunner that was not the result of a force on the runner.\n    \"Unforced\" is meant to be in both the literal sense of a force not being in play, but also\n    the figurative sense of the runner being responsible for the out. The latter may or may not\n    be the best interpretation of any given play, but it is useful to assign responsibility to the\n    runner by default in those contexts.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "outs_avoided_on_errors": {"name": "outs_avoided_on_errors", "description": "Number of times that a baserunner would have been out, but an error allowed them to remain\n    on the basepaths (either staying put or advancing).", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "advances_on_wild_pitches": {"name": "advances_on_wild_pitches", "description": "(WP) Number of times a baserunner advanced on a wild pitch.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "advances_on_passed_balls": {"name": "advances_on_passed_balls", "description": "(PB) Number of times a baserunner advanced on a passed ball.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "advances_on_balks": {"name": "advances_on_balks", "description": "(sometimes BK) Number of times a baserunner advanced on a balk.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "advances_on_unspecified_plays": {"name": "advances_on_unspecified_plays", "description": "Number of times a baserunner advanced for an unspecified reason.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "advances_on_defensive_indifference": {"name": "advances_on_defensive_indifference", "description": "(DI) Number of times a baserunner advanced on defensive indifference.\n   Defensive indifference is a judgement call by the official scorer that the defense\n   did not try to stop the runner from stealing a base. This usually happens\n   when the defense has a lead late in the game.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "advances_on_errors": {"name": "advances_on_errors", "description": "Number of times a baserunner advanced on an error.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "extra_base_advance_attempts": {"name": "extra_base_advance_attempts", "description": "Number of times a baserunner tried to advance by a greater number of bases than the batter.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "bases_advanced": {"name": "bases_advanced", "description": "Number of bases advanced by a baserunner, including the batter.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "bases_advanced_on_balls_in_play": {"name": "bases_advanced_on_balls_in_play", "description": "Number of bases advanced by a baserunner on a ball in play, including the batter.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "surplus_bases_advanced_on_balls_in_play": {"name": "surplus_bases_advanced_on_balls_in_play", "description": "Number of bases advanced by a baserunner on a ball in play minus the number of total bases\n    accumulated by the batter on the same play. For example, if a runner goes from first to third\n    on a single, this number is 1 (3 - 2). If a runner only goes from second to third on a double,\n    this number is -1 (1 - 2).", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "outs_on_extra_base_advance_attempts": {"name": "outs_on_extra_base_advance_attempts", "description": "Number of times a baserunner was out attempting to advance\n    by a greater number of bases than the batter. This includes\n    batters who were put out trying to stretch a hit to the next base.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "stolen_bases_second": {"name": "stolen_bases_second", "description": "Number of successful steals of second base.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "stolen_bases_third": {"name": "stolen_bases_third", "description": "Number of successful steals of third base.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "stolen_bases_home": {"name": "stolen_bases_home", "description": "Number of successful steals of home.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "caught_stealing_second": {"name": "caught_stealing_second", "description": "Number of times a runner was caught stealing second base.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "caught_stealing_third": {"name": "caught_stealing_third", "description": "Number of times a runner was caught stealing third base.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "caught_stealing_home": {"name": "caught_stealing_home", "description": "Number of times a runner was caught stealing home.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "stolen_base_opportunities": {"name": "stolen_base_opportunities", "description": "Number of events in which a runner had an opportunity to steal a base as the\n    lead basestealer OR the runner recorded a SB/CS in any situation.\n    \"Opportunity\" is defined as a situation in which the next base\n    was empty at the start of the event (not including the batter).\n    No-play events excluded, but events without plate appearances are included.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "stolen_base_opportunities_second": {"name": "stolen_base_opportunities_second", "description": "Number of opportunities to steal second base (see `stolen_base_opportunities` for detailed criteria).", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "stolen_base_opportunities_third": {"name": "stolen_base_opportunities_third", "description": "Number of opportunities to steal third base (see `stolen_base_opportunities` for detailed criteria).", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "stolen_base_opportunities_home": {"name": "stolen_base_opportunities_home", "description": "Number of opportunities to steal home (see `stolen_base_opportunities` for detailed criteria).", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "picked_off_first": {"name": "picked_off_first", "description": "Number of times a runner was picked off first base.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "picked_off_second": {"name": "picked_off_second", "description": "Number of times a runner was picked off second base.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "picked_off_third": {"name": "picked_off_third", "description": "Number of times a runner was picked off third base.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "pitches": {"name": "pitches", "description": "Number of pitches thrown.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "swings": {"name": "swings", "description": "Number of pitches that were swung at.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "swings_with_contact": {"name": "swings_with_contact", "description": "Number of pitches that were swung at and made contact.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "strikes": {"name": "strikes", "description": "Number of pitches that were called or swinging strikes.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "strikes_called": {"name": "strikes_called", "description": "Number of pitches that were called strikes.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "strikes_swinging": {"name": "strikes_swinging", "description": "Number of pitches that were swung on and missed (mutually exclusive\n    with `swings_with_contact`, which also count as strikes).", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "strikes_foul": {"name": "strikes_foul", "description": "Number of pitches that were fouled off.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "strikes_foul_tip": {"name": "strikes_foul_tip", "description": "Number of pitches that were fouled off and caught by the catcher for strike three.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "strikes_in_play": {"name": "strikes_in_play", "description": "Number of pitches that were swung on and batted into play.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "strikes_unknown": {"name": "strikes_unknown", "description": "Number of pitches that we know were strikes, but don't know what kind.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "balls": {"name": "balls", "description": "Number of pitches that were called balls.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "balls_called": {"name": "balls_called", "description": "Number of pitches that were called balls (as opposed to automatic balls that were\n    not actually thrown).", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "balls_intentional": {"name": "balls_intentional", "description": "Number of pitches that were called balls as part of an intentional walk.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "balls_automatic": {"name": "balls_automatic", "description": "Number of pitches that were called balls on an automatic walk or a delay penalty.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "unknown_pitches": {"name": "unknown_pitches", "description": "Number of pitches that were thrown without any other information recorded.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "pitchouts": {"name": "pitchouts", "description": "Number of pitches that were thrown as pitchouts. A pitchout is a pitch that is thrown\n    intentionally very far outside in order to make it easier for the catcher to throw out\n    a baserunner who is likely to steal.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "pitcher_pickoff_attempts": {"name": "pitcher_pickoff_attempts", "description": "Number of times the pitcher attempted to pick off a baserunner.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "catcher_pickoff_attempts": {"name": "catcher_pickoff_attempts", "description": "Number of times the catcher attempted to pick off a baserunner.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "pitches_blocked_by_catcher": {"name": "pitches_blocked_by_catcher", "description": "Number of pitches that were blocked by the catcher.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "pitches_with_runners_going": {"name": "pitches_with_runners_going", "description": "Number of pitches that were thrown while a baserunner was on the move\n    (as part of a steal or hit-and-run).", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "passed_balls": {"name": "passed_balls", "description": "(PB) Number of passed balls.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "wild_pitches": {"name": "wild_pitches", "description": "(WP) Number of wild pitches.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "balks": {"name": "balks", "description": "(BK) Number of balks.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "left_on_base": {"name": "left_on_base", "description": "(LOB) At an individual level, the number of baserunners that a batter failed to advance during a plate appearance.\n    At a team level, the number of baserunners remaining on base at the end of an inning. In order to count, baserunners\n    must not have scored or been put out.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "left_on_base_with_two_outs": {"name": "left_on_base_with_two_outs", "description": "(LOB) At an individual level, the number of baserunners that remain on base (unscored and not out) after a plate appearance that ends with the third out recorded. At a team level, this is interchangable with `left_on_base`.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "games_started": {"name": "games_started", "description": "(GS) Number of games started by a player.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "inherited_runners": {"name": "inherited_runners", "description": "(IR) Number of runners on base when a pitcher entered the game.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "bequeathed_runners": {"name": "bequeathed_runners", "description": "Number of runners on base when a pitcher left the game.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "games_relieved": {"name": "games_relieved", "description": "Number of games in which a pitcher entered the game in relief.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "games_finished": {"name": "games_finished", "description": "(GF) Number of games in which a pitcher entered the game in relief and finished the game.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "save_situations_entered": {"name": "save_situations_entered", "description": "Number of games in which a pitcher entered the game in a save situation. A save situation is defined\n    as when the pitcher enters the game ineligible to get the win with one of the following conditions:\n\n    - A lead of three runs or less and ineligible to get the win\n    - Any lead with the tying run on base, at bat, or on deck\n\n    If a pitcher pitches the final three innings of a game with any lead, they are credited with a save\n    but are not considered to have entered a save situation unless one of the above conditions is met.\n    Note the difference between this field and `save_opportunities`, which does not count games in which\n    the pitcher exited without completing or blowing the save.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "holds": {"name": "holds", "description": "(HLD, H) Number of holds recorded by a pitcher. A hold is defined as a relief appearance in which\n    the pitcher enters the game in a save situation, records at least one out, and leaves the game\n    with the lead intact.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "blown_saves": {"name": "blown_saves", "description": "(BS) Number of games in which a pitcher entered the game in a save situation and gave up the lead.\n    The status of inherited runners is irrelevant in determining who blew the save - it is entirely\n    a function of who was on the mount when the lead as lost.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "saves_by_rule": {"name": "saves_by_rule", "description": "Number of games in which a pitcher earned a save according to the default rules.\n    This may be different than the actual number of saves, as the official scorer may award\n    the player a win instead of a save at their discretion in rare cases.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "save_opportunities": {"name": "save_opportunities", "description": "(SVO) The sum of saves and blown saves.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "complete_games": {"name": "complete_games", "description": "(CG) Number of games in which a pitcher pitched the entire game, regardless of how long the game lasted.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "shutouts": {"name": "shutouts", "description": "(SHO) Number of games in which a pitcher recorded every out for his team and did not allow any runs,\n    earned or unearned, regardless of how long the game lasted. Note the subtle difference between the\n    definition of a shutout and a complete game: it is possible to pitch a shutout without a complete game\n    if the pitcher enters in relief when no outs have been recorded. AFAIK, the only reason this distinction\n    exists is for us to remember the time that Babe Ruth started a game, walked a batter, yelled at the umpire,\n    got ejected, punched the umpire, and then Ernie Shore came in and retired every batter he faced,\n    which is good enough for me.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "quality_starts": {"name": "quality_starts", "description": "(QS) Number of games in which a starting pitcher pitched at least six innings and allowed three or fewer earned runs.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "cheap_wins": {"name": "cheap_wins", "description": "Number of wins in which a starting pitcher did not record a quality start.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "tough_losses": {"name": "tough_losses", "description": "Number of losses in which a starting pitcher record a quality start.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "no_decisions": {"name": "no_decisions", "description": "(ND) Number of games in which a pitcher pitched but did not recieve a win or a loss.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "no_hitters": {"name": "no_hitters", "description": "At an individual level, the number of games in which a pitcher was the only pitcher for their team and pitched a full-length game without allowing any hits.\n    At a team level, the \"only pitcher\" requirement is dropped.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "perfect_games": {"name": "perfect_games", "description": "Number of games in which a pitcher was the only pitcher for their team and pitched the entire game\n    without allowing any baserunners. At a team level, the \"only pitcher\" requirement is dropped.\n    Generally considered the most impressive single-game pitching accomplishment.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "extra_base_chances": {"name": "extra_base_chances", "description": "", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "extra_bases_taken": {"name": "extra_bases_taken", "description": "", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "plate_appearances": {"name": "plate_appearances", "description": "(PA) Number of times a batter came to the plate, including walks, hit by pitches, sacrifices, and at-bats.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}}, "meta": {"primary_keys": ["game_id", "player_id"]}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "baseball_computer://models/intermediate/player_game_level/player_game_pitching_stats.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "models", "contract": {"enforced": true}, "meta": {"primary_keys": ["game_id", "player_id"]}}, "created_at": 1702281449.387147, "relation_name": "\"bc\".\"main_models\".\"player_game_pitching_stats\"", "raw_code": "{{\n  config(\n    materialized = 'table',\n    )\n}}\nWITH event_agg AS (\n    SELECT\n        game_id,\n        player_id,\n        MIN(team_id) AS team_id,\n        {% for stat in event_level_pitching_stats() -%}\n            {% if stat.count(\"bases_advanced\") > 0 %}\n                {% set dtype = \"INT2\" %}\n            {% elif stat.startswith(\"pitches\") %}\n                {% set dtype = \"USMALLINT\" %}\n            {% else %}\n                {% set dtype = \"UTINYINT\" %}\n            {% endif %}\n            SUM({{ stat }})::{{ dtype }} AS {{ stat }},\n        {% endfor %}\n    FROM {{ ref('event_pitching_stats') }}\n    GROUP BY 1, 2\n),\n\nflag_agg AS (\n  SELECT\n        game_id,\n        pitcher_id AS player_id,\n        -- Some of these are SUM/COUNT because a pitcher could record separate appearances during the game\n        -- so, theoretically, a pitcher could blow multiple saves in the same game\n        BOOL_OR(starting_pitcher_flag)::UTINYINT AS games_started,\n        SUM(inherited_runners)::UTINYINT AS inherited_runners,\n        -- TODO: A bequeathed runner appears to be defined as the number of runners left on base\n        -- when a pitcher leaves the game, regardless of whether those runners were inherited\n        -- from a previous pitcher. This causes a double-counting issue, which we'll have to\n        -- address either by applying bequeathed runner scoring to multiple pitchers\n        -- or a bequeathal to a single pitcher.\n        SUM(bequeathed_runners)::UTINYINT AS bequeathed_runners,\n        BOOL_OR(new_relief_pitcher_flag)::UTINYINT AS games_relieved,\n        BOOL_OR(pitcher_finish_flag)::UTINYINT AS games_finished,\n        COUNT_IF(save_situation_start_flag)::UTINYINT AS save_situations_entered,\n        COUNT_IF(hold_flag)::UTINYINT AS holds,\n        COUNT_IF(blown_save_flag)::UTINYINT AS blown_saves,\n        -- This could differ from save info in the game-level table if e.g.\n        -- the scorekeeper decided to award a win by judgement\n        BOOL_OR(save_flag)::UTINYINT AS saves_by_rule,\n    FROM {{ ref('event_pitching_flags') }}\n    GROUP BY 1, 2  \n),\n\nevents_with_flags AS (\n    SELECT\n        event_agg.*,\n        flag_agg.* EXCLUDE (game_id, player_id),\n    FROM event_agg\n    LEFT JOIN flag_agg USING (game_id, player_id)\n),\n\nbox_agg AS (\n    SELECT\n        game_id,\n        stats.pitcher_id AS player_id,\n        ANY_VALUE(CASE WHEN stats.side = 'Home' THEN games.home_team_id ELSE games.away_team_id END) AS team_id,\n        SUM(stats.outs_recorded)::UTINYINT AS outs_recorded,\n        SUM(stats.batters_faced)::UTINYINT AS batters_faced,\n        SUM(stats.hits)::UTINYINT AS hits,\n        SUM(stats.doubles)::UTINYINT AS doubles,\n        SUM(stats.triples)::UTINYINT AS triples,\n        SUM(stats.home_runs)::UTINYINT AS home_runs,\n        SUM(stats.runs)::UTINYINT AS runs,\n        SUM(stats.earned_runs)::UTINYINT AS earned_runs,\n        SUM(stats.walks)::UTINYINT AS walks,\n        SUM(stats.intentional_walks)::UTINYINT AS intentional_walks,\n        SUM(stats.strikeouts)::UTINYINT AS strikeouts,\n        SUM(stats.hit_by_pitches)::UTINYINT AS hit_by_pitches,\n        SUM(stats.wild_pitches)::UTINYINT AS wild_pitches,\n        SUM(stats.balks)::UTINYINT AS balks,\n        SUM(stats.sacrifice_hits)::UTINYINT AS sacrifice_hits,\n        SUM(stats.sacrifice_flies)::UTINYINT AS sacrifice_flies,\n        SUM(stats.singles)::UTINYINT AS singles,\n        SUM(stats.total_bases)::UTINYINT AS total_bases,\n        SUM(stats.on_base_opportunities)::UTINYINT AS on_base_opportunities,\n        SUM(stats.on_base_successes)::UTINYINT AS on_base_successes,\n        SUM(stats.games_started)::UTINYINT AS games_started,\n        SUM(stats.games_relieved)::UTINYINT AS games_relieved,\n        SUM(stats.games_finished)::UTINYINT AS games_finished,\n    FROM {{ ref('stg_box_score_pitching_lines') }} AS stats\n    -- This join ensures that we only get the box score lines for games that\n    -- do not have an event file.\n    INNER JOIN {{ ref('stg_games') }} AS games USING (game_id)\n    WHERE games.source_type = 'BoxScore'\n    GROUP BY 1, 2\n),\n\nunioned AS (\n    SELECT * FROM events_with_flags\n    UNION ALL BY NAME\n    SELECT * FROM box_agg\n),\n\nwith_game_info AS (\n    SELECT\n        game_id,\n        player_id,\n        unioned.team_id,\n        ROUND(unioned.outs_recorded / 3, 4)::DECIMAL(6, 4) AS innings_pitched,\n        CASE WHEN player_id = games.winning_pitcher_id THEN 1 ELSE 0 END::UTINYINT AS wins,\n        CASE WHEN player_id = games.losing_pitcher_id THEN 1 ELSE 0 END::UTINYINT AS losses,\n        CASE WHEN player_id = games.save_pitcher_id THEN 1 ELSE 0 END::UTINYINT AS saves,\n        -- Box score will have ER directly, but event data will need the join\n        COALESCE(earned_runs.earned_runs, unioned.earned_runs)::UTINYINT AS earned_runs,\n        unioned.* EXCLUDE (game_id, player_id, team_id, earned_runs),\n        (saves + unioned.blown_saves)::UTINYINT AS save_opportunities,\n    FROM unioned\n    LEFT JOIN {{ ref('stg_games') }} AS games USING (game_id)\n    LEFT JOIN {{ ref('stg_game_earned_runs') }} AS earned_runs USING (game_id, player_id)\n),\n\nfinal AS (\n    SELECT\n        *,\n        CASE WHEN COUNT(*) OVER team_game = 1\n                THEN 1\n            ELSE 0\n        END::UTINYINT AS complete_games,\n        -- It's possible to record a shutout without a complete game\n        -- if no other pitchers record outs (see Ernie Shore)\n        CASE WHEN SUM(runs) OVER team_game = 0\n                AND SUM(outs_recorded) OVER team_game = outs_recorded\n                THEN 1\n            ELSE 0\n        END::UTINYINT AS shutouts,\n        CASE WHEN games_started = 1 AND outs_recorded >= 18 AND earned_runs <= 3 THEN 1 ELSE 0 END::UTINYINT AS quality_starts,\n        CASE WHEN games_started = 1 AND quality_starts = 0 AND wins = 1 THEN 1 ELSE 0 END::UTINYINT AS cheap_wins,\n        CASE WHEN quality_starts = 1 AND losses = 1 THEN 1 ELSE 0 END::UTINYINT AS tough_losses,\n        CASE WHEN games_started = 1 AND wins + losses = 0 THEN 1 ELSE 0 END::UTINYINT AS no_decisions,\n        CASE WHEN complete_games = 1 AND hits = 0 AND outs_recorded >= 27 THEN 1 ELSE 0 END::UTINYINT AS no_hitters,\n        -- Easy to calculate perfect games for games with event files, but box scores don't have ROEs.\n        -- The logic here would be broken if a batter reached on an error and then was out on the bases,\n        -- but no such event happened in prior to the event data era (maybe ever?)\n        (\n        CASE WHEN no_hitters = 1 AND (times_reached_base = 0\n                OR (outs_recorded >= batters_faced AND COALESCE(walks, 0) + COALESCE(hit_by_pitches, 0) = 0) \n                ) THEN 1 \n            ELSE 0 END)::UTINYINT AS perfect_games, \n    FROM with_game_info\n    WINDOW team_game AS (PARTITION BY team_id, game_id)\n)\n\nSELECT * FROM final", "language": "sql", "refs": [{"name": "event_pitching_stats", "package": null, "version": null}, {"name": "event_pitching_flags", "package": null, "version": null}, {"name": "stg_box_score_pitching_lines", "package": null, "version": null}, {"name": "stg_games", "package": null, "version": null}, {"name": "stg_games", "package": null, "version": null}, {"name": "stg_game_earned_runs", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.baseball_computer.event_level_pitching_stats"], "nodes": ["model.baseball_computer.event_pitching_stats", "model.baseball_computer.event_pitching_flags", "model.baseball_computer.stg_box_score_pitching_lines", "model.baseball_computer.stg_games", "model.baseball_computer.stg_game_earned_runs"]}, "compiled_path": null, "contract": {"enforced": true, "alias_types": true, "checksum": "b16a4e760589f8413ea01ed3f25d594ab3f62b48630ffc4549aa98419428140f"}, "access": "protected", "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true, "columns": ["game_id", "player_id"]}], "version": null, "latest_version": null, "deprecation_date": null}, "model.baseball_computer.player_position_game_fielding_stats": {"database": "bc", "schema": "main_models", "name": "player_position_game_fielding_stats", "resource_type": "model", "package_name": "baseball_computer", "path": "intermediate/player_game_level/player_position_game_fielding_stats.sql", "original_file_path": "models/intermediate/player_game_level/player_position_game_fielding_stats.sql", "unique_id": "model.baseball_computer.player_position_game_fielding_stats", "fqn": ["baseball_computer", "intermediate", "player_game_level", "player_position_game_fielding_stats"], "alias": "player_position_game_fielding_stats", "checksum": {"name": "sha256", "checksum": "227b9e3a6785194fd2a55d2804c2ae377472ccaf3b047248873a8bdf2c2921df"}, "config": {"enabled": true, "alias": null, "schema": "models", "database": null, "tags": [], "meta": {"primary_keys": ["game_id", "player_id", "fielding_position"]}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {"game_id": {"name": "game_id", "description": "Retrosheet game ID, A 12-character string structured as follows:\n\n    - Chars 1-3: Home team ID\n    - Chars 4-11: Date (YYYYMMDD)\n    - Char 12: Game number (0 if only one game was played on that day)\n    \n    Example: MLN195607170", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "player_id": {"name": "player_id", "description": "Retrosheet 8-character person ID for a player, which consists of\n    the first four characters of the last name, the first character\n    of the first name, and then three digits to disambiguate between\n    players with the same five characters.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "fielding_position": {"name": "fielding_position", "description": "A 1-byte integer for the traditional 1-9 fielder identification, along with additional\n    values for unknown fielders and batting-specific positions. Depending on the\n    context, this value may be NULL for batting positions.\n    ```\n    0 - Unknown\n    1 - Pitcher\n    2 - Catcher\n    3 - First baseman\n    4 - Second baseman\n    5 - Third baseman\n    6 - Shortstop\n    7 - Left fielder\n    8 - Center fielder\n    9 - Right fielder\n    10 - Designated Hitter\n    11 - Pinch Hitter\n    12 - Pinch Runner\n    ```", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "team_id": {"name": "team_id", "description": "Retrosheet team ID, 3-character string which identifies the team\n    that a franchise was playing as at a given time.", "meta": {}, "data_type": "team_id", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "games_started": {"name": "games_started", "description": "(GS) Number of games started by a player.", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "outs_played": {"name": "outs_played", "description": "", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "putouts": {"name": "putouts", "description": "(PO) Outs credited to fielder based on who physically made the out, either by:\n        - Catching a ball on the fly\n        - Tagging a runner out\n        - Forcing a runner out\n        - Catching a called third strike\n        - Being the nearest fielder to a baserunner who is called out for interference\n\n    Putouts have been an important baseball statistic longer than MLB has been around,\n    so it has excellent historical coverage. Unassisted\n    putouts are very important in determining the location of batted balls.\n    \n    In modern baseball rules, each out in the game is credited as a putout, and at the play/event\n    level this will always be the case. However, in older games for which we only have box score or season-level\n    data, rare plays like baserunner interference may not be assigned to a specific fielder.\n    \n    Every play-by-play out has a putout, but the fielder who gets the putout may be unknown.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "assists": {"name": "assists", "description": "(A) Number of outs in which a fielder touched the ball before anothber fielder recorded a putout.\n    This is almost always a throw to another fielder, but it can also be a deflection.\n\n    Assists have excellent historical data coverage, and they are particularly useful in determining\n    the location of ground balls. The data is present in almost all season-level and game-level accounts.\n    However, individual plays with unknown-fielder putouts are likely to be missing assists entirely.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "errors": {"name": "errors", "description": "(E) Number of errors recorded by a fielder. This is recorded when a fielder either fails to make an out\n    that an average fielder should have made or makes a bad play that allows a baserunner to advance.\n    Errors are awarded at the scorekeeper's discretion, making them more subjective than the other two main\n    fielding stats.\n    \n    Errors used to be a much larger component of evaluating fielder quality.\n    When the stat was invented, routine plays were completed much less frequently than they are today.\n    As baseball evolved, routine plays became truly routine, and a fielder's ability to get to the ball\n    became more relevant than their ability\n    to reliably convert the out once they got there. While plenty of people as early as the 19th century were\n    aware of this, statistics mostly failed to reflect it until the 1980s, when Bill James and others\n    developed Range Factor and other stats that attempted to measure a fielder's ability to create chances.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "double_plays": {"name": "double_plays", "description": "(DP) Number of times a play ended in two outs being recorded.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "triple_plays": {"name": "triple_plays", "description": "(TP) Number of times a play ended in three outs being recorded.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "plate_appearances_in_field": {"name": "plate_appearances_in_field", "description": "", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "plate_appearances_in_field_with_ball_in_play": {"name": "plate_appearances_in_field_with_ball_in_play", "description": "", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "reaching_errors": {"name": "reaching_errors", "description": "", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "fielders_choices": {"name": "fielders_choices", "description": "(FC) Number of times a fielder who fielded the ball attempted to put out a baserunner other than the batter.\n    A fielder's choice can be assigned when the attempt fails, even if there was no error on the play.\n\n    Fielder's choices are only available on play-by-play data and tend to be recorded when the attempt was\n    a tag and not a force. Force plays are explicitly noted and have little overlap with fielder's choices.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "assisted_putouts": {"name": "assisted_putouts", "description": "Number of putouts by the fielder that had at least one recorded, associated assist. For older games, this may be a subset\n    of the true total assisted putouts, as unknown-fielder putouts almost never have recorded assists.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "in_play_putouts": {"name": "in_play_putouts", "description": "", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "in_play_assists": {"name": "in_play_assists", "description": "", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "balls_hit_to": {"name": "balls_hit_to", "description": "", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "ground_ball_double_plays": {"name": "ground_ball_double_plays", "description": "", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "passed_balls": {"name": "passed_balls", "description": "(PB) Number of passed balls.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "stolen_bases": {"name": "stolen_bases", "description": "(SB) Number of successful stolen bases.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "caught_stealing": {"name": "caught_stealing", "description": "(CS) Number of times a runner was caught stealing.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "surplus_box_putouts": {"name": "surplus_box_putouts", "description": "", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "surplus_box_assists": {"name": "surplus_box_assists", "description": "", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "surplus_box_errors": {"name": "surplus_box_errors", "description": "", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "unknown_putouts_while_fielding": {"name": "unknown_putouts_while_fielding", "description": "", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "pickoffs": {"name": "pickoffs", "description": "", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "double_plays_started": {"name": "double_plays_started", "description": "", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "ground_ball_double_plays_started": {"name": "ground_ball_double_plays_started", "description": "", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}}, "meta": {"primary_keys": ["game_id", "player_id", "fielding_position"]}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "baseball_computer://models/intermediate/player_game_level/player_position_game_fielding_stats.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "models", "contract": {"enforced": true}, "meta": {"primary_keys": ["game_id", "player_id", "fielding_position"]}}, "created_at": 1702281449.390789, "relation_name": "\"bc\".\"main_models\".\"player_position_game_fielding_stats\"", "raw_code": "{{\n  config(\n    materialized = 'table',\n    )\n}}\nWITH box_agg AS (\n    SELECT\n        game_id,\n        stats.fielder_id AS player_id,\n        stats.fielding_position,\n        MIN(CASE WHEN stats.side = 'Home' THEN games.home_team_id ELSE games.away_team_id END) AS team_id,\n        SUM(stats.outs_played) AS outs_played,\n        CASE WHEN BOOL_OR(stats.putouts IS NULL) THEN NULL ELSE SUM(stats.putouts) END AS putouts,\n        CASE WHEN BOOL_OR(stats.assists IS NULL) THEN NULL ELSE SUM(stats.assists) END AS assists,\n        CASE WHEN BOOL_OR(stats.errors IS NULL) THEN NULL ELSE SUM(stats.errors) END AS errors,\n        CASE WHEN BOOL_OR(stats.double_plays IS NULL) THEN NULL ELSE SUM(stats.double_plays) END AS double_plays,\n        CASE WHEN BOOL_OR(stats.triple_plays IS NULL) THEN NULL ELSE SUM(stats.triple_plays) END AS triple_plays,\n        CASE WHEN BOOL_OR(stats.passed_balls IS NULL) THEN NULL ELSE SUM(stats.passed_balls) END AS passed_balls\n    FROM {{ ref('stg_box_score_fielding_lines') }} AS stats\n    INNER JOIN {{ ref('stg_games') }} AS games USING (game_id)\n    GROUP BY 1, 2, 3\n),\n\nevent_agg AS (\n    SELECT\n        game_id,\n        player_id,\n        fielding_position,\n        MIN(team_id) AS team_id,\n        SUM(outs_played)::UTINYINT AS outs_played,\n        SUM(plate_appearances_in_field)::UTINYINT AS plate_appearances_in_field,\n        SUM(plate_appearances_in_field_with_ball_in_play)::UTINYINT AS plate_appearances_in_field_with_ball_in_play,\n        SUM(putouts)::UTINYINT AS putouts,\n        SUM(assists)::UTINYINT AS assists,\n        SUM(errors)::UTINYINT AS errors,\n        SUM(fielders_choices)::UTINYINT AS fielders_choices,\n        SUM(assisted_putouts)::UTINYINT AS assisted_putouts,\n        SUM(in_play_putouts)::UTINYINT AS in_play_putouts,\n        SUM(in_play_assists)::UTINYINT AS in_play_assists,\n        SUM(double_plays)::UTINYINT AS double_plays,\n        SUM(triple_plays)::UTINYINT AS triple_plays,\n        SUM(ground_ball_double_plays)::UTINYINT AS ground_ball_double_plays,\n        SUM(stolen_bases)::UTINYINT AS stolen_bases,\n        SUM(caught_stealing)::UTINYINT AS caught_stealing,\n        SUM(passed_balls)::UTINYINT AS passed_balls,\n        SUM(balls_hit_to)::UTINYINT AS balls_hit_to,\n        SUM(reaching_errors)::UTINYINT AS reaching_errors,\n        SUM(pickoffs)::UTINYINT AS pickoffs,\n        SUM(double_plays_started)::UTINYINT AS double_plays_started,\n        SUM(ground_ball_double_plays_started)::UTINYINT AS ground_ball_double_plays_started,\n        SUM(unknown_putouts_while_fielding)::UTINYINT AS unknown_putouts_while_fielding\n    FROM {{ ref('event_player_fielding_stats') }}\n    GROUP BY 1, 2, 3\n),\n\n-- Unlike batting/fielding, we join the data instead of unioning\n-- because box scores are more reliable for fielding plays\nfinal AS (\n    SELECT\n        game_id,\n        player_id,\n        fielding_position,\n        COALESCE(event_agg.team_id, box_agg.team_id) AS team_id,\n        CASE\n            WHEN appearances.first_fielding_position = fielding_position\n                OR appearances.games_ohtani_rule = 1 AND fielding_position IN (1, 10)\n                THEN appearances.games_started\n            ELSE 0\n        END::UTINYINT AS games_started,\n        -- Outs played data is always more authoritative from events, unlike other fielding data\n        COALESCE(event_agg.outs_played, box_agg.outs_played)::UTINYINT AS outs_played,\n        -- The rules for combining box and event fielding data are:\n        -- If there is an event account with no unknown plays while the fielder was playing, use it\n        -- Otherwise, if there is there is a box score account with data for that field, use it\n        -- If the box score account exists but is missing data for that particular field, leave it empty\n        -- If there is an event account but no box score account, use events\n        CASE WHEN box_agg.game_id IS NULL OR event_agg.unknown_putouts_while_fielding = 0\n                THEN event_agg.putouts\n            ELSE box_agg.putouts\n        END::UTINYINT AS putouts,\n        CASE WHEN box_agg.game_id IS NULL OR event_agg.unknown_putouts_while_fielding = 0\n                THEN event_agg.assists\n            ELSE box_agg.assists\n        END::UTINYINT AS assists,\n        CASE WHEN box_agg.game_id IS NULL OR event_agg.unknown_putouts_while_fielding = 0\n                THEN event_agg.errors\n            ELSE box_agg.errors\n        END::UTINYINT AS errors,\n        CASE WHEN box_agg.game_id IS NULL OR event_agg.unknown_putouts_while_fielding = 0\n                THEN event_agg.double_plays\n            ELSE box_agg.double_plays\n        END::UTINYINT AS double_plays,\n        CASE WHEN box_agg.game_id IS NULL OR event_agg.unknown_putouts_while_fielding = 0\n                THEN event_agg.triple_plays\n            ELSE box_agg.triple_plays\n        END::UTINYINT AS triple_plays,\n        event_agg.plate_appearances_in_field,\n        event_agg.plate_appearances_in_field_with_ball_in_play,\n        event_agg.reaching_errors,\n        event_agg.fielders_choices,\n        event_agg.assisted_putouts,\n        event_agg.in_play_putouts,\n        event_agg.in_play_assists,\n        event_agg.balls_hit_to,\n        event_agg.ground_ball_double_plays,\n        COALESCE(box_agg.passed_balls, event_agg.passed_balls)::UTINYINT AS passed_balls,\n        event_agg.stolen_bases,\n        event_agg.caught_stealing,\n        event_agg.unknown_putouts_while_fielding,\n        event_agg.pickoffs,\n        event_agg.double_plays_started,\n        event_agg.ground_ball_double_plays_started,\n        (box_agg.putouts - event_agg.putouts)::TINYINT AS surplus_box_putouts,\n        (box_agg.assists - event_agg.assists)::TINYINT AS surplus_box_assists,\n        (box_agg.errors - event_agg.errors)::TINYINT AS surplus_box_errors,\n    FROM box_agg\n    FULL OUTER JOIN event_agg USING (game_id, player_id, fielding_position)\n    LEFT JOIN {{ ref('player_game_appearances') }} AS appearances USING (game_id, player_id)\n)\n\nSELECT * FROM final", "language": "sql", "refs": [{"name": "stg_box_score_fielding_lines", "package": null, "version": null}, {"name": "stg_games", "package": null, "version": null}, {"name": "event_player_fielding_stats", "package": null, "version": null}, {"name": "player_game_appearances", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.baseball_computer.stg_box_score_fielding_lines", "model.baseball_computer.stg_games", "model.baseball_computer.event_player_fielding_stats", "model.baseball_computer.player_game_appearances"]}, "compiled_path": null, "contract": {"enforced": true, "alias_types": true, "checksum": "b2880938694e26c6d8dde5d0bedadded3d7c7cc896bb23b732603bf520073611"}, "access": "protected", "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true, "columns": ["game_id", "player_id", "fielding_position"]}], "version": null, "latest_version": null, "deprecation_date": null}, "model.baseball_computer.personnel_fielding_states": {"database": "bc", "schema": "main_models", "name": "personnel_fielding_states", "resource_type": "model", "package_name": "baseball_computer", "path": "intermediate/states/personnel_fielding_states.sql", "original_file_path": "models/intermediate/states/personnel_fielding_states.sql", "unique_id": "model.baseball_computer.personnel_fielding_states", "fqn": ["baseball_computer", "intermediate", "states", "personnel_fielding_states"], "alias": "personnel_fielding_states", "checksum": {"name": "sha256", "checksum": "4c51c40bdea78206184e9508c91e5a0aa8a101df3bfcb721976fbd29daa1a95a"}, "config": {"enabled": true, "alias": null, "schema": "models", "database": null, "tags": [], "meta": {"primary_keys": ["personnel_fielding_key", "fielding_position"]}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {"game_id": {"name": "game_id", "description": "Retrosheet game ID, A 12-character string structured as follows:\n\n    - Chars 1-3: Home team ID\n    - Chars 4-11: Date (YYYYMMDD)\n    - Char 12: Game number (0 if only one game was played on that day)\n    \n    Example: MLN195607170", "meta": {}, "data_type": "varchar", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "fielding_team_id": {"name": "fielding_team_id", "description": "", "meta": {}, "data_type": "team_id", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "fielding_side": {"name": "fielding_side", "description": "", "meta": {}, "data_type": "side", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "personnel_fielding_key": {"name": "personnel_fielding_key", "description": "", "meta": {}, "data_type": "bigint", "constraints": [], "quote": null, "tags": []}, "start_event_id": {"name": "start_event_id", "description": "", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "end_event_id": {"name": "end_event_id", "description": "", "meta": {}, "data_type": "uinteger", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "player_id": {"name": "player_id", "description": "Retrosheet 8-character person ID for a player, which consists of\n    the first four characters of the last name, the first character\n    of the first name, and then three digits to disambiguate between\n    players with the same five characters.", "meta": {}, "data_type": "varchar", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "fielding_position": {"name": "fielding_position", "description": "A 1-byte integer for the traditional 1-9 fielder identification, along with additional\n    values for unknown fielders and batting-specific positions. Depending on the\n    context, this value may be NULL for batting positions.\n    ```\n    0 - Unknown\n    1 - Pitcher\n    2 - Catcher\n    3 - First baseman\n    4 - Second baseman\n    5 - Third baseman\n    6 - Shortstop\n    7 - Left fielder\n    8 - Center fielder\n    9 - Right fielder\n    10 - Designated Hitter\n    11 - Pinch Hitter\n    12 - Pinch Runner\n    ```", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}}, "meta": {"primary_keys": ["personnel_fielding_key", "fielding_position"]}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "baseball_computer://models/intermediate/states/personnel_fielding_states.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "models", "contract": {"enforced": true}, "meta": {"primary_keys": ["personnel_fielding_key", "fielding_position"]}}, "created_at": 1702281449.423023, "relation_name": "\"bc\".\"main_models\".\"personnel_fielding_states\"", "raw_code": "{{\n  config(\n    materialized = 'table',\n    )\n}}\n-- We create the concept of a personnel state as a range of events\n-- where none of the players in the lineup change. This allows us\n-- to store personnel info at a lower cardinality than one row per event-player.\nWITH ranges AS (\n    SELECT DISTINCT\n        game_id,\n        side,\n        start_event_id,\n        COALESCE(\n            MIN(start_event_id - 1) OVER w,\n            end_event_id\n        )::UINTEGER AS end_event_id\n    FROM {{ ref('stg_game_fielding_appearances') }}\n    -- The MIN over this window is the next-largest value\n    WINDOW w AS (\n        PARTITION BY game_id, side\n        ORDER BY start_event_id\n        RANGE BETWEEN 1 FOLLOWING AND UNBOUNDED FOLLOWING\n    )\n),\n\nfinal AS (\n    SELECT\n        appearances.game_id,\n        CASE WHEN appearances.side = 'Home' THEN games.home_team_id ELSE games.away_team_id END AS fielding_team_id,\n        appearances.side AS fielding_side,\n        (games.game_key + ranges.start_event_id) * CASE WHEN appearances.side = 'Home' THEN 1 ELSE -1 END\n        AS personnel_fielding_key,\n        ranges.start_event_id,\n        ranges.end_event_id,\n        appearances.player_id,\n        appearances.fielding_position,\n    FROM {{ ref('stg_game_fielding_appearances') }} AS appearances\n    INNER JOIN {{ ref('stg_games') }} AS games USING (game_id)\n    INNER JOIN ranges\n        ON ranges.game_id = appearances.game_id\n            AND ranges.side = appearances.side\n            AND ranges.start_event_id <= appearances.end_event_id\n            AND ranges.end_event_id >= appearances.start_event_id\n    -- We need this to dedupe positions on multi-sub events. There's definitely\n    -- a better way to to this that fails louder on real dupes.\n    QUALIFY ROW_NUMBER() OVER (\n        PARTITION BY personnel_fielding_key, appearances.fielding_position\n        ORDER BY appearances.end_event_id DESC\n    ) = 1\n)\n\nSELECT * FROM final", "language": "sql", "refs": [{"name": "stg_game_fielding_appearances", "package": null, "version": null}, {"name": "stg_game_fielding_appearances", "package": null, "version": null}, {"name": "stg_games", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.baseball_computer.stg_game_fielding_appearances", "model.baseball_computer.stg_games"]}, "compiled_path": null, "contract": {"enforced": true, "alias_types": true, "checksum": "e3a95f36f003d07d45164f1874c4549d557ce50094872dc166fce66702d06357"}, "access": "protected", "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true, "columns": ["personnel_fielding_key", "fielding_position"]}], "version": null, "latest_version": null, "deprecation_date": null}, "model.baseball_computer.event_states_batter_pitcher": {"database": "bc", "schema": "main_models", "name": "event_states_batter_pitcher", "resource_type": "model", "package_name": "baseball_computer", "path": "intermediate/states/event_states_batter_pitcher.sql", "original_file_path": "models/intermediate/states/event_states_batter_pitcher.sql", "unique_id": "model.baseball_computer.event_states_batter_pitcher", "fqn": ["baseball_computer", "intermediate", "states", "event_states_batter_pitcher"], "alias": "event_states_batter_pitcher", "checksum": {"name": "sha256", "checksum": "7bdead1197601fbb175aec1fff5f5177943267127ae39490e9e4e3dda0b7d356"}, "config": {"enabled": true, "alias": null, "schema": "models", "database": null, "tags": [], "meta": {"primary_keys": ["event_key"]}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {"game_id": {"name": "game_id", "description": "Retrosheet game ID, A 12-character string structured as follows:\n\n    - Chars 1-3: Home team ID\n    - Chars 4-11: Date (YYYYMMDD)\n    - Char 12: Game number (0 if only one game was played on that day)\n    \n    Example: MLN195607170", "meta": {}, "data_type": "varchar", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "event_key": {"name": "event_key", "description": "4-byte integer that uniquely identifies an event across the entire\n    dataset (contrast with event_id, which is game-specific). The key\n    is generated deterministically given the same dataset, but it may\n    change when the data is updated. It is guaranteed to follow the \n    order of events within a single game.", "meta": {}, "data_type": "uinteger", "constraints": [], "quote": null, "tags": []}, "batting_side": {"name": "batting_side", "description": "The side that was batting when the entity took place.", "meta": {}, "data_type": "side", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "fielding_side": {"name": "fielding_side", "description": "", "meta": {}, "data_type": "side", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "batting_team_id": {"name": "batting_team_id", "description": "", "meta": {}, "data_type": "team_id", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "fielding_team_id": {"name": "fielding_team_id", "description": "", "meta": {}, "data_type": "team_id", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "batter_id": {"name": "batter_id", "description": "Retrosheet 8-character person ID for the batter associated with the\n    entity.", "meta": {}, "data_type": "varchar", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "batter_lineup_position": {"name": "batter_lineup_position", "description": "", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "batter_fielding_position": {"name": "batter_fielding_position", "description": "", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "pitcher_id": {"name": "pitcher_id", "description": "Retrosheet 8-character person ID for the pitcher associated with the\n    entity.", "meta": {}, "data_type": "varchar", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "batter_hand": {"name": "batter_hand", "description": "", "meta": {}, "data_type": "hand", "constraints": [], "quote": null, "tags": []}, "pitcher_hand": {"name": "pitcher_hand", "description": "", "meta": {}, "data_type": "hand", "constraints": [], "quote": null, "tags": []}, "strikeout_responsible_batter_id": {"name": "strikeout_responsible_batter_id", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "walk_responsible_pitcher_id": {"name": "walk_responsible_pitcher_id", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}}, "meta": {"primary_keys": ["event_key"]}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "baseball_computer://models/intermediate/states/event_states_batter_pitcher.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "models", "contract": {"enforced": true}, "meta": {"primary_keys": ["event_key"]}}, "created_at": 1702281449.42568, "relation_name": "\"bc\".\"main_models\".\"event_states_batter_pitcher\"", "raw_code": "{{ config(\n    materialized = 'table',\n    )\n}}\nWITH joined AS (\n    SELECT\n        events.game_id,\n        events.event_key,\n        events.batting_side,\n        CASE WHEN events.batting_side = 'Home' THEN 'Away' ELSE 'Home' END::SIDE AS fielding_side,\n        events.batting_team_id,\n        events.fielding_team_id,\n        events.batter_id,\n        events.batter_lineup_position,\n        batter_field.fielding_position AS batter_fielding_position,\n        events.pitcher_id,\n        CASE\n            WHEN events.specified_batter_hand IS NOT NULL THEN events.specified_batter_hand\n            WHEN batters.bats = 'B' AND pitchers.throws = 'L' THEN 'R'\n            WHEN batters.bats = 'B' AND pitchers.throws = 'R' THEN 'L'\n            ELSE NULLIF(batters.bats, 'B')\n        END::HAND AS batter_hand,\n        CASE\n            WHEN events.specified_pitcher_hand IS NOT NULL THEN events.specified_pitcher_hand\n            WHEN pitchers.throws = 'B' AND batter_hand = 'L' THEN 'R'\n            WHEN pitchers.throws = 'B' AND batter_hand = 'R' THEN 'L'\n            ELSE NULLIF(pitchers.throws, 'B')\n        END::HAND AS pitcher_hand,\n        events.strikeout_responsible_batter_id,\n        events.walk_responsible_pitcher_id,\n        {# fielders.catcher_id,\n        fielders.first_base_id,\n        fielders.second_base_id,\n        fielders.third_base_id,\n        fielders.shortstop_id,\n        fielders.left_field_id,\n        fielders.center_field_id,\n        fielders.right_field_id #}\n    FROM {{ ref('stg_events') }} AS events\n    {# INNER JOIN {{ ref('event_fielders_flat') }} AS fielders USING (event_key) #}\n    LEFT JOIN {{ ref('people') }} AS batters\n        ON events.batter_id = batters.player_id\n    LEFT JOIN {{ ref('people') }} AS pitchers\n        ON events.pitcher_id = pitchers.player_id\n    LEFT JOIN {{ ref('stg_game_fielding_appearances') }} AS batter_field\n        ON events.game_id = batter_field.game_id\n            AND events.batter_id = batter_field.player_id\n            AND events.event_id BETWEEN batter_field.start_event_id AND batter_field.end_event_id\n),\n\nthe_singular_exception_of_shohhei_ohtani AS (\n    SELECT *\n    FROM joined\n    -- Choose DH when he's both, just because\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY event_key ORDER BY batter_fielding_position DESC) = 1\n)\n\n\nSELECT * FROM the_singular_exception_of_shohhei_ohtani", "language": "sql", "refs": [{"name": "stg_events", "package": null, "version": null}, {"name": "people", "package": null, "version": null}, {"name": "people", "package": null, "version": null}, {"name": "stg_game_fielding_appearances", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.baseball_computer.stg_events", "model.baseball_computer.people", "model.baseball_computer.stg_game_fielding_appearances"]}, "compiled_path": null, "contract": {"enforced": true, "alias_types": true, "checksum": "9c663bf5f8bef1aad1e0e4a789649ed853f64c289cc6a9902e566db1f169dab6"}, "access": "protected", "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true, "columns": ["event_key"]}], "version": null, "latest_version": null, "deprecation_date": null}, "model.baseball_computer.event_score_states": {"database": "bc", "schema": "main_models", "name": "event_score_states", "resource_type": "model", "package_name": "baseball_computer", "path": "intermediate/states/event_score_states.sql", "original_file_path": "models/intermediate/states/event_score_states.sql", "unique_id": "model.baseball_computer.event_score_states", "fqn": ["baseball_computer", "intermediate", "states", "event_score_states"], "alias": "event_score_states", "checksum": {"name": "sha256", "checksum": "07695925edd645af865c738ce1ec12cd8efa975ad8d7c4e05a530f65df8c3e46"}, "config": {"enabled": true, "alias": null, "schema": "models", "database": null, "tags": [], "meta": {"primary_keys": ["event_key"]}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {"event_key": {"name": "event_key", "description": "4-byte integer that uniquely identifies an event across the entire\n    dataset (contrast with event_id, which is game-specific). The key\n    is generated deterministically given the same dataset, but it may\n    change when the data is updated. It is guaranteed to follow the \n    order of events within a single game.", "meta": {}, "data_type": "uinteger", "constraints": [], "quote": null, "tags": []}, "score_home_start": {"name": "score_home_start", "description": "The home team's score at the start of the event.", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "score_away_start": {"name": "score_away_start", "description": "The away team's score at the start of the event.", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "score_home_end": {"name": "score_home_end", "description": "The home team's score at the end of the event.", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "score_away_end": {"name": "score_away_end", "description": "The away team's score at the end of the event.", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "runs_on_play": {"name": "runs_on_play", "description": "The total number of runs that scored during the event.\n    Mutually exclusive with all other events.", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}}, "meta": {"primary_keys": ["event_key"]}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "baseball_computer://models/intermediate/states/event_score_states.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "models", "contract": {"enforced": true}, "meta": {"primary_keys": ["event_key"]}}, "created_at": 1702281449.420634, "relation_name": "\"bc\".\"main_models\".\"event_score_states\"", "raw_code": "{{\n  config(\n    materialized = 'table',\n    )\n}}\nWITH windowed AS (\n    SELECT\n        e.event_key,\n        SUM(e.runs_on_play) FILTER (WHERE e.batting_side = 'Home') OVER start_event AS score_home_start,\n        SUM(e.runs_on_play) FILTER (WHERE e.batting_side = 'Away') OVER start_event AS score_away_start,\n        SUM(e.runs_on_play) FILTER (WHERE e.batting_side = 'Home') OVER end_event AS score_home_end,\n        SUM(e.runs_on_play) FILTER (WHERE e.batting_side = 'Away') OVER end_event AS score_away_end,\n        e.runs_on_play,\n    FROM {{ ref('stg_events') }} AS e\n    WINDOW\n        start_event AS (\n            PARTITION BY e.game_id\n            ORDER BY e.event_key\n            ROWS BETWEEN UNBOUNDED PRECEDING AND 1 PRECEDING\n        ),\n        end_event AS (\n            PARTITION BY e.game_id\n            ORDER BY e.event_key\n            ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\n        )\n),\n\nfinal AS (\n    SELECT\n        event_key,\n        COALESCE(score_home_start, 0)::UTINYINT AS score_home_start,\n        COALESCE(score_away_end, 0)::UTINYINT AS score_away_start,\n        COALESCE(score_home_end, 0)::UTINYINT AS score_home_end,\n        COALESCE(score_away_end, 0)::UTINYINT AS score_away_end,\n        runs_on_play\n    FROM windowed\n)\n\nSELECT * FROM final", "language": "sql", "refs": [{"name": "stg_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.baseball_computer.stg_events"]}, "compiled_path": null, "contract": {"enforced": true, "alias_types": true, "checksum": "d165002dfc5ff398cfb866e92216fc5db0d47cb77df4c8856557bd730feb2c08"}, "access": "protected", "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true, "columns": ["event_key"]}], "version": null, "latest_version": null, "deprecation_date": null}, "model.baseball_computer.event_count_states": {"database": "bc", "schema": "main_models", "name": "event_count_states", "resource_type": "model", "package_name": "baseball_computer", "path": "intermediate/states/event_count_states.sql", "original_file_path": "models/intermediate/states/event_count_states.sql", "unique_id": "model.baseball_computer.event_count_states", "fqn": ["baseball_computer", "intermediate", "states", "event_count_states"], "alias": "event_count_states", "checksum": {"name": "sha256", "checksum": "15e2e0cbf1ab0c27c77a55667a6ecca61c4755195ed650fac444f40fa849c6a5"}, "config": {"enabled": true, "alias": null, "schema": "models", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "models"}, "created_at": 1702281447.8797288, "relation_name": "\"bc\".\"main_models\".\"event_count_states\"", "raw_code": "-- For each event, pivot out counts that occurred during it,\n-- including same PAs across multiple events (I think), and\n-- the count at which the event occurred. Sample cols:\n-- occurred_1_strike\n-- result_at_1_strike\n-- occurred_0_1\n-- result_at_0_1\n-- occurrences_of_0_2 (due to fouls)\n-- Indicate missing data with nulls\n-- Worth making a macro to list out each count, each strikes, each balls, etc?\nSELECT 1", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.baseball_computer.event_fielders_flat": {"database": "bc", "schema": "main_models", "name": "event_fielders_flat", "resource_type": "model", "package_name": "baseball_computer", "path": "intermediate/states/event_fielders_flat.sql", "original_file_path": "models/intermediate/states/event_fielders_flat.sql", "unique_id": "model.baseball_computer.event_fielders_flat", "fqn": ["baseball_computer", "intermediate", "states", "event_fielders_flat"], "alias": "event_fielders_flat", "checksum": {"name": "sha256", "checksum": "211ae9de7092d2e711900bef2d0bebc517db41c7d90aba6ac317e6b9f598611e"}, "config": {"enabled": true, "alias": null, "schema": "models", "database": null, "tags": [], "meta": {"primary_keys": ["event_key"]}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {"game_id": {"name": "game_id", "description": "Retrosheet game ID, A 12-character string structured as follows:\n\n    - Chars 1-3: Home team ID\n    - Chars 4-11: Date (YYYYMMDD)\n    - Char 12: Game number (0 if only one game was played on that day)\n    \n    Example: MLN195607170", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "event_id": {"name": "event_id", "description": "1-byte integer that uniquely identifies, in order, an event within a single game.\n    This value will remain the same across multiple versions as long as events\n    are not added or removed from that specific game, and should align exactly\n    with the event_id produced by Retrosheet's BEVENT software.", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "event_key": {"name": "event_key", "description": "4-byte integer that uniquely identifies an event across the entire\n    dataset (contrast with event_id, which is game-specific). The key\n    is generated deterministically given the same dataset, but it may\n    change when the data is updated. It is guaranteed to follow the \n    order of events within a single game.", "meta": {}, "data_type": "uinteger", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "personnel_fielding_key": {"name": "personnel_fielding_key", "description": "", "meta": {}, "data_type": "integer", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "pitcher_id": {"name": "pitcher_id", "description": "Retrosheet 8-character person ID for the pitcher associated with the\n    entity.", "meta": {}, "data_type": "varchar", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "catcher_id": {"name": "catcher_id", "description": "", "meta": {}, "data_type": "varchar", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "first_base_id": {"name": "first_base_id", "description": "", "meta": {}, "data_type": "varchar", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "second_base_id": {"name": "second_base_id", "description": "", "meta": {}, "data_type": "varchar", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "third_base_id": {"name": "third_base_id", "description": "", "meta": {}, "data_type": "varchar", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "shortstop_id": {"name": "shortstop_id", "description": "", "meta": {}, "data_type": "varchar", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "left_field_id": {"name": "left_field_id", "description": "", "meta": {}, "data_type": "varchar", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "center_field_id": {"name": "center_field_id", "description": "", "meta": {}, "data_type": "varchar", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "right_field_id": {"name": "right_field_id", "description": "", "meta": {}, "data_type": "varchar", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}}, "meta": {"primary_keys": ["event_key"]}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "baseball_computer://models/intermediate/states/event_fielders_flat.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "models", "contract": {"enforced": true}, "meta": {"primary_keys": ["event_key"]}}, "created_at": 1702281449.447047, "relation_name": "\"bc\".\"main_models\".\"event_fielders_flat\"", "raw_code": "{{\n  config(\n    materialized = 'table',\n    )\n}}\nWITH fielders AS (\n    SELECT\n        personnel_fielding_key::INT AS personnel_fielding_key,\n        ANY_VALUE(CASE WHEN fielding_position = 1 THEN player_id END)::PLAYER_ID AS pitcher_id,\n        ANY_VALUE(CASE WHEN fielding_position = 2 THEN player_id END)::PLAYER_ID AS catcher_id,\n        ANY_VALUE(CASE WHEN fielding_position = 3 THEN player_id END)::PLAYER_ID AS first_base_id,\n        ANY_VALUE(CASE WHEN fielding_position = 4 THEN player_id END)::PLAYER_ID AS second_base_id,\n        ANY_VALUE(CASE WHEN fielding_position = 5 THEN player_id END)::PLAYER_ID AS third_base_id,\n        ANY_VALUE(CASE WHEN fielding_position = 6 THEN player_id END)::PLAYER_ID AS shortstop_id,\n        ANY_VALUE(CASE WHEN fielding_position = 7 THEN player_id END)::PLAYER_ID AS left_field_id,\n        ANY_VALUE(CASE WHEN fielding_position = 8 THEN player_id END)::PLAYER_ID AS center_field_id,\n        ANY_VALUE(CASE WHEN fielding_position = 9 THEN player_id END)::PLAYER_ID AS right_field_id       \n    FROM {{ ref('personnel_fielding_states') }}\n    GROUP BY 1\n),\n\nfinal AS (\n    SELECT\n        epl.game_id,\n        epl.event_id,\n        epl.event_key,\n        fielders.*\n    FROM {{ ref('event_personnel_lookup') }} AS epl\n    INNER JOIN fielders USING (personnel_fielding_key)\n)\n\nSELECT * FROM final", "language": "sql", "refs": [{"name": "personnel_fielding_states", "package": null, "version": null}, {"name": "event_personnel_lookup", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.baseball_computer.personnel_fielding_states", "model.baseball_computer.event_personnel_lookup"]}, "compiled_path": null, "contract": {"enforced": true, "alias_types": true, "checksum": "0bed3b9eebb2b4f1a9228224feb8421da8762de5bb484cb2dd69344135b4c112"}, "access": "protected", "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true, "columns": ["event_key"]}], "version": null, "latest_version": null, "deprecation_date": null}, "model.baseball_computer.personnel_lineup_states": {"database": "bc", "schema": "main_models", "name": "personnel_lineup_states", "resource_type": "model", "package_name": "baseball_computer", "path": "intermediate/states/personnel_lineup_states.sql", "original_file_path": "models/intermediate/states/personnel_lineup_states.sql", "unique_id": "model.baseball_computer.personnel_lineup_states", "fqn": ["baseball_computer", "intermediate", "states", "personnel_lineup_states"], "alias": "personnel_lineup_states", "checksum": {"name": "sha256", "checksum": "303df6c3e80bf20a77686be06b3c05eb53953ca7b33d060fc3a43c5d85332069"}, "config": {"enabled": true, "alias": null, "schema": "models", "database": null, "tags": [], "meta": {"primary_keys": ["personnel_lineup_key", "lineup_position"]}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {"game_id": {"name": "game_id", "description": "Retrosheet game ID, A 12-character string structured as follows:\n\n    - Chars 1-3: Home team ID\n    - Chars 4-11: Date (YYYYMMDD)\n    - Char 12: Game number (0 if only one game was played on that day)\n    \n    Example: MLN195607170", "meta": {}, "data_type": "varchar", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "batting_team_id": {"name": "batting_team_id", "description": "", "meta": {}, "data_type": "team_id", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "batting_side": {"name": "batting_side", "description": "The side that was batting when the entity took place.", "meta": {}, "data_type": "side", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "personnel_lineup_key": {"name": "personnel_lineup_key", "description": "", "meta": {}, "data_type": "bigint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "start_event_id": {"name": "start_event_id", "description": "", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "end_event_id": {"name": "end_event_id", "description": "", "meta": {}, "data_type": "uinteger", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "player_id": {"name": "player_id", "description": "Retrosheet 8-character person ID for a player, which consists of\n    the first four characters of the last name, the first character\n    of the first name, and then three digits to disambiguate between\n    players with the same five characters.", "meta": {}, "data_type": "varchar", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "lineup_position": {"name": "lineup_position", "description": "1-byte integer for the traditional 1-9 batting order position, along with\n    10 for the pitcher in games with a DH. With very few exceptions, a player will\n    only appear in one lineup position per game. The exceptions are from courtesy\n    runners and the Ohtani rule.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}}, "meta": {"primary_keys": ["personnel_lineup_key", "lineup_position"]}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "baseball_computer://models/intermediate/states/personnel_lineup_states.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "models", "contract": {"enforced": true}, "meta": {"primary_keys": ["personnel_lineup_key", "lineup_position"]}}, "created_at": 1702281449.42809, "relation_name": "\"bc\".\"main_models\".\"personnel_lineup_states\"", "raw_code": "{{\n  config(\n    materialized = 'table',\n    )\n}}\n-- We create the concept of a personnel state as a range of events\n-- where none of the players in the lineup change. This allows us\n-- to store personnel info at a lower cardinality than one row per event-player.\nWITH ranges AS (\n    SELECT DISTINCT\n        game_id,\n        side,\n        start_event_id,\n        COALESCE(\n            MIN(start_event_id - 1) OVER next_largest,\n            -- This can almos always just be the end_event_id of the same line,\n            -- except for the fun edge case where the final substitution\n            -- of the game is a move that moves the DH into the field\n            MAX(end_event_id) OVER full_game\n        )::UINTEGER AS end_event_id\n    FROM {{ ref('stg_game_lineup_appearances') }}\n    -- The MIN over this window is the next-largest value\n    WINDOW\n        next_largest AS (\n            PARTITION BY game_id, side\n            ORDER BY start_event_id\n            RANGE BETWEEN 1 FOLLOWING AND UNBOUNDED FOLLOWING\n        ),\n        full_game AS (\n            PARTITION BY game_id, side\n        )\n),\n\nfinal AS (\n    SELECT\n        appearances.game_id,\n        CASE WHEN ranges.side = 'Home' THEN games.home_team_id ELSE games.away_team_id END AS batting_team_id,\n        appearances.side AS batting_side,\n        (games.game_key + ranges.start_event_id) * CASE WHEN appearances.side = 'Home' THEN 1 ELSE -1 END::INT\n        AS personnel_lineup_key,\n        ranges.start_event_id,\n        ranges.end_event_id,\n        appearances.player_id,\n        appearances.lineup_position,\n    FROM {{ ref('stg_game_lineup_appearances') }} AS appearances\n    INNER JOIN {{ ref('stg_games') }} AS games USING (game_id)\n    INNER JOIN ranges\n        ON ranges.game_id = appearances.game_id\n            AND ranges.side = appearances.side\n            AND ranges.start_event_id <= appearances.end_event_id\n            AND ranges.end_event_id >= appearances.start_event_id\n)\n\nSELECT * FROM final", "language": "sql", "refs": [{"name": "stg_game_lineup_appearances", "package": null, "version": null}, {"name": "stg_game_lineup_appearances", "package": null, "version": null}, {"name": "stg_games", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.baseball_computer.stg_game_lineup_appearances", "model.baseball_computer.stg_games"]}, "compiled_path": null, "contract": {"enforced": true, "alias_types": true, "checksum": "bd48eb8ca2cd3ec38d3810d523fb26c6a4e11b33f0bd83e84174b085ec3b39df"}, "access": "protected", "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true, "columns": ["personnel_lineup_key", "lineup_position"]}], "version": null, "latest_version": null, "deprecation_date": null}, "model.baseball_computer.event_personnel_lookup": {"database": "bc", "schema": "main_models", "name": "event_personnel_lookup", "resource_type": "model", "package_name": "baseball_computer", "path": "intermediate/states/event_personnel_lookup.sql", "original_file_path": "models/intermediate/states/event_personnel_lookup.sql", "unique_id": "model.baseball_computer.event_personnel_lookup", "fqn": ["baseball_computer", "intermediate", "states", "event_personnel_lookup"], "alias": "event_personnel_lookup", "checksum": {"name": "sha256", "checksum": "57e786b75072b8767696ea34b398dd02b2346ab914c5457fda194a4b79f1e118"}, "config": {"enabled": true, "alias": null, "schema": "models", "database": null, "tags": [], "meta": {"primary_keys": ["event_key"]}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {"game_id": {"name": "game_id", "description": "Retrosheet game ID, A 12-character string structured as follows:\n\n    - Chars 1-3: Home team ID\n    - Chars 4-11: Date (YYYYMMDD)\n    - Char 12: Game number (0 if only one game was played on that day)\n    \n    Example: MLN195607170", "meta": {}, "data_type": "varchar", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "event_id": {"name": "event_id", "description": "1-byte integer that uniquely identifies, in order, an event within a single game.\n    This value will remain the same across multiple versions as long as events\n    are not added or removed from that specific game, and should align exactly\n    with the event_id produced by Retrosheet's BEVENT software.", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "event_key": {"name": "event_key", "description": "4-byte integer that uniquely identifies an event across the entire\n    dataset (contrast with event_id, which is game-specific). The key\n    is generated deterministically given the same dataset, but it may\n    change when the data is updated. It is guaranteed to follow the \n    order of events within a single game.", "meta": {}, "data_type": "uinteger", "constraints": [], "quote": null, "tags": []}, "personnel_lineup_key": {"name": "personnel_lineup_key", "description": "", "meta": {}, "data_type": "integer", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "personnel_fielding_key": {"name": "personnel_fielding_key", "description": "", "meta": {}, "data_type": "integer", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}}, "meta": {"primary_keys": ["event_key"]}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "baseball_computer://models/intermediate/states/event_personnel_lookup.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "models", "contract": {"enforced": true}, "meta": {"primary_keys": ["event_key"]}}, "created_at": 1702281449.4298491, "relation_name": "\"bc\".\"main_models\".\"event_personnel_lookup\"", "raw_code": "{{\n  config(\n    materialized = 'table',\n    )\n}}\nWITH lineup AS (\n    SELECT\n        game_id,\n        batting_side,\n        personnel_lineup_key::INT AS personnel_lineup_key,\n        ANY_VALUE(start_event_id) AS start_event_id,\n        ANY_VALUE(end_event_id) AS end_event_id\n    FROM {{ ref('personnel_lineup_states') }}\n    GROUP BY 1, 2, 3\n),\n\nfielding AS (\n    SELECT\n        game_id,\n        fielding_side,\n        personnel_fielding_key::INT AS personnel_fielding_key,\n        ANY_VALUE(start_event_id) AS start_event_id,\n        ANY_VALUE(end_event_id) AS end_event_id\n    FROM {{ ref('personnel_fielding_states') }}\n    GROUP BY 1, 2, 3\n),\n\nfinal AS (\n    SELECT\n        events.game_id,\n        events.event_id,\n        events.event_key,\n        lineup.personnel_lineup_key,\n        fielding.personnel_fielding_key,\n    FROM {{ ref('stg_events') }} AS events\n    LEFT JOIN lineup\n        ON events.game_id = lineup.game_id\n            AND events.batting_side = lineup.batting_side\n            AND events.event_id BETWEEN lineup.start_event_id AND lineup.end_event_id\n    LEFT JOIN fielding\n        ON events.game_id = fielding.game_id\n            AND events.batting_side != fielding.fielding_side\n            AND events.event_id BETWEEN fielding.start_event_id AND fielding.end_event_id\n    WHERE NOT events.no_play_flag\n)\n\nSELECT * FROM final", "language": "sql", "refs": [{"name": "personnel_lineup_states", "package": null, "version": null}, {"name": "personnel_fielding_states", "package": null, "version": null}, {"name": "stg_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.baseball_computer.personnel_lineup_states", "model.baseball_computer.personnel_fielding_states", "model.baseball_computer.stg_events"]}, "compiled_path": null, "contract": {"enforced": true, "alias_types": true, "checksum": "9e56d274ab074ec644f787b133f50c6c5f9446a1d2f675dc13e3086dc414c6af"}, "access": "protected", "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true, "columns": ["event_key"]}], "version": null, "latest_version": null, "deprecation_date": null}, "model.baseball_computer.event_base_out_states": {"database": "bc", "schema": "main_models", "name": "event_base_out_states", "resource_type": "model", "package_name": "baseball_computer", "path": "intermediate/states/event_base_out_states.sql", "original_file_path": "models/intermediate/states/event_base_out_states.sql", "unique_id": "model.baseball_computer.event_base_out_states", "fqn": ["baseball_computer", "intermediate", "states", "event_base_out_states"], "alias": "event_base_out_states", "checksum": {"name": "sha256", "checksum": "ee9979cd964167eb6c9601c2927ef5f7087f05753b6fd50511a69f066d50caca"}, "config": {"enabled": true, "alias": null, "schema": "models", "database": null, "tags": [], "meta": {"primary_keys": ["event_key"]}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "access": "protected"}, "tags": [], "description": "This model provides event-level information about the state of the game\nin terms of bases and outs. It combines data from the 'stg_events' and 'stg_event_baserunners' tables\nto calculate various metrics such as the number of outs at the start and end of each event, the number\nof runs scored on each play, the base state at the start and end of each event, and the IDs of the\nbaserunners at the start and end of each event. Additionally, it includes flags to indicate the \nstart and end of innings, frames, and games, as well as flags for truncated frames.\n", "columns": {"event_key": {"name": "event_key", "description": "4-byte integer that uniquely identifies an event across the entire\n    dataset (contrast with event_id, which is game-specific). The key\n    is generated deterministically given the same dataset, but it may\n    change when the data is updated. It is guaranteed to follow the \n    order of events within a single game.", "meta": {}, "data_type": "uinteger", "constraints": [], "quote": null, "tags": []}, "inning_start": {"name": "inning_start", "description": "The inning at the start of the event.", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "inning_end": {"name": "inning_end", "description": "The inning at the end of the event.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "frame_start": {"name": "frame_start", "description": "Top or bottom of the inning at the start of the play.", "meta": {}, "data_type": "frame", "constraints": [], "quote": null, "tags": []}, "frame_end": {"name": "frame_end", "description": "Top or bottom of the inning at the end of the play.", "meta": {}, "data_type": "frame", "constraints": [], "quote": null, "tags": []}, "inning_in_outs_start": {"name": "inning_in_outs_start", "description": "The inning at the start of the event, expressed in outs.\n    ((Inning * 3 - 1) + outs in current innning)\n    For example, 2 outs in the second inning would be 5.", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "outs_start": {"name": "outs_start", "description": "The number of outs at the start of the event.", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "outs_end": {"name": "outs_end", "description": "The number of outs at the end of the event.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "outs_on_play": {"name": "outs_on_play", "description": "The total number of outs that were recorded during the event.\n    Mutually exclusive with all other events.", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "is_gidp_eligible": {"name": "is_gidp_eligible", "description": "Whether or not the event started with a runner on first and less than two outs.", "meta": {}, "data_type": "boolean", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "base_state_start": {"name": "base_state_start", "description": "The base state at the start of the event, a base-10 representation of a binary number. See `base_state` for more info.", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "runner_first_id_start": {"name": "runner_first_id_start", "description": "The Retrosheet person ID of the runner on first base at the start of the event.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "runner_second_id_start": {"name": "runner_second_id_start", "description": "The Retrosheet person ID of the runner on second base at the start of the event.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "runner_third_id_start": {"name": "runner_third_id_start", "description": "The Retrosheet person ID of the runner on third base at the start of the event.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "runners_count_start": {"name": "runners_count_start", "description": "The number of runners on base at the start of the event.", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "base_state_end": {"name": "base_state_end", "description": "The base state at the end of the event, a base-10 representation of a binary number. See `base_state` for more info.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "runners_count_end": {"name": "runners_count_end", "description": "The number of runners on base at the end of the event.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "runner_first_id_end": {"name": "runner_first_id_end", "description": "The Retrosheet person ID of the runner on first base at the end of the event.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "runner_second_id_end": {"name": "runner_second_id_end", "description": "The Retrosheet person ID of the runner on second base at the end of the event.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "runner_third_id_end": {"name": "runner_third_id_end", "description": "The Retrosheet person ID of the runner on third base at the end of the event.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "score_home_start": {"name": "score_home_start", "description": "The home team's score at the start of the event.", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "score_away_start": {"name": "score_away_start", "description": "The away team's score at the start of the event.", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "score_home_end": {"name": "score_home_end", "description": "The home team's score at the end of the event.", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "score_away_end": {"name": "score_away_end", "description": "The away team's score at the end of the event.", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "runs_on_play": {"name": "runs_on_play", "description": "The total number of runs that scored during the event.\n    Mutually exclusive with all other events.", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "frame_start_flag": {"name": "frame_start_flag", "description": "Whether the event was the first event of the half-inning.", "meta": {}, "data_type": "boolean", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "frame_end_flag": {"name": "frame_end_flag", "description": "Whether the event was the last event of the half-inning.", "meta": {}, "data_type": "boolean", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "truncated_frame_flag": {"name": "truncated_frame_flag", "description": "Whether the event was the last of the half-inning, but there were fewer\n    than three outs recorded, e.g. a walk-off home run or a rain-shortened-game.", "meta": {}, "data_type": "boolean", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "game_start_flag": {"name": "game_start_flag", "description": "Whether the event was the first event of the game.", "meta": {}, "data_type": "boolean", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "game_end_flag": {"name": "game_end_flag", "description": "Whether the event was the last event of the game.", "meta": {}, "data_type": "boolean", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}}, "meta": {"primary_keys": ["event_key"]}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "baseball_computer://models/intermediate/states/event_base_out_states.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "models", "contract": {"enforced": true}, "meta": {"primary_keys": ["event_key"]}}, "created_at": 1702281449.435942, "relation_name": "\"bc\".\"main_models\".\"event_base_out_states\"", "raw_code": "{{\n  config(\n    materialized = 'table',\n    )\n}}\nWITH runners AS (\n    SELECT\n        event_key,\n        ANY_VALUE(CASE WHEN baserunner_bit = 1 THEN runner_id END)::PLAYER_ID AS runner_first_id,\n        ANY_VALUE(CASE WHEN baserunner_bit = 2 THEN runner_id END)::PLAYER_ID AS runner_second_id,\n        ANY_VALUE(CASE WHEN baserunner_bit = 4 THEN runner_id END)::PLAYER_ID AS runner_third_id,\n    FROM {{ ref('stg_event_baserunners') }}\n    GROUP BY 1\n),\n\nadd_outs AS (\n    SELECT\n        event_key,\n        events.batting_side,\n        events.inning,\n        events.frame,\n        -- Next two cols are transformed to reduce size of partition key in next step\n        event_key // 255 AS game_key,\n        CASE events.frame WHEN 'Top' THEN 0 ELSE 1 END AS frame_key,\n        events.outs AS outs_start,\n        events.outs_on_play,\n        events.runs_on_play,\n        events.outs + events.outs_on_play AS outs_end,\n        runners.runner_first_id,\n        runners.runner_second_id,\n        runners.runner_third_id,\n        events.base_state AS base_state,\n        COALESCE(info.is_force_on_second, FALSE) AND outs_start < 2 AS is_gidp_eligible,\n    FROM {{ ref('stg_events') }} AS events\n    LEFT JOIN runners USING (event_key)\n    LEFT JOIN {{ ref('seed_base_state_info') }} AS info USING (base_state)\n),\n\nfinal AS (\n    SELECT\n        event_key,\n        inning AS inning_start,\n        LEAD(inning) OVER end_event AS inning_end,\n        frame AS frame_start,\n        LEAD(frame) OVER end_event AS frame_end,\n        ((inning - 1) * 3 + outs_start)::UTINYINT AS inning_in_outs_start,\n        -- TODO: Add inning_in_outs_end\n        -- (tricky since not sure whether it should be +1 or +4 or null)\n        outs_start,\n        outs_end,\n        outs_on_play,\n        is_gidp_eligible,\n        base_state AS base_state_start,\n        runner_first_id AS runner_first_id_start,\n        runner_second_id AS runner_second_id_start,\n        runner_third_id AS runner_third_id_start,\n        BIT_COUNT(base_state)::UTINYINT AS runners_count_start,\n        LEAD(base_state) OVER narrow AS base_state_end,\n        BIT_COUNT(LEAD(base_state) OVER narrow)::UTINYINT AS runners_count_end,\n        LEAD(runner_first_id) OVER narrow AS runner_first_id_end,\n        LEAD(runner_second_id) OVER narrow AS runner_second_id_end,\n        LEAD(runner_third_id) OVER narrow AS runner_third_id_end,\n        COALESCE(SUM(runs_on_play) FILTER (WHERE batting_side = 'Home') OVER start_event, 0)::UTINYINT AS score_home_start,\n        COALESCE(SUM(runs_on_play) FILTER (WHERE batting_side = 'Away') OVER start_event, 0)::UTINYINT AS score_away_start,\n        COALESCE(SUM(runs_on_play) FILTER (WHERE batting_side = 'Home') OVER end_event, 0)::UTINYINT AS score_home_end,\n        COALESCE(SUM(runs_on_play) FILTER (WHERE batting_side = 'Away') OVER end_event, 0)::UTINYINT AS score_away_end,\n        runs_on_play,\n        LAG(event_key) OVER narrow IS NULL AS frame_start_flag,\n        LEAD(event_key) OVER narrow IS NULL AS frame_end_flag,\n        LEAD(event_key) OVER narrow IS NULL AND outs_end != 3 AS truncated_frame_flag,\n        LAG(event_key) OVER start_event IS NULL AS game_start_flag,\n        LEAD(event_key) OVER end_event IS NULL AS game_end_flag,\n    FROM add_outs\n    WINDOW\n        narrow AS (\n            PARTITION BY game_key, inning, frame_key\n            ORDER BY event_key\n        ),\n        start_event AS (\n            PARTITION BY game_key\n            ORDER BY event_key\n            ROWS BETWEEN UNBOUNDED PRECEDING AND 1 PRECEDING\n        ),\n        end_event AS (\n            PARTITION BY game_key\n            ORDER BY event_key\n            ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\n        )\n)\n\nSELECT * FROM final", "language": "sql", "refs": [{"name": "stg_event_baserunners", "package": null, "version": null}, {"name": "stg_events", "package": null, "version": null}, {"name": "seed_base_state_info", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.baseball_computer.stg_event_baserunners", "model.baseball_computer.stg_events", "seed.baseball_computer.seed_base_state_info"]}, "compiled_path": null, "contract": {"enforced": true, "alias_types": true, "checksum": "b64ee44028b7daff90369aee3e83e08c2233e09ac48a293a6a11503c8f3f1155"}, "access": "protected", "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true, "columns": ["event_key"]}], "version": null, "latest_version": null, "deprecation_date": null}, "model.baseball_computer.game_starting_lineups": {"database": "bc", "schema": "main_models", "name": "game_starting_lineups", "resource_type": "model", "package_name": "baseball_computer", "path": "intermediate/game_level/game_starting_lineups.sql", "original_file_path": "models/intermediate/game_level/game_starting_lineups.sql", "unique_id": "model.baseball_computer.game_starting_lineups", "fqn": ["baseball_computer", "intermediate", "game_level", "game_starting_lineups"], "alias": "game_starting_lineups", "checksum": {"name": "sha256", "checksum": "c67bc5e9a20ed18d88c2cb2536ce8e1bb494b9bc4a5e97b984775fb55e58f36f"}, "config": {"enabled": true, "alias": null, "schema": "models", "database": null, "tags": [], "meta": {"primary_keys": ["game_id"]}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {"game_id": {"name": "game_id", "description": "Retrosheet game ID, A 12-character string structured as follows:\n\n    - Chars 1-3: Home team ID\n    - Chars 4-11: Date (YYYYMMDD)\n    - Char 12: Game number (0 if only one game was played on that day)\n    \n    Example: MLN195607170", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "lineup_map_away": {"name": "lineup_map_away", "description": "A dictionary that maps starting lineup positions (1-10) to player IDs for the away team.", "meta": {}, "data_type": "map(utinyint, varchar)", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "fielding_map_away": {"name": "fielding_map_away", "description": "A dictionary that maps starting fielding positions (1-10) to player IDs for the away team.", "meta": {}, "data_type": "map(utinyint, varchar)", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "lineup_map_home": {"name": "lineup_map_home", "description": "A dictionary that maps starting lineup positions (1-10) to player IDs for the home team.", "meta": {}, "data_type": "map(utinyint, varchar)", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "fielding_map_home": {"name": "fielding_map_home", "description": "A dictionary that maps starting fielding positions (1-10) to player IDs for the home team.", "meta": {}, "data_type": "map(utinyint, varchar)", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}}, "meta": {"primary_keys": ["game_id"]}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "baseball_computer://models/intermediate/game_level/game_starting_lineups.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "models", "contract": {"enforced": true}, "meta": {"primary_keys": ["game_id"]}}, "created_at": 1702281449.458431, "relation_name": "\"bc\".\"main_models\".\"game_starting_lineups\"", "raw_code": "{{\n  config(\n    materialized = 'table',\n    )\n}}\nWITH event_offense AS (\n    SELECT\n        game_id,\n        player_id,\n        side,\n        lineup_position\n    FROM {{ ref('stg_game_lineup_appearances') }}\n    WHERE start_event_id = 1\n        -- Full outer join will cover pitchers\n        AND lineup_position > 0\n),\n\nevent_fielding AS (\n    SELECT\n        game_id,\n        player_id,\n        side,\n        -- This is to choose pitcher over DH\n        -- when Ohtani is doing both.\n        MIN(fielding_position) AS fielding_position\n    FROM {{ ref('stg_game_fielding_appearances') }}\n    WHERE start_event_id = 1\n    GROUP BY 1, 2, 3\n),\n\nbox_offense AS (\n    SELECT\n        game_id,\n        batter_id,\n        side,\n        lineup_position\n    FROM {{ ref('stg_box_score_batting_lines') }}\n    WHERE nth_player_at_position = 1\n),\n\nbox_fielding AS (\n    SELECT\n        game_id,\n        fielder_id,\n        side,\n        fielding_position\n    FROM {{ ref('stg_box_score_fielding_lines') }}\n    -- This doesn't fully filter down to starters,\n    -- just the first position played by any player,\n    -- starter or sub.\n    WHERE nth_position_played_by_player = 1\n    -- TODO: Remove deduper after resolution of PH5194105241\n    QUALIFY COUNT(*) OVER (PARTITION BY game_id, side, fielding_position) = 1\n),\n\nevent_joined AS (\n    SELECT\n        game_id,\n        player_id,\n        side,\n        COALESCE(event_offense.lineup_position, 0) AS lineup_position,\n        event_fielding.fielding_position\n    -- TODO: Figure out Ohtani filter\n    FROM event_offense\n    FULL OUTER JOIN event_fielding\n        USING (game_id, player_id, side)\n),\n\nbox_joined AS (\n    SELECT\n        box_offense.game_id,\n        box_offense.batter_id AS player_id,\n        box_offense.side,\n        box_offense.lineup_position,\n        box_fielding.fielding_position\n    FROM box_offense\n    INNER JOIN box_fielding\n        ON box_offense.game_id = box_fielding.game_id\n            AND box_offense.batter_id = box_fielding.fielder_id\n            AND box_offense.side = box_fielding.side\n    WHERE box_offense.game_id NOT IN (\n            SELECT DISTINCT game_id\n            FROM event_joined\n        )\n),\n\nunioned AS (\n    SELECT *\n    FROM event_joined\n    UNION ALL\n    SELECT *\n    FROM box_joined\n),\n\nagged AS (\n    SELECT\n        game_id,\n        MAP(\n            LIST(lineup_position::UTINYINT ORDER BY lineup_position) FILTER (WHERE side = 'Away'),\n            LIST(player_id ORDER BY lineup_position) FILTER (WHERE side = 'Away')\n        ) AS lineup_map_away,\n        MAP(\n            LIST(fielding_position::UTINYINT ORDER BY fielding_position) FILTER (WHERE side = 'Away'),\n            LIST(player_id ORDER BY fielding_position) FILTER (WHERE side = 'Away')\n        ) AS fielding_map_away,\n        MAP(\n            LIST(lineup_position::UTINYINT ORDER BY lineup_position) FILTER (WHERE side = 'Home'),\n            LIST(player_id ORDER BY lineup_position) FILTER (WHERE side = 'Home')\n        ) AS lineup_map_home,\n        MAP(\n            LIST(fielding_position::UTINYINT ORDER BY fielding_position) FILTER (WHERE side = 'Home'),\n            LIST(player_id ORDER BY fielding_position) FILTER (WHERE side = 'Home')\n        ) AS fielding_map_home\n    FROM unioned\n    GROUP BY 1\n)\n\nSELECT * FROM agged", "language": "sql", "refs": [{"name": "stg_game_lineup_appearances", "package": null, "version": null}, {"name": "stg_game_fielding_appearances", "package": null, "version": null}, {"name": "stg_box_score_batting_lines", "package": null, "version": null}, {"name": "stg_box_score_fielding_lines", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.baseball_computer.stg_game_lineup_appearances", "model.baseball_computer.stg_game_fielding_appearances", "model.baseball_computer.stg_box_score_batting_lines", "model.baseball_computer.stg_box_score_fielding_lines"]}, "compiled_path": null, "contract": {"enforced": true, "alias_types": true, "checksum": "369970c574d0ea67ed08411f4595e8987ec5ca26779e8986439f056b05725539"}, "access": "protected", "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true, "columns": ["game_id"]}], "version": null, "latest_version": null, "deprecation_date": null}, "model.baseball_computer.team_game_fielding_stats": {"database": "bc", "schema": "main_models", "name": "team_game_fielding_stats", "resource_type": "model", "package_name": "baseball_computer", "path": "intermediate/game_level/team_game_fielding_stats.sql", "original_file_path": "models/intermediate/game_level/team_game_fielding_stats.sql", "unique_id": "model.baseball_computer.team_game_fielding_stats", "fqn": ["baseball_computer", "intermediate", "game_level", "team_game_fielding_stats"], "alias": "team_game_fielding_stats", "checksum": {"name": "sha256", "checksum": "b14176a532f746589debeecde0c384915867a643f156049594f3d3b7be7173dd"}, "config": {"enabled": true, "alias": null, "schema": "models", "database": null, "tags": [], "meta": {"primary_keys": ["game_id", "team_id"]}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {"season": {"name": "season", "description": "Year, 4-digit integer", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "game_id": {"name": "game_id", "description": "Retrosheet game ID, A 12-character string structured as follows:\n\n    - Chars 1-3: Home team ID\n    - Chars 4-11: Date (YYYYMMDD)\n    - Char 12: Game number (0 if only one game was played on that day)\n    \n    Example: MLN195607170", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "team_id": {"name": "team_id", "description": "Retrosheet team ID, 3-character string which identifies the team\n    that a franchise was playing as at a given time.", "meta": {}, "data_type": "team_id", "constraints": [], "quote": null, "tags": []}, "outs_played": {"name": "outs_played", "description": "", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "putouts": {"name": "putouts", "description": "(PO) Outs credited to fielder based on who physically made the out, either by:\n        - Catching a ball on the fly\n        - Tagging a runner out\n        - Forcing a runner out\n        - Catching a called third strike\n        - Being the nearest fielder to a baserunner who is called out for interference\n\n    Putouts have been an important baseball statistic longer than MLB has been around,\n    so it has excellent historical coverage. Unassisted\n    putouts are very important in determining the location of batted balls.\n    \n    In modern baseball rules, each out in the game is credited as a putout, and at the play/event\n    level this will always be the case. However, in older games for which we only have box score or season-level\n    data, rare plays like baserunner interference may not be assigned to a specific fielder.\n    \n    Every play-by-play out has a putout, but the fielder who gets the putout may be unknown.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "assists": {"name": "assists", "description": "(A) Number of outs in which a fielder touched the ball before anothber fielder recorded a putout.\n    This is almost always a throw to another fielder, but it can also be a deflection.\n\n    Assists have excellent historical data coverage, and they are particularly useful in determining\n    the location of ground balls. The data is present in almost all season-level and game-level accounts.\n    However, individual plays with unknown-fielder putouts are likely to be missing assists entirely.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "errors": {"name": "errors", "description": "(E) Number of errors recorded by a fielder. This is recorded when a fielder either fails to make an out\n    that an average fielder should have made or makes a bad play that allows a baserunner to advance.\n    Errors are awarded at the scorekeeper's discretion, making them more subjective than the other two main\n    fielding stats.\n    \n    Errors used to be a much larger component of evaluating fielder quality.\n    When the stat was invented, routine plays were completed much less frequently than they are today.\n    As baseball evolved, routine plays became truly routine, and a fielder's ability to get to the ball\n    became more relevant than their ability\n    to reliably convert the out once they got there. While plenty of people as early as the 19th century were\n    aware of this, statistics mostly failed to reflect it until the 1980s, when Bill James and others\n    developed Range Factor and other stats that attempted to measure a fielder's ability to create chances.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "fielders_choices": {"name": "fielders_choices", "description": "(FC) Number of times a fielder who fielded the ball attempted to put out a baserunner other than the batter.\n    A fielder's choice can be assigned when the attempt fails, even if there was no error on the play.\n\n    Fielder's choices are only available on play-by-play data and tend to be recorded when the attempt was\n    a tag and not a force. Force plays are explicitly noted and have little overlap with fielder's choices.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "assisted_putouts": {"name": "assisted_putouts", "description": "Number of putouts by the fielder that had at least one recorded, associated assist. For older games, this may be a subset\n    of the true total assisted putouts, as unknown-fielder putouts almost never have recorded assists.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "in_play_putouts": {"name": "in_play_putouts", "description": "", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "in_play_assists": {"name": "in_play_assists", "description": "", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "passed_balls": {"name": "passed_balls", "description": "(PB) Number of passed balls.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "stolen_bases": {"name": "stolen_bases", "description": "(SB) Number of successful stolen bases.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "caught_stealing": {"name": "caught_stealing", "description": "(CS) Number of times a runner was caught stealing.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "double_plays": {"name": "double_plays", "description": "(DP) Number of times a play ended in two outs being recorded.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "triple_plays": {"name": "triple_plays", "description": "(TP) Number of times a play ended in three outs being recorded.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "pickoffs": {"name": "pickoffs", "description": "", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "plate_appearances_in_field": {"name": "plate_appearances_in_field", "description": "", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "plate_appearances_in_field_with_ball_in_play": {"name": "plate_appearances_in_field_with_ball_in_play", "description": "", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "ground_ball_double_plays": {"name": "ground_ball_double_plays", "description": "", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "reaching_errors": {"name": "reaching_errors", "description": "", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "unknown_putouts": {"name": "unknown_putouts", "description": "Number of putouts that were recorded, but without a specified fielder.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "incomplete_events": {"name": "incomplete_events", "description": "Number of events in which at least one known fielding play was made by an unknown fielder.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}}, "meta": {"primary_keys": ["game_id", "team_id"]}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "baseball_computer://models/intermediate/game_level/team_game_fielding_stats.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "models", "contract": {"enforced": true}, "meta": {"primary_keys": ["game_id", "team_id"]}}, "created_at": 1702281449.449833, "relation_name": "\"bc\".\"main_models\".\"team_game_fielding_stats\"", "raw_code": "{{\n  config(\n    materialized = 'table',\n    )\n}}\n-- We don't need to merge in box score data for this like we do with\n-- player-level data, because the event-level data will contain all\n-- info even if it isn't credited to a specific player.\nWITH game_event_agg AS (\n    SELECT\n        team_id,\n        game_id,\n        SUM(outs_played)::UTINYINT AS outs_played,\n        SUM(plate_appearances_in_field)::UTINYINT AS plate_appearances_in_field,\n        SUM(plate_appearances_in_field_with_ball_in_play)::UTINYINT AS plate_appearances_in_field_with_ball_in_play,\n        SUM(putouts)::UTINYINT AS putouts,\n        SUM(assists)::UTINYINT AS assists,\n        SUM(errors)::UTINYINT AS errors,\n        SUM(stolen_bases)::UTINYINT AS stolen_bases,\n        SUM(caught_stealing)::UTINYINT AS caught_stealing,\n        SUM(pickoffs)::UTINYINT AS pickoffs,\n        SUM(double_plays)::UTINYINT AS double_plays,\n        SUM(triple_plays)::UTINYINT AS triple_plays,\n        SUM(ground_ball_double_plays)::UTINYINT AS ground_ball_double_plays,\n        SUM(reaching_errors)::UTINYINT AS reaching_errors,\n        SUM(unknown_putouts)::UTINYINT AS unknown_putouts,\n        SUM(incomplete_events)::UTINYINT AS incomplete_events,\n    FROM {{ ref('event_fielding_stats') }}\n    GROUP BY 1, 2\n),\n\ngame_info AS (\n    SELECT\n        season,\n        game_id,\n        team_id,\n        team_side AS side\n    FROM {{ ref('team_game_start_info') }}\n),\n\nbox_sb AS (\n    SELECT\n        game_id,\n        CASE WHEN running_side = 'Away' THEN 'Home' ELSE 'Away' END AS side,\n        COUNT(*) AS stolen_bases\n    FROM {{ ref('stg_box_score_stolen_bases') }}\n    GROUP BY 1, 2\n),\n\nbox_cs AS (\n    SELECT\n        game_id,\n        CASE WHEN running_side = 'Away' THEN 'Home' ELSE 'Away' END AS side,\n        COUNT(*) AS caught_stealing\n    FROM {{ ref('stg_box_score_caught_stealing') }}\n    GROUP BY 1, 2\n),\n\nbox_dp AS (\n    SELECT\n        game_id,\n        defense_side AS side,\n        COUNT(*) AS double_plays\n    FROM {{ ref('stg_box_score_double_plays') }}\n    GROUP BY 1, 2\n),\n\nbox_tp AS (\n    SELECT\n        game_id,\n        defense_side AS side,\n        COUNT(*) AS triple_plays\n    FROM {{ ref('stg_box_score_triple_plays') }}\n    GROUP BY 1, 2\n),\n\nplayers AS (\n    SELECT\n        game_id,\n        team_id,\n        -- outs_played can't be summed directly,\n        -- use putouts to dedupe (usually the same anyway)\n        SUM(putouts) AS outs_played,\n        SUM(putouts) AS putouts,\n        SUM(assists) AS assists,\n        SUM(errors) AS errors,\n        SUM(fielders_choices)::UTINYINT AS fielders_choices,\n        SUM(assisted_putouts)::UTINYINT AS assisted_putouts,\n        SUM(in_play_putouts)::UTINYINT AS in_play_putouts,\n        SUM(in_play_assists)::UTINYINT AS in_play_assists,\n        SUM(passed_balls)::UTINYINT AS passed_balls,\n    FROM {{ ref('player_position_game_fielding_stats') }}\n    GROUP BY 1, 2\n),\n\nfinal AS (\n    SELECT\n        game_info.season,\n        game_id,\n        team_id,\n        COALESCE(t.outs_played, g.outs_played, p.outs_played)::UTINYINT AS outs_played,\n        -- At the moment, there are some box score accounts that are less reliable\n        -- than their PBP counterparts for fielding. The largest of the options here\n        -- is the most likely to be consistent and correct.\n        -- TODO: Revisit after NLB data quality improvements\n        GREATEST(t.putouts, p.putouts, g.putouts)::UTINYINT AS putouts,\n        GREATEST(t.assists, p.assists, g.assists)::UTINYINT AS assists,\n        GREATEST(t.errors, p.errors, g.errors)::UTINYINT AS errors,\n        p.fielders_choices,\n        p.assisted_putouts,\n        p.in_play_putouts,\n        p.in_play_assists,\n        COALESCE(t.passed_balls, p.passed_balls)::UTINYINT AS passed_balls,\n        -- We trust PBP events over box events\n        COALESCE(g.stolen_bases, box_sb.stolen_bases, 0)::UTINYINT AS stolen_bases,\n        COALESCE(g.caught_stealing, box_cs.caught_stealing, 0)::UTINYINT AS caught_stealing,\n        COALESCE(g.double_plays, box_dp.double_plays, 0)::UTINYINT AS double_plays,\n        COALESCE(g.triple_plays, box_tp.triple_plays, 0)::UTINYINT AS triple_plays,\n        g.pickoffs,\n        g.plate_appearances_in_field,\n        g.plate_appearances_in_field_with_ball_in_play,\n        g.ground_ball_double_plays,\n        g.reaching_errors,\n        g.unknown_putouts,\n        g.incomplete_events\n    FROM players AS p\n    INNER JOIN game_info USING (game_id, team_id)\n    LEFT JOIN game_event_agg AS g USING (game_id, team_id)\n    LEFT JOIN {{ ref('stg_box_score_team_fielding_lines') }} AS t USING (game_id, side)\n    LEFT JOIN box_sb USING (game_id, side)\n    LEFT JOIN box_cs USING (game_id, side)\n    LEFT JOIN box_dp USING (game_id, side)\n    LEFT JOIN box_tp USING (game_id, side)\n)\n\nSELECT * FROM final", "language": "sql", "refs": [{"name": "event_fielding_stats", "package": null, "version": null}, {"name": "team_game_start_info", "package": null, "version": null}, {"name": "stg_box_score_stolen_bases", "package": null, "version": null}, {"name": "stg_box_score_caught_stealing", "package": null, "version": null}, {"name": "stg_box_score_double_plays", "package": null, "version": null}, {"name": "stg_box_score_triple_plays", "package": null, "version": null}, {"name": "player_position_game_fielding_stats", "package": null, "version": null}, {"name": "stg_box_score_team_fielding_lines", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.baseball_computer.event_fielding_stats", "model.baseball_computer.team_game_start_info", "model.baseball_computer.stg_box_score_stolen_bases", "model.baseball_computer.stg_box_score_caught_stealing", "model.baseball_computer.stg_box_score_double_plays", "model.baseball_computer.stg_box_score_triple_plays", "model.baseball_computer.player_position_game_fielding_stats", "model.baseball_computer.stg_box_score_team_fielding_lines"]}, "compiled_path": null, "contract": {"enforced": true, "alias_types": true, "checksum": "153920f8559d5c65b8266ec0db6bb3c3968eb753df4ffb4433c3f7c165269006"}, "access": "protected", "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true, "columns": ["game_id", "team_id"]}], "version": null, "latest_version": null, "deprecation_date": null}, "model.baseball_computer.game_forfeits": {"database": "bc", "schema": "main_models", "name": "game_forfeits", "resource_type": "model", "package_name": "baseball_computer", "path": "intermediate/game_level/game_forfeits.sql", "original_file_path": "models/intermediate/game_level/game_forfeits.sql", "unique_id": "model.baseball_computer.game_forfeits", "fqn": ["baseball_computer", "intermediate", "game_level", "game_forfeits"], "alias": "game_forfeits", "checksum": {"name": "sha256", "checksum": "630f60b5c9a8f63e7121df9c11c9287d6edbac4291edc7c69c15d232f44fc5d8"}, "config": {"enabled": true, "alias": null, "schema": "models", "database": null, "tags": [], "meta": {"primary_keys": ["game_id"]}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "access": "protected"}, "tags": [], "description": "The full set of forfeited games in MLB history.\n", "columns": {"game_id": {"name": "game_id", "description": "Retrosheet game ID, A 12-character string structured as follows:\n\n    - Chars 1-3: Home team ID\n    - Chars 4-11: Date (YYYYMMDD)\n    - Char 12: Game number (0 if only one game was played on that day)\n    \n    Example: MLN195607170", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "event_key_at_forfeit": {"name": "event_key_at_forfeit", "description": "", "meta": {}, "data_type": "uinteger", "constraints": [], "quote": null, "tags": []}, "winning_side": {"name": "winning_side", "description": "Home or Away if a winner was declared, Tie if not.", "meta": {}, "data_type": "varchar", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "price_of_beer_dollars": {"name": "price_of_beer_dollars", "description": "What could go wrong?", "meta": {}, "data_type": "decimal(2,2)", "constraints": [], "quote": null, "tags": []}}, "meta": {"primary_keys": ["game_id"]}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "baseball_computer://models/intermediate/game_level/game_forfeits.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "models", "contract": {"enforced": true}, "meta": {"primary_keys": ["game_id"]}}, "created_at": 1702281449.452359, "relation_name": "\"bc\".\"main_models\".\"game_forfeits\"", "raw_code": "WITH source_event AS (\n    SELECT\n        event_key,\n        REGEXP_EXTRACT(comment, 'Forfeit=(.*)', 1) AS forfeit_info\n    FROM {{ ref('stg_event_comments') }}\n    WHERE comment ILIKE '%Forfeit=%'\n),\n\nevent_joined AS (\n    SELECT\n        events.game_id,\n        event_key AS event_key_at_forfeit,\n        source_event.forfeit_info\n    FROM {{ ref('stg_events') }} AS events\n    INNER JOIN source_event USING (event_key)\n),\n\nsource_box AS (\n    SELECT\n        game_id,\n        REGEXP_EXTRACT(comment, 'Forfeit=(.*)', 1) AS forfeit_info\n    FROM {{ ref('stg_box_score_comments') }}\n    WHERE comment ILIKE '%Forfeit=%'\n        AND game_id NOT IN (SELECT game_id FROM event_joined)\n),\n\nsource_gamelog AS (\n    SELECT\n        game_id,\n        forfeit_info\n    FROM {{ ref('stg_gamelog') }}\n    WHERE forfeit_info IS NOT NULL\n        AND game_id NOT IN (SELECT game_id FROM event_joined)\n        AND game_id NOT IN (SELECT game_id FROM source_box)\n),\n\nunioned AS (\n    SELECT\n        game_id,\n        event_key_at_forfeit,\n        forfeit_info\n    FROM event_joined\n    UNION ALL\n    SELECT\n        game_id,\n        NULL AS event_key_at_forfeit,\n        forfeit_info\n    FROM source_box\n    UNION ALL\n    SELECT\n        game_id,\n        NULL AS event_key_at_forfeit,\n        forfeit_info\n    FROM source_gamelog\n)\n\nSELECT\n    game_id,\n    event_key_at_forfeit,\n    CASE forfeit_info\n        WHEN 'H' THEN 'Home'\n        WHEN 'V' THEN 'Away'\n        WHEN 'T' THEN 'Tie'\n    END AS winning_side,\n    CASE WHEN game_id = 'CLE197406040' THEN .10 END AS price_of_beer_dollars\nFROM unioned", "language": "sql", "refs": [{"name": "stg_event_comments", "package": null, "version": null}, {"name": "stg_events", "package": null, "version": null}, {"name": "stg_box_score_comments", "package": null, "version": null}, {"name": "stg_gamelog", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.baseball_computer.stg_event_comments", "model.baseball_computer.stg_events", "model.baseball_computer.stg_box_score_comments", "model.baseball_computer.stg_gamelog"]}, "compiled_path": null, "contract": {"enforced": true, "alias_types": true, "checksum": "a77e44869cbb4891151150953569262ea24041dd160403b0695314432a928dff"}, "access": "protected", "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true, "columns": ["game_id"]}], "version": null, "latest_version": null, "deprecation_date": null}, "model.baseball_computer.game_suspensions": {"database": "bc", "schema": "main_models", "name": "game_suspensions", "resource_type": "model", "package_name": "baseball_computer", "path": "intermediate/game_level/game_suspensions.sql", "original_file_path": "models/intermediate/game_level/game_suspensions.sql", "unique_id": "model.baseball_computer.game_suspensions", "fqn": ["baseball_computer", "intermediate", "game_level", "game_suspensions"], "alias": "game_suspensions", "checksum": {"name": "sha256", "checksum": "cf5a02691f30eb92798bd6effac78c87d409764a7b3582cfe8b2a992cdc9989a"}, "config": {"enabled": true, "alias": null, "schema": "models", "database": null, "tags": [], "meta": {"primary_keys": ["game_id"]}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Information about games that were suspended and resumed at a later date.", "columns": {"game_id": {"name": "game_id", "description": "Retrosheet game ID, A 12-character string structured as follows:\n\n    - Chars 1-3: Home team ID\n    - Chars 4-11: Date (YYYYMMDD)\n    - Char 12: Game number (0 if only one game was played on that day)\n    \n    Example: MLN195607170", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "event_key_at_suspension": {"name": "event_key_at_suspension", "description": "", "meta": {}, "data_type": "uinteger", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "date_resumed": {"name": "date_resumed", "description": "", "meta": {}, "data_type": "date", "constraints": [], "quote": null, "tags": []}, "new_park_id": {"name": "new_park_id", "description": "", "meta": {}, "data_type": "park_id", "constraints": [], "quote": null, "tags": []}, "away_score_at_suspension": {"name": "away_score_at_suspension", "description": "", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "home_score_at_suspension": {"name": "home_score_at_suspension", "description": "", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "game_outs_recorded_at_suspension": {"name": "game_outs_recorded_at_suspension", "description": "", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}}, "meta": {"primary_keys": ["game_id"]}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "baseball_computer://models/intermediate/game_level/game_suspensions.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "models", "contract": {"enforced": true}, "meta": {"primary_keys": ["game_id"]}}, "created_at": 1702281449.4556391, "relation_name": "\"bc\".\"main_models\".\"game_suspensions\"", "raw_code": "WITH source_event AS (\n    SELECT\n        event_key,\n        STRING_SPLIT(REPLACE(comment, 'Suspend=', ''), ',') AS suspension_info\n    FROM {{ ref('stg_event_comments') }}\n    WHERE comment ILIKE '%Suspend=%'\n),\n\nevent_joined AS (\n    SELECT\n        events.game_id,\n        event_key AS event_key_at_suspension,\n        source_event.suspension_info\n    FROM {{ ref('stg_events') }} AS events\n    INNER JOIN source_event USING (event_key)\n),\n\nsource_box AS (\n    SELECT\n        game_id,\n        STRING_SPLIT(REPLACE(comment, 'Suspend=', ''), ',') AS suspension_info\n    FROM {{ ref('stg_box_score_comments') }}\n    WHERE comment ILIKE '%Suspend=%'\n        AND game_id NOT IN (SELECT game_id FROM event_joined)\n),\n\nunioned AS (\n    SELECT\n        game_id,\n        event_key_at_suspension,\n        suspension_info\n    FROM event_joined\n    UNION ALL\n    SELECT\n        game_id,\n        NULL AS event_key_at_suspension,\n        suspension_info\n    FROM source_box\n)\n\n\n\nSELECT\n    game_id,\n    event_key_at_suspension,\n    STRPTIME(suspension_info[1], '%Y%m%d')::DATE AS date_resumed,\n    NULLIF(suspension_info[2], '')::PARK_ID AS new_park_id,\n    suspension_info[3]::UTINYINT AS away_score_at_suspension,\n    suspension_info[4]::UTINYINT AS home_score_at_suspension,\n    suspension_info[5]::UTINYINT AS game_outs_recorded_at_suspension,\nFROM unioned", "language": "sql", "refs": [{"name": "stg_event_comments", "package": null, "version": null}, {"name": "stg_events", "package": null, "version": null}, {"name": "stg_box_score_comments", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.baseball_computer.stg_event_comments", "model.baseball_computer.stg_events", "model.baseball_computer.stg_box_score_comments"]}, "compiled_path": null, "contract": {"enforced": true, "alias_types": true, "checksum": "29ff7e47bd5756f202546fc7153d34a41a087925bc386cd978da0fa144bcda60"}, "access": "protected", "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true, "columns": ["game_id"]}], "version": null, "latest_version": null, "deprecation_date": null}, "model.baseball_computer.team_game_pitching_stats": {"database": "bc", "schema": "main_models", "name": "team_game_pitching_stats", "resource_type": "model", "package_name": "baseball_computer", "path": "intermediate/game_level/team_game_pitching_stats.sql", "original_file_path": "models/intermediate/game_level/team_game_pitching_stats.sql", "unique_id": "model.baseball_computer.team_game_pitching_stats", "fqn": ["baseball_computer", "intermediate", "game_level", "team_game_pitching_stats"], "alias": "team_game_pitching_stats", "checksum": {"name": "sha256", "checksum": "51c79fa72077a37c49d723b7253f17800846b2852d8780ab103e027509f886eb"}, "config": {"enabled": true, "alias": null, "schema": "models", "database": null, "tags": [], "meta": {"primary_keys": ["game_id", "team_id"]}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {"game_id": {"name": "game_id", "description": "Retrosheet game ID, A 12-character string structured as follows:\n\n    - Chars 1-3: Home team ID\n    - Chars 4-11: Date (YYYYMMDD)\n    - Char 12: Game number (0 if only one game was played on that day)\n    \n    Example: MLN195607170", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "team_id": {"name": "team_id", "description": "Retrosheet team ID, 3-character string which identifies the team\n    that a franchise was playing as at a given time.", "meta": {}, "data_type": "team_id", "constraints": [], "quote": null, "tags": []}, "batters_faced": {"name": "batters_faced", "description": "Number of batters faced by a pitcher, generally equivalent to plate appearances (in old box-score-only games, this may not match up perfectly).", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "outs_recorded": {"name": "outs_recorded", "description": "Number of outs recorded by a pitcher.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "inherited_runners_scored": {"name": "inherited_runners_scored", "description": "(IRS) Number of inherited runners that scored while a pitcher was on the mound.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "bequeathed_runners_scored": {"name": "bequeathed_runners_scored", "description": "Number of bequeathed runners that scored after a pitcher left the game.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "team_unearned_runs": {"name": "team_unearned_runs", "description": "Number of runs that are charged as earned to the pitcher, but unearned to the team.\n    This happens when a pitcher enters an inning which should have been over already because\n    of an error and then the pitcher allows a run to score without the help of any additional\n    errors. This is a rare occurrence and it might seem unnecessary to track,\n    but it is absolutely essential that we do so in order to preserve the space-time continuu-\n    T\u0355he\u030a\u0346\u0328\u035c y\u036a\u0363e\u0321\u0303\u0313\u030ea\u0347r\u0350\u0355\u035c\u035d i\u0313\u035a\u0314\u0324\u033a\u033b\u035bs 20\u032e\u033f89\u032a\u030a an\u032b\u032b\u035e\u0326\u0305d\u0331\u033f\u0369 E\u0361\u0354\u0330\u0351\u0320s\u036d\u0366t\u0351\u0359\u035de\u0303\u0352\u0310b\u0301\u036e\u0359a\u0361\u0359\u0310\u0301\u0330\u0330\u0320n\u036f\u0352\u035f Y\u032a\u0318\u0311a\u035c\u0302\u031c\u031a\u036c\u0345\u0360n\u0304\u0301\u0309 h\u035c\u0314\u0306a\u0359\u033e\u031d\u035f\u0361\u0308\u0301\u0351s\u035f\u0338 fu\u0326\u036d\u030f\u032e\u0306\u030dl\u033a\u0347\u0311\u0349\u034c\u0305\u0303l\u0345\u030f\u0308\u036a\u033f\u031dy\u0312\u0313\u034b\u036e\u0332\u0347 m\u0326\u030a\u0363e\u0365\u034a\u0367\u0320\u0325rg\u0347\u0366\u0300e\u0309\u0339\u031c\u031f\u0353\u0331\u0319d\u0331\u0327 wi\u0307\u034eth\u0366\u0361\u031b\u036d\u0358 t\u031d\u0362\u035d\u0328\u035e\u0342h\u0336\u0357\u031e\u032d\u035f\u0319e\u0322\u030a\u0321\u032f w\u0300\u0329\u0309\u032co\u036d\u0349r\u0311\u0367\u0327\u0360\u036a\u0327\u036cm\u034c\u031c.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "at_bats": {"name": "at_bats", "description": "(AB) Number of plate appearances that ended in either a hit or a non-sacrifice out.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "hits": {"name": "hits", "description": "(H) Number of times a batter reached base safely without an error or fielder's choice.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "singles": {"name": "singles", "description": "(1B) Number of hits in which a batter reached first base.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "doubles": {"name": "doubles", "description": "(2B) Number of hits in which a batter reached second base without the help of an error or an attempted\n    play on another runner.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "triples": {"name": "triples", "description": "(3B) Number of hits in which a batter reached third base without the help of an error or an attempted\n    play on another runner.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "home_runs": {"name": "home_runs", "description": "(HR) Number of hits in which a batter reached home plate without the help of an error or an attempted\n    play on another runner (usually by hitting the ball out of the park).", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "total_bases": {"name": "total_bases", "description": "(TB) Number of bases a batter reached safely without the help of an error or an attempted\n    play on another runner. HR * 4 + 3B * 3 + 2B * 2 + (H - HR - 3B - 2B)", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "strikeouts": {"name": "strikeouts", "description": "(K, SO) Number of times a batter struck out. This includes plays in which a batter reached base on\n    a dropped third strike.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "walks": {"name": "walks", "description": "(BB, occasionally W) Number of times a batter reaches base on called balls out of the strike zone\n    (Four balls for all of MLB history after the 1880s).", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "intentional_walks": {"name": "intentional_walks", "description": "(IBB, occasionally IW) Number of times a batter was intentionally walked. This number may be missing or undercounted\n    in earlier years, as intentional walks were not officially tracked until 1955.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "hit_by_pitches": {"name": "hit_by_pitches", "description": "(HBP) Number of times a batter was awarded first base after being hit by a pitch.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "sacrifice_hits": {"name": "sacrifice_hits", "description": "(SH) Number of times a batter performed a sacrifice bunt to advance another runner.\n    A bunt may count as a sacrifice even if the batter reaches base safely.\n    Unsuccessful attempts are not counted, nor are non-sacrifice bunts.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "sacrifice_flies": {"name": "sacrifice_flies", "description": "(SF) Number of times a batter hit a fly ball that resulted in an out (or error),\n    but allowed a runner to score on the throw.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "reached_on_errors": {"name": "reached_on_errors", "description": "(ROE) Number of times a batter reached base safely due to an error.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "reached_on_interferences": {"name": "reached_on_interferences", "description": "Number of times a batter was awarded first base for being illegally hindered\n    by a fielder, usually the catcher.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "inside_the_park_home_runs": {"name": "inside_the_park_home_runs", "description": "Number of times a batter hit a home run without the ball leaving the field of play.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "ground_rule_doubles": {"name": "ground_rule_doubles", "description": "Number of times a batter was awarded a double on a ball that went out of play after\n    bouncing in fair territory.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "infield_hits": {"name": "infield_hits", "description": "Number of times a batter reached base safely on a hit that did not reach the outfield.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "on_base_opportunities": {"name": "on_base_opportunities", "description": "Number of plate appearances in which a batter either did or did not reach base,\n    as defined by the formula for on-base percentage. Note that this is very similar to but different\n    from plate_appearances, as it does not include sacrifice hits or interference.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "on_base_successes": {"name": "on_base_successes", "description": "Number of hits, walks, and hit by pitches that serves as the numerator in the formula\n    for on-base percentage.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "grounded_into_double_plays": {"name": "grounded_into_double_plays", "description": "(GIDP) Number of times a batter grounded into a double play. This is the conventional way\n    to record a double play and as such is an important statistic on its own. Games without\n    play-by-play accounts don't have data on the trajectory of the double play, so\n    this number is not populated for those games.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "double_plays": {"name": "double_plays", "description": "(DP) Number of times a play ended in two outs being recorded.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "triple_plays": {"name": "triple_plays", "description": "(TP) Number of times a play ended in three outs being recorded.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "batting_outs": {"name": "batting_outs", "description": "Number of outs that \"should\" have been recorded as a result of a batter's plate apperances.\n    A batting out is still counted if no actual out is recorded on an error or a failed fielder's choice.\n    Outs on baserunners (including the batter trying to stretch a hit) do not count here.\n    Grounded-into-double-plays count as two outs, but other types of double plays do not (the \n    idea here is that the baserunner is responsible on other types of double plays).\n    Unofficial stat, but designed here to be generally useful in determining rates of official stats.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "balls_in_play": {"name": "balls_in_play", "description": "Number of plate appearances that resulted in a live\n    ball on the field of play. The difference between this and batted_balls is that\n    balls_in_play does not include out-of-the-park home runs. This distinction is important\n    for calculating batting average on balls in play, a stat designed to isolate at_bats\n    in which the defense was involved.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "balls_batted": {"name": "balls_batted", "description": "Number of plate appearances that ended in a fair ball or a foul flyout. This is equivalent\n    to balls_in_play + home_runs, and may be a more useful denominator for \"in play\" stats depending\n    on the context.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "trajectory_fly_ball": {"name": "trajectory_fly_ball", "description": "(FB) Number of plate appearances that ended in a fly ball. A fly ball is defined here\n    as the subset of balls hit in the air that are neither line drives nor pop flies.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "trajectory_ground_ball": {"name": "trajectory_ground_ball", "description": "(GB) Number of plate appearances that ended in a ground ball, also called a grounder. A ground ball is defined\n    here to only include swings, not bunts, although older data may not have a proper distinction. Ground\n    balls tend to be easy to distinguish between other types of contact, but Statcast-era data defines it\n    as balls with a launch angle under 10 degrees.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "trajectory_line_drive": {"name": "trajectory_line_drive", "description": "(LD) Number of plate appearances that ended in a line drive, also called a liner. Line drives are distiguished\n    from fly balls by some combination of angle and exit velocity. In the Statcast era, line drives\n    are defined purely in terms of launch angle (10-25 degrees), but just about any colloquial definition\n    involves hard-hitness as well. The line-drive-fly-ball distinction is by far the most arbitrary\n    and subjective trajectory categorization. Many scorekeepers never included line drives, while others counted\n    any successful in-play air-hit as a line drive. Nevertheless, the distinction is a crucial one,\n    as line drives are by far the most likely type of batted ball to result in a hit (even when they are not hit very hard).", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "trajectory_pop_up": {"name": "trajectory_pop_up", "description": "(sometimes PU)  Number of plate appearances that ended in a pop-up, also called a pop fly.\n    Pop-ups are distinguished from fly balls in that they are hit at a higher angle, tend to be\n    hit with less exit velocity, and (as a result) end up in the infield or shallow outfield. Before\n    Statcast-era standardization, the distinction between a fly ball and a pop-up was a matter of\n    scorerkeeper judgement, and many unofficial scorekeepers did not distinguish between the two.\n    Statcast determines pop flies exclusively by angle (> 50 degrees).", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "trajectory_unknown": {"name": "trajectory_unknown", "description": "Number of plate appearances ending in a batted ball whose trajectory was not recorded and cannot\n    be reliably deduced from context. This number includes balls that we know were hit in the air,\n    but do not know which kind of air ball (FB/PU/LD) they were (see trajectory_broad_classification_unknown\n    for a number that does not include those balls). The strong majority of batted balls prior to 1988\n    fall into this category, especially hits.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "trajectory_known": {"name": "trajectory_known", "description": "Number of plate appearances ending in a batted ball whose trajectory was recorded or was reliably deduced\n    from the context. An example of reliable deduction is an at-bat with the fielding play 6-3, which\n    almost always is a ground ball fielded by the shortstop and thrown to the first baseman. See\n    `calc_batted_ball_type` for the deduction logic.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "trajectory_broad_air_ball": {"name": "trajectory_broad_air_ball", "description": "Number of plate appearances that ended in an air ball (a fly ball, line drive, or pop-up).\n    Because it is much easier to deduce that a ball was hit in the air than it is to deduce the exact\n    trajectory, this number field is more reliably populated than any of its three consituent parts.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "trajectory_broad_ground_ball": {"name": "trajectory_broad_ground_ball", "description": "Same as `trajectory_ground_ball`.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "trajectory_broad_unknown": {"name": "trajectory_broad_unknown", "description": "Number of plate appearances ending in a batted ball whose trajectory was not recorded and cannot\n    be reliably deduced from context, even to the extent of knowing whether it was a ground ball or an air ball.\n    This will include a disproportionate number of hits, which are more likely to be missing trajectory data\n    and harder to make deductions about.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "trajectory_broad_known": {"name": "trajectory_broad_known", "description": "Number of plate appearances ending in a batted ball whose ground/air status was recorded or\n    reliably deduced from the context. This is the sum of `trajectory_broad_air_ball` and\n    `trajectory_broad_ground_ball`. Outs in play have excellent coverage historically here,\n    even for older games.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "bunts": {"name": "bunts", "description": "Number of plate appearances ending in an in-play bunt.\n    This does not include strikeouts on foul bunts with two strikes.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "batted_distance_plate": {"name": "batted_distance_plate", "description": "Number of plate appearances in which the ball was batted to catcher's area around home plate.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "batted_distance_infield": {"name": "batted_distance_infield", "description": "Number of plate appearances in which the ball was batted to the infield (not including the catcher).\n    All ground balls are included here, regardless of whether they made it through to the outfield.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "batted_distance_outfield": {"name": "batted_distance_outfield", "description": "Number of plate appearances in which the ball was hit on the fly to the outfield.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "batted_distance_unknown": {"name": "batted_distance_unknown", "description": "Number of plate appearances in which the ball was hit, but the distance was not recorded\n    and cannot be reliably deduced from context.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "batted_distance_known": {"name": "batted_distance_known", "description": "Number of plate appearances in which the ball was hit, and the distance was either\n    recorded or reliably deduced from context.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "fielded_by_battery": {"name": "fielded_by_battery", "description": "Number of plate appearances in which the ball was fielded by the pitcher or catcher.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "fielded_by_infielder": {"name": "fielded_by_infielder", "description": "Number of plate appearances in which the ball was fielded by an infielder.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "fielded_by_outfielder": {"name": "fielded_by_outfielder", "description": "Number of plate appearances in which the ball was fielded by an outfielder.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "fielded_by_known": {"name": "fielded_by_known", "description": "Number of plate appearances in which the ball was fielded by a player, and the player was recorded.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "fielded_by_unknown": {"name": "fielded_by_unknown", "description": "Number of plate appearances in which the ball was fielded by a player, but the player was not recorded.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "batted_angle_left": {"name": "batted_angle_left", "description": "Number of plate appearances in which the ball was batted to the left side of the field.\n    This includes balls where the location was not recorded, but the fielder is on the left side\n    (3B, LF). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "batted_angle_right": {"name": "batted_angle_right", "description": "Number of plate appearances in which the ball was batted to the right side of the field.\n    This includes balls where the location was not recorded, but the fielder is on the right side\n    (1B, RF). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "batted_angle_middle": {"name": "batted_angle_middle", "description": "Number of plate appearances in which the ball was batted to the middle of the field.\n    This includes balls where the location was not recorded, but the fielder is up the middle\n    (P, 2B, SS, CF). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "batted_angle_unknown": {"name": "batted_angle_unknown", "description": "Number of plate appearances in which the ball was batted, but we don't have enough location\n    to determine the spray angle.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "batted_angle_known": {"name": "batted_angle_known", "description": "Number of plate appearances in which the ball was hit and we have enough location to determine\n    the spray angle.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "batted_location_plate": {"name": "batted_location_plate", "description": "Number of plate appearances in which the ball was batted to the catcher's area around home plate.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "batted_location_right_infield": {"name": "batted_location_right_infield", "description": "Number of plate appearances in which the ball was batted to the right side of the infield.\n    This includes balls where the location was not recorded, but the fielder is on the right side\n    (1B). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "batted_location_middle_infield": {"name": "batted_location_middle_infield", "description": "Number of plate appearances in which the ball was batted to the middle of the infield.\n    This includes balls where the location was not recorded, but the fielder is up the middle\n    (P, SS, 2B). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "batted_location_left_infield": {"name": "batted_location_left_infield", "description": "Number of plate appearances in which the ball was batted to the left side of the infield.\n    This includes balls where the location was not recorded, but the fielder is on the left side\n    (3B). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "batted_location_left_field": {"name": "batted_location_left_field", "description": "Number of plate appearances in which the ball was batted to the left side of the outfield.\n    This includes balls where the location was not recorded, but the fielder is on the left side\n    (LF). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "batted_location_center_field": {"name": "batted_location_center_field", "description": "Number of plate appearances in which the ball was batted to the center of the outfield.\n    This includes balls where the location was not recorded, but the fielder is up the middle\n    (CF). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "batted_location_right_field": {"name": "batted_location_right_field", "description": "Number of plate appearances in which the ball was batted to the right side of the outfield.\n    This includes balls where the location was not recorded, but the fielder is on the right side\n    (RF, CF). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "batted_location_unknown": {"name": "batted_location_unknown", "description": "Number of plate appearances in which the ball was batted, but we don't have enough location\n    to determine the specific location.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "batted_location_known": {"name": "batted_location_known", "description": "Number of plate appearances in which the ball was batted and we have enough location to determine\n    the specific location.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "batted_balls_pulled": {"name": "batted_balls_pulled", "description": "Number of plate appearances in which the ball was pulled (the left side for right-handed batters, the right side for left-handed batters).", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "batted_balls_opposite_field": {"name": "batted_balls_opposite_field", "description": "Number of plate appearances in which the ball was hit to the opposite field (the right side for right-handed batters, the left side for left-handed batters).", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "runs": {"name": "runs", "description": "(R) Number of runs scored.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "times_reached_base": {"name": "times_reached_base", "description": "Number of times a batter ended a plate appearance on base, even if it was through a fielder's choice, error, etc.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "stolen_bases": {"name": "stolen_bases", "description": "(SB) Number of successful stolen bases.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "caught_stealing": {"name": "caught_stealing", "description": "(CS) Number of times a runner was caught stealing.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "picked_off": {"name": "picked_off", "description": "(PO, at risk of confusion with putouts) Number of times a runner was picked off.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "picked_off_caught_stealing": {"name": "picked_off_caught_stealing", "description": "(POCS) Number of times a runner was picked off, but instead of going back to the bag,\n    tried to run to the next base and was put out.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "outs_on_basepaths": {"name": "outs_on_basepaths", "description": "Number of outs recorded by a baserunner (this is not mutually exclusive with outs recorded by the batter\n    in cases like failed advances or dropped third-strike putouts).", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "unforced_outs_on_basepaths": {"name": "unforced_outs_on_basepaths", "description": "Number of outs recorded by a baserunner that was not the result of a force on the runner.\n    \"Unforced\" is meant to be in both the literal sense of a force not being in play, but also\n    the figurative sense of the runner being responsible for the out. The latter may or may not\n    be the best interpretation of any given play, but it is useful to assign responsibility to the\n    runner by default in those contexts.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "outs_avoided_on_errors": {"name": "outs_avoided_on_errors", "description": "Number of times that a baserunner would have been out, but an error allowed them to remain\n    on the basepaths (either staying put or advancing).", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "advances_on_wild_pitches": {"name": "advances_on_wild_pitches", "description": "(WP) Number of times a baserunner advanced on a wild pitch.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "advances_on_passed_balls": {"name": "advances_on_passed_balls", "description": "(PB) Number of times a baserunner advanced on a passed ball.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "advances_on_balks": {"name": "advances_on_balks", "description": "(sometimes BK) Number of times a baserunner advanced on a balk.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "advances_on_unspecified_plays": {"name": "advances_on_unspecified_plays", "description": "Number of times a baserunner advanced for an unspecified reason.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "advances_on_defensive_indifference": {"name": "advances_on_defensive_indifference", "description": "(DI) Number of times a baserunner advanced on defensive indifference.\n   Defensive indifference is a judgement call by the official scorer that the defense\n   did not try to stop the runner from stealing a base. This usually happens\n   when the defense has a lead late in the game.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "advances_on_errors": {"name": "advances_on_errors", "description": "Number of times a baserunner advanced on an error.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "extra_base_advance_attempts": {"name": "extra_base_advance_attempts", "description": "Number of times a baserunner tried to advance by a greater number of bases than the batter.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "bases_advanced": {"name": "bases_advanced", "description": "Number of bases advanced by a baserunner, including the batter.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "bases_advanced_on_balls_in_play": {"name": "bases_advanced_on_balls_in_play", "description": "Number of bases advanced by a baserunner on a ball in play, including the batter.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "surplus_bases_advanced_on_balls_in_play": {"name": "surplus_bases_advanced_on_balls_in_play", "description": "Number of bases advanced by a baserunner on a ball in play minus the number of total bases\n    accumulated by the batter on the same play. For example, if a runner goes from first to third\n    on a single, this number is 1 (3 - 2). If a runner only goes from second to third on a double,\n    this number is -1 (1 - 2).", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "outs_on_extra_base_advance_attempts": {"name": "outs_on_extra_base_advance_attempts", "description": "Number of times a baserunner was out attempting to advance\n    by a greater number of bases than the batter. This includes\n    batters who were put out trying to stretch a hit to the next base.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "pitches": {"name": "pitches", "description": "Number of pitches thrown.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "swings": {"name": "swings", "description": "Number of pitches that were swung at.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "swings_with_contact": {"name": "swings_with_contact", "description": "Number of pitches that were swung at and made contact.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "strikes": {"name": "strikes", "description": "Number of pitches that were called or swinging strikes.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "strikes_called": {"name": "strikes_called", "description": "Number of pitches that were called strikes.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "strikes_swinging": {"name": "strikes_swinging", "description": "Number of pitches that were swung on and missed (mutually exclusive\n    with `swings_with_contact`, which also count as strikes).", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "strikes_foul": {"name": "strikes_foul", "description": "Number of pitches that were fouled off.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "strikes_foul_tip": {"name": "strikes_foul_tip", "description": "Number of pitches that were fouled off and caught by the catcher for strike three.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "strikes_in_play": {"name": "strikes_in_play", "description": "Number of pitches that were swung on and batted into play.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "strikes_unknown": {"name": "strikes_unknown", "description": "Number of pitches that we know were strikes, but don't know what kind.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "balls": {"name": "balls", "description": "Number of pitches that were called balls.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "balls_called": {"name": "balls_called", "description": "Number of pitches that were called balls (as opposed to automatic balls that were\n    not actually thrown).", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "balls_intentional": {"name": "balls_intentional", "description": "Number of pitches that were called balls as part of an intentional walk.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "balls_automatic": {"name": "balls_automatic", "description": "Number of pitches that were called balls on an automatic walk or a delay penalty.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "unknown_pitches": {"name": "unknown_pitches", "description": "Number of pitches that were thrown without any other information recorded.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "pitchouts": {"name": "pitchouts", "description": "Number of pitches that were thrown as pitchouts. A pitchout is a pitch that is thrown\n    intentionally very far outside in order to make it easier for the catcher to throw out\n    a baserunner who is likely to steal.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "pitcher_pickoff_attempts": {"name": "pitcher_pickoff_attempts", "description": "Number of times the pitcher attempted to pick off a baserunner.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "catcher_pickoff_attempts": {"name": "catcher_pickoff_attempts", "description": "Number of times the catcher attempted to pick off a baserunner.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "pitches_blocked_by_catcher": {"name": "pitches_blocked_by_catcher", "description": "Number of pitches that were blocked by the catcher.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "pitches_with_runners_going": {"name": "pitches_with_runners_going", "description": "Number of pitches that were thrown while a baserunner was on the move\n    (as part of a steal or hit-and-run).", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "passed_balls": {"name": "passed_balls", "description": "(PB) Number of passed balls.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "wild_pitches": {"name": "wild_pitches", "description": "(WP) Number of wild pitches.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "balks": {"name": "balks", "description": "(BK) Number of balks.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "left_on_base": {"name": "left_on_base", "description": "(LOB) At an individual level, the number of baserunners that a batter failed to advance during a plate appearance.\n    At a team level, the number of baserunners remaining on base at the end of an inning. In order to count, baserunners\n    must not have scored or been put out.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "left_on_base_with_two_outs": {"name": "left_on_base_with_two_outs", "description": "(LOB) At an individual level, the number of baserunners that remain on base (unscored and not out) after a plate appearance that ends with the third out recorded. At a team level, this is interchangable with `left_on_base`.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "games_started": {"name": "games_started", "description": "(GS) Number of games started by a player.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "innings_pitched": {"name": "innings_pitched", "description": "(IP) Number of innings pitched by a pitcher. Fractional innings are given by .33 and .67 here,\n    but they are often formatted as .1 and .2 elsewhere.", "meta": {}, "data_type": "decimal(6,4)", "constraints": [], "quote": null, "tags": []}, "inherited_runners": {"name": "inherited_runners", "description": "(IR) Number of runners on base when a pitcher entered the game.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "bequeathed_runners": {"name": "bequeathed_runners", "description": "Number of runners on base when a pitcher left the game.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "games_relieved": {"name": "games_relieved", "description": "Number of games in which a pitcher entered the game in relief.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "games_finished": {"name": "games_finished", "description": "(GF) Number of games in which a pitcher entered the game in relief and finished the game.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "save_situations_entered": {"name": "save_situations_entered", "description": "Number of games in which a pitcher entered the game in a save situation. A save situation is defined\n    as when the pitcher enters the game ineligible to get the win with one of the following conditions:\n\n    - A lead of three runs or less and ineligible to get the win\n    - Any lead with the tying run on base, at bat, or on deck\n\n    If a pitcher pitches the final three innings of a game with any lead, they are credited with a save\n    but are not considered to have entered a save situation unless one of the above conditions is met.\n    Note the difference between this field and `save_opportunities`, which does not count games in which\n    the pitcher exited without completing or blowing the save.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "holds": {"name": "holds", "description": "(HLD, H) Number of holds recorded by a pitcher. A hold is defined as a relief appearance in which\n    the pitcher enters the game in a save situation, records at least one out, and leaves the game\n    with the lead intact.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "blown_saves": {"name": "blown_saves", "description": "(BS) Number of games in which a pitcher entered the game in a save situation and gave up the lead.\n    The status of inherited runners is irrelevant in determining who blew the save - it is entirely\n    a function of who was on the mount when the lead as lost.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "saves_by_rule": {"name": "saves_by_rule", "description": "Number of games in which a pitcher earned a save according to the default rules.\n    This may be different than the actual number of saves, as the official scorer may award\n    the player a win instead of a save at their discretion in rare cases.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "save_opportunities": {"name": "save_opportunities", "description": "(SVO) The sum of saves and blown saves.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "wins": {"name": "wins", "description": "(W) Number of games in which a pitcher was credited with the win.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "losses": {"name": "losses", "description": "(L) Number of games in which a pitcher was debited with the loss.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "saves": {"name": "saves", "description": "(SV) Number of games in which a pitcher was credited with the save.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "earned_runs": {"name": "earned_runs", "description": "(ER) Number of runs that are charged to a pitcher. This may include runs that scored after the pitcher\n    left the game (in the case of inherited runners), as well as runs that the scorekeeper deemed to be\n    the pitcher's responsibility in the absence of official inherited runner rules in the olden days.\n    Earned runs are only an official statistic at a game level: the earnedness of any given run is never\n    officially specified, only the total. It would be possible to make a very good guess algorithmically,\n    but that would be a huge pain for a stat that is not very useful in the first place.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "complete_games": {"name": "complete_games", "description": "(CG) Number of games in which a pitcher pitched the entire game, regardless of how long the game lasted.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "shutouts": {"name": "shutouts", "description": "(SHO) Number of games in which a pitcher recorded every out for his team and did not allow any runs,\n    earned or unearned, regardless of how long the game lasted. Note the subtle difference between the\n    definition of a shutout and a complete game: it is possible to pitch a shutout without a complete game\n    if the pitcher enters in relief when no outs have been recorded. AFAIK, the only reason this distinction\n    exists is for us to remember the time that Babe Ruth started a game, walked a batter, yelled at the umpire,\n    got ejected, punched the umpire, and then Ernie Shore came in and retired every batter he faced,\n    which is good enough for me.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "quality_starts": {"name": "quality_starts", "description": "(QS) Number of games in which a starting pitcher pitched at least six innings and allowed three or fewer earned runs.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "cheap_wins": {"name": "cheap_wins", "description": "Number of wins in which a starting pitcher did not record a quality start.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "tough_losses": {"name": "tough_losses", "description": "Number of losses in which a starting pitcher record a quality start.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "no_decisions": {"name": "no_decisions", "description": "(ND) Number of games in which a pitcher pitched but did not recieve a win or a loss.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "no_hitters": {"name": "no_hitters", "description": "At an individual level, the number of games in which a pitcher was the only pitcher for their team and pitched a full-length game without allowing any hits.\n    At a team level, the \"only pitcher\" requirement is dropped.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "perfect_games": {"name": "perfect_games", "description": "Number of games in which a pitcher was the only pitcher for their team and pitched the entire game\n    without allowing any baserunners. At a team level, the \"only pitcher\" requirement is dropped.\n    Generally considered the most impressive single-game pitching accomplishment.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "individual_earned_runs": {"name": "individual_earned_runs", "description": "", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "stolen_bases_second": {"name": "stolen_bases_second", "description": "Number of successful steals of second base.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "stolen_bases_third": {"name": "stolen_bases_third", "description": "Number of successful steals of third base.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "stolen_bases_home": {"name": "stolen_bases_home", "description": "Number of successful steals of home.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "caught_stealing_second": {"name": "caught_stealing_second", "description": "Number of times a runner was caught stealing second base.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "caught_stealing_third": {"name": "caught_stealing_third", "description": "Number of times a runner was caught stealing third base.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "caught_stealing_home": {"name": "caught_stealing_home", "description": "Number of times a runner was caught stealing home.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "stolen_base_opportunities": {"name": "stolen_base_opportunities", "description": "Number of events in which a runner had an opportunity to steal a base as the\n    lead basestealer OR the runner recorded a SB/CS in any situation.\n    \"Opportunity\" is defined as a situation in which the next base\n    was empty at the start of the event (not including the batter).\n    No-play events excluded, but events without plate appearances are included.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "stolen_base_opportunities_second": {"name": "stolen_base_opportunities_second", "description": "Number of opportunities to steal second base (see `stolen_base_opportunities` for detailed criteria).", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "stolen_base_opportunities_third": {"name": "stolen_base_opportunities_third", "description": "Number of opportunities to steal third base (see `stolen_base_opportunities` for detailed criteria).", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "stolen_base_opportunities_home": {"name": "stolen_base_opportunities_home", "description": "Number of opportunities to steal home (see `stolen_base_opportunities` for detailed criteria).", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "picked_off_first": {"name": "picked_off_first", "description": "Number of times a runner was picked off first base.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "picked_off_second": {"name": "picked_off_second", "description": "Number of times a runner was picked off second base.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "picked_off_third": {"name": "picked_off_third", "description": "Number of times a runner was picked off third base.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "extra_base_chances": {"name": "extra_base_chances", "description": "", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "extra_bases_taken": {"name": "extra_bases_taken", "description": "", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "plate_appearances": {"name": "plate_appearances", "description": "(PA) Number of times a batter came to the plate, including walks, hit by pitches, sacrifices, and at-bats.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}}, "meta": {"primary_keys": ["game_id", "team_id"]}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "baseball_computer://models/intermediate/game_level/team_game_pitching_stats.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "models", "contract": {"enforced": true}, "meta": {"primary_keys": ["game_id", "team_id"]}}, "created_at": 1702281449.4899971, "relation_name": "\"bc\".\"main_models\".\"team_game_pitching_stats\"", "raw_code": "{{\n  config(\n    materialized = 'table',\n    )\n}}\nWITH initial_sum AS (\n    SELECT\n        game_id,\n        team_id,\n        {% for stat in event_level_pitching_stats() + game_level_pitching_stats() -%}\n            {% set dtype = \"INT1\" if stat.startswith(\"surplus\") else \"USMALLINT\" %}\n            SUM({{ stat }})::{{ dtype }} AS {{ stat }},\n        {% endfor %}\n    FROM {{ ref('player_game_pitching_stats') }}\n    GROUP BY 1, 2\n),\n\n-- A few definitions change when aggregated at the team level\nfinal AS (\n    SELECT\n        * REPLACE (\n            -- TODO: Investigate cases where team UER > team ER\n            GREATEST(0, earned_runs::INT - team_unearned_runs)::UTINYINT AS earned_runs,\n            left_on_base_with_two_outs::UTINYINT AS left_on_base,\n            -- Combined no-hitters and perfect games (latter hasn't happened yet)\n            (hits = 0 AND outs_recorded >= 27)::UTINYINT AS no_hitters,\n            (perfect_games = 1 OR outs_recorded >= 27 AND times_reached_base = 0)::UTINYINT AS perfect_games,\n            -- Just to avoid weird rounding stuff\n            ROUND(outs_recorded / 3, 4)::DECIMAL(6, 4) AS innings_pitched\n        ),\n        earned_runs AS individual_earned_runs\n    FROM initial_sum\n\n)\n\nSELECT * FROM final", "language": "sql", "refs": [{"name": "player_game_pitching_stats", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.baseball_computer.event_level_pitching_stats", "macro.baseball_computer.game_level_pitching_stats"], "nodes": ["model.baseball_computer.player_game_pitching_stats"]}, "compiled_path": null, "contract": {"enforced": true, "alias_types": true, "checksum": "4d364c96cbbf8ce96f6f2d6c288a93b0a2c7e115c7ef7b5546102d22f1b75653"}, "access": "protected", "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true, "columns": ["game_id", "team_id"]}], "version": null, "latest_version": null, "deprecation_date": null}, "model.baseball_computer.team_game_offense_stats": {"database": "bc", "schema": "main_models", "name": "team_game_offense_stats", "resource_type": "model", "package_name": "baseball_computer", "path": "intermediate/game_level/team_game_offense_stats.sql", "original_file_path": "models/intermediate/game_level/team_game_offense_stats.sql", "unique_id": "model.baseball_computer.team_game_offense_stats", "fqn": ["baseball_computer", "intermediate", "game_level", "team_game_offense_stats"], "alias": "team_game_offense_stats", "checksum": {"name": "sha256", "checksum": "37e8d6f4808e238f9d3eb50c5f4c2886214e7270bb1b1504a256eea14bc2ffcf"}, "config": {"enabled": true, "alias": null, "schema": "models", "database": null, "tags": [], "meta": {"primary_keys": ["game_id", "team_id"]}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {"game_id": {"name": "game_id", "description": "Retrosheet game ID, A 12-character string structured as follows:\n\n    - Chars 1-3: Home team ID\n    - Chars 4-11: Date (YYYYMMDD)\n    - Char 12: Game number (0 if only one game was played on that day)\n    \n    Example: MLN195607170", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "team_id": {"name": "team_id", "description": "Retrosheet team ID, 3-character string which identifies the team\n    that a franchise was playing as at a given time.", "meta": {}, "data_type": "team_id", "constraints": [], "quote": null, "tags": []}, "plate_appearances": {"name": "plate_appearances", "description": "(PA) Number of times a batter came to the plate, including walks, hit by pitches, sacrifices, and at-bats.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "at_bats": {"name": "at_bats", "description": "(AB) Number of plate appearances that ended in either a hit or a non-sacrifice out.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "hits": {"name": "hits", "description": "(H) Number of times a batter reached base safely without an error or fielder's choice.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "singles": {"name": "singles", "description": "(1B) Number of hits in which a batter reached first base.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "doubles": {"name": "doubles", "description": "(2B) Number of hits in which a batter reached second base without the help of an error or an attempted\n    play on another runner.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "triples": {"name": "triples", "description": "(3B) Number of hits in which a batter reached third base without the help of an error or an attempted\n    play on another runner.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "home_runs": {"name": "home_runs", "description": "(HR) Number of hits in which a batter reached home plate without the help of an error or an attempted\n    play on another runner (usually by hitting the ball out of the park).", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "total_bases": {"name": "total_bases", "description": "(TB) Number of bases a batter reached safely without the help of an error or an attempted\n    play on another runner. HR * 4 + 3B * 3 + 2B * 2 + (H - HR - 3B - 2B)", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "strikeouts": {"name": "strikeouts", "description": "(K, SO) Number of times a batter struck out. This includes plays in which a batter reached base on\n    a dropped third strike.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "walks": {"name": "walks", "description": "(BB, occasionally W) Number of times a batter reaches base on called balls out of the strike zone\n    (Four balls for all of MLB history after the 1880s).", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "intentional_walks": {"name": "intentional_walks", "description": "(IBB, occasionally IW) Number of times a batter was intentionally walked. This number may be missing or undercounted\n    in earlier years, as intentional walks were not officially tracked until 1955.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "hit_by_pitches": {"name": "hit_by_pitches", "description": "(HBP) Number of times a batter was awarded first base after being hit by a pitch.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "sacrifice_hits": {"name": "sacrifice_hits", "description": "(SH) Number of times a batter performed a sacrifice bunt to advance another runner.\n    A bunt may count as a sacrifice even if the batter reaches base safely.\n    Unsuccessful attempts are not counted, nor are non-sacrifice bunts.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "sacrifice_flies": {"name": "sacrifice_flies", "description": "(SF) Number of times a batter hit a fly ball that resulted in an out (or error),\n    but allowed a runner to score on the throw.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "reached_on_errors": {"name": "reached_on_errors", "description": "(ROE) Number of times a batter reached base safely due to an error.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "reached_on_interferences": {"name": "reached_on_interferences", "description": "Number of times a batter was awarded first base for being illegally hindered\n    by a fielder, usually the catcher.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "inside_the_park_home_runs": {"name": "inside_the_park_home_runs", "description": "Number of times a batter hit a home run without the ball leaving the field of play.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "ground_rule_doubles": {"name": "ground_rule_doubles", "description": "Number of times a batter was awarded a double on a ball that went out of play after\n    bouncing in fair territory.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "infield_hits": {"name": "infield_hits", "description": "Number of times a batter reached base safely on a hit that did not reach the outfield.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "on_base_opportunities": {"name": "on_base_opportunities", "description": "Number of plate appearances in which a batter either did or did not reach base,\n    as defined by the formula for on-base percentage. Note that this is very similar to but different\n    from plate_appearances, as it does not include sacrifice hits or interference.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "on_base_successes": {"name": "on_base_successes", "description": "Number of hits, walks, and hit by pitches that serves as the numerator in the formula\n    for on-base percentage.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "runs_batted_in": {"name": "runs_batted_in", "description": "(RBI) Number of runs that scored as a result of a batter's plate appearance. This is usually\n    the number of runs that scored on the play, but errors and other similar cases may cause\n    some runs not to be credited to the batter. Scorerkeeper discretion occasionally causes differences\n    between the number in the database and the official MLB total.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "grounded_into_double_plays": {"name": "grounded_into_double_plays", "description": "(GIDP) Number of times a batter grounded into a double play. This is the conventional way\n    to record a double play and as such is an important statistic on its own. Games without\n    play-by-play accounts don't have data on the trajectory of the double play, so\n    this number is not populated for those games.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "double_plays": {"name": "double_plays", "description": "(DP) Number of times a play ended in two outs being recorded.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "triple_plays": {"name": "triple_plays", "description": "(TP) Number of times a play ended in three outs being recorded.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "batting_outs": {"name": "batting_outs", "description": "Number of outs that \"should\" have been recorded as a result of a batter's plate apperances.\n    A batting out is still counted if no actual out is recorded on an error or a failed fielder's choice.\n    Outs on baserunners (including the batter trying to stretch a hit) do not count here.\n    Grounded-into-double-plays count as two outs, but other types of double plays do not (the \n    idea here is that the baserunner is responsible on other types of double plays).\n    Unofficial stat, but designed here to be generally useful in determining rates of official stats.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "balls_in_play": {"name": "balls_in_play", "description": "Number of plate appearances that resulted in a live\n    ball on the field of play. The difference between this and batted_balls is that\n    balls_in_play does not include out-of-the-park home runs. This distinction is important\n    for calculating batting average on balls in play, a stat designed to isolate at_bats\n    in which the defense was involved.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "balls_batted": {"name": "balls_batted", "description": "Number of plate appearances that ended in a fair ball or a foul flyout. This is equivalent\n    to balls_in_play + home_runs, and may be a more useful denominator for \"in play\" stats depending\n    on the context.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "trajectory_fly_ball": {"name": "trajectory_fly_ball", "description": "(FB) Number of plate appearances that ended in a fly ball. A fly ball is defined here\n    as the subset of balls hit in the air that are neither line drives nor pop flies.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "trajectory_ground_ball": {"name": "trajectory_ground_ball", "description": "(GB) Number of plate appearances that ended in a ground ball, also called a grounder. A ground ball is defined\n    here to only include swings, not bunts, although older data may not have a proper distinction. Ground\n    balls tend to be easy to distinguish between other types of contact, but Statcast-era data defines it\n    as balls with a launch angle under 10 degrees.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "trajectory_line_drive": {"name": "trajectory_line_drive", "description": "(LD) Number of plate appearances that ended in a line drive, also called a liner. Line drives are distiguished\n    from fly balls by some combination of angle and exit velocity. In the Statcast era, line drives\n    are defined purely in terms of launch angle (10-25 degrees), but just about any colloquial definition\n    involves hard-hitness as well. The line-drive-fly-ball distinction is by far the most arbitrary\n    and subjective trajectory categorization. Many scorekeepers never included line drives, while others counted\n    any successful in-play air-hit as a line drive. Nevertheless, the distinction is a crucial one,\n    as line drives are by far the most likely type of batted ball to result in a hit (even when they are not hit very hard).", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "trajectory_pop_up": {"name": "trajectory_pop_up", "description": "(sometimes PU)  Number of plate appearances that ended in a pop-up, also called a pop fly.\n    Pop-ups are distinguished from fly balls in that they are hit at a higher angle, tend to be\n    hit with less exit velocity, and (as a result) end up in the infield or shallow outfield. Before\n    Statcast-era standardization, the distinction between a fly ball and a pop-up was a matter of\n    scorerkeeper judgement, and many unofficial scorekeepers did not distinguish between the two.\n    Statcast determines pop flies exclusively by angle (> 50 degrees).", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "trajectory_unknown": {"name": "trajectory_unknown", "description": "Number of plate appearances ending in a batted ball whose trajectory was not recorded and cannot\n    be reliably deduced from context. This number includes balls that we know were hit in the air,\n    but do not know which kind of air ball (FB/PU/LD) they were (see trajectory_broad_classification_unknown\n    for a number that does not include those balls). The strong majority of batted balls prior to 1988\n    fall into this category, especially hits.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "trajectory_known": {"name": "trajectory_known", "description": "Number of plate appearances ending in a batted ball whose trajectory was recorded or was reliably deduced\n    from the context. An example of reliable deduction is an at-bat with the fielding play 6-3, which\n    almost always is a ground ball fielded by the shortstop and thrown to the first baseman. See\n    `calc_batted_ball_type` for the deduction logic.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "trajectory_broad_air_ball": {"name": "trajectory_broad_air_ball", "description": "Number of plate appearances that ended in an air ball (a fly ball, line drive, or pop-up).\n    Because it is much easier to deduce that a ball was hit in the air than it is to deduce the exact\n    trajectory, this number field is more reliably populated than any of its three consituent parts.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "trajectory_broad_ground_ball": {"name": "trajectory_broad_ground_ball", "description": "Same as `trajectory_ground_ball`.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "trajectory_broad_unknown": {"name": "trajectory_broad_unknown", "description": "Number of plate appearances ending in a batted ball whose trajectory was not recorded and cannot\n    be reliably deduced from context, even to the extent of knowing whether it was a ground ball or an air ball.\n    This will include a disproportionate number of hits, which are more likely to be missing trajectory data\n    and harder to make deductions about.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "trajectory_broad_known": {"name": "trajectory_broad_known", "description": "Number of plate appearances ending in a batted ball whose ground/air status was recorded or\n    reliably deduced from the context. This is the sum of `trajectory_broad_air_ball` and\n    `trajectory_broad_ground_ball`. Outs in play have excellent coverage historically here,\n    even for older games.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "bunts": {"name": "bunts", "description": "Number of plate appearances ending in an in-play bunt.\n    This does not include strikeouts on foul bunts with two strikes.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "batted_distance_plate": {"name": "batted_distance_plate", "description": "Number of plate appearances in which the ball was batted to catcher's area around home plate.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "batted_distance_infield": {"name": "batted_distance_infield", "description": "Number of plate appearances in which the ball was batted to the infield (not including the catcher).\n    All ground balls are included here, regardless of whether they made it through to the outfield.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "batted_distance_outfield": {"name": "batted_distance_outfield", "description": "Number of plate appearances in which the ball was hit on the fly to the outfield.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "batted_distance_unknown": {"name": "batted_distance_unknown", "description": "Number of plate appearances in which the ball was hit, but the distance was not recorded\n    and cannot be reliably deduced from context.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "batted_distance_known": {"name": "batted_distance_known", "description": "Number of plate appearances in which the ball was hit, and the distance was either\n    recorded or reliably deduced from context.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "fielded_by_battery": {"name": "fielded_by_battery", "description": "Number of plate appearances in which the ball was fielded by the pitcher or catcher.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "fielded_by_infielder": {"name": "fielded_by_infielder", "description": "Number of plate appearances in which the ball was fielded by an infielder.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "fielded_by_outfielder": {"name": "fielded_by_outfielder", "description": "Number of plate appearances in which the ball was fielded by an outfielder.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "fielded_by_known": {"name": "fielded_by_known", "description": "Number of plate appearances in which the ball was fielded by a player, and the player was recorded.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "fielded_by_unknown": {"name": "fielded_by_unknown", "description": "Number of plate appearances in which the ball was fielded by a player, but the player was not recorded.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "batted_angle_left": {"name": "batted_angle_left", "description": "Number of plate appearances in which the ball was batted to the left side of the field.\n    This includes balls where the location was not recorded, but the fielder is on the left side\n    (3B, LF). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "batted_angle_right": {"name": "batted_angle_right", "description": "Number of plate appearances in which the ball was batted to the right side of the field.\n    This includes balls where the location was not recorded, but the fielder is on the right side\n    (1B, RF). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "batted_angle_middle": {"name": "batted_angle_middle", "description": "Number of plate appearances in which the ball was batted to the middle of the field.\n    This includes balls where the location was not recorded, but the fielder is up the middle\n    (P, 2B, SS, CF). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "batted_angle_unknown": {"name": "batted_angle_unknown", "description": "Number of plate appearances in which the ball was batted, but we don't have enough location\n    to determine the spray angle.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "batted_angle_known": {"name": "batted_angle_known", "description": "Number of plate appearances in which the ball was hit and we have enough location to determine\n    the spray angle.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "batted_location_plate": {"name": "batted_location_plate", "description": "Number of plate appearances in which the ball was batted to the catcher's area around home plate.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "batted_location_right_infield": {"name": "batted_location_right_infield", "description": "Number of plate appearances in which the ball was batted to the right side of the infield.\n    This includes balls where the location was not recorded, but the fielder is on the right side\n    (1B). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "batted_location_middle_infield": {"name": "batted_location_middle_infield", "description": "Number of plate appearances in which the ball was batted to the middle of the infield.\n    This includes balls where the location was not recorded, but the fielder is up the middle\n    (P, SS, 2B). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "batted_location_left_infield": {"name": "batted_location_left_infield", "description": "Number of plate appearances in which the ball was batted to the left side of the infield.\n    This includes balls where the location was not recorded, but the fielder is on the left side\n    (3B). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "batted_location_left_field": {"name": "batted_location_left_field", "description": "Number of plate appearances in which the ball was batted to the left side of the outfield.\n    This includes balls where the location was not recorded, but the fielder is on the left side\n    (LF). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "batted_location_center_field": {"name": "batted_location_center_field", "description": "Number of plate appearances in which the ball was batted to the center of the outfield.\n    This includes balls where the location was not recorded, but the fielder is up the middle\n    (CF). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "batted_location_right_field": {"name": "batted_location_right_field", "description": "Number of plate appearances in which the ball was batted to the right side of the outfield.\n    This includes balls where the location was not recorded, but the fielder is on the right side\n    (RF, CF). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "batted_location_unknown": {"name": "batted_location_unknown", "description": "Number of plate appearances in which the ball was batted, but we don't have enough location\n    to determine the specific location.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "batted_location_known": {"name": "batted_location_known", "description": "Number of plate appearances in which the ball was batted and we have enough location to determine\n    the specific location.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "batted_balls_pulled": {"name": "batted_balls_pulled", "description": "Number of plate appearances in which the ball was pulled (the left side for right-handed batters, the right side for left-handed batters).", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "batted_balls_opposite_field": {"name": "batted_balls_opposite_field", "description": "Number of plate appearances in which the ball was hit to the opposite field (the right side for right-handed batters, the left side for left-handed batters).", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "runs": {"name": "runs", "description": "(R) Number of runs scored.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "times_reached_base": {"name": "times_reached_base", "description": "Number of times a batter ended a plate appearance on base, even if it was through a fielder's choice, error, etc.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "stolen_bases": {"name": "stolen_bases", "description": "(SB) Number of successful stolen bases.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "caught_stealing": {"name": "caught_stealing", "description": "(CS) Number of times a runner was caught stealing.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "picked_off": {"name": "picked_off", "description": "(PO, at risk of confusion with putouts) Number of times a runner was picked off.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "picked_off_caught_stealing": {"name": "picked_off_caught_stealing", "description": "(POCS) Number of times a runner was picked off, but instead of going back to the bag,\n    tried to run to the next base and was put out.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "outs_on_basepaths": {"name": "outs_on_basepaths", "description": "Number of outs recorded by a baserunner (this is not mutually exclusive with outs recorded by the batter\n    in cases like failed advances or dropped third-strike putouts).", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "unforced_outs_on_basepaths": {"name": "unforced_outs_on_basepaths", "description": "Number of outs recorded by a baserunner that was not the result of a force on the runner.\n    \"Unforced\" is meant to be in both the literal sense of a force not being in play, but also\n    the figurative sense of the runner being responsible for the out. The latter may or may not\n    be the best interpretation of any given play, but it is useful to assign responsibility to the\n    runner by default in those contexts.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "outs_avoided_on_errors": {"name": "outs_avoided_on_errors", "description": "Number of times that a baserunner would have been out, but an error allowed them to remain\n    on the basepaths (either staying put or advancing).", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "advances_on_wild_pitches": {"name": "advances_on_wild_pitches", "description": "(WP) Number of times a baserunner advanced on a wild pitch.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "advances_on_passed_balls": {"name": "advances_on_passed_balls", "description": "(PB) Number of times a baserunner advanced on a passed ball.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "advances_on_balks": {"name": "advances_on_balks", "description": "(sometimes BK) Number of times a baserunner advanced on a balk.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "advances_on_unspecified_plays": {"name": "advances_on_unspecified_plays", "description": "Number of times a baserunner advanced for an unspecified reason.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "advances_on_defensive_indifference": {"name": "advances_on_defensive_indifference", "description": "(DI) Number of times a baserunner advanced on defensive indifference.\n   Defensive indifference is a judgement call by the official scorer that the defense\n   did not try to stop the runner from stealing a base. This usually happens\n   when the defense has a lead late in the game.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "advances_on_errors": {"name": "advances_on_errors", "description": "Number of times a baserunner advanced on an error.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "plate_appearances_while_on_base": {"name": "plate_appearances_while_on_base", "description": "Number of plate appearances in which the baserunner started on 1st, 2nd, or 3rd base.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "balls_in_play_while_running": {"name": "balls_in_play_while_running", "description": "Number of balls in play while either batting or on base.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "balls_in_play_while_on_base": {"name": "balls_in_play_while_on_base", "description": "Number of balls in play in which the baserunner started on 1st, 2nd, or 3rd base.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "batter_total_bases_while_running": {"name": "batter_total_bases_while_running", "description": "Number of total bases accumulated by the batter while the baserunner was running, including the batter.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "batter_total_bases_while_on_base": {"name": "batter_total_bases_while_on_base", "description": "Number of total bases accumulated by the batter while the baserunner was on base, excluding the batter.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "extra_base_advance_attempts": {"name": "extra_base_advance_attempts", "description": "Number of times a baserunner tried to advance by a greater number of bases than the batter.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "bases_advanced": {"name": "bases_advanced", "description": "Number of bases advanced by a baserunner, including the batter.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "bases_advanced_on_balls_in_play": {"name": "bases_advanced_on_balls_in_play", "description": "Number of bases advanced by a baserunner on a ball in play, including the batter.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "surplus_bases_advanced_on_balls_in_play": {"name": "surplus_bases_advanced_on_balls_in_play", "description": "Number of bases advanced by a baserunner on a ball in play minus the number of total bases\n    accumulated by the batter on the same play. For example, if a runner goes from first to third\n    on a single, this number is 1 (3 - 2). If a runner only goes from second to third on a double,\n    this number is -1 (1 - 2).", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "outs_on_extra_base_advance_attempts": {"name": "outs_on_extra_base_advance_attempts", "description": "Number of times a baserunner was out attempting to advance\n    by a greater number of bases than the batter. This includes\n    batters who were put out trying to stretch a hit to the next base.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "pitches": {"name": "pitches", "description": "Number of pitches thrown.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "swings": {"name": "swings", "description": "Number of pitches that were swung at.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "swings_with_contact": {"name": "swings_with_contact", "description": "Number of pitches that were swung at and made contact.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "strikes": {"name": "strikes", "description": "Number of pitches that were called or swinging strikes.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "strikes_called": {"name": "strikes_called", "description": "Number of pitches that were called strikes.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "strikes_swinging": {"name": "strikes_swinging", "description": "Number of pitches that were swung on and missed (mutually exclusive\n    with `swings_with_contact`, which also count as strikes).", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "strikes_foul": {"name": "strikes_foul", "description": "Number of pitches that were fouled off.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "strikes_foul_tip": {"name": "strikes_foul_tip", "description": "Number of pitches that were fouled off and caught by the catcher for strike three.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "strikes_in_play": {"name": "strikes_in_play", "description": "Number of pitches that were swung on and batted into play.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "strikes_unknown": {"name": "strikes_unknown", "description": "Number of pitches that we know were strikes, but don't know what kind.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "balls": {"name": "balls", "description": "Number of pitches that were called balls.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "balls_called": {"name": "balls_called", "description": "Number of pitches that were called balls (as opposed to automatic balls that were\n    not actually thrown).", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "balls_intentional": {"name": "balls_intentional", "description": "Number of pitches that were called balls as part of an intentional walk.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "balls_automatic": {"name": "balls_automatic", "description": "Number of pitches that were called balls on an automatic walk or a delay penalty.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "unknown_pitches": {"name": "unknown_pitches", "description": "Number of pitches that were thrown without any other information recorded.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "pitchouts": {"name": "pitchouts", "description": "Number of pitches that were thrown as pitchouts. A pitchout is a pitch that is thrown\n    intentionally very far outside in order to make it easier for the catcher to throw out\n    a baserunner who is likely to steal.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "pitcher_pickoff_attempts": {"name": "pitcher_pickoff_attempts", "description": "Number of times the pitcher attempted to pick off a baserunner.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "catcher_pickoff_attempts": {"name": "catcher_pickoff_attempts", "description": "Number of times the catcher attempted to pick off a baserunner.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "pitches_blocked_by_catcher": {"name": "pitches_blocked_by_catcher", "description": "Number of pitches that were blocked by the catcher.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "pitches_with_runners_going": {"name": "pitches_with_runners_going", "description": "Number of pitches that were thrown while a baserunner was on the move\n    (as part of a steal or hit-and-run).", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "passed_balls": {"name": "passed_balls", "description": "(PB) Number of passed balls.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "wild_pitches": {"name": "wild_pitches", "description": "(WP) Number of wild pitches.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "balks": {"name": "balks", "description": "(BK) Number of balks.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "left_on_base": {"name": "left_on_base", "description": "(LOB) At an individual level, the number of baserunners that a batter failed to advance during a plate appearance.\n    At a team level, the number of baserunners remaining on base at the end of an inning. In order to count, baserunners\n    must not have scored or been put out.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "left_on_base_with_two_outs": {"name": "left_on_base_with_two_outs", "description": "(LOB) At an individual level, the number of baserunners that remain on base (unscored and not out) after a plate appearance that ends with the third out recorded. At a team level, this is interchangable with `left_on_base`.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "times_lead_runner": {"name": "times_lead_runner", "description": "Number of events that a runner was the lead runner on a play\n    (the runner who is furthest along the basepaths).\n    Batter is never counted as the lead runner. No-play events excluded,\n    but events without plate appearances are included.", "meta": {}, "data_type": "USMALLINT", "constraints": [], "quote": null, "tags": []}, "times_force_on_runner": {"name": "times_force_on_runner", "description": "Number of events that a force existed on the runner's next base.\n    The batter is counted as having a force on them (at first).\n    No-play events excluded, but events without plate appearances are included.", "meta": {}, "data_type": "USMALLINT", "constraints": [], "quote": null, "tags": []}, "times_next_base_empty": {"name": "times_next_base_empty", "description": "Number of events that the runner's next base was empty.\n    The batter is counted on events where first base is empty.\n    No-play events excluded, but events without plate appearances are included.", "meta": {}, "data_type": "USMALLINT", "constraints": [], "quote": null, "tags": []}, "stolen_base_opportunities": {"name": "stolen_base_opportunities", "description": "Number of events in which a runner had an opportunity to steal a base as the\n    lead basestealer OR the runner recorded a SB/CS in any situation.\n    \"Opportunity\" is defined as a situation in which the next base\n    was empty at the start of the event (not including the batter).\n    No-play events excluded, but events without plate appearances are included.", "meta": {}, "data_type": "USMALLINT", "constraints": [], "quote": null, "tags": []}, "stolen_base_opportunities_second": {"name": "stolen_base_opportunities_second", "description": "Number of opportunities to steal second base (see `stolen_base_opportunities` for detailed criteria).", "meta": {}, "data_type": "USMALLINT", "constraints": [], "quote": null, "tags": []}, "stolen_base_opportunities_third": {"name": "stolen_base_opportunities_third", "description": "Number of opportunities to steal third base (see `stolen_base_opportunities` for detailed criteria).", "meta": {}, "data_type": "USMALLINT", "constraints": [], "quote": null, "tags": []}, "stolen_base_opportunities_home": {"name": "stolen_base_opportunities_home", "description": "Number of opportunities to steal home (see `stolen_base_opportunities` for detailed criteria).", "meta": {}, "data_type": "USMALLINT", "constraints": [], "quote": null, "tags": []}, "stolen_bases_second": {"name": "stolen_bases_second", "description": "Number of successful steals of second base.", "meta": {}, "data_type": "USMALLINT", "constraints": [], "quote": null, "tags": []}, "stolen_bases_third": {"name": "stolen_bases_third", "description": "Number of successful steals of third base.", "meta": {}, "data_type": "USMALLINT", "constraints": [], "quote": null, "tags": []}, "stolen_bases_home": {"name": "stolen_bases_home", "description": "Number of successful steals of home.", "meta": {}, "data_type": "USMALLINT", "constraints": [], "quote": null, "tags": []}, "caught_stealing_second": {"name": "caught_stealing_second", "description": "Number of times a runner was caught stealing second base.", "meta": {}, "data_type": "USMALLINT", "constraints": [], "quote": null, "tags": []}, "caught_stealing_third": {"name": "caught_stealing_third", "description": "Number of times a runner was caught stealing third base.", "meta": {}, "data_type": "USMALLINT", "constraints": [], "quote": null, "tags": []}, "caught_stealing_home": {"name": "caught_stealing_home", "description": "Number of times a runner was caught stealing home.", "meta": {}, "data_type": "USMALLINT", "constraints": [], "quote": null, "tags": []}, "picked_off_first": {"name": "picked_off_first", "description": "Number of times a runner was picked off first base.", "meta": {}, "data_type": "USMALLINT", "constraints": [], "quote": null, "tags": []}, "picked_off_second": {"name": "picked_off_second", "description": "Number of times a runner was picked off second base.", "meta": {}, "data_type": "USMALLINT", "constraints": [], "quote": null, "tags": []}, "picked_off_third": {"name": "picked_off_third", "description": "Number of times a runner was picked off third base.", "meta": {}, "data_type": "USMALLINT", "constraints": [], "quote": null, "tags": []}, "extra_base_chances": {"name": "extra_base_chances", "description": "", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "extra_bases_taken": {"name": "extra_bases_taken", "description": "", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}}, "meta": {"primary_keys": ["game_id", "team_id"]}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "baseball_computer://models/intermediate/game_level/team_game_offense_stats.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "models", "contract": {"enforced": true}, "meta": {"primary_keys": ["game_id", "team_id"]}}, "created_at": 1702281449.4707031, "relation_name": "\"bc\".\"main_models\".\"team_game_offense_stats\"", "raw_code": "{{\n  config(\n    materialized = 'table',\n    )\n}}\nWITH initial_sum AS (\n    SELECT\n        game_id,\n        team_id,\n        {% for stat in event_level_offense_stats() -%}\n            {% set dtype = \"INT1\" if stat.startswith(\"surplus\") else \"USMALLINT\" %}\n            SUM({{ stat }})::{{ dtype }} AS {{ stat }},\n        {% endfor %}\n    FROM {{ ref('player_game_offense_stats') }}\n    GROUP BY 1, 2\n),\n\n-- A few definitions change when aggregated at the team level\nfinal AS (\n    SELECT \n        * REPLACE (\n            left_on_base_with_two_outs AS left_on_base,\n    )\n    FROM initial_sum\n)\n\nSELECT * FROM final", "language": "sql", "refs": [{"name": "player_game_offense_stats", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.baseball_computer.event_level_offense_stats"], "nodes": ["model.baseball_computer.player_game_offense_stats"]}, "compiled_path": null, "contract": {"enforced": true, "alias_types": true, "checksum": "5a5a0f4d23119950af11e31a66fbe62fcd68fe26eb8bb36972a5fa328bd74874"}, "access": "protected", "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true, "columns": ["game_id", "team_id"]}], "version": null, "latest_version": null, "deprecation_date": null}, "model.baseball_computer.game_line_scores": {"database": "bc", "schema": "main_models", "name": "game_line_scores", "resource_type": "model", "package_name": "baseball_computer", "path": "intermediate/game_level/game_line_scores.sql", "original_file_path": "models/intermediate/game_level/game_line_scores.sql", "unique_id": "model.baseball_computer.game_line_scores", "fqn": ["baseball_computer", "intermediate", "game_level", "game_line_scores"], "alias": "game_line_scores", "checksum": {"name": "sha256", "checksum": "1a5ce8f2d58f56453df3806b4caff2fb479d691542ebbbd887f46ab9e1df7fda"}, "config": {"enabled": true, "alias": null, "schema": "models", "database": null, "tags": [], "meta": {"primary_keys": ["game_id"]}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Line scores for each game in various formats. One row per game.", "columns": {"game_id": {"name": "game_id", "description": "Retrosheet game ID, A 12-character string structured as follows:\n\n    - Chars 1-3: Home team ID\n    - Chars 4-11: Date (YYYYMMDD)\n    - Char 12: Game number (0 if only one game was played on that day)\n    \n    Example: MLN195607170", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "home_runs_scored": {"name": "home_runs_scored", "description": "", "meta": {}, "data_type": "hugeint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "away_runs_scored": {"name": "away_runs_scored", "description": "", "meta": {}, "data_type": "hugeint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "home_line_score": {"name": "home_line_score", "description": "", "meta": {}, "data_type": "varchar", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "away_line_score": {"name": "away_line_score", "description": "", "meta": {}, "data_type": "varchar", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "home_line_score_list": {"name": "home_line_score_list", "description": "", "meta": {}, "data_type": "utinyint[]", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "away_line_score_list": {"name": "away_line_score_list", "description": "", "meta": {}, "data_type": "utinyint[]", "constraints": [], "quote": null, "tags": []}, "duration_outs": {"name": "duration_outs", "description": "", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}}, "meta": {"primary_keys": ["game_id"]}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "baseball_computer://models/intermediate/game_level/game_line_scores.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "models", "contract": {"enforced": true}, "meta": {"primary_keys": ["game_id"]}}, "created_at": 1702281449.482854, "relation_name": "\"bc\".\"main_models\".\"game_line_scores\"", "raw_code": "WITH event_lines AS (\n    SELECT\n        game_id,\n        batting_side,\n        inning_start AS inning,\n        SUM(runs_on_play) AS runs,\n        SUM(outs_on_play) AS outs,\n    FROM {{ ref('event_states_full') }}\n    GROUP BY 1, 2, 3\n),\n\nunioned AS (\n    SELECT *\n    FROM event_lines\n    UNION ALL BY NAME\n    \n    SELECT *\n    FROM {{ ref('stg_box_score_line_scores') }}\n    WHERE game_id NOT IN (SELECT DISTINCT game_id FROM event_lines)\n),\n\ngame_agg AS (\n    SELECT\n        game_id,\n        batting_side AS side,\n        SUM(runs) AS total_runs,\n        STRING_AGG(CASE\n            WHEN runs >= 10\n                THEN CONCAT('(', runs, ')')\n            ELSE runs::STRING\n        END, '') AS line_score,\n        SUM(outs) AS duration_outs,\n        LIST(runs::UTINYINT ORDER BY inning) AS line_score_list\n    FROM unioned\n    GROUP BY 1, 2\n),\n\nbox_outs AS (\n    SELECT\n        game_id,\n        side,\n        SUM(outs_recorded) AS duration_outs\n    FROM {{ ref('stg_box_score_pitching_lines') }}\n    GROUP BY 1, 2\n),\n\nside_agg AS (\n    SELECT\n        game_id,\n        FIRST(g.total_runs) FILTER (WHERE side = 'Home') AS home_runs_scored,\n        FIRST(g.total_runs) FILTER (WHERE side = 'Away') AS away_runs_scored,\n        FIRST(g.line_score) FILTER (WHERE side = 'Home') AS home_line_score,\n        FIRST(g.line_score) FILTER (WHERE side = 'Away') AS away_line_score,\n        FIRST(g.line_score_list) FILTER (WHERE side = 'Home') AS home_line_score_list,\n        FIRST(g.line_score_list) FILTER (WHERE side = 'Away') AS away_line_score_list,\n        SUM(COALESCE(g.duration_outs, box_outs.duration_outs))::UTINYINT AS duration_outs,\n    FROM game_agg AS g\n    LEFT JOIN box_outs USING (game_id, side)\n    GROUP BY 1\n),\n\nfinal AS (\n    SELECT * REPLACE (\n        CASE WHEN LENGTH(home_line_score) > LENGTH(away_line_score)\n            THEN away_line_score || 'x'\n            ELSE away_line_score\n        END AS away_line_score,\n        CASE WHEN LENGTH(away_line_score) > LENGTH(home_line_score)\n            THEN home_line_score || 'x'\n            ELSE home_line_score\n        END AS home_line_score,    \n    )\n    FROM side_agg\n)\n\nSELECT * FROM final", "language": "sql", "refs": [{"name": "event_states_full", "package": null, "version": null}, {"name": "stg_box_score_line_scores", "package": null, "version": null}, {"name": "stg_box_score_pitching_lines", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.baseball_computer.event_states_full", "model.baseball_computer.stg_box_score_line_scores", "model.baseball_computer.stg_box_score_pitching_lines"]}, "compiled_path": null, "contract": {"enforced": true, "alias_types": true, "checksum": "134da6c324fbc0a30f234f84ca56348a5a2349f22ed0473205ab09ae58018bf7"}, "access": "protected", "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true, "columns": ["game_id"]}], "version": null, "latest_version": null, "deprecation_date": null}, "model.baseball_computer.game_scorekeeping": {"database": "bc", "schema": "main_models", "name": "game_scorekeeping", "resource_type": "model", "package_name": "baseball_computer", "path": "intermediate/game_level/game_scorekeeping.sql", "original_file_path": "models/intermediate/game_level/game_scorekeeping.sql", "unique_id": "model.baseball_computer.game_scorekeeping", "fqn": ["baseball_computer", "intermediate", "game_level", "game_scorekeeping"], "alias": "game_scorekeeping", "checksum": {"name": "sha256", "checksum": "54fbc2307bfd524f7775622000da55c8e0130477cf125ec7f70935f94234191e"}, "config": {"enabled": true, "alias": null, "schema": "models", "database": null, "tags": [], "meta": {"primary_keys": ["game_id", "cleaned_scorer"]}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {"season": {"name": "season", "description": "Year, 4-digit integer", "meta": {}, "data_type": "smallint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "game_id": {"name": "game_id", "description": "Retrosheet game ID, A 12-character string structured as follows:\n\n    - Chars 1-3: Home team ID\n    - Chars 4-11: Date (YYYYMMDD)\n    - Char 12: Game number (0 if only one game was played on that day)\n    \n    Example: MLN195607170", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "date": {"name": "date", "description": "Date on which the entity took place.", "meta": {}, "data_type": "date", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "cleaned_scorer": {"name": "cleaned_scorer", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "raw_scorer": {"name": "raw_scorer", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "away_team_id": {"name": "away_team_id", "description": "Retrosheet team ID, 3-character string which identifies the team\n    that a franchise was playing as at a given time.", "meta": {}, "data_type": "team_id", "constraints": [], "quote": null, "tags": []}, "home_team_id": {"name": "home_team_id", "description": "Retrosheet team ID, 3-character string which identifies the team\n    that a franchise was playing as at a given time.", "meta": {}, "data_type": "team_id", "constraints": [], "quote": null, "tags": []}, "inputter": {"name": "inputter", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "translator": {"name": "translator", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "game_share": {"name": "game_share", "description": "", "meta": {}, "data_type": "double", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "scorer_game_count_raw": {"name": "scorer_game_count_raw", "description": "", "meta": {}, "data_type": "bigint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "scorer_game_count_weighted": {"name": "scorer_game_count_weighted", "description": "", "meta": {}, "data_type": "double", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "scorer_more_common_team_id": {"name": "scorer_more_common_team_id", "description": "", "meta": {}, "data_type": "team_id", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}}, "meta": {"primary_keys": ["game_id", "cleaned_scorer"]}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "baseball_computer://models/intermediate/game_level/game_scorekeeping.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "models", "contract": {"enforced": true}, "meta": {"primary_keys": ["game_id", "cleaned_scorer"]}}, "created_at": 1702281449.480319, "relation_name": "\"bc\".\"main_models\".\"game_scorekeeping\"", "raw_code": "WITH flattened_init AS (\n    SELECT\n        season,\n        game_id,\n        away_team_id,\n        home_team_id,\n        date,\n        inputter,\n        translator,\n        CASE WHEN scorer IS NULL or TRIM(scorer) = '' THEN 'unknown' ELSE scorer END AS filled_scorer,\n        -- Delimiters aren't consistent, so we need to split on multiple characters\n        UNNEST(STRING_SPLIT_REGEX(filled_scorer, '[/&,]|( -(-?) )')) as split_scorer,\n        LOWER(TRIM(split_scorer)) AS scorer\n    FROM {{ ref('stg_games') }}\n),\n\nflattened AS (\n    SELECT\n        * REPLACE (\n            -- One more split to cover the common cases of \"[team1] [team2]\" AND \"teams\"\n            UNNEST(\n                CASE WHEN scorer NOT IN ('tsn box', 'red sox') AND REGEXP_FULL_MATCH(scorer, '\\w{3}\\W+\\w{3}')\n                        THEN STRING_SPLIT_REGEX(scorer, '\\W+')\n                    WHEN scorer IN ('teams', 'both teams', 'both')\n                        THEN [LOWER(away_team_id), LOWER(home_team_id)]\n                    ELSE [scorer]\n                END\n            ) AS scorer\n        )\n    FROM flattened_init\n),\n\ncounts AS (\n    SELECT DISTINCT ON (f.game_id, cleaned_scorer)\n        f.season,\n        f.game_id,\n        f.date,\n        f.away_team_id,\n        LOWER(away.nickname) AS away_nickname,\n        f.home_team_id,\n        LOWER(home.nickname) AS home_nickname,\n        f.inputter,\n        f.translator,\n        CASE WHEN s.normalized_scorer IS NOT NULL\n                THEN s.normalized_scorer\n            WHEN dis_away.normalized_scorer IS NOT NULL\n                THEN dis_away.normalized_scorer\n            WHEN dis_home.normalized_scorer IS NOT NULL\n                THEN dis_home.normalized_scorer\n            WHEN num_range.group_id IS NOT NULL\n                THEN num_range.group_id\n            WHEN f.scorer IN (LOWER(away.nickname), LOWER(f.away_team_id))\n                THEN LOWER(away.nickname)\n            WHEN f.scorer IN (LOWER(home.nickname), LOWER(f.home_team_id))\n                THEN LOWER(home.nickname)\n            ELSE f.scorer\n        END AS cleaned_scorer,\n        f.scorer AS raw_scorer,\n        COUNT(*) OVER (PARTITION BY f.game_id) AS game_scorer_splits,\n        COUNT(*) OVER (PARTITION BY cleaned_scorer) AS scorer_game_count_raw,\n        1 / game_scorer_splits AS game_share,\n    FROM flattened AS f\n    LEFT JOIN {{ ref('seed_scorer_lookup') }} AS s ON f.scorer = LOWER(TRIM(s.scorer))\n    LEFT JOIN {{ ref('seed_scorer_numerical_ranges') }} AS num_range\n        -- TODO: Test assumption that all possible range candidates are 3 digits\n        ON REGEXP_FULL_MATCH(f.scorer, '\\d{3}')\n            AND f.scorer BETWEEN num_range.start::VARCHAR AND num_range.end::VARCHAR\n    LEFT JOIN {{ ref('seed_franchises') }} AS away\n        ON f.away_team_id = away.team_id\n            AND f.date BETWEEN away.date_start AND COALESCE(away.date_end, '9999-12-31')\n    LEFT JOIN {{ ref('seed_franchises') }} AS home\n        ON f.home_team_id = home.team_id\n            AND f.date BETWEEN home.date_start AND COALESCE(home.date_end, '9999-12-31')\n    LEFT JOIN {{ ref('seed_scorer_disambiguation') }} AS dis_away\n        ON f.scorer = dis_away.scorer\n            AND LOWER(f.away_team_id) = dis_away.team_id\n    LEFT JOIN {{ ref('seed_scorer_disambiguation') }} AS dis_home\n        ON f.scorer = dis_home.scorer\n            AND LOWER(f.home_team_id) = dis_home.team_id\n    WHERE TRIM(f.scorer) != ''\n),\n\nfinal AS (\n    SELECT\n        season,\n        game_id,\n        date,\n        cleaned_scorer,\n        raw_scorer,\n        away_team_id,\n        home_team_id,\n        inputter,\n        translator,\n        game_share,\n        scorer_game_count_raw,\n        SUM(game_share) OVER scorer AS scorer_game_count_weighted,\n        CASE\n            WHEN SUM(game_share) OVER scorer_away >= SUM(game_share) OVER scorer_home\n                THEN away_team_id\n            ELSE home_team_id\n        END AS scorer_more_common_team_id\n    FROM counts\n    WINDOW\n        scorer AS (PARTITION BY cleaned_scorer),\n        scorer_away AS (PARTITION BY cleaned_scorer, away_team_id),\n        scorer_home AS (PARTITION BY cleaned_scorer, home_team_id)\n)\n\nSELECT * FROM final", "language": "sql", "refs": [{"name": "stg_games", "package": null, "version": null}, {"name": "seed_scorer_lookup", "package": null, "version": null}, {"name": "seed_scorer_numerical_ranges", "package": null, "version": null}, {"name": "seed_franchises", "package": null, "version": null}, {"name": "seed_franchises", "package": null, "version": null}, {"name": "seed_scorer_disambiguation", "package": null, "version": null}, {"name": "seed_scorer_disambiguation", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.baseball_computer.stg_games", "seed.baseball_computer.seed_scorer_lookup", "seed.baseball_computer.seed_scorer_numerical_ranges", "seed.baseball_computer.seed_franchises", "seed.baseball_computer.seed_scorer_disambiguation"]}, "compiled_path": null, "contract": {"enforced": true, "alias_types": true, "checksum": "357a5ea37847b2a9d067974b278495eef7dc5b8a282a1db68d72c847dc7e018a"}, "access": "protected", "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true, "columns": ["game_id", "cleaned_scorer"]}], "version": null, "latest_version": null, "deprecation_date": null}, "model.baseball_computer.event_double_plays": {"database": "bc", "schema": "main_models", "name": "event_double_plays", "resource_type": "model", "package_name": "baseball_computer", "path": "intermediate/event_level/event_double_plays.sql", "original_file_path": "models/intermediate/event_level/event_double_plays.sql", "unique_id": "model.baseball_computer.event_double_plays", "fqn": ["baseball_computer", "intermediate", "event_level", "event_double_plays"], "alias": "event_double_plays", "checksum": {"name": "sha256", "checksum": "da7e5df83f7883e5a0af65e64b8530394853846fd975b3d0fca1c74d5b2cb7d9"}, "config": {"enabled": true, "alias": null, "schema": "models", "database": null, "tags": [], "meta": {"primary_keys": ["event_key"]}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "access": "protected"}, "tags": [], "description": "A small helper table designed to flag double and triple plays.\n", "columns": {"event_key": {"name": "event_key", "description": "4-byte integer that uniquely identifies an event across the entire\n    dataset (contrast with event_id, which is game-specific). The key\n    is generated deterministically given the same dataset, but it may\n    change when the data is updated. It is guaranteed to follow the \n    order of events within a single game.", "meta": {}, "data_type": "uinteger", "constraints": [], "quote": null, "tags": []}, "is_double_play": {"name": "is_double_play", "description": "Whether the event is a double play.", "meta": {}, "data_type": "boolean", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "is_triple_play": {"name": "is_triple_play", "description": "Whether the event is a triple play.", "meta": {}, "data_type": "boolean", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "is_ground_ball_double_play": {"name": "is_ground_ball_double_play", "description": "Whether the event is a ground ball double play.", "meta": {}, "data_type": "boolean", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}}, "meta": {"primary_keys": ["event_key"]}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "baseball_computer://models/intermediate/event_level/event_double_plays.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "models", "contract": {"enforced": true}, "meta": {"primary_keys": ["event_key"]}}, "created_at": 1702281449.522551, "relation_name": "\"bc\".\"main_models\".\"event_double_plays\"", "raw_code": "WITH final AS (\n    SELECT\n        flags.event_key,\n        BOOL_OR(dp_flag_types.is_double_play) AS is_double_play,\n        BOOL_OR(dp_flag_types.is_triple_play) AS is_triple_play,\n        BOOL_OR(\n            dp_flag_types.is_ground_ball_double_play\n        ) AS is_ground_ball_double_play\n    FROM {{ ref('stg_event_flags') }} AS flags\n    INNER JOIN {{ ref('seed_double_play_flag_types') }} AS dp_flag_types USING (flag)\n    GROUP BY 1\n)\n\nSELECT * FROM final", "language": "sql", "refs": [{"name": "stg_event_flags", "package": null, "version": null}, {"name": "seed_double_play_flag_types", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.baseball_computer.stg_event_flags", "seed.baseball_computer.seed_double_play_flag_types"]}, "compiled_path": null, "contract": {"enforced": true, "alias_types": true, "checksum": "a1e1b58bce38853bd244409b61883bdd36c7f175b904d1e8f95321e4aad55cb7"}, "access": "protected", "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true, "columns": ["event_key"]}], "version": null, "latest_version": null, "deprecation_date": null}, "model.baseball_computer.event_baserunning_stats": {"database": "bc", "schema": "main_models", "name": "event_baserunning_stats", "resource_type": "model", "package_name": "baseball_computer", "path": "intermediate/event_level/event_baserunning_stats.sql", "original_file_path": "models/intermediate/event_level/event_baserunning_stats.sql", "unique_id": "model.baseball_computer.event_baserunning_stats", "fqn": ["baseball_computer", "intermediate", "event_level", "event_baserunning_stats"], "alias": "event_baserunning_stats", "checksum": {"name": "sha256", "checksum": "a19c1a591a257034b5ea039ee43226435c9d007cce415b676299cbbe4fcc53a1"}, "config": {"enabled": true, "alias": null, "schema": "models", "database": null, "tags": [], "meta": {"primary_keys": ["event_key", "baserunner"]}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {"event_key": {"name": "event_key", "description": "4-byte integer that uniquely identifies an event across the entire\n    dataset (contrast with event_id, which is game-specific). The key\n    is generated deterministically given the same dataset, but it may\n    change when the data is updated. It is guaranteed to follow the \n    order of events within a single game.", "meta": {}, "data_type": "uinteger", "constraints": [], "quote": null, "tags": []}, "game_id": {"name": "game_id", "description": "Retrosheet game ID, A 12-character string structured as follows:\n\n    - Chars 1-3: Home team ID\n    - Chars 4-11: Date (YYYYMMDD)\n    - Char 12: Game number (0 if only one game was played on that day)\n    \n    Example: MLN195607170", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "batting_team_id": {"name": "batting_team_id", "description": "Retrosheet team ID, 3-character string which identifies the team\n    that a franchise was playing as at a given time.", "meta": {}, "data_type": "team_id", "constraints": [], "quote": null, "tags": []}, "fielding_team_id": {"name": "fielding_team_id", "description": "Retrosheet team ID, 3-character string which identifies the team\n    that a franchise was playing as at a given time.", "meta": {}, "data_type": "team_id", "constraints": [], "quote": null, "tags": []}, "runner_id": {"name": "runner_id", "description": "Retrosheet 8-character person ID for the baserunner associated with the\n    entity.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "current_pitcher_id": {"name": "current_pitcher_id", "description": "Retrosheet person ID of the pitcher on the mount at the end of the event", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "baserunner": {"name": "baserunner", "description": "Enum indicating the specific baserunner associated with the entity.\n    Baserunner is designated by the state at the start of an event.", "meta": {}, "data_type": "baserunner", "constraints": [], "quote": null, "tags": []}, "runner_lineup_position": {"name": "runner_lineup_position", "description": "1-9 lineup position of the baserunner", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "reached_on_event_key": {"name": "reached_on_event_key", "description": "`event_key` corresponding to `reached_on_event_id`, see that field\n    for more detail.", "meta": {}, "data_type": "uinteger", "constraints": [], "quote": null, "tags": []}, "charge_event_key": {"name": "charge_event_key", "description": "`event_key` corresponding to `charge_event_id`, see that field\n    for more detail.", "meta": {}, "data_type": "uinteger", "constraints": [], "quote": null, "tags": []}, "explicit_charged_pitcher_id": {"name": "explicit_charged_pitcher_id", "description": "For some games prior to the establishment of official inherited runner rules,\n    a pitcher could be explicitly noted as the one charged with a runner. When\n    this is present, it overrides the pitcher from `charge_event_id`.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "runs": {"name": "runs", "description": "(R) Number of runs scored.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "outs_on_basepaths": {"name": "outs_on_basepaths", "description": "Number of outs recorded by a baserunner (this is not mutually exclusive with outs recorded by the batter\n    in cases like failed advances or dropped third-strike putouts).", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "times_reached_base": {"name": "times_reached_base", "description": "Number of times a batter ended a plate appearance on base, even if it was through a fielder's choice, error, etc.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "times_lead_runner": {"name": "times_lead_runner", "description": "Number of events that a runner was the lead runner on a play\n    (the runner who is furthest along the basepaths).\n    Batter is never counted as the lead runner. No-play events excluded,\n    but events without plate appearances are included.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "times_force_on_runner": {"name": "times_force_on_runner", "description": "Number of events that a force existed on the runner's next base.\n    The batter is counted as having a force on them (at first).\n    No-play events excluded, but events without plate appearances are included.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "times_next_base_empty": {"name": "times_next_base_empty", "description": "Number of events that the runner's next base was empty.\n    The batter is counted on events where first base is empty.\n    No-play events excluded, but events without plate appearances are included.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "stolen_base_opportunities": {"name": "stolen_base_opportunities", "description": "Number of events in which a runner had an opportunity to steal a base as the\n    lead basestealer OR the runner recorded a SB/CS in any situation.\n    \"Opportunity\" is defined as a situation in which the next base\n    was empty at the start of the event (not including the batter).\n    No-play events excluded, but events without plate appearances are included.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "stolen_base_opportunities_second": {"name": "stolen_base_opportunities_second", "description": "Number of opportunities to steal second base (see `stolen_base_opportunities` for detailed criteria).", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "stolen_base_opportunities_third": {"name": "stolen_base_opportunities_third", "description": "Number of opportunities to steal third base (see `stolen_base_opportunities` for detailed criteria).", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "stolen_base_opportunities_home": {"name": "stolen_base_opportunities_home", "description": "Number of opportunities to steal home (see `stolen_base_opportunities` for detailed criteria).", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "stolen_bases": {"name": "stolen_bases", "description": "(SB) Number of successful stolen bases.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "stolen_bases_second": {"name": "stolen_bases_second", "description": "Number of successful steals of second base.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "stolen_bases_third": {"name": "stolen_bases_third", "description": "Number of successful steals of third base.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "stolen_bases_home": {"name": "stolen_bases_home", "description": "Number of successful steals of home.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "caught_stealing": {"name": "caught_stealing", "description": "(CS) Number of times a runner was caught stealing.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "caught_stealing_second": {"name": "caught_stealing_second", "description": "Number of times a runner was caught stealing second base.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "caught_stealing_third": {"name": "caught_stealing_third", "description": "Number of times a runner was caught stealing third base.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "caught_stealing_home": {"name": "caught_stealing_home", "description": "Number of times a runner was caught stealing home.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "picked_off": {"name": "picked_off", "description": "(PO, at risk of confusion with putouts) Number of times a runner was picked off.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "picked_off_first": {"name": "picked_off_first", "description": "Number of times a runner was picked off first base.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "picked_off_second": {"name": "picked_off_second", "description": "Number of times a runner was picked off second base.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "picked_off_third": {"name": "picked_off_third", "description": "Number of times a runner was picked off third base.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "picked_off_caught_stealing": {"name": "picked_off_caught_stealing", "description": "(POCS) Number of times a runner was picked off, but instead of going back to the bag,\n    tried to run to the next base and was put out.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "advances_on_wild_pitches": {"name": "advances_on_wild_pitches", "description": "(WP) Number of times a baserunner advanced on a wild pitch.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "advances_on_passed_balls": {"name": "advances_on_passed_balls", "description": "(PB) Number of times a baserunner advanced on a passed ball.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "advances_on_balks": {"name": "advances_on_balks", "description": "(sometimes BK) Number of times a baserunner advanced on a balk.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "advances_on_unspecified_plays": {"name": "advances_on_unspecified_plays", "description": "Number of times a baserunner advanced for an unspecified reason.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "advances_on_defensive_indifference": {"name": "advances_on_defensive_indifference", "description": "(DI) Number of times a baserunner advanced on defensive indifference.\n   Defensive indifference is a judgement call by the official scorer that the defense\n   did not try to stop the runner from stealing a base. This usually happens\n   when the defense has a lead late in the game.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "advances_on_errors": {"name": "advances_on_errors", "description": "Number of times a baserunner advanced on an error.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "plate_appearances_while_on_base": {"name": "plate_appearances_while_on_base", "description": "Number of plate appearances in which the baserunner started on 1st, 2nd, or 3rd base.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "balls_in_play_while_running": {"name": "balls_in_play_while_running", "description": "Number of balls in play while either batting or on base.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "balls_in_play_while_on_base": {"name": "balls_in_play_while_on_base", "description": "Number of balls in play in which the baserunner started on 1st, 2nd, or 3rd base.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "batter_total_bases_while_running": {"name": "batter_total_bases_while_running", "description": "Number of total bases accumulated by the batter while the baserunner was running, including the batter.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "batter_total_bases_while_on_base": {"name": "batter_total_bases_while_on_base", "description": "Number of total bases accumulated by the batter while the baserunner was on base, excluding the batter.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "extra_base_advance_attempts": {"name": "extra_base_advance_attempts", "description": "Number of times a baserunner tried to advance by a greater number of bases than the batter.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "bases_advanced": {"name": "bases_advanced", "description": "Number of bases advanced by a baserunner, including the batter.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "bases_advanced_on_balls_in_play": {"name": "bases_advanced_on_balls_in_play", "description": "Number of bases advanced by a baserunner on a ball in play, including the batter.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "surplus_bases_advanced_on_balls_in_play": {"name": "surplus_bases_advanced_on_balls_in_play", "description": "Number of bases advanced by a baserunner on a ball in play minus the number of total bases\n    accumulated by the batter on the same play. For example, if a runner goes from first to third\n    on a single, this number is 1 (3 - 2). If a runner only goes from second to third on a double,\n    this number is -1 (1 - 2).", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "outs_on_extra_base_advance_attempts": {"name": "outs_on_extra_base_advance_attempts", "description": "Number of times a baserunner was out attempting to advance\n    by a greater number of bases than the batter. This includes\n    batters who were put out trying to stretch a hit to the next base.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "outs_avoided_on_errors": {"name": "outs_avoided_on_errors", "description": "Number of times that a baserunner would have been out, but an error allowed them to remain\n    on the basepaths (either staying put or advancing).", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "unforced_outs_on_basepaths": {"name": "unforced_outs_on_basepaths", "description": "Number of outs recorded by a baserunner that was not the result of a force on the runner.\n    \"Unforced\" is meant to be in both the literal sense of a force not being in play, but also\n    the figurative sense of the runner being responsible for the out. The latter may or may not\n    be the best interpretation of any given play, but it is useful to assign responsibility to the\n    runner by default in those contexts.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "extra_base_chances": {"name": "extra_base_chances", "description": "", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "extra_bases_taken": {"name": "extra_bases_taken", "description": "", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}}, "meta": {"primary_keys": ["event_key", "baserunner"]}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "baseball_computer://models/intermediate/event_level/event_baserunning_stats.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "models", "contract": {"enforced": true}, "meta": {"primary_keys": ["event_key", "baserunner"]}}, "created_at": 1702281449.5483, "relation_name": "\"bc\".\"main_models\".\"event_baserunning_stats\"", "raw_code": "{{\n  config(\n    materialized = 'table',\n    )\n}}\nWITH joined AS (\n    SELECT\n        event_key,\n        b.baserunner,\n        b.game_id,\n        e.batting_team_id,\n        e.fielding_team_id,\n        e.base_state,\n        b.runner_id,\n        e.pitcher_id AS current_pitcher_id,\n        b.runner_lineup_position,\n        b.reached_on_event_key,\n        b.charge_event_key,\n        b.explicit_charged_pitcher_id,\n        b.baserunner != 'Batter' AS is_on_base,\n        b.attempted_advance_to_base IS NOT NULL AS is_advance_attempt,\n        part.plate_appearance_result IS NOT NULL AS is_plate_appearance,\n        b.is_out,\n        b.is_advance_attempt AND NOT b.is_out AS is_successful,\n        COALESCE(b.advanced_on_error_flag, FALSE) AS advanced_on_error_flag,\n        COALESCE(b.explicit_out_flag, FALSE) AS explicit_out_flag,\n        baserunner_meta.numeric_value AS number_base_from,\n        bases_meta.numeric_value AS number_base_to,\n        COALESCE(part.is_in_play, FALSE) AS is_in_play,\n        COALESCE(part.is_hit, FALSE) AS is_hit,\n        COALESCE(b.baserunning_play_type, 'None') AS baserunning_play_type,\n        COALESCE(part.total_bases, 0)::UTINYINT AS batter_total_bases,\n        CASE WHEN b.baserunner = 'Batter'\n                THEN e.base_state & 1 = 0\n            WHEN b.baserunner = 'First'\n                THEN e.base_state >> 1 & 1 = 0\n            WHEN b.baserunner = 'Second'\n                THEN e.base_state >> 2 & 1 = 0\n            ELSE FALSE\n        END AS is_next_base_empty,\n        CASE WHEN b.baserunner = 'Batter'\n                -- By convention we say that the batter is never the lead runner\n                THEN FALSE\n            WHEN b.baserunner = 'First'\n                THEN e.base_state = 1\n            WHEN b.baserunner = 'Second'\n                THEN e.base_state < 4\n            ELSE TRUE\n        END AS is_lead_runner,\n        CASE WHEN b.baserunner = 'Second'\n                THEN e.base_state & 1 = 1\n            WHEN b.baserunner = 'Third'\n                THEN e.base_state = 7\n            ELSE TRUE\n        END AS is_force_on_runner,\n        CASE WHEN e.plate_appearance_result = 'Single'\n                THEN b.baserunner IN ('First', 'Second')\n            WHEN e.plate_appearance_result = 'Double'\n                THEN b.baserunner = 'First'\n            ELSE FALSE\n        END AS is_extra_base_chance,\n\n    FROM {{ ref('stg_event_baserunners') }} AS b\n    LEFT JOIN {{ ref('stg_events') }} AS e USING (event_key)\n    LEFT JOIN {{ ref('seed_plate_appearance_result_types') }} AS part\n        USING (plate_appearance_result)\n    LEFT JOIN {{ ref('seed_baserunner_info') }} AS baserunner_meta\n        ON b.baserunner = baserunner_meta.baserunner\n    LEFT JOIN {{ ref('seed_bases_info') }} AS bases_meta\n        ON b.attempted_advance_to_base = bases_meta.base\n    WHERE NOT e.no_play_flag\n),\n\nfinal AS (\n    SELECT\n        event_key,\n        game_id,\n        batting_team_id,\n        fielding_team_id,\n        runner_id,\n        current_pitcher_id,\n        baserunner,\n        runner_lineup_position,\n        reached_on_event_key,\n        charge_event_key,\n        explicit_charged_pitcher_id,\n        (is_successful AND number_base_to = 4)::UTINYINT AS runs,\n        is_out::UTINYINT AS outs_on_basepaths,\n        -- Note that this is different from OBP - it includes fielders choices, errors, etc.\n        (is_successful AND baserunner = 'Batter')::UTINYINT AS times_reached_base,\n        (is_lead_runner)::UTINYINT AS times_lead_runner,\n        (is_force_on_runner)::UTINYINT AS times_force_on_runner,\n        (is_next_base_empty)::UTINYINT AS times_next_base_empty,\n        (baserunning_play_type = 'StolenBase')::UTINYINT AS stolen_bases,\n        (stolen_bases > 0 AND baserunner = 'First')::UTINYINT AS stolen_bases_second,\n        (stolen_bases > 0 AND baserunner = 'Second')::UTINYINT AS stolen_bases_third,\n        (stolen_bases > 0 AND baserunner = 'Third')::UTINYINT AS stolen_bases_home,\n        (baserunning_play_type LIKE '%CaughtStealing')::UTINYINT AS caught_stealing,\n        (caught_stealing > 0 AND baserunner = 'First')::UTINYINT AS caught_stealing_second,\n        (caught_stealing > 0 AND baserunner = 'Second')::UTINYINT AS caught_stealing_third,\n        (caught_stealing > 0 AND baserunner = 'Third')::UTINYINT AS caught_stealing_home,\n        (\n            stolen_bases + caught_stealing > 0\n            OR is_next_base_empty AND is_on_base\n        )::UTINYINT AS stolen_base_opportunities,\n        (stolen_base_opportunities > 0 AND baserunner = 'First')::UTINYINT AS stolen_base_opportunities_second,\n        (stolen_base_opportunities > 0 AND baserunner = 'Second')::UTINYINT AS stolen_base_opportunities_third,\n        (stolen_base_opportunities > 0 AND baserunner = 'Third')::UTINYINT AS stolen_base_opportunities_home,\n        (baserunning_play_type LIKE 'PickedOff%' AND is_out)::UTINYINT AS picked_off,\n        (picked_off > 0 AND baserunner = 'First')::UTINYINT AS picked_off_first,\n        (picked_off > 0 AND baserunner = 'Second')::UTINYINT AS picked_off_second,\n        (picked_off > 0 AND baserunner = 'Third')::UTINYINT AS picked_off_third,\n        (baserunning_play_type = 'PickedOffCaughtStealing')::UTINYINT AS picked_off_caught_stealing,\n\n        (baserunning_play_type = 'WildPitch' AND is_successful)::UTINYINT AS advances_on_wild_pitches,\n        (baserunning_play_type = 'PassedBall' AND is_successful)::UTINYINT AS advances_on_passed_balls,\n        (baserunning_play_type = 'Balk' AND is_successful)::UTINYINT AS advances_on_balks,\n        (\n            baserunning_play_type = 'OtherAdvance' AND is_successful\n        )::UTINYINT AS advances_on_unspecified_plays,\n        (\n            baserunning_play_type = 'DefensiveIndifference' AND is_successful\n        )::UTINYINT AS advances_on_defensive_indifference,\n        (\n            (baserunning_play_type = 'AdvancedOnError' OR advanced_on_error_flag) AND is_successful\n        )::UTINYINT AS advances_on_errors,\n\n        (is_plate_appearance AND is_on_base)::UTINYINT AS plate_appearances_while_on_base,\n        (is_in_play)::UTINYINT AS balls_in_play_while_running,\n        (is_in_play AND is_on_base)::UTINYINT AS balls_in_play_while_on_base,\n        batter_total_bases AS batter_total_bases_while_running,\n        CASE WHEN is_on_base\n                THEN batter_total_bases\n            ELSE 0\n        END::UTINYINT AS batter_total_bases_while_on_base,\n        CASE WHEN is_hit AND number_base_to - number_base_from > batter_total_bases\n                THEN 1\n            ELSE 0\n        END::UTINYINT AS extra_base_advance_attempts,\n        CASE WHEN is_successful\n                THEN number_base_to - number_base_from\n            ELSE 0\n        END::INT1 AS bases_advanced,\n        CASE WHEN is_successful AND is_in_play AND NOT advanced_on_error_flag\n                THEN number_base_to - number_base_from\n            ELSE 0\n        END::INT1 AS bases_advanced_on_balls_in_play,\n        CASE WHEN is_successful AND is_in_play AND NOT advanced_on_error_flag\n                THEN number_base_to\n                    - number_base_from\n                    - LEAST(4 - number_base_from, batter_total_bases)\n            ELSE 0\n        END::INT1 AS surplus_bases_advanced_on_balls_in_play,\n        (\n            is_out AND explicit_out_flag AND number_base_to - number_base_from > 1\n        )::UTINYINT AS outs_on_extra_base_advance_attempts,\n        (explicit_out_flag AND NOT is_out)::UTINYINT AS outs_avoided_on_errors,\n        -- Tags do not count as an unforced out if they occur when a force was in play.\n        -- This will cause us to miss some cases when a runner on base is tagged out\n        -- after advancing, straying off the bag, and then failing to return.\n        (\n            is_out AND (\n                outs_on_extra_base_advance_attempts = 1\n                OR NOT is_force_on_runner\n                -- Force outs can't happen on the same plays as hits,\n                -- so runners marked out on hits are always unforced\n                OR is_hit\n            )\n        )::UTINYINT AS unforced_outs_on_basepaths,\n\n        (is_extra_base_chance)::UTINYINT AS extra_base_chances,\n        (is_extra_base_chance AND extra_base_advance_attempts > 0 AND is_successful)::UTINYINT AS extra_bases_taken,\n\n    FROM joined\n)\n\nSELECT * FROM final", "language": "sql", "refs": [{"name": "stg_event_baserunners", "package": null, "version": null}, {"name": "stg_events", "package": null, "version": null}, {"name": "seed_plate_appearance_result_types", "package": null, "version": null}, {"name": "seed_baserunner_info", "package": null, "version": null}, {"name": "seed_bases_info", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.baseball_computer.stg_event_baserunners", "model.baseball_computer.stg_events", "seed.baseball_computer.seed_plate_appearance_result_types", "seed.baseball_computer.seed_baserunner_info", "seed.baseball_computer.seed_bases_info"]}, "compiled_path": null, "contract": {"enforced": true, "alias_types": true, "checksum": "1dc24fa067d8bb36cb8e9218afcee498515d85f0a3f8345e05fbce73f45631c9"}, "access": "protected", "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true, "columns": ["event_key", "baserunner"]}], "version": null, "latest_version": null, "deprecation_date": null}, "model.baseball_computer.event_batted_ball_stats": {"database": "bc", "schema": "main_models", "name": "event_batted_ball_stats", "resource_type": "model", "package_name": "baseball_computer", "path": "intermediate/event_level/event_batted_ball_stats.sql", "original_file_path": "models/intermediate/event_level/event_batted_ball_stats.sql", "unique_id": "model.baseball_computer.event_batted_ball_stats", "fqn": ["baseball_computer", "intermediate", "event_level", "event_batted_ball_stats"], "alias": "event_batted_ball_stats", "checksum": {"name": "sha256", "checksum": "c34396ebdb23d5fb5252cbd787451704b984511e24f2ef56a0e5e9c21140d696"}, "config": {"enabled": true, "alias": null, "schema": "models", "database": null, "tags": [], "meta": {"primary_keys": ["event_key"]}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {"event_key": {"name": "event_key", "description": "4-byte integer that uniquely identifies an event across the entire\n    dataset (contrast with event_id, which is game-specific). The key\n    is generated deterministically given the same dataset, but it may\n    change when the data is updated. It is guaranteed to follow the \n    order of events within a single game.", "meta": {}, "data_type": "uinteger", "constraints": [], "quote": null, "tags": []}, "balls_batted": {"name": "balls_batted", "description": "Number of plate appearances that ended in a fair ball or a foul flyout. This is equivalent\n    to balls_in_play + home_runs, and may be a more useful denominator for \"in play\" stats depending\n    on the context.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "balls_in_play": {"name": "balls_in_play", "description": "Number of plate appearances that resulted in a live\n    ball on the field of play. The difference between this and batted_balls is that\n    balls_in_play does not include out-of-the-park home runs. This distinction is important\n    for calculating batting average on balls in play, a stat designed to isolate at_bats\n    in which the defense was involved.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "trajectory_fly_ball": {"name": "trajectory_fly_ball", "description": "(FB) Number of plate appearances that ended in a fly ball. A fly ball is defined here\n    as the subset of balls hit in the air that are neither line drives nor pop flies.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "trajectory_ground_ball": {"name": "trajectory_ground_ball", "description": "(GB) Number of plate appearances that ended in a ground ball, also called a grounder. A ground ball is defined\n    here to only include swings, not bunts, although older data may not have a proper distinction. Ground\n    balls tend to be easy to distinguish between other types of contact, but Statcast-era data defines it\n    as balls with a launch angle under 10 degrees.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "trajectory_line_drive": {"name": "trajectory_line_drive", "description": "(LD) Number of plate appearances that ended in a line drive, also called a liner. Line drives are distiguished\n    from fly balls by some combination of angle and exit velocity. In the Statcast era, line drives\n    are defined purely in terms of launch angle (10-25 degrees), but just about any colloquial definition\n    involves hard-hitness as well. The line-drive-fly-ball distinction is by far the most arbitrary\n    and subjective trajectory categorization. Many scorekeepers never included line drives, while others counted\n    any successful in-play air-hit as a line drive. Nevertheless, the distinction is a crucial one,\n    as line drives are by far the most likely type of batted ball to result in a hit (even when they are not hit very hard).", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "trajectory_pop_up": {"name": "trajectory_pop_up", "description": "(sometimes PU)  Number of plate appearances that ended in a pop-up, also called a pop fly.\n    Pop-ups are distinguished from fly balls in that they are hit at a higher angle, tend to be\n    hit with less exit velocity, and (as a result) end up in the infield or shallow outfield. Before\n    Statcast-era standardization, the distinction between a fly ball and a pop-up was a matter of\n    scorerkeeper judgement, and many unofficial scorekeepers did not distinguish between the two.\n    Statcast determines pop flies exclusively by angle (> 50 degrees).", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "trajectory_unknown": {"name": "trajectory_unknown", "description": "Number of plate appearances ending in a batted ball whose trajectory was not recorded and cannot\n    be reliably deduced from context. This number includes balls that we know were hit in the air,\n    but do not know which kind of air ball (FB/PU/LD) they were (see trajectory_broad_classification_unknown\n    for a number that does not include those balls). The strong majority of batted balls prior to 1988\n    fall into this category, especially hits.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "trajectory_known": {"name": "trajectory_known", "description": "Number of plate appearances ending in a batted ball whose trajectory was recorded or was reliably deduced\n    from the context. An example of reliable deduction is an at-bat with the fielding play 6-3, which\n    almost always is a ground ball fielded by the shortstop and thrown to the first baseman. See\n    `calc_batted_ball_type` for the deduction logic.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "trajectory_broad_air_ball": {"name": "trajectory_broad_air_ball", "description": "Number of plate appearances that ended in an air ball (a fly ball, line drive, or pop-up).\n    Because it is much easier to deduce that a ball was hit in the air than it is to deduce the exact\n    trajectory, this number field is more reliably populated than any of its three consituent parts.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "trajectory_broad_ground_ball": {"name": "trajectory_broad_ground_ball", "description": "Same as `trajectory_ground_ball`.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "trajectory_broad_unknown": {"name": "trajectory_broad_unknown", "description": "Number of plate appearances ending in a batted ball whose trajectory was not recorded and cannot\n    be reliably deduced from context, even to the extent of knowing whether it was a ground ball or an air ball.\n    This will include a disproportionate number of hits, which are more likely to be missing trajectory data\n    and harder to make deductions about.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "trajectory_broad_known": {"name": "trajectory_broad_known", "description": "Number of plate appearances ending in a batted ball whose ground/air status was recorded or\n    reliably deduced from the context. This is the sum of `trajectory_broad_air_ball` and\n    `trajectory_broad_ground_ball`. Outs in play have excellent coverage historically here,\n    even for older games.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "bunts": {"name": "bunts", "description": "Number of plate appearances ending in an in-play bunt.\n    This does not include strikeouts on foul bunts with two strikes.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "batted_distance_plate": {"name": "batted_distance_plate", "description": "Number of plate appearances in which the ball was batted to catcher's area around home plate.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "batted_distance_infield": {"name": "batted_distance_infield", "description": "Number of plate appearances in which the ball was batted to the infield (not including the catcher).\n    All ground balls are included here, regardless of whether they made it through to the outfield.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "batted_distance_outfield": {"name": "batted_distance_outfield", "description": "Number of plate appearances in which the ball was hit on the fly to the outfield.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "batted_distance_unknown": {"name": "batted_distance_unknown", "description": "Number of plate appearances in which the ball was hit, but the distance was not recorded\n    and cannot be reliably deduced from context.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "batted_distance_known": {"name": "batted_distance_known", "description": "Number of plate appearances in which the ball was hit, and the distance was either\n    recorded or reliably deduced from context.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "fielded_by_battery": {"name": "fielded_by_battery", "description": "Number of plate appearances in which the ball was fielded by the pitcher or catcher.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "fielded_by_infielder": {"name": "fielded_by_infielder", "description": "Number of plate appearances in which the ball was fielded by an infielder.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "fielded_by_outfielder": {"name": "fielded_by_outfielder", "description": "Number of plate appearances in which the ball was fielded by an outfielder.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "fielded_by_unknown": {"name": "fielded_by_unknown", "description": "Number of plate appearances in which the ball was fielded by a player, but the player was not recorded.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "fielded_by_known": {"name": "fielded_by_known", "description": "Number of plate appearances in which the ball was fielded by a player, and the player was recorded.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "batted_angle_left": {"name": "batted_angle_left", "description": "Number of plate appearances in which the ball was batted to the left side of the field.\n    This includes balls where the location was not recorded, but the fielder is on the left side\n    (3B, LF). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "batted_angle_right": {"name": "batted_angle_right", "description": "Number of plate appearances in which the ball was batted to the right side of the field.\n    This includes balls where the location was not recorded, but the fielder is on the right side\n    (1B, RF). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "batted_angle_middle": {"name": "batted_angle_middle", "description": "Number of plate appearances in which the ball was batted to the middle of the field.\n    This includes balls where the location was not recorded, but the fielder is up the middle\n    (P, 2B, SS, CF). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "batted_angle_unknown": {"name": "batted_angle_unknown", "description": "Number of plate appearances in which the ball was batted, but we don't have enough location\n    to determine the spray angle.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "batted_angle_known": {"name": "batted_angle_known", "description": "Number of plate appearances in which the ball was hit and we have enough location to determine\n    the spray angle.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "batted_location_plate": {"name": "batted_location_plate", "description": "Number of plate appearances in which the ball was batted to the catcher's area around home plate.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "batted_location_right_infield": {"name": "batted_location_right_infield", "description": "Number of plate appearances in which the ball was batted to the right side of the infield.\n    This includes balls where the location was not recorded, but the fielder is on the right side\n    (1B). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "batted_location_left_infield": {"name": "batted_location_left_infield", "description": "Number of plate appearances in which the ball was batted to the left side of the infield.\n    This includes balls where the location was not recorded, but the fielder is on the left side\n    (3B). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "batted_location_middle_infield": {"name": "batted_location_middle_infield", "description": "Number of plate appearances in which the ball was batted to the middle of the infield.\n    This includes balls where the location was not recorded, but the fielder is up the middle\n    (P, SS, 2B). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "batted_location_left_field": {"name": "batted_location_left_field", "description": "Number of plate appearances in which the ball was batted to the left side of the outfield.\n    This includes balls where the location was not recorded, but the fielder is on the left side\n    (LF). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "batted_location_center_field": {"name": "batted_location_center_field", "description": "Number of plate appearances in which the ball was batted to the center of the outfield.\n    This includes balls where the location was not recorded, but the fielder is up the middle\n    (CF). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "batted_location_right_field": {"name": "batted_location_right_field", "description": "Number of plate appearances in which the ball was batted to the right side of the outfield.\n    This includes balls where the location was not recorded, but the fielder is on the right side\n    (RF, CF). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "batted_location_unknown": {"name": "batted_location_unknown", "description": "Number of plate appearances in which the ball was batted, but we don't have enough location\n    to determine the specific location.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "batted_location_known": {"name": "batted_location_known", "description": "Number of plate appearances in which the ball was batted and we have enough location to determine\n    the specific location.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "batted_balls_pulled": {"name": "batted_balls_pulled", "description": "Number of plate appearances in which the ball was pulled (the left side for right-handed batters, the right side for left-handed batters).", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_balls_opposite_field": {"name": "batted_balls_opposite_field", "description": "Number of plate appearances in which the ball was hit to the opposite field (the right side for right-handed batters, the left side for left-handed batters).", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}}, "meta": {"primary_keys": ["event_key"]}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "baseball_computer://models/intermediate/event_level/event_batted_ball_stats.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "models", "contract": {"enforced": true}, "meta": {"primary_keys": ["event_key"]}}, "created_at": 1702281449.551177, "relation_name": "\"bc\".\"main_models\".\"event_batted_ball_stats\"", "raw_code": "{{\n  config(\n    materialized = 'table',\n    )\n}}\nWITH batted_ball AS (\n    SELECT\n        event_key,\n        1::UTINYINT AS balls_batted,\n        (batted_to_fielder IS NOT NULL)::UTINYINT AS balls_in_play,\n        CASE WHEN trajectory = 'Fly' THEN 1 ELSE 0 END::UTINYINT AS trajectory_fly_ball,\n        CASE WHEN trajectory = 'GroundBall' THEN 1 ELSE 0 END::UTINYINT AS trajectory_ground_ball,\n        CASE WHEN trajectory = 'LineDrive' THEN 1 ELSE 0 END::UTINYINT AS trajectory_line_drive,\n        CASE WHEN trajectory = 'PopUp' THEN 1 ELSE 0 END::UTINYINT AS trajectory_pop_up,\n        CASE\n            WHEN COALESCE(trajectory, 'Unknown') = 'Unknown' THEN 1 ELSE 0\n        END::UTINYINT AS trajectory_unknown,\n        (1 - trajectory_unknown)::UTINYINT AS trajectory_known,\n        CASE WHEN trajectory_broad_classification = 'AirBall' THEN 1 ELSE 0 END::UTINYINT AS trajectory_broad_air_ball,\n        CASE\n            WHEN trajectory_broad_classification = 'GroundBall' THEN 1 ELSE 0\n        END::UTINYINT AS trajectory_broad_ground_ball,\n        CASE\n            WHEN COALESCE(trajectory_broad_classification, 'Unknown') = 'Unknown' THEN 1 ELSE 0\n        END::UTINYINT AS trajectory_broad_unknown,\n        (1 - trajectory_broad_unknown)::UTINYINT AS trajectory_broad_known,\n        CASE WHEN trajectory_broad_classification = 'Bunt' THEN 1 ELSE 0 END::UTINYINT AS bunts,\n        -- Distances,\n        CASE WHEN location_depth = 'Plate' THEN 1 ELSE 0 END::UTINYINT AS batted_distance_plate,\n        CASE WHEN location_depth = 'Infield' THEN 1 ELSE 0 END::UTINYINT AS batted_distance_infield,\n        CASE WHEN location_depth = 'Outfield' THEN 1 ELSE 0 END::UTINYINT AS batted_distance_outfield,\n        CASE\n            WHEN COALESCE(location_depth, 'Unknown') = 'Unknown' THEN 1 ELSE 0\n        END::UTINYINT AS batted_distance_unknown,\n        (1 - batted_distance_unknown)::UTINYINT AS batted_distance_known,\n        CASE WHEN batted_to_fielder BETWEEN 1 AND 2 THEN 1 ELSE 0 END::UTINYINT AS fielded_by_battery,\n        CASE WHEN batted_to_fielder BETWEEN 3 AND 6 THEN 1 ELSE 0 END::UTINYINT AS fielded_by_infielder,\n        CASE WHEN batted_to_fielder BETWEEN 7 AND 9 THEN 1 ELSE 0 END::UTINYINT AS fielded_by_outfielder,\n        CASE WHEN batted_to_fielder = 0 THEN 1 ELSE 0 END::UTINYINT AS fielded_by_unknown,\n        (1 - fielded_by_unknown)::UTINYINT AS fielded_by_known,\n        CASE WHEN location_side = 'Left' THEN 1 ELSE 0 END::UTINYINT AS batted_angle_left,\n        CASE WHEN location_side = 'Right' THEN 1 ELSE 0 END::UTINYINT AS batted_angle_right,\n        CASE WHEN location_side = 'Middle' THEN 1 ELSE 0 END::UTINYINT AS batted_angle_middle,\n        CASE\n            WHEN COALESCE(location_side, 'Unknown') IN ('All', 'Unknown') THEN 1 ELSE 0\n        END::UTINYINT AS batted_angle_unknown,\n        (1 - batted_angle_unknown)::UTINYINT AS batted_angle_known,\n        -- More granular locations that are still sensitive to the groundball location problem.\n        CASE WHEN batted_to_fielder = 2 THEN 1 ELSE 0 END::UTINYINT AS batted_location_plate,\n        batted_distance_infield * batted_angle_right AS batted_location_right_infield,\n        batted_distance_infield * batted_angle_left AS batted_location_left_infield,\n        batted_distance_infield * batted_angle_middle AS batted_location_middle_infield,\n        batted_distance_outfield * batted_angle_left AS batted_location_left_field,\n        batted_distance_outfield * batted_angle_middle AS batted_location_center_field,\n        batted_distance_outfield * batted_angle_right AS batted_location_right_field,\n        CASE WHEN location_depth = 'Unknown' THEN 1 ELSE 0 END::UTINYINT AS batted_location_unknown,\n        (1 - batted_location_unknown)::UTINYINT AS batted_location_known,\n    FROM {{ ref('calc_batted_ball_type') }}\n),\n\nfinal AS (\n    SELECT\n        batted_ball.*,\n        CASE WHEN hand.batter_hand = 'R'\n                THEN batted_ball.batted_angle_left\n            WHEN hand.batter_hand = 'L'\n                THEN batted_ball.batted_angle_right\n            ELSE 0\n        END AS batted_balls_pulled,\n        CASE WHEN hand.batter_hand = 'R'\n                THEN batted_ball.batted_angle_right\n            WHEN hand.batter_hand = 'L'\n                THEN batted_ball.batted_angle_left\n            ELSE 0\n        END AS batted_balls_opposite_field,\n\n    FROM batted_ball\n    INNER JOIN {{ ref('event_states_batter_pitcher') }} AS hand USING (event_key)\n)\n\nSELECT * FROM final", "language": "sql", "refs": [{"name": "calc_batted_ball_type", "package": null, "version": null}, {"name": "event_states_batter_pitcher", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.baseball_computer.calc_batted_ball_type", "model.baseball_computer.event_states_batter_pitcher"]}, "compiled_path": null, "contract": {"enforced": true, "alias_types": true, "checksum": "0aba446619a6e903b48897e35a0e43c5d60d824aa0b30c0d57ed0abe0a602d0e"}, "access": "protected", "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true, "columns": ["event_key"]}], "version": null, "latest_version": null, "deprecation_date": null}, "model.baseball_computer.event_batting_stats": {"database": "bc", "schema": "main_models", "name": "event_batting_stats", "resource_type": "model", "package_name": "baseball_computer", "path": "intermediate/event_level/event_batting_stats.sql", "original_file_path": "models/intermediate/event_level/event_batting_stats.sql", "unique_id": "model.baseball_computer.event_batting_stats", "fqn": ["baseball_computer", "intermediate", "event_level", "event_batting_stats"], "alias": "event_batting_stats", "checksum": {"name": "sha256", "checksum": "ead340eae178110ef10afec4332e32616f58d1a58b626cd3d95bc3e09da69e4d"}, "config": {"enabled": true, "alias": null, "schema": "models", "database": null, "tags": [], "meta": {"primary_keys": ["event_key"]}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "access": "protected"}, "tags": [], "description": "This model calculates various batting statistics for each event which ended in a plate appearance. It is designed to capture the \"core\" hitting stats - stats about pitch sequences, baserunning, and batted balls are captured in other models, which are then joined downstream.", "columns": {"game_id": {"name": "game_id", "description": "Retrosheet game ID, A 12-character string structured as follows:\n\n    - Chars 1-3: Home team ID\n    - Chars 4-11: Date (YYYYMMDD)\n    - Char 12: Game number (0 if only one game was played on that day)\n    \n    Example: MLN195607170", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "event_key": {"name": "event_key", "description": "4-byte integer that uniquely identifies an event across the entire\n    dataset (contrast with event_id, which is game-specific). The key\n    is generated deterministically given the same dataset, but it may\n    change when the data is updated. It is guaranteed to follow the \n    order of events within a single game.", "meta": {}, "data_type": "uinteger", "constraints": [], "quote": null, "tags": []}, "batter_id": {"name": "batter_id", "description": "Retrosheet 8-character person ID for the batter associated with the\n    entity.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "pitcher_id": {"name": "pitcher_id", "description": "Retrosheet 8-character person ID for the pitcher associated with the\n    entity.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "batting_team_id": {"name": "batting_team_id", "description": "Retrosheet team ID, 3-character string which identifies the team\n    that a franchise was playing as at a given time.", "meta": {}, "data_type": "team_id", "constraints": [], "quote": null, "tags": []}, "fielding_team_id": {"name": "fielding_team_id", "description": "Retrosheet team ID, 3-character string which identifies the team\n    that a franchise was playing as at a given time.", "meta": {}, "data_type": "team_id", "constraints": [], "quote": null, "tags": []}, "batter_lineup_position": {"name": "batter_lineup_position", "description": "1-byte integer for the traditional 1-9 batting order position, along with\n    10 for the pitcher in games with a DH. With very few exceptions, a player will\n    only appear in one lineup position per game. The exceptions are from courtesy\n    runners and the Ohtani rule.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "plate_appearances": {"name": "plate_appearances", "description": "(PA) Number of times a batter came to the plate, including walks, hit by pitches, sacrifices, and at-bats.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "at_bats": {"name": "at_bats", "description": "(AB) Number of plate appearances that ended in either a hit or a non-sacrifice out.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "hits": {"name": "hits", "description": "(H) Number of times a batter reached base safely without an error or fielder's choice.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "singles": {"name": "singles", "description": "(1B) Number of hits in which a batter reached first base.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "doubles": {"name": "doubles", "description": "(2B) Number of hits in which a batter reached second base without the help of an error or an attempted\n    play on another runner.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "triples": {"name": "triples", "description": "(3B) Number of hits in which a batter reached third base without the help of an error or an attempted\n    play on another runner.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "home_runs": {"name": "home_runs", "description": "(HR) Number of hits in which a batter reached home plate without the help of an error or an attempted\n    play on another runner (usually by hitting the ball out of the park).", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "total_bases": {"name": "total_bases", "description": "(TB) Number of bases a batter reached safely without the help of an error or an attempted\n    play on another runner. HR * 4 + 3B * 3 + 2B * 2 + (H - HR - 3B - 2B)", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "infield_hits": {"name": "infield_hits", "description": "Number of times a batter reached base safely on a hit that did not reach the outfield.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "strikeouts": {"name": "strikeouts", "description": "(K, SO) Number of times a batter struck out. This includes plays in which a batter reached base on\n    a dropped third strike.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "walks": {"name": "walks", "description": "(BB, occasionally W) Number of times a batter reaches base on called balls out of the strike zone\n    (Four balls for all of MLB history after the 1880s).", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "intentional_walks": {"name": "intentional_walks", "description": "(IBB, occasionally IW) Number of times a batter was intentionally walked. This number may be missing or undercounted\n    in earlier years, as intentional walks were not officially tracked until 1955.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "hit_by_pitches": {"name": "hit_by_pitches", "description": "(HBP) Number of times a batter was awarded first base after being hit by a pitch.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "sacrifice_flies": {"name": "sacrifice_flies", "description": "(SF) Number of times a batter hit a fly ball that resulted in an out (or error),\n    but allowed a runner to score on the throw.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "sacrifice_hits": {"name": "sacrifice_hits", "description": "(SH) Number of times a batter performed a sacrifice bunt to advance another runner.\n    A bunt may count as a sacrifice even if the batter reaches base safely.\n    Unsuccessful attempts are not counted, nor are non-sacrifice bunts.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "reached_on_errors": {"name": "reached_on_errors", "description": "(ROE) Number of times a batter reached base safely due to an error.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "reached_on_interferences": {"name": "reached_on_interferences", "description": "Number of times a batter was awarded first base for being illegally hindered\n    by a fielder, usually the catcher.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "ground_rule_doubles": {"name": "ground_rule_doubles", "description": "Number of times a batter was awarded a double on a ball that went out of play after\n    bouncing in fair territory.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "inside_the_park_home_runs": {"name": "inside_the_park_home_runs", "description": "Number of times a batter hit a home run without the ball leaving the field of play.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "on_base_opportunities": {"name": "on_base_opportunities", "description": "Number of plate appearances in which a batter either did or did not reach base,\n    as defined by the formula for on-base percentage. Note that this is very similar to but different\n    from plate_appearances, as it does not include sacrifice hits or interference.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "on_base_successes": {"name": "on_base_successes", "description": "Number of hits, walks, and hit by pitches that serves as the numerator in the formula\n    for on-base percentage.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "runs_batted_in": {"name": "runs_batted_in", "description": "(RBI) Number of runs that scored as a result of a batter's plate appearance. This is usually\n    the number of runs that scored on the play, but errors and other similar cases may cause\n    some runs not to be credited to the batter. Scorerkeeper discretion occasionally causes differences\n    between the number in the database and the official MLB total.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "grounded_into_double_plays": {"name": "grounded_into_double_plays", "description": "(GIDP) Number of times a batter grounded into a double play. This is the conventional way\n    to record a double play and as such is an important statistic on its own. Games without\n    play-by-play accounts don't have data on the trajectory of the double play, so\n    this number is not populated for those games.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "double_plays": {"name": "double_plays", "description": "(DP) Number of times a play ended in two outs being recorded.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "triple_plays": {"name": "triple_plays", "description": "(TP) Number of times a play ended in three outs being recorded.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "batting_outs": {"name": "batting_outs", "description": "Number of outs that \"should\" have been recorded as a result of a batter's plate apperances.\n    A batting out is still counted if no actual out is recorded on an error or a failed fielder's choice.\n    Outs on baserunners (including the batter trying to stretch a hit) do not count here.\n    Grounded-into-double-plays count as two outs, but other types of double plays do not (the \n    idea here is that the baserunner is responsible on other types of double plays).\n    Unofficial stat, but designed here to be generally useful in determining rates of official stats.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "outs_on_play": {"name": "outs_on_play", "description": "The total number of outs that were recorded during the event.\n    Mutually exclusive with all other events.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "left_on_base": {"name": "left_on_base", "description": "(LOB) At an individual level, the number of baserunners that a batter failed to advance during a plate appearance.\n    At a team level, the number of baserunners remaining on base at the end of an inning. In order to count, baserunners\n    must not have scored or been put out.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "left_on_base_with_two_outs": {"name": "left_on_base_with_two_outs", "description": "(LOB) At an individual level, the number of baserunners that remain on base (unscored and not out) after a plate appearance that ends with the third out recorded. At a team level, this is interchangable with `left_on_base`.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}}, "meta": {"primary_keys": ["event_key"]}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "baseball_computer://models/intermediate/event_level/event_batting_stats.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "models", "contract": {"enforced": true}, "meta": {"primary_keys": ["event_key"]}}, "created_at": 1702281449.554065, "relation_name": "\"bc\".\"main_models\".\"event_batting_stats\"", "raw_code": "{{\n  config(\n    materialized = 'table',\n    )\n}}\nWITH sacs AS (\n    -- TODO: Investigate single sac hit dedupe (BOS194606040-37)\n    SELECT DISTINCT event_key\n    FROM {{ ref('stg_event_flags') }}\n    WHERE flag IN ('SacrificeFly', 'SacrificeHit')\n),\n\nfinal AS (\n    SELECT\n        pa.game_id,\n        pa.event_key,\n        CASE WHEN result_types.plate_appearance_result = 'StrikeOut'\n                THEN COALESCE(pa.strikeout_responsible_batter_id, pa.batter_id)\n            ELSE pa.batter_id\n        END AS batter_id,\n        CASE WHEN result_types.plate_appearance_result IN ('Walk', 'IntentionalWalk')\n                THEN COALESCE(pa.walk_responsible_pitcher_id, pa.pitcher_id)\n            ELSE pa.pitcher_id\n        END AS pitcher_id,\n        pa.batting_team_id,\n        pa.fielding_team_id,\n        pa.batter_lineup_position,\n        1::UTINYINT AS plate_appearances,\n        (result_types.is_at_bat AND sacs.event_key IS NULL)::UTINYINT AS at_bats,\n        result_types.is_hit::UTINYINT AS hits,\n        (result_types.total_bases = 1)::UTINYINT AS singles,\n        (result_types.total_bases = 2)::UTINYINT AS doubles,\n        (result_types.total_bases = 3)::UTINYINT AS triples,\n        (result_types.total_bases = 4)::UTINYINT AS home_runs,\n        result_types.total_bases::UTINYINT AS total_bases,\n\n        CASE WHEN pa.batted_to_fielder BETWEEN 1 AND 6 THEN hits ELSE 0 END::UTINYINT AS infield_hits,\n\n        (result_types.plate_appearance_result = 'StrikeOut')::UTINYINT AS strikeouts,\n        (result_types.plate_appearance_result IN ('Walk', 'IntentionalWalk'))::UTINYINT AS walks,\n        (result_types.plate_appearance_result = 'IntentionalWalk')::UTINYINT AS intentional_walks,\n        (result_types.plate_appearance_result = 'HitByPitch')::UTINYINT AS hit_by_pitches,\n        (result_types.plate_appearance_result = 'SacrificeFly')::UTINYINT AS sacrifice_flies,\n        (result_types.plate_appearance_result = 'SacrificeHit')::UTINYINT AS sacrifice_hits,\n        (result_types.plate_appearance_result = 'ReachedOnError')::UTINYINT AS reached_on_errors,\n        (result_types.plate_appearance_result = 'Interference')::UTINYINT AS reached_on_interferences,\n        (result_types.plate_appearance_result = 'GroundRuleDouble')::UTINYINT AS ground_rule_doubles,\n        (result_types.plate_appearance_result = 'InsideTheParkHomeRun')::UTINYINT AS inside_the_park_home_runs,\n\n        result_types.is_on_base_opportunity::UTINYINT AS on_base_opportunities,\n        result_types.is_on_base_success::UTINYINT AS on_base_successes,\n        COALESCE(pa.runs_batted_in, 0)::UTINYINT AS runs_batted_in,\n        COALESCE(double_plays.is_ground_ball_double_play, 0)::UTINYINT AS grounded_into_double_plays,\n        COALESCE(double_plays.is_double_play, 0)::UTINYINT AS double_plays,\n        COALESCE(double_plays.is_triple_play, 0)::UTINYINT AS triple_plays,\n        -- The extra out from GIDPs is attributed to the batter,\n        -- but for other types of double plays, the other out\n        -- is considered to be a baserunning out (for now)\n        result_types.is_batting_out::UTINYINT + grounded_into_double_plays AS batting_outs,\n        pa.outs_on_play,\n        -- We're assuming that ROEs and similar plays do not count as stranding runners\n        -- Also require it to be an AB to leave out sac flies and bunts\n        CASE WHEN result_types.is_batting_out AND pa.outs_on_play > 0 AND result_types.is_at_bat\n                THEN pa.runners_count - pa.outs_on_play - pa.runs_on_play + 1\n            ELSE 0\n        END::UTINYINT AS left_on_base,\n        CASE WHEN pa.outs + pa.outs_on_play = 3\n                THEN left_on_base\n            ELSE 0\n        END::UTINYINT AS left_on_base_with_two_outs,\n\n    FROM {{ ref('stg_events') }} AS pa\n    INNER JOIN {{ ref('seed_plate_appearance_result_types') }} AS result_types\n        USING (plate_appearance_result)\n    LEFT JOIN {{ ref('event_double_plays') }} AS double_plays USING (event_key)\n    LEFT JOIN sacs USING (event_key)\n    WHERE pa.plate_appearance_result IS NOT NULL\n)\n\nSELECT * FROM final", "language": "sql", "refs": [{"name": "stg_event_flags", "package": null, "version": null}, {"name": "stg_events", "package": null, "version": null}, {"name": "seed_plate_appearance_result_types", "package": null, "version": null}, {"name": "event_double_plays", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.baseball_computer.stg_event_flags", "model.baseball_computer.stg_events", "seed.baseball_computer.seed_plate_appearance_result_types", "model.baseball_computer.event_double_plays"]}, "compiled_path": null, "contract": {"enforced": true, "alias_types": true, "checksum": "828afefbb1c6c19f54d4be26d3be7c756799b2aeeb53d65792a359cd1fb5fdd3"}, "access": "protected", "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true, "columns": ["event_key"]}], "version": null, "latest_version": null, "deprecation_date": null}, "model.baseball_computer.event_run_assignment_stats": {"database": "bc", "schema": "main_models", "name": "event_run_assignment_stats", "resource_type": "model", "package_name": "baseball_computer", "path": "intermediate/event_level/event_run_assignment_stats.sql", "original_file_path": "models/intermediate/event_level/event_run_assignment_stats.sql", "unique_id": "model.baseball_computer.event_run_assignment_stats", "fqn": ["baseball_computer", "intermediate", "event_level", "event_run_assignment_stats"], "alias": "event_run_assignment_stats", "checksum": {"name": "sha256", "checksum": "8c5ff6d6dd582d520dfdaa2b203b59ce87b0584b9c701d4dc6d7f1f0df204e8a"}, "config": {"enabled": true, "alias": null, "schema": "models", "database": null, "tags": [], "meta": {"primary_keys": ["event_key"]}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {"event_key": {"name": "event_key", "description": "4-byte integer that uniquely identifies an event across the entire\n    dataset (contrast with event_id, which is game-specific). The key\n    is generated deterministically given the same dataset, but it may\n    change when the data is updated. It is guaranteed to follow the \n    order of events within a single game.", "meta": {}, "data_type": "uinteger", "constraints": [], "quote": null, "tags": []}, "pitcher_id": {"name": "pitcher_id", "description": "Retrosheet 8-character person ID for the pitcher associated with the\n    entity.", "meta": {}, "data_type": "varchar", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "game_id": {"name": "game_id", "description": "Retrosheet game ID, A 12-character string structured as follows:\n\n    - Chars 1-3: Home team ID\n    - Chars 4-11: Date (YYYYMMDD)\n    - Char 12: Game number (0 if only one game was played on that day)\n    \n    Example: MLN195607170", "meta": {}, "data_type": "varchar", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "team_id": {"name": "team_id", "description": "Retrosheet team ID, 3-character string which identifies the team\n    that a franchise was playing as at a given time.", "meta": {}, "data_type": "team_id", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "runs": {"name": "runs", "description": "(R) Number of runs scored.", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "team_unearned_runs": {"name": "team_unearned_runs", "description": "Number of runs that are charged as earned to the pitcher, but unearned to the team.\n    This happens when a pitcher enters an inning which should have been over already because\n    of an error and then the pitcher allows a run to score without the help of any additional\n    errors. This is a rare occurrence and it might seem unnecessary to track,\n    but it is absolutely essential that we do so in order to preserve the space-time continuu-\n    T\u0355he\u030a\u0346\u0328\u035c y\u036a\u0363e\u0321\u0303\u0313\u030ea\u0347r\u0350\u0355\u035c\u035d i\u0313\u035a\u0314\u0324\u033a\u033b\u035bs 20\u032e\u033f89\u032a\u030a an\u032b\u032b\u035e\u0326\u0305d\u0331\u033f\u0369 E\u0361\u0354\u0330\u0351\u0320s\u036d\u0366t\u0351\u0359\u035de\u0303\u0352\u0310b\u0301\u036e\u0359a\u0361\u0359\u0310\u0301\u0330\u0330\u0320n\u036f\u0352\u035f Y\u032a\u0318\u0311a\u035c\u0302\u031c\u031a\u036c\u0345\u0360n\u0304\u0301\u0309 h\u035c\u0314\u0306a\u0359\u033e\u031d\u035f\u0361\u0308\u0301\u0351s\u035f\u0338 fu\u0326\u036d\u030f\u032e\u0306\u030dl\u033a\u0347\u0311\u0349\u034c\u0305\u0303l\u0345\u030f\u0308\u036a\u033f\u031dy\u0312\u0313\u034b\u036e\u0332\u0347 m\u0326\u030a\u0363e\u0365\u034a\u0367\u0320\u0325rg\u0347\u0366\u0300e\u0309\u0339\u031c\u031f\u0353\u0331\u0319d\u0331\u0327 wi\u0307\u034eth\u0366\u0361\u031b\u036d\u0358 t\u031d\u0362\u035d\u0328\u035e\u0342h\u0336\u0357\u031e\u032d\u035f\u0319e\u0322\u030a\u0321\u032f w\u0300\u0329\u0309\u032co\u036d\u0349r\u0311\u0367\u0327\u0360\u036a\u0327\u036cm\u034c\u031c.", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "inherited_runners_scored": {"name": "inherited_runners_scored", "description": "(IRS) Number of inherited runners that scored while a pitcher was on the mound.", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "bequeathed_runners_scored": {"name": "bequeathed_runners_scored", "description": "Number of bequeathed runners that scored after a pitcher left the game.", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}}, "meta": {"primary_keys": ["event_key"]}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "baseball_computer://models/intermediate/event_level/event_run_assignment_stats.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "models", "contract": {"enforced": true}, "meta": {"primary_keys": ["event_key"]}}, "created_at": 1702281449.524436, "relation_name": "\"bc\".\"main_models\".\"event_run_assignment_stats\"", "raw_code": "{{\n  config(\n    materialized = 'table',\n    )\n}}\nWITH event_runs AS (\n    SELECT\n        run_stats.event_key,\n        run_stats.game_id,\n        run_stats.fielding_team_id AS team_id,\n        run_stats.current_pitcher_id AS current_pitcher_id,\n        COALESCE(run_stats.explicit_charged_pitcher_id, charged_pitcher.pitcher_id) AS charged_pitcher_id,\n        run_stats.runs,\n        events.team_unearned_runs\n    FROM {{ ref('event_baserunning_stats') }} AS run_stats\n    INNER JOIN {{ ref('event_states_batter_pitcher') }} AS charged_pitcher USING (event_key)\n    INNER JOIN {{ ref('stg_events') }} AS events USING (event_key)\n    WHERE run_stats.runs = 1\n),\n\nunioned AS (\n    SELECT\n        event_key,\n        game_id,\n        team_id,\n        current_pitcher_id AS pitcher_id,\n        runs,\n        team_unearned_runs,\n        0 AS inherited_runners_scored,\n        0 AS bequeathed_runners_scored\n    FROM event_runs\n    WHERE current_pitcher_id = charged_pitcher_id\n    UNION ALL\n    SELECT\n        event_key,\n        game_id,\n        team_id,\n        charged_pitcher_id AS pitcher_id,\n        runs,\n        team_unearned_runs,\n        0 AS inherited_runners_scored,\n        runs AS bequeathed_runners_scored\n    FROM event_runs\n    WHERE current_pitcher_id != charged_pitcher_id\n    UNION ALL\n    SELECT\n        event_key,\n        game_id,\n        team_id,\n        current_pitcher_id AS pitcher_id,\n        0 AS runs,\n        0 AS team_unearned_runs,\n        runs AS inherited_runners_scored,\n        0 AS bequeathed_runners_scored\n    FROM event_runs\n    WHERE current_pitcher_id != charged_pitcher_id\n),\n\nfinal AS (\n    SELECT\n        event_key,\n        pitcher_id,\n        MIN(game_id) AS game_id,\n        MIN(team_id) AS team_id,\n        SUM(runs)::UTINYINT AS runs,\n        SUM(team_unearned_runs)::UTINYINT AS team_unearned_runs,\n        SUM(inherited_runners_scored)::UTINYINT AS inherited_runners_scored,\n        SUM(bequeathed_runners_scored)::UTINYINT AS bequeathed_runners_scored\n    FROM unioned\n    GROUP BY 1, 2\n)\n\nSELECT * FROM final", "language": "sql", "refs": [{"name": "event_baserunning_stats", "package": null, "version": null}, {"name": "event_states_batter_pitcher", "package": null, "version": null}, {"name": "stg_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.baseball_computer.event_baserunning_stats", "model.baseball_computer.event_states_batter_pitcher", "model.baseball_computer.stg_events"]}, "compiled_path": null, "contract": {"enforced": true, "alias_types": true, "checksum": "e5de96ef815098a68773f56157518a242866c75c333d759e963f2a1cd7d646c3"}, "access": "protected", "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true, "columns": ["event_key"]}], "version": null, "latest_version": null, "deprecation_date": null}, "model.baseball_computer.calc_batted_ball_type": {"database": "bc", "schema": "main_models", "name": "calc_batted_ball_type", "resource_type": "model", "package_name": "baseball_computer", "path": "intermediate/event_level/calc_batted_ball_type.sql", "original_file_path": "models/intermediate/event_level/calc_batted_ball_type.sql", "unique_id": "model.baseball_computer.calc_batted_ball_type", "fqn": ["baseball_computer", "intermediate", "event_level", "calc_batted_ball_type"], "alias": "calc_batted_ball_type", "checksum": {"name": "sha256", "checksum": "e3bf19b3fd1a17af335f11c3e2a7cf9b3462842bb572343c0b93c3a8126554a4"}, "config": {"enabled": true, "alias": null, "schema": "models", "database": null, "tags": [], "meta": {"primary_keys": ["event_key"]}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "access": "protected"}, "tags": [], "description": "This table contains one row for each event that ended in a batted ball.\nIt supplements the raw trajectory and location data with\nadditional information based on inference and additional metadata.\nFor millions of plays in the database without batted ball info,\nat least part of the information can be deduced from other data points,\nparticularly fielding data. For example, if a plate appearance is recorded as a putout\nto the center fielder, we can deduce that the trajectory of the batted ball was an\nair ball, and the location was to center field. Both of these deductions are less precise\nand less accurate than explicit batted ball information, but they are much better than nothing.\nThey also provide support for additional inference in statistical or deep learning models.\n\nIn addition to these deductions, we also have additional ontologies for batted ball\ndata (see `seeds`) that allow us to make other useful classifications,\nparticularly for location. The raw data divides the field into a few dozen separate zones\n(http://www.retrosheet.org/location.htm)\nbut we can categorize each of those zones according to angle, depth, etc.\n\nTrajectory inference rules (only valid for batted balls without trajectory type):\n1. Unassisted putouts are air balls (unassisted GB putouts should already be explicit grounders)\n2. Balls with an outfield location are air balls\n2. Home runs are air balls\n4. Balls fielded by infielders with an assisted putout are ground balls\nMany exceptions are possible, but they are some combination\nof rare and likely to be explicitly noted when they do occur.\n\nLocation inference rules (applies to batted balls without location):\n1. Ground balls fielded by outfielders have infield depth\n2. All other depth/side cases are dictated by the fielder's position\n    via the `seed_batted_to_fielder_categories` table\n3. If there is no fielder, we go by the explicit location\n(which is rarely available, especially when there is no fielder).\nThe explicit location data is better than the fielder data in a vacuum,\nbut fielder-based location is far more consistently available.\nChoosing it as the default makes the data more precise (in the sense of self-consistency).\n", "columns": {"game_id": {"name": "game_id", "description": "Retrosheet game ID, A 12-character string structured as follows:\n\n    - Chars 1-3: Home team ID\n    - Chars 4-11: Date (YYYYMMDD)\n    - Char 12: Game number (0 if only one game was played on that day)\n    \n    Example: MLN195607170", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "event_key": {"name": "event_key", "description": "4-byte integer that uniquely identifies an event across the entire\n    dataset (contrast with event_id, which is game-specific). The key\n    is generated deterministically given the same dataset, but it may\n    change when the data is updated. It is guaranteed to follow the \n    order of events within a single game.", "meta": {}, "data_type": "uinteger", "constraints": [], "quote": null, "tags": []}, "plate_appearance_result": {"name": "plate_appearance_result", "description": "This field is present for all events in which a plate appearance finished,\n    and absent for all other types of events.\n    It is an enum describing the result of the plate appearance, e.g. Single,\n    InPlayOut, etc. See `seed_plate_appearance_results` for more info.", "meta": {}, "data_type": "plate_appearance_result", "constraints": [], "quote": null, "tags": []}, "batted_to_fielder": {"name": "batted_to_fielder", "description": "The fielder who fielded the batted ball as a 1-byte integer, if applicable. This field is\n    *always* populated for plate appearances that end with a ball in play,\n    regardless of whether we know the fielder. It is filled with 0\n    in those cases where no fielder was recorded. On in-play outs,\n    this field has excellent historical coverage going back as far as we have data.\n    Hits have much spottier coverage, but there is still a large amount of data across\n    all years. For most of baseball history, this ends up being our best proxy\n    for batted ball location and trajectory.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "trajectory": {"name": "trajectory", "description": "The trajectory of the batted ball, either as recorded or deduced.", "meta": {}, "data_type": "trajectory", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "recorded_trajectory": {"name": "recorded_trajectory", "description": "The trajectory of the batted ball as recorded.", "meta": {}, "data_type": "trajectory", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "is_trajectory_deduced": {"name": "is_trajectory_deduced", "description": "Whether the trajectory was deduced from other data. This is false if the trajectory was recorded or if it remains unknown after attempting deduction.", "meta": {}, "data_type": "boolean", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "trajectory_broad_classification": {"name": "trajectory_broad_classification", "description": "Deduced trajectory classification that groups fly balls, pop-ups, and line drives together as air balls. Generally speaking, it is much easier to deduce that a batted ball was an air ball than to deduce a particular kind of air ball.", "meta": {}, "data_type": "varchar", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "recorded_location": {"name": "recorded_location", "description": "The recorded general location of the batted ball. See `batted_location_general` in `stg_events` for more information.", "meta": {}, "data_type": "location_general", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "recorded_location_depth": {"name": "recorded_location_depth", "description": "The recorded depth of the batted ball. See `batted_location_depth` in `stg_events` for more information.", "meta": {}, "data_type": "location_depth", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "recorded_location_angle": {"name": "recorded_location_angle", "description": "The recorded angle of the batted ball. See `batted_location_angle` in `stg_events` for more information.", "meta": {}, "data_type": "location_angle", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "location_depth": {"name": "location_depth", "description": "The *overall* depth category of the batted ball. This is either the plate, the infield, or the outfield.", "meta": {}, "data_type": "varchar", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "location_side": {"name": "location_side", "description": "The side of the field that the batted ball was hit to. This is either left, center, or right.", "meta": {}, "data_type": "varchar", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "location_edge": {"name": "location_edge", "description": "The edge of the area that the batted ball was hit to, relative to `location_side`. This is currently not deduced and only appears on rows with recorded locations.", "meta": {}, "data_type": "varchar", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}}, "meta": {"primary_keys": ["event_key"]}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "baseball_computer://models/intermediate/event_level/calc_batted_ball_type.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "models", "contract": {"enforced": true}, "meta": {"primary_keys": ["event_key"]}}, "created_at": 1702281449.53461, "relation_name": "\"bc\".\"main_models\".\"calc_batted_ball_type\"", "raw_code": "{{\n  config(\n    materialized = 'table',\n    )\n}}\n-- trajectory type inference rules (only valid for batted balls without trajectory type)\n-- 1. Unassisted putouts are air balls (unassisted GB putouts should already be explicit grounders)\n-- 2. Balls with an outfield locaiton are air balls\n-- 2. Home runs are air balls\n-- 4. Balls fielded by infielders with an assisted putout are ground balls\n-- Many exceptions are possible, but they are some combination\n-- of rare and likely to be explicitly noted when they do occur.\n\n-- Location inference rules (applies to batted balls without location)\n-- 1. Ground balls fielded by outfielders have infield depth\n-- 2. All other depth/side cases are dictated by the fielder's position\n--    via the `seed_batted_to_fielder_categories` table\n-- 3. If there is no fielder, we go by the explicit location\n-- (which is rarely available, especially when there is no fielder).\n-- The explicit location data is better than the fielder data in a vacuum,\n-- but fielder-based location is far more consistently available.\n-- Choosing it as the default makes the data more precise (in the sense of self-consistency).\nWITH putouts AS (\n    SELECT\n        event_key,\n        SUM(putouts - assisted_putouts) AS unassisted_putouts,\n        SUM(assisted_putouts) AS assisted_putouts,\n    FROM {{ ref('calc_fielding_play_agg') }}\n    -- When the putout is from an unknown fielder, that often means\n    -- that there is a missing assist on the play as well, so we can't\n    -- infer anything from it.\n    WHERE fielding_position != 0\n    GROUP BY 1\n\n),\n\ninference AS (\n    SELECT\n        batted_ball.game_id,\n        batted_ball.event_key,\n        batted_ball.plate_appearance_result,\n        -- Null out batted_to_fielder on homers to distinguish between \"no fielder\" and \"unknown fielder\"\n        -- TODO: Handle upstream\n        CASE WHEN batted_ball.plate_appearance_result NOT IN ('HomeRun', 'GroundRuleDouble')\n                THEN batted_ball.batted_to_fielder\n        END AS batted_to_fielder,\n        batted_ball.batted_trajectory AS recorded_trajectory,\n        batted_ball.batted_location_general AS recorded_location,\n        batted_ball.batted_location_depth AS recorded_location_depth,\n        batted_ball.batted_location_angle AS recorded_location_angle,\n        location_info.category_depth,\n        location_info.category_side,\n        location_info.category_edge,\n        (\n            (recorded_trajectory != 'GroundBall' AND putouts.unassisted_putouts > 0)\n            OR batted_ball.plate_appearance_result = 'HomeRun'\n            -- 2000-2002 seasons have a lot of shallow outfield flies that are actually\n            -- ground balls, and no metadata to isolate faulty sources.\n            OR (location_info.category_depth = 'Outfield' AND batted_ball.season NOT BETWEEN 2000 AND 2002)\n        ) AS is_inferred_air_ball,\n        CASE\n            WHEN batted_ball.batted_to_fielder BETWEEN 1 AND 6 AND putouts.assisted_putouts > 0\n                THEN 'GroundBall'\n            ELSE 'Unknown'\n        END AS inferred_contact,\n        CASE WHEN recorded_trajectory = 'Unknown' THEN inferred_contact\n            ELSE recorded_trajectory\n        END AS batted_trajectory,\n    FROM {{ ref('stg_events') }} AS batted_ball\n    LEFT JOIN putouts USING (event_key)\n    LEFT JOIN {{ ref('seed_hit_location_categories') }} AS location_info USING (batted_location_general)\n    WHERE batted_ball.batted_trajectory IS NOT NULL\n),\n\nfinal AS (\n    SELECT\n        inference.game_id,\n        inference.event_key,\n        inference.plate_appearance_result,\n        inference.batted_to_fielder,\n        inference.batted_trajectory::trajectory AS trajectory,\n        inference.recorded_trajectory,\n        inference.batted_trajectory != inference.recorded_trajectory AS is_trajectory_deduced,\n        CASE WHEN inference.is_inferred_air_ball\n                THEN 'AirBall'\n            ELSE trajectory_info.broad_classification\n        END AS trajectory_broad_classification,\n        inference.recorded_location,\n        inference.recorded_location_depth,\n        inference.recorded_location_angle,\n        CASE\n            WHEN inference.batted_trajectory = 'GroundBall' AND inference.batted_to_fielder BETWEEN 7 AND 9\n                THEN 'Infield'\n            WHEN inference.batted_trajectory = 'Unknown' AND inference.batted_to_fielder BETWEEN 7 AND 9\n                THEN 'Unknown'\n            WHEN fielder.category_depth IS NOT NULL\n                THEN fielder.category_depth\n            WHEN inference.category_depth IS NOT NULL\n                THEN inference.category_depth\n            ELSE 'Unknown'\n        END AS location_depth,\n        COALESCE(fielder.category_side, inference.category_side, 'Unknown') AS location_side,\n        COALESCE(inference.category_edge, 'Unknown') AS location_edge,\n    FROM inference\n    LEFT JOIN {{ ref('seed_plate_appearance_trajectories') }} AS trajectory_info USING (batted_trajectory)\n    LEFT JOIN {{ ref('seed_hit_to_fielder_categories') }} AS fielder USING (batted_to_fielder)\n)\n\nSELECT * FROM final", "language": "sql", "refs": [{"name": "calc_fielding_play_agg", "package": null, "version": null}, {"name": "stg_events", "package": null, "version": null}, {"name": "seed_hit_location_categories", "package": null, "version": null}, {"name": "seed_plate_appearance_trajectories", "package": null, "version": null}, {"name": "seed_hit_to_fielder_categories", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.baseball_computer.calc_fielding_play_agg", "model.baseball_computer.stg_events", "seed.baseball_computer.seed_hit_location_categories", "seed.baseball_computer.seed_plate_appearance_trajectories", "seed.baseball_computer.seed_hit_to_fielder_categories"]}, "compiled_path": null, "contract": {"enforced": true, "alias_types": true, "checksum": "9501ca86a585079787f8b1ac2a3cd7565711ce0f2840097340c5164cff6aadfc"}, "access": "protected", "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true, "columns": ["event_key"]}], "version": null, "latest_version": null, "deprecation_date": null}, "model.baseball_computer.event_pitch_sequence_stats": {"database": "bc", "schema": "main_models", "name": "event_pitch_sequence_stats", "resource_type": "model", "package_name": "baseball_computer", "path": "intermediate/event_level/event_pitch_sequence_stats.sql", "original_file_path": "models/intermediate/event_level/event_pitch_sequence_stats.sql", "unique_id": "model.baseball_computer.event_pitch_sequence_stats", "fqn": ["baseball_computer", "intermediate", "event_level", "event_pitch_sequence_stats"], "alias": "event_pitch_sequence_stats", "checksum": {"name": "sha256", "checksum": "6e7f71889db6f4610eac27aa17e4dd5e03883cd0774d2eb93cda6cb5165d69bd"}, "config": {"enabled": true, "alias": null, "schema": "models", "database": null, "tags": [], "meta": {"primary_keys": ["event_key"]}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {"event_key": {"name": "event_key", "description": "4-byte integer that uniquely identifies an event across the entire\n    dataset (contrast with event_id, which is game-specific). The key\n    is generated deterministically given the same dataset, but it may\n    change when the data is updated. It is guaranteed to follow the \n    order of events within a single game.", "meta": {}, "data_type": "uinteger", "constraints": [], "quote": null, "tags": []}, "pitches": {"name": "pitches", "description": "Number of pitches thrown.", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "swings": {"name": "swings", "description": "Number of pitches that were swung at.", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "swings_with_contact": {"name": "swings_with_contact", "description": "Number of pitches that were swung at and made contact.", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "strikes": {"name": "strikes", "description": "Number of pitches that were called or swinging strikes.", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "strikes_called": {"name": "strikes_called", "description": "Number of pitches that were called strikes.", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "strikes_swinging": {"name": "strikes_swinging", "description": "Number of pitches that were swung on and missed (mutually exclusive\n    with `swings_with_contact`, which also count as strikes).", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "strikes_foul": {"name": "strikes_foul", "description": "Number of pitches that were fouled off.", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "strikes_foul_tip": {"name": "strikes_foul_tip", "description": "Number of pitches that were fouled off and caught by the catcher for strike three.", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "strikes_in_play": {"name": "strikes_in_play", "description": "Number of pitches that were swung on and batted into play.", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "strikes_unknown": {"name": "strikes_unknown", "description": "Number of pitches that we know were strikes, but don't know what kind.", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "balls": {"name": "balls", "description": "Number of pitches that were called balls.", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "balls_called": {"name": "balls_called", "description": "Number of pitches that were called balls (as opposed to automatic balls that were\n    not actually thrown).", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "balls_intentional": {"name": "balls_intentional", "description": "Number of pitches that were called balls as part of an intentional walk.", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "balls_automatic": {"name": "balls_automatic", "description": "Number of pitches that were called balls on an automatic walk or a delay penalty.", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "unknown_pitches": {"name": "unknown_pitches", "description": "Number of pitches that were thrown without any other information recorded.", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "pitchouts": {"name": "pitchouts", "description": "Number of pitches that were thrown as pitchouts. A pitchout is a pitch that is thrown\n    intentionally very far outside in order to make it easier for the catcher to throw out\n    a baserunner who is likely to steal.", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "pitcher_pickoff_attempts": {"name": "pitcher_pickoff_attempts", "description": "Number of times the pitcher attempted to pick off a baserunner.", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "catcher_pickoff_attempts": {"name": "catcher_pickoff_attempts", "description": "Number of times the catcher attempted to pick off a baserunner.", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "pitches_blocked_by_catcher": {"name": "pitches_blocked_by_catcher", "description": "Number of pitches that were blocked by the catcher.", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "pitches_with_runners_going": {"name": "pitches_with_runners_going", "description": "Number of pitches that were thrown while a baserunner was on the move\n    (as part of a steal or hit-and-run).", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "passed_balls": {"name": "passed_balls", "description": "(PB) Number of passed balls.", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "wild_pitches": {"name": "wild_pitches", "description": "(WP) Number of wild pitches.", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "balks": {"name": "balks", "description": "(BK) Number of balks.", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}}, "meta": {"primary_keys": ["event_key"]}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "baseball_computer://models/intermediate/event_level/event_pitch_sequence_stats.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "models", "contract": {"enforced": true}, "meta": {"primary_keys": ["event_key"]}}, "created_at": 1702281449.530454, "relation_name": "\"bc\".\"main_models\".\"event_pitch_sequence_stats\"", "raw_code": "{{\n  config(\n    materialized = 'table',\n    )\n}}\nWITH add_meta AS (\n    SELECT\n        pitch_meta.*,\n        pitches.event_key,\n        pitches.runners_going_flag,\n        pitches.blocked_by_catcher_flag,\n        pitches.catcher_pickoff_attempt_at_base\n    FROM {{ ref('stg_event_pitch_sequences') }} AS pitches\n    INNER JOIN {{ ref('seed_pitch_types') }} AS pitch_meta USING (sequence_item)\n),\n\nother_events AS (\n    SELECT\n        event_key,\n        BOOL_OR(baserunning_play_type = 'PassedBall')::UTINYINT AS passed_balls,\n        BOOL_OR(baserunning_play_type = 'WildPitch')::UTINYINT AS wild_pitches,\n        BOOL_OR(baserunning_play_type = 'Balk')::UTINYINT AS balks,\n    FROM {{ ref('stg_event_baserunners') }}\n    GROUP BY 1\n),\n\ngrouped_sequence AS (\n    SELECT\n        event_key,\n        COUNT(*) FILTER (WHERE is_pitch)::UTINYINT AS pitches,\n\n        COUNT(*) FILTER (WHERE is_swing)::UTINYINT AS swings,\n        COUNT(*) FILTER (WHERE is_contact)::UTINYINT AS swings_with_contact,\n\n        COUNT(*) FILTER (WHERE is_strike)::UTINYINT AS strikes,\n        COUNT(*) FILTER (WHERE is_strike AND NOT is_swing)::UTINYINT AS strikes_called,\n        COUNT(*) FILTER (WHERE is_swing AND NOT is_contact)::UTINYINT AS strikes_swinging,\n        COUNT(*) FILTER (\n            WHERE is_swing AND is_contact AND NOT is_in_play AND NOT can_be_strike_three\n        )::UTINYINT AS strikes_foul,\n        COUNT(*) FILTER (WHERE sequence_item LIKE 'FoulTip%')::UTINYINT AS strikes_foul_tip,\n        COUNT(*) FILTER (WHERE is_in_play)::UTINYINT AS strikes_in_play,\n        COUNT(*) FILTER (WHERE sequence_item = 'StrikeUnknownType')::UTINYINT AS strikes_unknown,\n\n        COUNT(*) FILTER (WHERE category = 'Ball')::UTINYINT AS balls,\n        COUNT(*) FILTER (WHERE sequence_item = 'Ball')::UTINYINT AS balls_called,\n        COUNT(*) FILTER (WHERE sequence_item = 'IntentionalBall')::UTINYINT AS balls_intentional,\n        COUNT(*) FILTER (WHERE sequence_item = 'AutomaticBall')::UTINYINT AS balls_automatic,\n\n        COUNT(*) FILTER (WHERE category = 'Unknown')::UTINYINT AS unknown_pitches,\n\n        COUNT(*) FILTER (WHERE sequence_item LIKE '%Pitchout')::UTINYINT AS pitchouts,\n        COUNT(*) FILTER (WHERE sequence_item LIKE 'Pickoff%')::UTINYINT AS pitcher_pickoff_attempts,\n        COUNT(*) FILTER (\n            WHERE catcher_pickoff_attempt_at_base IS NOT NULL\n        )::UTINYINT AS catcher_pickoff_attempts,\n        COUNT(*) FILTER (WHERE blocked_by_catcher_flag)::UTINYINT AS pitches_blocked_by_catcher,\n        COUNT(*) FILTER (WHERE is_pitch AND runners_going_flag)::UTINYINT AS pitches_with_runners_going,\n    FROM add_meta\n    GROUP BY 1\n),\n\nfinal AS (\n    SELECT\n        grouped_sequence.*,\n        COALESCE(other_events.passed_balls, 0)::UTINYINT AS passed_balls,\n        COALESCE(other_events.wild_pitches, 0)::UTINYINT AS wild_pitches,\n        COALESCE(other_events.balks, 0)::UTINYINT AS balks\n    FROM grouped_sequence\n    LEFT JOIN other_events USING (event_key)\n)\n\nSELECT * FROM final", "language": "sql", "refs": [{"name": "stg_event_pitch_sequences", "package": null, "version": null}, {"name": "seed_pitch_types", "package": null, "version": null}, {"name": "stg_event_baserunners", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.baseball_computer.stg_event_pitch_sequences", "seed.baseball_computer.seed_pitch_types", "model.baseball_computer.stg_event_baserunners"]}, "compiled_path": null, "contract": {"enforced": true, "alias_types": true, "checksum": "22130f595f2cbd56d04b5bac21a031eb2e2aaaafd868768acb2f411b18acb18b"}, "access": "protected", "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true, "columns": ["event_key"]}], "version": null, "latest_version": null, "deprecation_date": null}, "model.baseball_computer.calc_fielding_play_agg": {"database": "bc", "schema": "main_models", "name": "calc_fielding_play_agg", "resource_type": "model", "package_name": "baseball_computer", "path": "intermediate/event_level/calc_fielding_play_agg.sql", "original_file_path": "models/intermediate/event_level/calc_fielding_play_agg.sql", "unique_id": "model.baseball_computer.calc_fielding_play_agg", "fqn": ["baseball_computer", "intermediate", "event_level", "calc_fielding_play_agg"], "alias": "calc_fielding_play_agg", "checksum": {"name": "sha256", "checksum": "2aa7daf6a02d076c1cf07b39c67bddc798b6bf1f3a6f2813e0509f08aabb1ac5"}, "config": {"enabled": true, "alias": null, "schema": "models", "database": null, "tags": [], "meta": {"primary_keys": ["event_key", "fielding_position"]}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Table containing one row for each fielder who made at least one\nfielding play on a given event. It serves as the canonical way to\ncalculate fielding data for each fielder on each event. For the most\npart, the definitions involve conditions based on each individual fielding play,\nbut some definitions require aggregate knowledge of the event as a whole.\n", "columns": {"event_key": {"name": "event_key", "description": "4-byte integer that uniquely identifies an event across the entire\n    dataset (contrast with event_id, which is game-specific). The key\n    is generated deterministically given the same dataset, but it may\n    change when the data is updated. It is guaranteed to follow the \n    order of events within a single game.", "meta": {}, "data_type": "uinteger", "constraints": [], "quote": null, "tags": []}, "fielding_position": {"name": "fielding_position", "description": "A 1-byte integer for the traditional 1-9 fielder identification, along with additional\n    values for unknown fielders and batting-specific positions. Depending on the\n    context, this value may be NULL for batting positions.\n    ```\n    0 - Unknown\n    1 - Pitcher\n    2 - Catcher\n    3 - First baseman\n    4 - Second baseman\n    5 - Third baseman\n    6 - Shortstop\n    7 - Left fielder\n    8 - Center fielder\n    9 - Right fielder\n    10 - Designated Hitter\n    11 - Pinch Hitter\n    12 - Pinch Runner\n    ```", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "game_id": {"name": "game_id", "description": "Retrosheet game ID, A 12-character string structured as follows:\n\n    - Chars 1-3: Home team ID\n    - Chars 4-11: Date (YYYYMMDD)\n    - Char 12: Game number (0 if only one game was played on that day)\n    \n    Example: MLN195607170", "meta": {}, "data_type": "varchar", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "putouts": {"name": "putouts", "description": "(PO) Outs credited to fielder based on who physically made the out, either by:\n        - Catching a ball on the fly\n        - Tagging a runner out\n        - Forcing a runner out\n        - Catching a called third strike\n        - Being the nearest fielder to a baserunner who is called out for interference\n\n    Putouts have been an important baseball statistic longer than MLB has been around,\n    so it has excellent historical coverage. Unassisted\n    putouts are very important in determining the location of batted balls.\n    \n    In modern baseball rules, each out in the game is credited as a putout, and at the play/event\n    level this will always be the case. However, in older games for which we only have box score or season-level\n    data, rare plays like baserunner interference may not be assigned to a specific fielder.\n    \n    Every play-by-play out has a putout, but the fielder who gets the putout may be unknown.", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "assists": {"name": "assists", "description": "(A) Number of outs in which a fielder touched the ball before anothber fielder recorded a putout.\n    This is almost always a throw to another fielder, but it can also be a deflection.\n\n    Assists have excellent historical data coverage, and they are particularly useful in determining\n    the location of ground balls. The data is present in almost all season-level and game-level accounts.\n    However, individual plays with unknown-fielder putouts are likely to be missing assists entirely.", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "errors": {"name": "errors", "description": "(E) Number of errors recorded by a fielder. This is recorded when a fielder either fails to make an out\n    that an average fielder should have made or makes a bad play that allows a baserunner to advance.\n    Errors are awarded at the scorekeeper's discretion, making them more subjective than the other two main\n    fielding stats.\n    \n    Errors used to be a much larger component of evaluating fielder quality.\n    When the stat was invented, routine plays were completed much less frequently than they are today.\n    As baseball evolved, routine plays became truly routine, and a fielder's ability to get to the ball\n    became more relevant than their ability\n    to reliably convert the out once they got there. While plenty of people as early as the 19th century were\n    aware of this, statistics mostly failed to reflect it until the 1980s, when Bill James and others\n    developed Range Factor and other stats that attempted to measure a fielder's ability to create chances.", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "fielders_choices": {"name": "fielders_choices", "description": "(FC) Number of times a fielder who fielded the ball attempted to put out a baserunner other than the batter.\n    A fielder's choice can be assigned when the attempt fails, even if there was no error on the play.\n\n    Fielder's choices are only available on play-by-play data and tend to be recorded when the attempt was\n    a tag and not a force. Force plays are explicitly noted and have little overlap with fielder's choices.", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "plays_started": {"name": "plays_started", "description": "Number of times that a fielder made the first play on a prospective batted-ball-out and did not immediately record an error.\n    Hits without any putouts are not included, but assists made on plays that had errors or failed fielder's choices do count.", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "assisted_putouts": {"name": "assisted_putouts", "description": "Number of putouts by the fielder that had at least one recorded, associated assist. For older games, this may be a subset\n    of the true total assisted putouts, as unknown-fielder putouts almost never have recorded assists.", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "first_errors": {"name": "first_errors", "description": "Number of events in which a fielder made an error that was the first attempted out on the play.", "meta": {}, "data_type": "bigint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "unknown_putouts": {"name": "unknown_putouts", "description": "Number of putouts that were recorded, but without a specified fielder.", "meta": {}, "data_type": "bigint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "incomplete_events": {"name": "incomplete_events", "description": "Number of events in which at least one known fielding play was made by an unknown fielder.", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}}, "meta": {"primary_keys": ["event_key", "fielding_position"]}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "baseball_computer://models/intermediate/event_level/calc_fielding_play_agg.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "models", "contract": {"enforced": true}, "meta": {"primary_keys": ["event_key", "fielding_position"]}}, "created_at": 1702281449.544506, "relation_name": "\"bc\".\"main_models\".\"calc_fielding_play_agg\"", "raw_code": "WITH grouper_init AS (\n    SELECT\n        *,\n        COUNT(CASE WHEN fielding_play IN ('Putout', 'Error') THEN 1 END) OVER w AS group_id_init\n    FROM {{ ref('stg_event_fielding_plays') }}\n    WINDOW w AS (PARTITION BY event_key ORDER BY sequence_id)\n),\n\ngrouper AS (\n    SELECT\n        *,\n        -- need to do this to properly put the putout/error in with its assists\n        LAG(group_id_init, 1, 0) OVER w AS group_id\n    FROM grouper_init\n    WINDOW w AS (PARTITION BY event_key ORDER BY sequence_id)\n),\n\nassist_tracker AS (\n    SELECT\n        *,\n        COUNT(CASE WHEN fielding_play = 'Assist' THEN 1 END) OVER w AS assists_in_group\n    FROM grouper\n    WINDOW w AS (PARTITION BY event_key, group_id)\n),\n\nadd_batted_ball AS (\n    SELECT\n        assist_tracker.*,\n        e.batted_location_general IS NOT NULL as is_batted_ball,\n    FROM assist_tracker\n    INNER JOIN {{ ref('stg_events') }} AS e USING (event_key)\n),\n\nfinal AS (\n    SELECT\n        event_key,\n        fielding_position,\n        ANY_VALUE(game_id) AS game_id,\n        COUNT(*) FILTER (WHERE fielding_play = 'Putout')::UTINYINT AS putouts,\n        -- A fielder can appear multiple times in one segment (on a rundown)\n        -- but is only credited with one assist per putout\n        COUNT(DISTINCT CASE WHEN fielding_play = 'Assist' THEN group_id END)::UTINYINT AS assists,\n        COUNT(*) FILTER (WHERE fielding_play = 'Error')::UTINYINT AS errors,\n        COUNT(*) FILTER (WHERE fielding_play = 'FieldersChoice')::UTINYINT AS fielders_choices,\n        COUNT(*) FILTER (WHERE sequence_id = 1 AND fielding_play != 'Error' AND is_batted_ball)::UTINYINT AS plays_started,\n        -- An \"unassisted putout\" often refers specifically to ground balls, which we don't always know about.\n        -- We also don't know if a putout by an unknown fielder was assisted or not (see below).\n        -- So we'll just track when putouts are explicitly assisted\n        COUNT(*) FILTER (WHERE assists_in_group > 0 AND fielding_play = 'Putout')::UTINYINT AS assisted_putouts,\n        COUNT(*) FILTER (WHERE group_id = 0 AND fielding_play = 'Error') AS first_errors,\n        -- We always know how many putouts occur on a play even when we don't know who made them...\n        COUNT(*) FILTER (WHERE fielding_position = 0 AND fielding_play = 'Putout') AS unknown_putouts,\n        -- ...But the same is not true for assists.\n        -- Explicitly unknown assists are extremely rare in the data. An unknown putout also implies\n        -- unknown assists (0 or more). So it just makes sense to count the total number of events\n        -- where an unknown assist may have occurred.\n        BOOL_OR(fielding_position = 0)::UTINYINT AS incomplete_events,\n    FROM add_batted_ball\n    GROUP BY 1, 2\n)\n\nSELECT * FROM final", "language": "sql", "refs": [{"name": "stg_event_fielding_plays", "package": null, "version": null}, {"name": "stg_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.baseball_computer.stg_event_fielding_plays", "model.baseball_computer.stg_events"]}, "compiled_path": null, "contract": {"enforced": true, "alias_types": true, "checksum": "430c1db75cc470d02c830b762c1229e1f3971aeea42a40fe1cb50a2eea197229"}, "access": "protected", "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true, "columns": ["event_key", "fielding_position"]}], "version": null, "latest_version": null, "deprecation_date": null}, "analysis.baseball_computer.hit_vs_out_spray_air": {"database": "bc", "schema": "main_models", "name": "hit_vs_out_spray_air", "resource_type": "analysis", "package_name": "baseball_computer", "path": "analysis/hit_vs_out_spray_air.sql", "original_file_path": "analyses/hit_vs_out_spray_air.sql", "unique_id": "analysis.baseball_computer.hit_vs_out_spray_air", "fqn": ["baseball_computer", "analysis", "hit_vs_out_spray_air"], "alias": "hit_vs_out_spray_air", "checksum": {"name": "sha256", "checksum": "8bb527fd17856dd827f6baa54ca8d43463975236c39afce236ac8827f8e95e98"}, "config": {"enabled": true, "alias": null, "schema": "models", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "models"}, "created_at": 1702281448.004731, "relation_name": null, "raw_code": "WITH t AS (\nSELECT\n    p.batter_hand,\n    c.batted_to_fielder,\n    --c.recorded_location_angle,\n    COUNT(*) AS at_bats,\n    SUM(hits) AS hits,\n    SUM(1 - hits) AS outs,\n    SUM(hits) / COUNT(*) AS avg,\n{# FROM {{ ref('game_data_completeness') }} AS g #}\nINNER JOIN {{ ref('calc_batted_ball_type') }} AS c USING (game_id)\nINNER JOIN {{ ref('event_offense_stats') }} AS e USING (event_key)\nINNER JOIN {{ ref('event_states_full') }} p USING (event_key)\nWHERE g.has_batted_to_fielder AND g.has_trajectory\n    AND trajectory_broad_air_ball = 1\n    AND bunts = 0\n    AND balls_in_play = 1\n    AND fielded_by_outfielder = 1\nGROUP BY 1, 2\n)\n\nSELECT\n    batter_hand,\n    batted_to_fielder,\n    at_bats,\n    avg,\n    hits / SUM(hits) OVER (PARTITION BY batter_hand) AS hit_share,\n    outs / SUM(outs) OVER (PARTITION BY batter_hand) AS out_share,\nFROM t\nORDER BY SUM(at_bats) OVER (PARTITION BY batted_to_fielder) DESC, batter_hand", "language": "sql", "refs": [{"name": "calc_batted_ball_type", "package": null, "version": null}, {"name": "event_offense_stats", "package": null, "version": null}, {"name": "event_states_full", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.baseball_computer.calc_batted_ball_type", "model.baseball_computer.event_offense_stats", "model.baseball_computer.event_states_full"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "analysis.baseball_computer.ground_ball_blame": {"database": "bc", "schema": "main_models", "name": "ground_ball_blame", "resource_type": "analysis", "package_name": "baseball_computer", "path": "analysis/ground_ball_blame.sql", "original_file_path": "analyses/ground_ball_blame.sql", "unique_id": "analysis.baseball_computer.ground_ball_blame", "fqn": ["baseball_computer", "analysis", "ground_ball_blame"], "alias": "ground_ball_blame", "checksum": {"name": "sha256", "checksum": "ecbd67f56fe44d03897432ff87e4cc4d7314ac215c447d9dc9734fbe6d468bf8"}, "config": {"enabled": true, "alias": null, "schema": "models", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "models"}, "created_at": 1702281448.008806, "relation_name": null, "raw_code": "WITH base AS (\n    SELECT DISTINCT ON (s.batter_hand, is_shift_era, base_state, under_two_outs, c.recorded_location, c.recorded_location_angle, c.batted_to_fielder)\n        s.batter_hand,\n        s.season >= 2010 AS is_shift_era,\n        s.base_state_start AS base_state,\n        s.outs_start < 2 AS under_two_outs,\n        c.recorded_location,\n        c.recorded_location_angle,\n        c.batted_to_fielder,\n        -- Number of balls fielded by this fielder at this location\n        COUNT(*) OVER fielder_at_location AS ground_balls,\n        -- E.g 64% of the time an infielder fields a ball at ThirdShortstop, it's to the third baseman\n        ground_balls / COUNT(*) OVER fielder_group_at_location AS share_within_group,\n        -- E.g. 65% of all ground balls fielded by the left fielder come through ThirdShortstop\n        ground_balls / COUNT(*) OVER fielder_all AS share_within_fielder,\n        SUM(e.hits) OVER location_all / COUNT(*) OVER location_all AS batting_average_at_location,\n        SUM(e.hits) OVER fielder_at_location / ground_balls AS batting_average,\n        ground_balls / COUNT(*) OVER location_all AS batting_average_sample_weight,\n    FROM {{ ref('event_offense_stats') }} AS e\n    INNER JOIN {{ ref('calc_batted_ball_type') }} AS c USING (event_key)\n    INNER JOIN {{ ref('event_states_full') }} AS s USING (event_key)\n    WHERE c.trajectory = 'GroundBall'\n        AND e.plate_appearances = 1\n        AND c.recorded_location != 'Unknown'\n        -- These are the only seasons in the current data where location/trajectory data\n        -- is widely available and unaffected by selection bias.\n        -- 2000-2019 coverage should improve substantially in a future Retrosheet release.\n        AND (\n            season BETWEEN 1989 AND 1999\n            OR season >= 2020\n        )\n        -- Remove balls without fielder info and balls fielded by catchers,\n        -- since a catcher would never plausibly have a chance at a ball that\n        -- would go to the outfield. \n        AND c.batted_to_fielder NOT IN (0, 2)\n        -- Remove any shallow locations, since those balls shouldn't be fielded by outfielders\n        -- (Presence in the data is rare, and likely either\n        -- a miscode or an extremely unusual fielding configuration).\n        -- We keep 'Pitcher' (the mound) in the data, since it may include deflections\n        AND c.recorded_location_depth != 'Shallow'\n        AND c.recorded_location NOT IN ('Catcher', 'CatcherFirst', 'CatcherThird', 'PitcherFirst', 'PitcherThird')\n        -- Exclude infield hits for a couple reasons: they are disproportionately soft ground balls\n        -- that would not have reached the outfield, and the fielder picking up the ball is often not the one\n        -- who had a real chance (e.g. shortstop covering behind third baseman).\n    WINDOW\n        fielder_at_location AS (\n            PARTITION BY s.batter_hand, is_shift_era, base_state, under_two_outs,\n            c.recorded_location, c.recorded_location_angle, c.batted_to_fielder\n        ),\n        fielder_group_at_location AS (\n            PARTITION BY s.batter_hand, is_shift_era, base_state, under_two_outs,\n            c.recorded_location, c.recorded_location_angle, e.fielded_by_outfielder\n        ),\n        fielder_all AS (\n            PARTITION BY s.batter_hand, is_shift_era, base_state, under_two_outs,\n            c.batted_to_fielder\n        ),\n        location_all AS (\n            PARTITION BY s.batter_hand, is_shift_era, base_state, under_two_outs,\n            c.recorded_location, c.recorded_location_angle\n        )\n),\n\njoined AS (\n    SELECT\n        batter_hand,\n        is_shift_era,\n        base_state,\n        under_two_outs,\n        recorded_location,\n        recorded_location_angle,\n        outfield.batting_average_sample_weight,\n        outfield.batting_average_at_location,\n        infield.batting_average AS infield_hit_rate,\n        outfield.batted_to_fielder AS outfield_position,\n        infield.batted_to_fielder AS infield_position,\n        -- If 65% of balls to the left fielder come from the ThirdShortstop location,\n        -- and 64% of infielder-fielded balls in ThirdShortstop are handled by the third baseman,\n        -- then we infer that 65 * 64 = 41.6% ground balls to the left fielder are balls\n        -- that came through ThirdShortstop that \"should\" have been fielded by the third baseman.\n        -- Summing up all outfield-infield-location combinations, as we do in the final subquery,\n        -- gives each outfielder a full 100%, divided among the infielders accordingly.\n        outfield.share_within_fielder * infield.share_within_group AS share,\n        -- We can use the same method to determine the share of balls lost by a given infielder\n        -- that were fielded by a given outfielder.\n        infield.share_within_fielder * outfield.share_within_group AS inverse_share,\n    FROM base AS outfield\n    INNER JOIN base AS infield USING (batter_hand, is_shift_era, base_state, under_two_outs, recorded_location, recorded_location_angle)\n    WHERE outfield.batted_to_fielder > 6\n        AND infield.batted_to_fielder BETWEEN 1 AND 6\n),\n\nfinal AS (\n    SELECT\n        batter_hand,\n        is_shift_era,\n        base_state,\n        under_two_outs,\n        outfield_position,\n        infield_position,\n        SUM(share) AS share,\n        SUM(inverse_share) AS inverse_share,\n        SUM(batting_average_at_location * batting_average_sample_weight) / SUM(batting_average_sample_weight) AS batting_average,\n    FROM joined\n    GROUP BY 1, 2, 3, 4, 5, 6\n)\n\nSELECT * FROM final", "language": "sql", "refs": [{"name": "event_offense_stats", "package": null, "version": null}, {"name": "calc_batted_ball_type", "package": null, "version": null}, {"name": "event_states_full", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.baseball_computer.event_offense_stats", "model.baseball_computer.calc_batted_ball_type", "model.baseball_computer.event_states_full"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "analysis.baseball_computer.babip_by_count": {"database": "bc", "schema": "main_models", "name": "babip_by_count", "resource_type": "analysis", "package_name": "baseball_computer", "path": "analysis/babip_by_count.sql", "original_file_path": "analyses/babip_by_count.sql", "unique_id": "analysis.baseball_computer.babip_by_count", "fqn": ["baseball_computer", "analysis", "babip_by_count"], "alias": "babip_by_count", "checksum": {"name": "sha256", "checksum": "bb2e90b770e0ff24ac221e63c237e43a3c7092d59d2a82bce05832f0ba7fe276"}, "config": {"enabled": true, "alias": null, "schema": "models", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "models"}, "created_at": 1702281448.0132291, "relation_name": null, "raw_code": "WITH players AS (\n    SELECT\n    s.pitcher_id as player_id,\n    s.count_balls,\n    s.count_strikes,\n    b.trajectory,\n    COUNT(*) as ab,\n    SUM(hits) as h,\n    h / ab AS avg\nFROM {{ ref('event_states_full') }} s\nJOIN {{ ref('event_offense_stats') }} o USING (event_key)\nJOIN {{ ref('calc_batted_ball_type') }} b USING (event_key)\nWHERE balls_in_play = 1\n    AND sacrifice_hits = 0\n    AND season >= 1988\n    AND season NOT BETWEEN 2000 AND 2002\n    AND o.bunts = 0\n    AND count_balls + count_strikes IS NOT NULL\nGROUP BY 1, 2, 3, 4\n),\n\nodds AS (\n    SELECT\n        player_id,\n        count_balls,\n        count_strikes,\n        trajectory,\n        ab,\n        SUM(h) OVER w / SUM(ab) OVER w as avg_total,\n        avg - avg_total AS avg_diff,\n    FROM players\n    WINDOW w AS (PARTITION BY player_id, trajectory)\n),\n\nweighted AS (\n    SELECT\n        count_balls,\n        count_strikes,\n        trajectory,\n        SUM(ab) as ab,\n        SUM(avg_diff * ab) / SUM(ab) * 1000 as avg_diff\n    FROM odds\n    GROUP BY 1, 2, 3\n)\n\nSELECT * FROM weighted", "language": "sql", "refs": [{"name": "event_states_full", "package": null, "version": null}, {"name": "event_offense_stats", "package": null, "version": null}, {"name": "calc_batted_ball_type", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.baseball_computer.event_states_full", "model.baseball_computer.event_offense_stats", "model.baseball_computer.calc_batted_ball_type"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "analysis.baseball_computer.gb_babip_correlations": {"database": "bc", "schema": "main_models", "name": "gb_babip_correlations", "resource_type": "analysis", "package_name": "baseball_computer", "path": "analysis/gb_babip_correlations.sql", "original_file_path": "analyses/gb_babip_correlations.sql", "unique_id": "analysis.baseball_computer.gb_babip_correlations", "fqn": ["baseball_computer", "analysis", "gb_babip_correlations"], "alias": "gb_babip_correlations", "checksum": {"name": "sha256", "checksum": "9ed5a2b419047eb83eb128da652082a937b4565c43f5581b9f55bf7a3abd4f49"}, "config": {"enabled": true, "alias": null, "schema": "models", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "models"}, "created_at": 1702281448.018062, "relation_name": null, "raw_code": "WITH t AS (SELECT\n    player_id,\n    BOOL_OR(throws = 'R')::INT AS is_righty,\n    SUM(trajectory_ground_ball) AS gb,\n    SUM(strikeouts)/SUM(batters_faced) AS k_rate,\n    SUM(walks)/SUM(batters_faced) AS bb_rate,\n    SUM(balls_in_play)/SUM(batters_faced) AS bip_rate,\n    SUM(trajectory_ground_ball)/SUM(trajectory_known) AS gb_rate,\n    SUM(trajectory_broad_air_ball)/SUM(trajectory_known) AS air_ball_rate,\n    SUM(trajectory_line_drive)/SUM(trajectory_broad_air_ball) AS ld_rate,\n    SUM(trajectory_pop_up)/SUM(trajectory_broad_air_ball) AS pu_rate,\n    SUM(home_runs)/SUM(trajectory_broad_air_ball) AS hr_rate,\n    k_rate / bb_rate AS kbb,\n    SUM(trajectory_ground_ball * batted_balls_pulled)/gb AS pulled_gb,\n    SUM(trajectory_ground_ball * batted_balls_opposite_field)/gb AS oppo_gb,\n    SUM(trajectory_ground_ball * batted_angle_middle)/gb AS middle_gb,\n    SUM(trajectory_broad_air_ball * batted_balls_pulled)/SUM(trajectory_broad_air_ball) AS pulled_air,\n    SUM(trajectory_broad_air_ball * batted_balls_opposite_field)/SUM(trajectory_broad_air_ball) AS oppo_air,\n    SUM(trajectory_broad_air_ball * batted_angle_middle)/SUM(trajectory_broad_air_ball) AS middle_air,\n    SUM(trajectory_ground_ball * fielded_by_battery)/gb AS weak_grounders,\n    SUM(trajectory_ground_ball * hits)/gb AS gb_hit_rate,\n    SUM(infield_hits)/gb AS infield_hit_rate,\nFROM  {{ ref('event_pitching_stats') }}\nINNER JOIN {{ ref('game_start_info') }} g USING (game_id)\nINNER JOIN {{ ref('people') }} USING (player_id)\nWHERE g.season > 1988\n    -- trajectory type is missing not at random in these years\n    AND season NOT BETWEEN 2000 AND 2001\n    AND (trajectory_known OR NOT balls_batted)\n    AND (fielded_by_known OR NOT balls_batted)\n    AND batters_faced = 1\n    AND bunts = 0\nGROUP BY 1\nHAVING gb > 500\n)\nSELECT COUNT(*),\n    CORR(is_righty, gb_hit_rate) AS righty_corr,\n    CORR(weak_grounders, gb_hit_rate) AS weak_corr,\n    CORR(kbb, gb_hit_rate) AS kbb_corr,\n    CORR(k_rate, gb_hit_rate) AS k_corr,\n    CORR(bb_rate, gb_hit_rate) AS bb_corr,\n    CORR(pulled_gb, gb_hit_rate) AS pulled_gb_corr,\n    CORR(oppo_gb, gb_hit_rate) AS oppo_gb_corr,\n    CORR(middle_gb, gb_hit_rate) AS middle_gb_corr,\n    CORR(infield_hit_rate, gb_hit_rate) AS infield_corr,\n    CORR(pulled_air, gb_hit_rate) AS pulled_air_corr,\n    CORR(oppo_air, gb_hit_rate) AS oppo_air_corr,\n    CORR(middle_air, gb_hit_rate) AS middle_air_corr,\n    CORR(bip_rate, gb_hit_rate) AS bip_rate_corr,\n    CORR(gb_rate, gb_hit_rate) AS gb_rate_corr,\n    CORR(ld_rate, gb_hit_rate) AS ld_rate_corr,\n    CORR(pu_rate, gb_hit_rate) AS pu_rate_corr,\n    CORR(hr_rate, gb_hit_rate) AS hr_rate_corr,\n    CORR(air_ball_rate, gb_hit_rate) AS air_ball_rate_corr\nFROM t", "language": "sql", "refs": [{"name": "event_pitching_stats", "package": null, "version": null}, {"name": "game_start_info", "package": null, "version": null}, {"name": "people", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.baseball_computer.event_pitching_stats", "model.baseball_computer.game_start_info", "model.baseball_computer.people"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "analysis.baseball_computer.runner_advance_expectancy": {"database": "bc", "schema": "main_models", "name": "runner_advance_expectancy", "resource_type": "analysis", "package_name": "baseball_computer", "path": "analysis/runner_advance_expectancy.sql", "original_file_path": "analyses/runner_advance_expectancy.sql", "unique_id": "analysis.baseball_computer.runner_advance_expectancy", "fqn": ["baseball_computer", "analysis", "runner_advance_expectancy"], "alias": "runner_advance_expectancy", "checksum": {"name": "sha256", "checksum": "5d640fa442aaa424d69c8122c9f007ab969b40812bd87ac40de4758ca58b91c3"}, "config": {"enabled": true, "alias": null, "schema": "models", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "models"}, "created_at": 1702281448.022149, "relation_name": null, "raw_code": "WITH base_data AS (\n    SELECT\n        e.season,\n        e.event_key,\n        e.outs,\n        b.baserunner,\n        b.runner_id,\n        e.base_state,\n        e.batted_to_fielder,\n        COALESCE(bbt.trajectory_broad_classification, 'Unknown') AS trajectory,\n        b.bases_advanced,\n        b.unforced_outs_on_basepaths,\n        -- We don't want to distinguish between out types\n        -- because that selects on the dependent variable\n        -- (e.g. a sac fly is always a successful advance)\n        CASE WHEN part.is_batting_out\n                THEN 'InPlayOut'\n        ELSE part.plate_appearance_result\n        END AS plate_appearance_result,\n    FROM {{ ref('event_baserunning_stats') }} AS b\n    INNER JOIN {{ ref('stg_events') }} AS e USING (event_key)\n    INNER JOIN {{ ref('seed_plate_appearance_result_types') }} AS part USING (plate_appearance_result)\n    LEFT JOIN {{ ref('calc_batted_ball_type') }} AS bbt USING (event_key)\n    WHERE part.is_in_play AND e.plate_appearance_result != 'GroundRuleDouble'\n),\n\naverages AS (\n    SELECT\n        base_state,\n        outs,\n        baserunner,\n        batted_to_fielder,\n        plate_appearance_result,\n        trajectory,\n        AVG(bases_advanced) AS average_bases_advanced,\n        AVG(unforced_outs_on_basepaths) AS average_outs_on_basepaths,\n    FROM base_data\n    GROUP BY 1, 2, 3, 4, 5, 6\n),\n\nexpectations AS (\n    SELECT\n        bd.*,\n        a.average_bases_advanced,\n        a.average_outs_on_basepaths,\n        bd.bases_advanced - a.average_bases_advanced AS bases_advanced_above_average,\n        bd.unforced_outs_on_basepaths - a.average_outs_on_basepaths AS outs_on_basepaths_above_average,\n        AVG(bases_advanced_above_average) OVER baseline AS season_adjustment_bases,\n        AVG(outs_on_basepaths_above_average) OVER baseline AS season_adjustment_outs,\n        bases_advanced_above_average - season_adjustment_bases AS adjusted_bases_advanced,\n        outs_on_basepaths_above_average - season_adjustment_outs AS adjusted_outs_on_basepaths\n    FROM base_data AS bd\n    INNER JOIN averages AS a\n        USING (base_state, outs, baserunner, batted_to_fielder, plate_appearance_result, trajectory)\n    WINDOW baseline AS (PARTITION BY season, base_state, outs, baserunner, plate_appearance_result, batted_to_fielder)\n),\n\nleaders AS (\n    SELECT\n        runner_id,\n        COUNT(DISTINCT event_key) AS plate_appearances,\n        SUM(adjusted_bases_advanced) AS bases_aa,\n        SUM(adjusted_outs_on_basepaths) AS outs_aa,\n        bases_aa * .2 + outs_aa * -0.42 AS run_value\n    FROM expectations\n    GROUP BY 1\n)\n\nSELECT *,\n    run_value / plate_appearances * 100 AS run_value_per_100\nFROM leaders\nORDER BY run_value DESC", "language": "sql", "refs": [{"name": "event_baserunning_stats", "package": null, "version": null}, {"name": "stg_events", "package": null, "version": null}, {"name": "seed_plate_appearance_result_types", "package": null, "version": null}, {"name": "calc_batted_ball_type", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.baseball_computer.event_baserunning_stats", "model.baseball_computer.stg_events", "seed.baseball_computer.seed_plate_appearance_result_types", "model.baseball_computer.calc_batted_ball_type"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "analysis.baseball_computer.outfield_hits": {"database": "bc", "schema": "main_models", "name": "outfield_hits", "resource_type": "analysis", "package_name": "baseball_computer", "path": "analysis/outfield_hits.sql", "original_file_path": "analyses/outfield_hits.sql", "unique_id": "analysis.baseball_computer.outfield_hits", "fqn": ["baseball_computer", "analysis", "outfield_hits"], "alias": "outfield_hits", "checksum": {"name": "sha256", "checksum": "2979cb64aac11d19f580ea687f0d51be09e306458e0d9d6989c287a72b6b2a56"}, "config": {"enabled": true, "alias": null, "schema": "models", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "models"}, "created_at": 1702281448.026292, "relation_name": null, "raw_code": "WITH t AS (\n    SELECT\n        p.batter_hand,\n        p.pitcher_hand,\n        c.batted_to_fielder,\n        e.total_bases,\n        COUNT(*) AS hits,\n        SUM(trajectory_ground_ball)/COUNT(*) AS hit_gb_rate\n{# FROM {{ ref('game_data_completeness') }} AS g #}\nINNER JOIN {{ ref('calc_batted_ball_type') }} AS c USING (game_id)\nINNER JOIN {{ ref('event_offense_stats') }} AS e USING (event_key)\nINNER JOIN {{ ref('event_states_full') }} p USING (event_key)\nWHERE g.has_batted_to_fielder AND g.has_trajectory\n    AND e.hits = 1\n    AND e.fielded_by_outfielder = 1\n    AND e.bunts = 0\nGROUP BY 1, 2, 3, 4\n)\n\nSELECT * FROM t", "language": "sql", "refs": [{"name": "calc_batted_ball_type", "package": null, "version": null}, {"name": "event_offense_stats", "package": null, "version": null}, {"name": "event_states_full", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.baseball_computer.calc_batted_ball_type", "model.baseball_computer.event_offense_stats", "model.baseball_computer.event_states_full"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "analysis.baseball_computer.fielder_location_shares": {"database": "bc", "schema": "main_models", "name": "fielder_location_shares", "resource_type": "analysis", "package_name": "baseball_computer", "path": "analysis/fielder_location_shares.sql", "original_file_path": "analyses/fielder_location_shares.sql", "unique_id": "analysis.baseball_computer.fielder_location_shares", "fqn": ["baseball_computer", "analysis", "fielder_location_shares"], "alias": "fielder_location_shares", "checksum": {"name": "sha256", "checksum": "5656f55105e8c374382da85e65f2d0b5cb2bfe38a08de235bd99fd6d2c3fbaec"}, "config": {"enabled": true, "alias": null, "schema": "models", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "models"}, "created_at": 1702281448.03018, "relation_name": null, "raw_code": "WITH t AS (\n    SELECT\n        p.batter_hand,\n        p.season > 2010 AS is_shift_era,\n        p.base_state_start AS base_state,\n        p.outs_start < 2 AS under_two_outs,\n        c.recorded_location,\n        c.recorded_location_angle,\n        c.recorded_location_depth,\n        c.trajectory,\n        c.batted_to_fielder,\n        ANY_VALUE(trajectory_broad_classification) AS trajectory_broad_classification,\n        COUNT(*) AS at_bats,\n        COUNT_IF(e.hits = 1) AS hits,\n    FROM {{ ref('event_offense_stats') }} AS e\n    INNER JOIN {{ ref('calc_batted_ball_type') }} AS c USING (event_key, game_id)\n    INNER JOIN {{ ref('event_states_full') }} p USING (event_key, game_id)\n    WHERE c.batted_to_fielder > 0\n        AND c.recorded_location != 'Unknown'\n        AND p.batter_hand IS NOT NULL\n        AND (p.season BETWEEN 1989 AND 1999 OR p.season >= 2000)\n        AND e.trajectory_known = 1\n        AND e.sacrifice_hits = 0\n        AND p.batter_fielding_position != 1\n        GROUP BY 1, 2, 3, 4, 5, 6, 7, 8, 9\n), \n\nt2 AS (\n    SELECT DISTINCT ON (batter_hand, is_shift_era, base_state, under_two_outs, recorded_location, recorded_location_angle, recorded_location_depth, batted_to_fielder, trajectory)\n        batter_hand,\n        is_shift_era,\n        base_state,\n        under_two_outs\n        recorded_location,\n        recorded_location_angle,\n        recorded_location_depth,\n        batted_to_fielder,\n        trajectory,\n        trajectory_broad_classification,\n        SUM(at_bats) AS at_bats,\n        SUM(hits)/SUM(at_bats) AS batting_average,\n    FROM t\n    GROUP BY 1, 2, 3, 4, 5, 6, 7, 8, 9\n    WINDOW\n        s1 AS (PARTITION BY batter_hand, is_shift_era, base_state, under_two_outs, recorded_location, recorded_location_angle, recorded_location_depth, batted_to_fielder, trajectory),\n        s2 AS (PARTITION BY batter_hand, recorded_location, recorded_location_angle, recorded_location_depth, batted_to_fielder, trajectory),\n        s3 AS (PARTITION BY batter_hand, recorded_location, recorded_location_angle, recorded_location_depth, batted_to_fielder),\n        s4 AS (PARTITION BY batter_hand, recorded_location, recorded_location_angle, recorded_location_depth),\n        s5 AS (PARTITION BY batter_hand, recorded_location, recorded_location_angle),\n        s6 AS (PARTITION BY batter_hand, recorded_location)\n)\n\nSELECT * FROM t2\nORDER BY at_bats DESC", "language": "sql", "refs": [{"name": "event_offense_stats", "package": null, "version": null}, {"name": "calc_batted_ball_type", "package": null, "version": null}, {"name": "event_states_full", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.baseball_computer.event_offense_stats", "model.baseball_computer.calc_batted_ball_type", "model.baseball_computer.event_states_full"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "analysis.baseball_computer.fielder_advance_expectancy": {"database": "bc", "schema": "main_models", "name": "fielder_advance_expectancy", "resource_type": "analysis", "package_name": "baseball_computer", "path": "analysis/fielder_advance_expectancy.sql", "original_file_path": "analyses/fielder_advance_expectancy.sql", "unique_id": "analysis.baseball_computer.fielder_advance_expectancy", "fqn": ["baseball_computer", "analysis", "fielder_advance_expectancy"], "alias": "fielder_advance_expectancy", "checksum": {"name": "sha256", "checksum": "e7e67bd01f152b7c5f85265b379a3ac5b69c242be0fdadeb7401bd7fdc5f47b4"}, "config": {"enabled": true, "alias": null, "schema": "models", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "models"}, "created_at": 1702281448.034399, "relation_name": null, "raw_code": "WITH base_data AS (\n    SELECT\n        e.season,\n        e.event_key,\n        e.outs,\n        b.baserunner,\n        e.base_state,\n        e.batting_side,\n        e.batted_to_fielder,\n        g.park_id,\n        f.player_id AS fielder_id,\n        COALESCE(bbt.trajectory_broad_classification, 'Unknown') AS trajectory,\n        b.bases_advanced,\n        b.unforced_outs_on_basepaths,\n        -- We don't want to distinguish between out types because that selects on the dependent variable\n        -- (e.g. a sac fly is always a successful advance). We also want to lump ROEs and failed fielders choices\n        -- in with hits here so we can assign the reaching-base penalty consistently separately.\n        CASE WHEN part.plate_appearance_result = 'ReachedOnError'\n            OR (part.plate_appearance_result = 'FieldersChoice' AND e.outs_on_play = 0)\n                THEN FALSE\n            ELSE part.is_batting_out\n        END AS is_out,\n    FROM {{ ref('event_baserunning_stats') }} AS b\n    INNER JOIN {{ ref('stg_events') }} AS e USING (event_key)\n    INNER JOIN {{ ref('seed_plate_appearance_result_types') }} AS part USING (plate_appearance_result)\n    INNER JOIN {{ ref('game_start_info') }} AS g ON g.game_id = e.game_id\n    LEFT JOIN {{ ref('calc_batted_ball_type') }} AS bbt USING (event_key)\n    LEFT JOIN {{ ref('event_player_fielding_stats') }} AS f\n        ON e.event_key = f.event_key\n        AND e.batted_to_fielder = f.fielding_position\n    WHERE part.is_in_play\n),\n\n-- TODO: add park\naverages AS (\n    SELECT\n        base_state,\n        outs,\n        baserunner,\n        batted_to_fielder,\n        is_out,\n        trajectory,\n        AVG(bases_advanced) AS average_bases_advanced,\n        AVG(unforced_outs_on_basepaths) AS average_outs_on_basepaths,\n    FROM base_data\n    GROUP BY 1, 2, 3, 4, 5, 6\n),\n\nexpectations AS (\n    SELECT\n        bd.*,\n        a.average_bases_advanced,\n        a.average_outs_on_basepaths,\n        bd.bases_advanced - a.average_bases_advanced AS bases_advanced_above_average,\n        bd.unforced_outs_on_basepaths - a.average_outs_on_basepaths AS outs_on_basepaths_above_average,\n        AVG(bases_advanced_above_average) OVER season_baseline AS season_adjustment_bases,\n        AVG(outs_on_basepaths_above_average) OVER season_baseline AS season_adjustment_outs,\n        bases_advanced_above_average - season_adjustment_bases AS adjusted_bases_advanced,\n        outs_on_basepaths_above_average - season_adjustment_outs AS adjusted_outs_on_basepaths\n    FROM base_data AS bd\n    INNER JOIN averages AS a\n        USING (base_state, outs, baserunner, is_out, trajectory, batted_to_fielder)\n    WINDOW season_baseline AS (PARTITION BY season, base_state, outs, baserunner, is_out, trajectory, batted_to_fielder)\n),\n\nleaders AS (\n    SELECT\n        fielder_id,\n        COUNT(DISTINCT event_key) AS plate_appearances,\n        SUM(adjusted_bases_advanced) AS bases_aa,\n        SUM(adjusted_outs_on_basepaths) AS outs_aa,\n        bases_aa * .2 + outs_aa * -0.42 AS run_value\n    FROM expectations\n    GROUP BY 1\n)\n\nSELECT *,\n    bases_aa / plate_appearances AS bases_aa_per_pa,\n    outs_aa / plate_appearances AS outs_aa_per_pa,\n    run_value / plate_appearances AS run_value_per_pa\nFROM leaders\nWHERE plate_appearances > 100\nORDER BY run_value_per_pa", "language": "sql", "refs": [{"name": "event_baserunning_stats", "package": null, "version": null}, {"name": "stg_events", "package": null, "version": null}, {"name": "seed_plate_appearance_result_types", "package": null, "version": null}, {"name": "game_start_info", "package": null, "version": null}, {"name": "calc_batted_ball_type", "package": null, "version": null}, {"name": "event_player_fielding_stats", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.baseball_computer.event_baserunning_stats", "model.baseball_computer.stg_events", "seed.baseball_computer.seed_plate_appearance_result_types", "model.baseball_computer.game_start_info", "model.baseball_computer.calc_batted_ball_type", "model.baseball_computer.event_player_fielding_stats"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "analysis.baseball_computer.scratch": {"database": "bc", "schema": "main_models", "name": "scratch", "resource_type": "analysis", "package_name": "baseball_computer", "path": "analysis/scratch.sql", "original_file_path": "analyses/scratch.sql", "unique_id": "analysis.baseball_computer.scratch", "fqn": ["baseball_computer", "analysis", "scratch"], "alias": "scratch", "checksum": {"name": "sha256", "checksum": "3c330c0662028fd90dbb0a3f9ed920ae7e3bf774935a83b1b73b0cf65ef13de8"}, "config": {"enabled": true, "alias": null, "schema": "models", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "models"}, "created_at": 1702281448.038985, "relation_name": null, "raw_code": "{# WITH t AS (\n    SELECT\n    player_id,\n    MIN(season) AS first_season,\n    MAX(season) AS last_season,\n    COUNT(*) as bip,\n    SUM(hits) AS hip,\n    SUM((1 - batted_balls_pulled) * (1- hits))/SUM(1 - hits) AS outs_not_pulled,\n    SUM((1 - batted_balls_pulled) * hits)/SUM(hits) AS hits_not_pulled,\n    (hits_not_pulled / (1 - hits_not_pulled)) / (outs_not_pulled / (1 - outs_not_pulled)) AS hit_nonpull_odds,\nFROM {{ ref('event_offense_stats') }} e\nJOIN {{ ref('stg_games') }} USING (game_id)\nWHERE at_bats = 1\n    AND trajectory_known = 1\n    AND (fielded_by_known = 1 OR home_runs = 1)\n    AND bunts = 0\n    AND infield_hits = 0\n    AND player_id NOT IN (SELECT player_id FROM {{ ref('stg_rosters') }} WHERE position = 'P')\nGROUP BY 1 \nHAVING hip > 250\nORDER BY 2 DESC\n)\nSELECT * FROM t #}\n\n{# WITH t AS (\nSELECT i.season,\n    COALESCE(birth_country, 'USA') AS birth_state,\n    SUM(CASE WHEN fielding_position != 1 THEN outs_played / 9 ELSE outs_played END) AS n_raw,\n    n_raw/SUM(n_raw) OVER (PARTITION BY i.season) * 100 AS n\nFROM {{ ref('people') }}\nINNER JOIN {{ ref('player_position_game_fielding_stats') }} g USING (player_id)\nINNER JOIN {{ ref('game_start_info') }} i USING (game_id)\nWHERE birth_country = 'USA'\nGROUP BY 1, 2\n)\nSELECT * FROM t #}\n\n{# \nSELECT\n    season,\n    league,\n    COUNT(DISTINCT game_id) AS games,\n    COUNT(DISTINCT team_id) AS teams,\nFROM {{ ref('team_game_start_info') }}\nWHERE game_type = 'RegularSeason'\nAND LENGTH(league) < 3\nGROUP BY 1, 2\nORDER BY 1, 2\n)\n\nSELECT * FROM  #}\n{# \nWITH t AS (\nSELECT id1 AS id, relation, COALESCE(birth_year, substring(birth_date, -4, 4)::int) AS birth_year\nFROM main.temp_relatives t\nJOIN {{ ref('people') }} AS p1 ON p1.player_id = t.id1\nWHERE relation NOT IN ('F', 'U')\nUNION ALL\nSELECT id2 AS id, relation, COALESCE(birth_year, substring(birth_date, -4, 4)::int) AS birth_year\nFROM main.temp_relatives t\nJOIN {{ ref('people') }} AS p2 ON p2.player_id = t.id2\n)\nSELECT birth_year,\n    COUNT(*)\nFROM t\nGROUP BY 1\n\nSELECT player_id, birth_date FROM {{ ref('stg_bio') }}\nWHERE NOT REGEXP_FULL_MATCH(birth_date, '^[01][0-9]/[0-3][0-9]/[12][890][0-9]{2}$') #}\n\nWITH t AS (\n    SELECT cleaned_scorer, game_id, game_share, unnest([away_team_id, home_team_id]) AS team_id\n    FROM {{ ref('game_scorekeeping') }}\n)\n\nSELECT cleaned_scorer,\n    SUM(game_share /2) AS share,\n    SUM(share) OVER (ORDER BY share DESC, cleaned_scorer)/SUM(share) OVER  () AS cumsum,\n    ROW_NUMBER() OVER (ORDER BY share DESC, cleaned_scorer) AS rank,\n    LIST(DISTINCT SUBSTRING(game_id, 1, 7) ORDER BY substring(game_id, 1, 7)) AS files,\nFROM t\n--WHERE cleaned_scorer LIKE '%kopf%'\nGROUP BY 1 ORDER BY 2 DESC\n\nSELECT game_id, cleaned_scorer, batted_trajectory, batted_to_fielder, batted_location_general\nFROM {{ ref('stg_events') }} e\n JOIN {{ ref('game_scorekeeping') }} USING (game_id)\nWHERE 1=1\nand inputter ilike 'Dewan'\nAND plate_appearance_result IN ('Single', 'Double', 'Triple')\nAND batted_location_general != 'Unknown'\nAND batted_trajectory = 'Unknown'\nORDER BY e.date, game_id, event_id\n\nSELECT batted_trajectory, date, c.game_id, e.batter_id, e.inning, e.pitcher_id, c.batted_to_fielder, c.contact_broad_classification, recorded_location, recorded_location_angle, recorded_location_depth\nFROM {{ ref('stg_events') }} e\nINNER JOIN {{ ref('calc_batted_ball_type') }} c USING (event_key)\nWHERE e.batter_id LIKE 'youne%'\nAND season = 2000\nAND e.plate_appearance_result IN ('Single', 'Double')\nORDER BY date DESC , c.game_id DESC, event_id DESC;\n\nSELECT * FROM {{ ref('metrics_player_career_offense') }}\nORDER BY hits DESC\n\nSELECT * FROM {{ ref('event_offense_stats') }}\nWHERE player_id LIKE 'troum%'\nAND balls_batted = 1\n\nSELECT *\nFROM {{ ref('player_game_offense_stats') }}\nWHERE player_id = 'musis101'\nAND game_id IN (SELECT game_id from {{ ref('game_start_info') }} WHERE is_regular_season)\nAND substring(game_id, 4, 4) = 1960", "language": "sql", "refs": [{"name": "game_scorekeeping", "package": null, "version": null}, {"name": "stg_events", "package": null, "version": null}, {"name": "game_scorekeeping", "package": null, "version": null}, {"name": "stg_events", "package": null, "version": null}, {"name": "calc_batted_ball_type", "package": null, "version": null}, {"name": "metrics_player_career_offense", "package": null, "version": null}, {"name": "event_offense_stats", "package": null, "version": null}, {"name": "player_game_offense_stats", "package": null, "version": null}, {"name": "game_start_info", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.baseball_computer.game_scorekeeping", "model.baseball_computer.stg_events", "model.baseball_computer.calc_batted_ball_type", "model.baseball_computer.metrics_player_career_offense", "model.baseball_computer.event_offense_stats", "model.baseball_computer.player_game_offense_stats", "model.baseball_computer.game_start_info"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "analysis.baseball_computer.player_completeness": {"database": "bc", "schema": "main_models", "name": "player_completeness", "resource_type": "analysis", "package_name": "baseball_computer", "path": "analysis/player_completeness.sql", "original_file_path": "analyses/player_completeness.sql", "unique_id": "analysis.baseball_computer.player_completeness", "fqn": ["baseball_computer", "analysis", "player_completeness"], "alias": "player_completeness", "checksum": {"name": "sha256", "checksum": "ad5ff8a72bcdd9a996e0677b1e5767154a1e6072c557ef13987b7fed77dfc9ee"}, "config": {"enabled": true, "alias": null, "schema": "models", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "models"}, "created_at": 1702281448.0438342, "relation_name": null, "raw_code": "SELECT\n    player_id,\n    player_type,\n    COUNT(*) AS total_games,\n    COUNT_IF(has_play_by_play) AS play_by_play,\n    COUNT_IF(has_trajectory) AS trajectory,\n    COUNT_IF(has_location) AS location,\n    COUNT_IF(has_batted_to_fielder) AS batted_to_fielder,\n    COUNT_IF(has_count_balls) AS count_balls,\n    COUNT_IF(has_count_strikes) AS count_strikes,\n    COUNT_IF(has_count) AS count,\n    COUNT_IF(has_pitches) AS pitches,\n    COUNT_IF(has_pitch_results) AS pitch_results,\n    COUNT_IF(has_pitch_strike_types) AS pitch_strike_types\n{# FROM {{ ref('player_game_data_completeness') }} #}\nGROUP BY 1, 2\nORDER BY total_games DESC", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "analysis.baseball_computer.ground_ball_hits": {"database": "bc", "schema": "main_models", "name": "ground_ball_hits", "resource_type": "analysis", "package_name": "baseball_computer", "path": "analysis/ground_ball_hits.sql", "original_file_path": "analyses/ground_ball_hits.sql", "unique_id": "analysis.baseball_computer.ground_ball_hits", "fqn": ["baseball_computer", "analysis", "ground_ball_hits"], "alias": "ground_ball_hits", "checksum": {"name": "sha256", "checksum": "bf13f9b73d8c2380b03541fa189481672d929f90d95357e4425bd46647df6e0c"}, "config": {"enabled": true, "alias": null, "schema": "models", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "models"}, "created_at": 1702281448.047157, "relation_name": null, "raw_code": "WITH t AS (\n    SELECT\n    player_id,\n    COUNT(*) as ab,\n    SUM(hits) AS hits,\n    SUM(hits * fielded_by_outfielder) AS of_hits,\n    SUM(hits)/COUNT(*) AS hit_rate,\n    SUM(hits * fielded_by_infielder)/COUNT(*) AS if_hit_rate,\n    of_hits/COUNT(*) AS of_hit_rate,\nFROM {{ ref('event_pitching_stats') }} e\nJOIN {{ ref('stg_games') }} USING (game_id)\nWHERE at_bats = 1\n    AND trajectory_ground_ball = 1\n    AND fielded_by_known = 1\n    AND season BETWEEN 1993 AND 1999\nGROUP BY 1 \nHAVING COUNT(*) > 100\nORDER BY 5 DESC\n)\n-- IF/OF variance contributes roughly evenly for hitters,\n-- but pitcher variance explained much more by OF\n-- Inference: infield hit BABIP should be ignored for pitchers but not hitters\n-- SELECT regr_r2(hit_rate, if_hit_rate), regr_r2(hit_rate, of_hit_rate)\n-- FROM t #}", "language": "sql", "refs": [{"name": "event_pitching_stats", "package": null, "version": null}, {"name": "stg_games", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.baseball_computer.event_pitching_stats", "model.baseball_computer.stg_games"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "analysis.baseball_computer.hit_vs_out_spray": {"database": "bc", "schema": "main_models", "name": "hit_vs_out_spray", "resource_type": "analysis", "package_name": "baseball_computer", "path": "analysis/hit_vs_out_spray.sql", "original_file_path": "analyses/hit_vs_out_spray.sql", "unique_id": "analysis.baseball_computer.hit_vs_out_spray", "fqn": ["baseball_computer", "analysis", "hit_vs_out_spray"], "alias": "hit_vs_out_spray", "checksum": {"name": "sha256", "checksum": "588ff4b88017d40b9f99009b24f0a0d0b95f1d502f422a52d71b06ac985cb1e9"}, "config": {"enabled": true, "alias": null, "schema": "models", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "models"}, "created_at": 1702281448.050965, "relation_name": null, "raw_code": "WITH t AS (\nSELECT\n    p.batter_hand,\n    c.recorded_location,\n    c.recorded_location_angle,\n    c.recorded_location_depth,\n    COUNT(*) AS at_bats,\n    SUM(hits) AS hits,\n    SUM(1 - hits) AS outs,\n    SUM(hits) / COUNT(*) AS avg,\nFROM {{ ref('event_offense_stats') }}\nINNER JOIN {{ ref('calc_batted_ball_type') }} AS c USING (game_id, event_key)\nINNER JOIN {{ ref('event_states_full') }} p USING (game_id, event_key)\nWHERE trajectory_known\n    AND bunts = 0\n    AND balls_in_play = 1\n\nGROUP BY 1, 2, 3, 4\n)\n\nSELECT\n    batter_hand,\n    recorded_location,\n    recorded_location_angle,\n    recorded_location_depth,\n    at_bats,\n    avg,\n    hits / SUM(hits) OVER (PARTITION BY batter_hand) AS hit_share,\n    outs / SUM(outs) OVER (PARTITION BY batter_hand) AS out_share,\nFROM t\nORDER BY SUM(at_bats) OVER (PARTITION BY recorded_location) DESC, batter_hand", "language": "sql", "refs": [{"name": "event_offense_stats", "package": null, "version": null}, {"name": "calc_batted_ball_type", "package": null, "version": null}, {"name": "event_states_full", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.baseball_computer.event_offense_stats", "model.baseball_computer.calc_batted_ball_type", "model.baseball_computer.event_states_full"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "analysis.baseball_computer.calc_park_factor_plate_appearances": {"database": "bc", "schema": "main_models", "name": "calc_park_factor_plate_appearances", "resource_type": "analysis", "package_name": "baseball_computer", "path": "analysis/park_factors/calc_park_factor_plate_appearances.sql", "original_file_path": "analyses/park_factors/calc_park_factor_plate_appearances.sql", "unique_id": "analysis.baseball_computer.calc_park_factor_plate_appearances", "fqn": ["baseball_computer", "analysis", "park_factors", "calc_park_factor_plate_appearances"], "alias": "calc_park_factor_plate_appearances", "checksum": {"name": "sha256", "checksum": "95fce79638f0b5921fdb3e3351a3e5f90ee7ee2ebd493fd134a62cbcaa4bde2a"}, "config": {"enabled": true, "alias": null, "schema": "models", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "models"}, "created_at": 1702281448.054791, "relation_name": null, "raw_code": "{{\n  config(\n    materialized = 'table',\n    )\n}}\n{% set rate_stats = [\n  \"singles\", \"doubles\", \"triples\", \"home_runs\", \"strikeouts\", \"reached_on_errors\", \"walks\", \"batting_outs\", \"runs\", \"balls_in_play\"\n] %}\n\n{{ batter_pitcher_park_factor(rate_stats, \"plate_appearances\") }}", "language": "sql", "refs": [{"name": "game_start_info", "package": null, "version": null}, {"name": "event_offense_stats", "package": null, "version": null}, {"name": "event_states_full", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.baseball_computer.batter_pitcher_park_factor"], "nodes": ["model.baseball_computer.game_start_info", "model.baseball_computer.event_offense_stats", "model.baseball_computer.event_states_full"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "analysis.baseball_computer.calc_park_factor_trajectory_outs": {"database": "bc", "schema": "main_models", "name": "calc_park_factor_trajectory_outs", "resource_type": "analysis", "package_name": "baseball_computer", "path": "analysis/park_factors/calc_park_factor_trajectory_outs.sql", "original_file_path": "analyses/park_factors/calc_park_factor_trajectory_outs.sql", "unique_id": "analysis.baseball_computer.calc_park_factor_trajectory_outs", "fqn": ["baseball_computer", "analysis", "park_factors", "calc_park_factor_trajectory_outs"], "alias": "calc_park_factor_trajectory_outs", "checksum": {"name": "sha256", "checksum": "e7e0bb8ad2e2e2a642ea007a2db16bc08dde7f9f4aed8c189b57645eafa859f0"}, "config": {"enabled": true, "alias": null, "schema": "models", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "models"}, "created_at": 1702281448.068471, "relation_name": null, "raw_code": "{{\n  config(\n    materialized = 'table',\n    )\n}}\n{% set rate_stats =\n  [\"trajectory_broad_air_ball\", \"trajectory_ground_ball\", \"trajectory_fly_ball\", \"trajectory_line_drive\", \"trajectory_pop_up\"]\n%}\n\n{{ batter_pitcher_park_factor(rate_stats, \"plate_appearances\", filter_exp=\"trajectory_known = 1 AND batting_outs > 0\" ) }}", "language": "sql", "refs": [{"name": "game_start_info", "package": null, "version": null}, {"name": "event_offense_stats", "package": null, "version": null}, {"name": "event_states_full", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.baseball_computer.batter_pitcher_park_factor"], "nodes": ["model.baseball_computer.game_start_info", "model.baseball_computer.event_offense_stats", "model.baseball_computer.event_states_full"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "analysis.baseball_computer.calc_park_factor_outs": {"database": "bc", "schema": "main_models", "name": "calc_park_factor_outs", "resource_type": "analysis", "package_name": "baseball_computer", "path": "analysis/park_factors/calc_park_factor_outs.sql", "original_file_path": "analyses/park_factors/calc_park_factor_outs.sql", "unique_id": "analysis.baseball_computer.calc_park_factor_outs", "fqn": ["baseball_computer", "analysis", "park_factors", "calc_park_factor_outs"], "alias": "calc_park_factor_outs", "checksum": {"name": "sha256", "checksum": "ba191080a57bb1316f478f269d00f7c01e16f9434b26f142c4bcc1ac3ef34e6c"}, "config": {"enabled": true, "alias": null, "schema": "models", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "models"}, "created_at": 1702281448.072662, "relation_name": null, "raw_code": "{{\n  config(\n    materialized = 'table',\n    )\n}}\n{% set rate_stats = [\n  \"singles\", \"doubles\", \"triples\", \"home_runs\", \"strikeouts\", \"reached_on_errors\", \"walks\", \"plate_appearances\", \"runs\", \"balls_in_play\"\n] %}\n\n{{ batter_pitcher_park_factor(rate_stats, \"batting_outs\", use_odds=False) }}", "language": "sql", "refs": [{"name": "game_start_info", "package": null, "version": null}, {"name": "event_offense_stats", "package": null, "version": null}, {"name": "event_states_full", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.baseball_computer.batter_pitcher_park_factor"], "nodes": ["model.baseball_computer.game_start_info", "model.baseball_computer.event_offense_stats", "model.baseball_computer.event_states_full"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "analysis.baseball_computer.calc_park_factor_out_location": {"database": "bc", "schema": "main_models", "name": "calc_park_factor_out_location", "resource_type": "analysis", "package_name": "baseball_computer", "path": "analysis/park_factors/calc_park_factor_out_location.sql", "original_file_path": "analyses/park_factors/calc_park_factor_out_location.sql", "unique_id": "analysis.baseball_computer.calc_park_factor_out_location", "fqn": ["baseball_computer", "analysis", "park_factors", "calc_park_factor_out_location"], "alias": "calc_park_factor_out_location", "checksum": {"name": "sha256", "checksum": "1bea435b85018ef8f110164e4799c0d430baacc96effb251b88cf23f97ae2b6d"}, "config": {"enabled": true, "alias": null, "schema": "models", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "models"}, "created_at": 1702281448.077028, "relation_name": null, "raw_code": "{{\n  config(\n    materialized = 'table',\n    )\n}}\n{% set rate_stats = [\n        \"batted_distance_plate\",\n        \"batted_distance_infield\",\n        \"batted_distance_outfield\",\n        \"fielded_by_battery\",\n        \"fielded_by_infielder\",\n        \"fielded_by_outfielder\",\n        \"batted_angle_left\",\n        \"batted_angle_right\",\n        \"batted_angle_middle\",\n        \"batted_location_plate\",\n        \"batted_location_right_infield\",\n        \"batted_location_middle_infield\",\n        \"batted_location_left_infield\",\n        \"batted_location_left_field\",\n        \"batted_location_center_field\",\n        \"batted_location_right_field\",\n    ]\n%}\n\n{{ batter_pitcher_park_factor(rate_stats, \"plate_appearances\", filter_exp=\"batted_location_known = 1 AND batting_outs > 0\", batter_hand_split=True) }}", "language": "sql", "refs": [{"name": "game_start_info", "package": null, "version": null}, {"name": "event_offense_stats", "package": null, "version": null}, {"name": "event_states_full", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.baseball_computer.batter_pitcher_park_factor"], "nodes": ["model.baseball_computer.game_start_info", "model.baseball_computer.event_offense_stats", "model.baseball_computer.event_states_full"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "analysis.baseball_computer.calc_park_factor_hit_location": {"database": "bc", "schema": "main_models", "name": "calc_park_factor_hit_location", "resource_type": "analysis", "package_name": "baseball_computer", "path": "analysis/park_factors/calc_park_factor_hit_location.sql", "original_file_path": "analyses/park_factors/calc_park_factor_hit_location.sql", "unique_id": "analysis.baseball_computer.calc_park_factor_hit_location", "fqn": ["baseball_computer", "analysis", "park_factors", "calc_park_factor_hit_location"], "alias": "calc_park_factor_hit_location", "checksum": {"name": "sha256", "checksum": "7f701afff12508b5839009ec8f10e5f379aa6edf1b590087cc03a77fc2f87233"}, "config": {"enabled": true, "alias": null, "schema": "models", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "models"}, "created_at": 1702281448.081449, "relation_name": null, "raw_code": "{{\n  config(\n    materialized = 'table',\n    )\n}}\n{% set rate_stats = [\n        \"batted_distance_plate\",\n        \"batted_distance_infield\",\n        \"batted_distance_outfield\",\n        \"fielded_by_battery\",\n        \"fielded_by_infielder\",\n        \"fielded_by_outfielder\",\n        \"batted_angle_left\",\n        \"batted_angle_right\",\n        \"batted_angle_middle\",\n        \"batted_location_left_field\",\n        \"batted_location_center_field\",\n        \"batted_location_right_field\",\n    ]\n%}\n\n{{ batter_pitcher_park_factor(rate_stats, \"plate_appearances\", filter_exp=\"batted_location_known = 1 AND hits = 1\", batter_hand_split=True) }}", "language": "sql", "refs": [{"name": "game_start_info", "package": null, "version": null}, {"name": "event_offense_stats", "package": null, "version": null}, {"name": "event_states_full", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.baseball_computer.batter_pitcher_park_factor"], "nodes": ["model.baseball_computer.game_start_info", "model.baseball_computer.event_offense_stats", "model.baseball_computer.event_states_full"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "analysis.baseball_computer.calc_park_factor_in_play": {"database": "bc", "schema": "main_models", "name": "calc_park_factor_in_play", "resource_type": "analysis", "package_name": "baseball_computer", "path": "analysis/park_factors/calc_park_factor_in_play.sql", "original_file_path": "analyses/park_factors/calc_park_factor_in_play.sql", "unique_id": "analysis.baseball_computer.calc_park_factor_in_play", "fqn": ["baseball_computer", "analysis", "park_factors", "calc_park_factor_in_play"], "alias": "calc_park_factor_in_play", "checksum": {"name": "sha256", "checksum": "e20ebe862978327d8c902747bc3187983fc2b6b54c1af0eb13c4702485e242e9"}, "config": {"enabled": true, "alias": null, "schema": "models", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "models"}, "created_at": 1702281448.085825, "relation_name": null, "raw_code": "{{\n  config(\n    materialized = 'table',\n    )\n}}\n{% set rate_stats = [\n  \"hits\", \"singles\", \"doubles\", \"triples\", \"reached_on_errors\", \"batting_outs\",\n] %}\n\n{{ batter_pitcher_park_factor(rate_stats, \"balls_in_play\", filter_exp=\"balls_in_play = 1\") }}", "language": "sql", "refs": [{"name": "game_start_info", "package": null, "version": null}, {"name": "event_offense_stats", "package": null, "version": null}, {"name": "event_states_full", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.baseball_computer.batter_pitcher_park_factor"], "nodes": ["model.baseball_computer.game_start_info", "model.baseball_computer.event_offense_stats", "model.baseball_computer.event_states_full"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "analysis.baseball_computer.unknown_play_no_box": {"database": "bc", "schema": "main_models", "name": "unknown_play_no_box", "resource_type": "analysis", "package_name": "baseball_computer", "path": "analysis/fielding_qa/unknown_play_no_box.sql", "original_file_path": "analyses/fielding_qa/unknown_play_no_box.sql", "unique_id": "analysis.baseball_computer.unknown_play_no_box", "fqn": ["baseball_computer", "analysis", "fielding_qa", "unknown_play_no_box"], "alias": "unknown_play_no_box", "checksum": {"name": "sha256", "checksum": "29377116ccbccd79217ecf31dae5684566f788eb9b9056561a065d814b65b0ab"}, "config": {"enabled": true, "alias": null, "schema": "models", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "models"}, "created_at": 1702281448.089942, "relation_name": null, "raw_code": "WITH t AS (\n    SELECT\n        game_id,\n        ANY_VALUE(substring(game_id, 4, 4)::INT) AS season,\n        SUM(unknown_putouts) AS unknown_putouts\n    FROM {{ ref('calc_fielding_play_agg') }}\n    WHERE game_id NOT IN (SELECT game_id FROM {{ ref('stg_box_score_fielding_lines') }})\n        --AND game_id IN (SELECT game_id FROM {{ ref('game_start_info') }} WHERE home_league IN ('NL', 'AL', 'FL'))\n    GROUP BY 1\n    HAVING SUM(unknown_putouts) > 0\n)\n\nSELECT     \n    t.*,\n    filename,\n    line_number,\n    scorer,\n    park_id,\n    scoring_method,\n    inputter,\n    translator,\n    date_inputted,\nFROM t\nINNER JOIN {{ ref('stg_games') }} USING (game_id)\nINNER JOIN {{ ref('stg_event_audit') }} a USING (game_id)\nWHERE a.event_id = 1\nORDER BY t.season, game_id", "language": "sql", "refs": [{"name": "calc_fielding_play_agg", "package": null, "version": null}, {"name": "stg_box_score_fielding_lines", "package": null, "version": null}, {"name": "game_start_info", "package": null, "version": null}, {"name": "stg_games", "package": null, "version": null}, {"name": "stg_event_audit", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.baseball_computer.calc_fielding_play_agg", "model.baseball_computer.stg_box_score_fielding_lines", "model.baseball_computer.game_start_info", "model.baseball_computer.stg_games", "model.baseball_computer.stg_event_audit"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "analysis.baseball_computer.unknown_plays": {"database": "bc", "schema": "main_models", "name": "unknown_plays", "resource_type": "analysis", "package_name": "baseball_computer", "path": "analysis/fielding_qa/unknown_plays.sql", "original_file_path": "analyses/fielding_qa/unknown_plays.sql", "unique_id": "analysis.baseball_computer.unknown_plays", "fqn": ["baseball_computer", "analysis", "fielding_qa", "unknown_plays"], "alias": "unknown_plays", "checksum": {"name": "sha256", "checksum": "01acafde6544b1ab7ad2038d4cb5795b5152bb109aa2f4bde3f13f081977ddc0"}, "config": {"enabled": true, "alias": null, "schema": "models", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "models"}, "created_at": 1702281448.0942478, "relation_name": null, "raw_code": "WITH t AS (\n    SELECT\n        game_id,\n        team_id,\n        SUM(putouts) AS total_putouts,\n        SUM(unknown_putouts) AS unknown_putouts\n    FROM {{ ref('event_fielding_stats') }}\n    GROUP BY 1, 2\n),\n\nteam_season_overall_coverage AS (\n    SELECT\n        t.*,\n        gt.team_side AS side,\n        SUM(total_putouts - unknown_putouts) OVER season_side / SUM(total_putouts) OVER season_side AS season_coverage_rate_by_side\n    FROM t \n    INNER JOIN {{ ref('stg_games') }} g USING (game_id)\n    INNER JOIN {{ ref('team_game_start_info') }} gt USING (game_id, team_id)\n    WINDOW season_side AS (PARTITION BY t.team_id, gt.team_side)\n),\n\nagg AS (\n    SELECT\n        game_id,\n        SUM(unknown_putouts) AS total_unknown_putouts,\n        ANY_VALUE(CASE WHEN side = 'Home' THEN season_coverage_rate_by_side END) AS coverage_rate_home,\n        ANY_VALUE(CASE WHEN side = 'Away' THEN season_coverage_rate_by_side END) AS coverage_rate_away,\n    FROM team_season_overall_coverage\n    GROUP BY 1\n    HAVING SUM(unknown_putouts) > 0\n)\n\nSELECT\n    season,\n    agg.*,\n    filename,\n    line_number,\n    scorer,\n    park_id,\n    scoring_method,\n    inputter,\n    translator,\n    date_inputted,\nFROM agg\nINNER JOIN {{ ref('stg_games') }} USING (game_id)\nINNER JOIN {{ ref('stg_event_audit') }} a USING (game_id)\nWHERE a.event_id = 1\n    AND filename NOT LIKE '%.EVR'\nORDER BY coverage_rate_home * coverage_rate_away DESC", "language": "sql", "refs": [{"name": "event_fielding_stats", "package": null, "version": null}, {"name": "stg_games", "package": null, "version": null}, {"name": "team_game_start_info", "package": null, "version": null}, {"name": "stg_games", "package": null, "version": null}, {"name": "stg_event_audit", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.baseball_computer.event_fielding_stats", "model.baseball_computer.stg_games", "model.baseball_computer.team_game_start_info", "model.baseball_computer.stg_event_audit"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "analysis.baseball_computer.putout_innings_gaps": {"database": "bc", "schema": "main_models", "name": "putout_innings_gaps", "resource_type": "analysis", "package_name": "baseball_computer", "path": "analysis/fielding_qa/putout_innings_gaps.sql", "original_file_path": "analyses/fielding_qa/putout_innings_gaps.sql", "unique_id": "analysis.baseball_computer.putout_innings_gaps", "fqn": ["baseball_computer", "analysis", "fielding_qa", "putout_innings_gaps"], "alias": "putout_innings_gaps", "checksum": {"name": "sha256", "checksum": "b3aacef3cf3db14d9702818dd68bea361283b1622f762bf89672eb4e8abaa275"}, "config": {"enabled": true, "alias": null, "schema": "models", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "models"}, "created_at": 1702281448.098363, "relation_name": null, "raw_code": "WITH event_based_putouts AS (\n    SELECT game_id, team_id, SUM(putouts) AS putouts\n    FROM {{ ref('event_fielding_stats') }}\n    GROUP BY 1, 2\n)\nSELECT game_id, team_id,\n    ROUND(innings_pitched * 3)::int AS ip_outs,\n    r.putouts,\n    e.putouts AS event_putouts,\n    ip_outs - r.putouts AS diff,\n    ip_outs - e.putouts AS event_based_diff\nFROM {{ ref('team_game_results') }} r\nLEFT JOIN event_based_putouts e USING (game_id, team_id)\nWHERE diff != 0\nORDER BY ABS(innings_pitched * 3 - r.putouts) DESC", "language": "sql", "refs": [{"name": "event_fielding_stats", "package": null, "version": null}, {"name": "team_game_results", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.baseball_computer.event_fielding_stats", "model.baseball_computer.team_game_results"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "analysis.baseball_computer.assists_as_putouts_finder": {"database": "bc", "schema": "main_models", "name": "assists_as_putouts_finder", "resource_type": "analysis", "package_name": "baseball_computer", "path": "analysis/fielding_qa/assists_as_putouts_finder.sql", "original_file_path": "analyses/fielding_qa/assists_as_putouts_finder.sql", "unique_id": "analysis.baseball_computer.assists_as_putouts_finder", "fqn": ["baseball_computer", "analysis", "fielding_qa", "assists_as_putouts_finder"], "alias": "assists_as_putouts_finder", "checksum": {"name": "sha256", "checksum": "66db14d903c8a5a7e743c03a9facda4a259339b7bc006aa28693217d8d36c4fe"}, "config": {"enabled": true, "alias": null, "schema": "models", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "models"}, "created_at": 1702281448.102017, "relation_name": null, "raw_code": "WITH game_info AS (\n    SELECT *\n    FROM {{ ref('game_start_info') }}\n),\n\nbasic_groundouts AS (\n    SELECT\n        event_key\n    FROM {{ ref('calc_fielding_play_agg') }}\n    GROUP BY 1\n    HAVING COUNT_IF(fielding_position = 3 and assisted_putouts = 1) = 1\n        AND SUM(assists) = 1\n        AND COUNT(*) = 2\n),\n\ne AS (\n    SELECT\n        e.game_id,\n        s.team_id,\n        COUNT_IF(\n            e.batted_to_fielder BETWEEN 1 AND 6\n            AND e.outs_on_play = 1\n            AND e.batted_trajectory = 'Unknown'\n            AND f.event_key IS NULL\n            AND s.putouts - s.assisted_putouts = 1\n            AND e.base_state % 2 = 0\n        ) AS no_force_unmarked_popups,\n        COUNT_IF(basic_groundouts.event_key IS NOT NULL) AS infield_conventional_groundouts,\n        GREATEST(2 * no_force_unmarked_popups - infield_conventional_groundouts, no_force_unmarked_popups) AS rating\n    FROM {{ ref('stg_events') }} e\n    INNER JOIN {{ ref('event_fielding_stats') }} s USING (event_key)\n    LEFT JOIN {{ ref('stg_event_flags') }} f USING (event_key)\n    LEFT JOIN basic_groundouts USING (event_key)\n    WHERE COALESCE(f.flag, 'Foul') = 'Foul'\n    GROUP BY 1, 2\n)\n\nSELECT\n    e.*,\n    filename,\n    line_number,\n    scorer,\n    park_id,\n    scoring_method,\n    inputter,\n    translator,\n    date_inputted,\nFROM e\nINNER JOIN {{ ref('stg_games') }} USING (game_id)\nINNER JOIN {{ ref('stg_event_audit') }} a USING (game_id)\nWHERE a.event_id = 1\n    AND no_force_unmarked_popups > 1\nORDER BY rating DESC, game_id", "language": "sql", "refs": [{"name": "game_start_info", "package": null, "version": null}, {"name": "calc_fielding_play_agg", "package": null, "version": null}, {"name": "stg_events", "package": null, "version": null}, {"name": "event_fielding_stats", "package": null, "version": null}, {"name": "stg_event_flags", "package": null, "version": null}, {"name": "stg_games", "package": null, "version": null}, {"name": "stg_event_audit", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.baseball_computer.game_start_info", "model.baseball_computer.calc_fielding_play_agg", "model.baseball_computer.stg_events", "model.baseball_computer.event_fielding_stats", "model.baseball_computer.stg_event_flags", "model.baseball_computer.stg_games", "model.baseball_computer.stg_event_audit"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "analysis.baseball_computer.box_event_fielding_discrepancies": {"database": "bc", "schema": "main_models", "name": "box_event_fielding_discrepancies", "resource_type": "analysis", "package_name": "baseball_computer", "path": "analysis/fielding_qa/box_event_fielding_discrepancies.sql", "original_file_path": "analyses/fielding_qa/box_event_fielding_discrepancies.sql", "unique_id": "analysis.baseball_computer.box_event_fielding_discrepancies", "fqn": ["baseball_computer", "analysis", "fielding_qa", "box_event_fielding_discrepancies"], "alias": "box_event_fielding_discrepancies", "checksum": {"name": "sha256", "checksum": "6690b10b06af3b1905bec07c5825a4f191c085ef5718a81bfdd76208dbe5be06"}, "config": {"enabled": true, "alias": null, "schema": "models", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "models"}, "created_at": 1702281448.1065211, "relation_name": null, "raw_code": "WITH incomplete_games AS (\n    SELECT game_id,\n        SUM(unknown_putouts) AS unknown_putouts\n    FROM {{ ref('event_fielding_stats') }}\n    WHERE unknown_putouts > 0\n    GROUP BY 1\n),\n\nt AS (\n    SELECT game_id,\n        team_id,\n        SUM(ABS(CASE WHEN i.game_id IS NOT NULL\n                    THEN LEAST(surplus_box_putouts, 0)\n                ELSE surplus_box_putouts\n            END\n        )) AS putout_discrepancy,\n        SUM(ABS(CASE WHEN i.game_id IS NOT NULL\n                    THEN LEAST(surplus_box_assists, 0)\n                ELSE surplus_box_assists\n            END\n        )) AS assist_discrepancy,\n        SUM(ABS(surplus_box_errors)) AS error_discrepancy,\n        putout_discrepancy + assist_discrepancy + error_discrepancy AS total,\n        ANY_VALUE(COALESCE(i.unknown_putouts, 0)) AS unknown_putouts\n    FROM {{ ref('player_position_game_fielding_stats') }}\n    LEFT JOIN incomplete_games i USING (game_id)\n    GROUP BY 1, 2\n    HAVING total > 0\n)\n\nSELECT t.*,\n    filename,\n    line_number,\n    scorer,\n    park_id,\n    scoring_method,\n    inputter,\n    translator,\n    date_inputted\nFROM t\nINNER JOIN {{ ref('stg_games') }} AS g USING (game_id)\nINNER JOIN {{ ref('stg_event_audit') }} AS e USING (game_id)\nWHERE e.event_id = 1\nORDER BY total DESC", "language": "sql", "refs": [{"name": "event_fielding_stats", "package": null, "version": null}, {"name": "player_position_game_fielding_stats", "package": null, "version": null}, {"name": "stg_games", "package": null, "version": null}, {"name": "stg_event_audit", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.baseball_computer.event_fielding_stats", "model.baseball_computer.player_position_game_fielding_stats", "model.baseball_computer.stg_games", "model.baseball_computer.stg_event_audit"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "analysis.baseball_computer.scorekeeper_tendencies_location": {"database": "bc", "schema": "main_models", "name": "scorekeeper_tendencies_location", "resource_type": "analysis", "package_name": "baseball_computer", "path": "analysis/scorekeepers/scorekeeper_tendencies_location.sql", "original_file_path": "analyses/scorekeepers/scorekeeper_tendencies_location.sql", "unique_id": "analysis.baseball_computer.scorekeeper_tendencies_location", "fqn": ["baseball_computer", "analysis", "scorekeepers", "scorekeeper_tendencies_location"], "alias": "scorekeeper_tendencies_location", "checksum": {"name": "sha256", "checksum": "f9fa7eb6dcb60858a8562a3e9b01e9392e5327db6f30d6c0c06f72e2d3c49d4c"}, "config": {"enabled": true, "alias": null, "schema": "models", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "models"}, "created_at": 1702281448.112013, "relation_name": null, "raw_code": "WITH final AS (\n    SELECT\n        cleaned_scorer || COALESCE(inputter, '') || COALESCE(translator, '') AS scorer,\n        substring(game_id, 4, 4)::int // 10 * 10 AS decade,\n        SUM(game_share) AS plays,\n        SUM(batted_location_known * hits) AS hits_location_known,\n        SUM(batted_location_unknown * hits) AS hits_location_unknown,\n        hits_location_known / SUM(hits) AS location_known_hit_rate,\n        SUM(batted_distance_infield * hits)/hits_location_known AS hits_location_infield_rate,\n        SUM(batted_distance_outfield * hits)/hits_location_known AS hits_location_outfield_rate,\n        SUM(singles * batted_location_known) / SUM(singles) AS location_known_single_rate,\n        SUM(doubles * batted_location_known) / SUM(doubles) AS location_known_double_rate,\n        SUM(triples * batted_location_known) / SUM(triples) AS location_known_triple_rate,\n        SUM((li.win_leverage_index > 1)::int * batted_location_known * hits) / SUM((li.win_leverage_index > 1)::int * hits) AS location_known_high_leverage_rate,\n        SUM((e.runs_on_play >= 1)::int * batted_location_known * hits) / SUM((e.runs_on_play >= 1)::int * hits) AS location_known_run_scoring_play_rate,\n        SUM((e.base_state > 0)::int * batted_location_known * hits) / SUM((e.base_state > 0)::int * hits) AS location_known_runners_on_base_rate,\n        SUM(batted_location_left_infield * hits) / SUM(batted_distance_infield * hits) AS known_location_share_left_infield,\n        SUM(batted_location_middle_infield * hits) / SUM(batted_distance_infield * hits) AS known_location_share_middle_infield,\n        SUM(batted_location_right_infield * hits) / SUM(batted_distance_infield * hits) AS known_location_share_right_infield,\n        SUM(batted_location_left_field * hits) / SUM(batted_distance_outfield * hits) AS known_location_share_left_field,\n        SUM(batted_location_center_field * hits) / SUM(batted_distance_outfield * hits) AS known_location_share_center_field,\n        SUM(batted_location_right_field * hits) / SUM(batted_distance_outfield * hits) AS known_location_share_right_field,\n        SUM((batted_to_fielder = 7)::int * hits) / SUM(fielded_by_outfielder * hits) AS known_fielded_by_left_fielder_rate,\n        SUM((batted_to_fielder = 8)::int * hits) / SUM(fielded_by_outfielder * hits) AS known_fielded_by_center_fielder_rate,\n        SUM((batted_to_fielder = 9)::int * hits) / SUM(fielded_by_outfielder * hits) AS known_fielded_by_right_fielder_rate,\n        SUM(trajectory_ground_ball * batted_location_known * fielded_by_outfielder * hits) / SUM(trajectory_broad_known * batted_location_known * fielded_by_outfielder * hits) AS outfield_hit_ground_ball_rate,\n        SUM(batted_balls_pulled * batted_location_known * hits) / SUM(batted_location_known * hits) AS known_location_pulled_rate,\n        SUM(batted_balls_opposite_field * batted_location_known * hits) / SUM(batted_location_known * hits) AS known_location_opposite_field_rate,\n        SUM(batted_distance_outfield * fielded_by_unknown * hits) / SUM(batted_distance_known * fielded_by_unknown * hits) AS unknown_fielder_hit_in_outfield_rate,\n    FROM {{ ref('event_offense_stats') }} s\n    LEFT JOIN {{ ref('game_scorekeeping') }} k USING (game_id)\n    INNER JOIN {{ ref('event_states_full') }} f USING (event_key)\n    LEFT JOIN {{ ref('stg_events') }} AS e USING (event_key)\n    LEFT JOIN {{ ref('leverage_index') }} li USING (win_expectancy_start_key)\n    WHERE balls_in_play = 1\n    GROUP BY 1, 2\n)\n\nSELECT location_known_hit_rate * hits_location_outfield_rate AS r, * FROM final\nWHERE hits_location_known > 50", "language": "sql", "refs": [{"name": "event_offense_stats", "package": null, "version": null}, {"name": "game_scorekeeping", "package": null, "version": null}, {"name": "event_states_full", "package": null, "version": null}, {"name": "stg_events", "package": null, "version": null}, {"name": "leverage_index", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.baseball_computer.event_offense_stats", "model.baseball_computer.game_scorekeeping", "model.baseball_computer.event_states_full", "model.baseball_computer.stg_events", "model.baseball_computer.leverage_index"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "analysis.baseball_computer.scorekeeper_tendencies_batter": {"database": "bc", "schema": "main_models", "name": "scorekeeper_tendencies_batter", "resource_type": "analysis", "package_name": "baseball_computer", "path": "analysis/scorekeepers/scorekeeper_tendencies_batter.sql", "original_file_path": "analyses/scorekeepers/scorekeeper_tendencies_batter.sql", "unique_id": "analysis.baseball_computer.scorekeeper_tendencies_batter", "fqn": ["baseball_computer", "analysis", "scorekeepers", "scorekeeper_tendencies_batter"], "alias": "scorekeeper_tendencies_batter", "checksum": {"name": "sha256", "checksum": "5ae0a1ae6a109e82171f01c2029d0771335663b8eb85a5502a5c4e2b399809be"}, "config": {"enabled": true, "alias": null, "schema": "models", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "models"}, "created_at": 1702281448.116336, "relation_name": null, "raw_code": "WITH overall_rates AS (\n    SELECT\n        substring(game_id, 4, 4)::int AS season,\n        team_id,\n        COUNT(*) AS total_singles,\n        COUNT_IF(batted_location_known)/total_singles AS total_singles_location_rate,\n        COUNT_IF(trajectory_broad_known)/total_singles AS total_singles_trajectory_rate,\n        COUNT_IF(trajectory_ground_ball)/COUNT_IF(trajectory_broad_known) AS total_ground_ball_rate,\n        COUNT_IF(trajectory_line_drive)/COUNT_IF(trajectory_broad_air_ball) AS total_line_drive_rate,\n    FROM {{ ref('event_offense_stats') }} e\n    WHERE singles = 1\n        AND bunts = 0\n    AND season < 2003\n    GROUP BY 1, 2\n),\n\nfinal AS (\n    SELECT\n        season,\n        player_id,\n        o.team_id,\n        COUNT(*) AS hits_in_play,\n        COUNT_IF(batted_location_known)/hits_in_play AS hits_location_rate,\n        COUNT_IF(trajectory_broad_known)/hits_in_play AS hits_trajectory_rate,\n        COUNT_IF(trajectory_ground_ball)/COUNT_IF(trajectory_broad_known) AS ground_ball_rate,\n        COUNT_IF(trajectory_line_drive)/COUNT_IF(trajectory_broad_air_ball) AS line_drive_rate,\n        hits_location_rate - ANY_VALUE(total_singles_location_rate) AS location_rate_diff,\n        hits_trajectory_rate - ANY_VALUE(total_singles_trajectory_rate) AS trajectory_rate_diff,\n        ground_ball_rate - ANY_VALUE(total_ground_ball_rate) AS ground_ball_rate_diff,\n        line_drive_rate - ANY_VALUE(total_line_drive_rate) AS line_drive_rate_diff\n    FROM {{ ref('event_offense_stats') }} e\n    INNER JOIN overall_rates o\n        ON o.season = substring(e.game_id, 4, 4)::int\n        AND o.team_id = e.team_id\n    WHERE balls_in_play = 1\n        AND singles = 1\n        AND bunts = 0\n    GROUP BY 1, 2, 3\n)\n\nSELECT * FROM final\nWHERE player_id LIKE 'youne%'", "language": "sql", "refs": [{"name": "event_offense_stats", "package": null, "version": null}, {"name": "event_offense_stats", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.baseball_computer.event_offense_stats"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "analysis.baseball_computer.scorekeeper_tendencies_contact": {"database": "bc", "schema": "main_models", "name": "scorekeeper_tendencies_contact", "resource_type": "analysis", "package_name": "baseball_computer", "path": "analysis/scorekeepers/scorekeeper_tendencies_contact.sql", "original_file_path": "analyses/scorekeepers/scorekeeper_tendencies_contact.sql", "unique_id": "analysis.baseball_computer.scorekeeper_tendencies_contact", "fqn": ["baseball_computer", "analysis", "scorekeepers", "scorekeeper_tendencies_contact"], "alias": "scorekeeper_tendencies_contact", "checksum": {"name": "sha256", "checksum": "3afb6e087121df8582133aaca2537cd233b79c87c2525098b9a707ddc8e0e9c3"}, "config": {"enabled": true, "alias": null, "schema": "models", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "models"}, "created_at": 1702281448.120109, "relation_name": null, "raw_code": "WITH final AS (\n    SELECT\n        cleaned_scorer AS scorer,\n        substring(game_id, 4, 4)::int // 10 * 10 AS decade,\n        SUM(hits) AS n,\n        SUM(trajectory_broad_known * hits) AS hits_trajectory_known,\n        SUM(trajectory_broad_unknown * hits) AS hits_trajectory_unknown,\n        hits_trajectory_known / COUNT_IF(hits) AS trajectory_known_hit_rate,\n        SUM((scorer_more_common_team_id = batting_team_id)::int * trajectory_broad_known * hits) / SUM((scorer_more_common_team_id = batting_team_id)::int * hits) AS trajectory_known_affiliated_team_hit_rate,\n        SUM((scorer_more_common_team_id != batting_team_id)::int * trajectory_broad_known * hits) / SUM((scorer_more_common_team_id != batting_team_id)::int * hits) AS trajectory_known_opposing_team_hit_rate,\n        SUM(singles * trajectory_broad_known) / SUM(singles) AS trajectory_known_single_rate,\n        SUM(doubles * trajectory_broad_known) / SUM(doubles) AS trajectory_known_double_rate,\n        SUM(triples * trajectory_broad_known) / SUM(triples) AS trajectory_known_triple_rate,\n        SUM(trajectory_ground_ball * hits * balls_in_play) / SUM(trajectory_broad_known * hits * balls_in_play) AS hit_ground_ball_rate,\n        SUM(trajectory_ground_ball * (1 - hits)) / SUM(trajectory_broad_known * (1 - hits)) AS out_ground_ball_rate,\n        SUM(trajectory_line_drive * hits * balls_in_play) / SUM(trajectory_broad_air_ball * hits * balls_in_play) AS air_hit_line_drive_rate,\n        SUM(trajectory_line_drive * (1 - hits)) / SUM(trajectory_broad_air_ball * (1 - hits)) AS air_out_line_drive_rate,\n        SUM(trajectory_pop_up * hits) / SUM(trajectory_broad_air_ball * hits) AS air_hit_popup_rate,\n        SUM(trajectory_pop_up * (1 - hits)) / SUM(trajectory_broad_air_ball * (1 - hits)) AS air_out_popup_rate,\n        SUM(CASE WHEN batted_trajectory = 'Fly' THEN 1 ELSE 0 END * hits * balls_in_play) / SUM(trajectory_broad_air_ball * hits * balls_in_play) AS air_hit_explicit_fly_rate,\n        SUM(CASE WHEN batted_trajectory = 'Fly' THEN 1 ELSE 0 END * (1 - hits)) / SUM(trajectory_broad_air_ball * (1 - hits)) AS air_out_explicit_fly_rate,\n        SUM(home_runs * trajectory_line_drive) / SUM(home_runs) AS home_run_line_drive_rate,\n    FROM {{ ref('event_offense_stats') }} s\n    LEFT JOIN {{ ref('stg_events') }} AS e USING (game_id, event_key)\n    LEFT JOIN {{ ref('game_scorekeeping') }} k USING (game_id)\n    WHERE balls_batted = 1\n    GROUP BY 1, 2\n)\n\nSELECT * FROM final", "language": "sql", "refs": [{"name": "event_offense_stats", "package": null, "version": null}, {"name": "stg_events", "package": null, "version": null}, {"name": "game_scorekeeping", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.baseball_computer.event_offense_stats", "model.baseball_computer.stg_events", "model.baseball_computer.game_scorekeeping"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "analysis.baseball_computer.most_blown_save_rbi": {"database": "bc", "schema": "main_models", "name": "most_blown_save_rbi", "resource_type": "analysis", "package_name": "baseball_computer", "path": "analysis/trivia/most_blown_save_rbi.sql", "original_file_path": "analyses/trivia/most_blown_save_rbi.sql", "unique_id": "analysis.baseball_computer.most_blown_save_rbi", "fqn": ["baseball_computer", "analysis", "trivia", "most_blown_save_rbi"], "alias": "most_blown_save_rbi", "checksum": {"name": "sha256", "checksum": "6582135d46206dffbe3eb8e7cd3442ac6bba93554f6758d73023c3113b495c23"}, "config": {"enabled": true, "alias": null, "schema": "models", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "models"}, "created_at": 1702281448.124054, "relation_name": null, "raw_code": "SELECT  \n    o.player_id,\n    COUNT(*)\nFROM {{ ref('event_offense_stats') }} AS o\nWHERE runs_batted_in > 0\n    AND event_key IN (SELECT event_key FROM {{ ref('event_pitching_flags') }} WHERE blown_save_flag)\nGROUP BY 1", "language": "sql", "refs": [{"name": "event_offense_stats", "package": null, "version": null}, {"name": "event_pitching_flags", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.baseball_computer.event_offense_stats", "model.baseball_computer.event_pitching_flags"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "analysis.baseball_computer.event_completeness_fielding_credit": {"database": "bc", "schema": "main_models", "name": "event_completeness_fielding_credit", "resource_type": "analysis", "package_name": "baseball_computer", "path": "analysis/completeness/event_completeness_fielding_credit.sql", "original_file_path": "analyses/completeness/event_completeness_fielding_credit.sql", "unique_id": "analysis.baseball_computer.event_completeness_fielding_credit", "fqn": ["baseball_computer", "analysis", "completeness", "event_completeness_fielding_credit"], "alias": "event_completeness_fielding_credit", "checksum": {"name": "sha256", "checksum": "642445f0a36ad48f81907830fd5f68c1740dcdaaf14f57052799b12ce3129a59"}, "config": {"enabled": true, "alias": null, "schema": "models", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "models"}, "created_at": 1702281448.127668, "relation_name": null, "raw_code": "WITH fielding_play_agg AS (\n    SELECT\n        event_key,\n        NOT BOOL_OR(\n            fielding_position = 0 AND fielding_play = 'Putout'\n        ) AS has_fielder_putouts,\n        NOT BOOL_OR(\n            -- Some assists are explicitly recorded as Unknown, but if the putout is unknown\n            -- then assists are usually missing entirely\n            fielding_position = 0 AND fielding_play IN ('Putout', 'Assist')\n        ) AS has_fielder_assists,\n        -- As of now we always have the fielder for an error, but just in case\n        NOT BOOL_OR(\n            fielding_position = 0 AND fielding_play = 'Error'\n        ) AS has_fielder_errors\n    FROM {{ ref('stg_event_fielding_plays') }}\n    GROUP BY 1\n),\n\nfinal AS (\n    SELECT\n        event_key,\n        -- Fielding data may only be present for some plate appearances\n        -- and its absence doesn't indicate missing data\n        COALESCE(fpa.has_fielder_putouts, TRUE) AS has_fielder_putouts,\n        COALESCE(fpa.has_fielder_assists, TRUE) AS has_fielder_assists,\n        COALESCE(fpa.has_fielder_errors, TRUE) AS has_fielder_errors\n    FROM fielding_play_agg AS fpa\n    FULL OUTER JOIN {{ ref('stg_events') }} USING (event_key)\n    WHERE plate_appearance_result IS NOT NULL\n)\n\nSELECT * FROM final", "language": "sql", "refs": [{"name": "stg_event_fielding_plays", "package": null, "version": null}, {"name": "stg_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.baseball_computer.stg_event_fielding_plays", "model.baseball_computer.stg_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "analysis.baseball_computer.player_game_data_completeness": {"database": "bc", "schema": "main_models", "name": "player_game_data_completeness", "resource_type": "analysis", "package_name": "baseball_computer", "path": "analysis/completeness/player_game_data_completeness.sql", "original_file_path": "analyses/completeness/player_game_data_completeness.sql", "unique_id": "analysis.baseball_computer.player_game_data_completeness", "fqn": ["baseball_computer", "analysis", "completeness", "player_game_data_completeness"], "alias": "player_game_data_completeness", "checksum": {"name": "sha256", "checksum": "f1361cd721a8daf8c643e057e2a028ef5fd9dc2d00738088149ec2a24d4e16ea"}, "config": {"enabled": true, "alias": null, "schema": "models", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "models"}, "created_at": 1702281448.13147, "relation_name": null, "raw_code": "{{\n  config(\n    materialized = 'table',\n    )\n}}\nWITH events AS (\n    SELECT\n        *,\n        'BATTING' AS player_type\n    FROM {{ ref('stg_events') }}\n    UNION ALL\n    SELECT\n        *,\n        'PITCHING' AS player_type\n    FROM {{ ref('stg_events') }}\n),\n\nbatted_balls AS (\n    SELECT\n        events.game_id,\n        events.player_type,\n        CASE WHEN events.player_type = 'BATTING' THEN batter_id ELSE pitcher_id END AS player_id,\n        ANY_VALUE(CASE WHEN events.player_type = 'BATTING' THEN batting_team_id ELSE fielding_team_id END) AS team_id,\n        COALESCE(BOOL_AND(bb.trajectory != 'Unknown'), TRUE) AS has_trajectory,\n        COALESCE(BOOL_AND(bb.recorded_location != 'Unknown'), TRUE) AS has_scoresheet_location,\n        COALESCE(BOOL_AND(bb.location_side != 'Unknown'), TRUE) AS has_location,\n        COALESCE(BOOL_AND(bb.batted_to_fielder != 0 OR NOT rt.is_in_play), TRUE) AS has_batted_to_fielder,\n    FROM events\n    LEFT JOIN {{ ref('calc_batted_ball_type') }} AS bb USING (event_key)\n    LEFT JOIN {{ ref('seed_plate_appearance_result_types') }} AS rt\n        ON rt.plate_appearance_result = events.plate_appearance_result\n    GROUP BY 1, 2, 3\n),\n\npitches AS (\n    SELECT\n        events.game_id,\n        events.player_type,\n        CASE WHEN player_type = 'BATTING' THEN batter_id ELSE pitcher_id END AS player_id,\n        ANY_VALUE(CASE WHEN player_type = 'BATTING' THEN batting_team_id ELSE fielding_team_id END) AS team_id,\n        BOOL_AND(p.has_count_balls) AS has_count_balls,\n        BOOL_AND(p.has_count_strikes) AS has_count_strikes,\n        BOOL_AND(p.has_count) AS has_count,\n        BOOL_AND(p.has_pitches) AS has_pitches,\n        BOOL_AND(p.has_pitch_results) AS has_pitch_results,\n        BOOL_AND(p.has_strike_types) AS has_pitch_strike_types,\n    FROM events\n    {# LEFT JOIN {{ ref('event_completeness_pitches') }} AS p USING (event_key) #}\n    GROUP BY 1, 2, 3\n),\n\n-- TODO: Add fielding credit by comparing event-based totals to box totals\njoined AS (\n    SELECT\n        game_id,\n        player_id,\n        player_type,\n        game_start_info.season,\n        game_start_info.date,\n        game_start_info.home_league AS league,\n        COALESCE(batted_balls.has_trajectory, FALSE) AS has_trajectory,\n        COALESCE(batted_balls.has_scoresheet_location, FALSE) AS has_scoresheet_location,\n        COALESCE(batted_balls.has_location, FALSE) AS has_location,\n        COALESCE(batted_balls.has_batted_to_fielder, FALSE) AS has_batted_to_fielder,\n        COALESCE(pitches.has_count_balls, FALSE) AS has_count_balls,\n        COALESCE(pitches.has_count_strikes, FALSE) AS has_count_strikes,\n        COALESCE(pitches.has_count, FALSE) AS has_count,\n        COALESCE(pitches.has_pitches, FALSE) AS has_pitches,\n        COALESCE(pitches.has_pitch_results, FALSE) AS has_pitch_results,\n        COALESCE(pitches.has_pitch_strike_types, FALSE) AS has_pitch_strike_types\n    FROM {{ ref('game_start_info') }} AS game_start_info\n    FULL OUTER JOIN batted_balls USING (game_id)\n    FULL OUTER JOIN pitches USING (game_id, player_type, player_id)\n    WHERE player_id IS NOT NULL\n)\n\nSELECT * FROM joined", "language": "sql", "refs": [{"name": "stg_events", "package": null, "version": null}, {"name": "stg_events", "package": null, "version": null}, {"name": "calc_batted_ball_type", "package": null, "version": null}, {"name": "seed_plate_appearance_result_types", "package": null, "version": null}, {"name": "game_start_info", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.baseball_computer.stg_events", "model.baseball_computer.calc_batted_ball_type", "seed.baseball_computer.seed_plate_appearance_result_types", "model.baseball_computer.game_start_info"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "analysis.baseball_computer.event_completeness_batted_balls": {"database": "bc", "schema": "main_models", "name": "event_completeness_batted_balls", "resource_type": "analysis", "package_name": "baseball_computer", "path": "analysis/completeness/event_completeness_batted_balls.sql", "original_file_path": "analyses/completeness/event_completeness_batted_balls.sql", "unique_id": "analysis.baseball_computer.event_completeness_batted_balls", "fqn": ["baseball_computer", "analysis", "completeness", "event_completeness_batted_balls"], "alias": "event_completeness_batted_balls", "checksum": {"name": "sha256", "checksum": "1d287bb2b278e7c4afbecf5f5a656c520fd90f975a128d0a9c4cc7a1fb262262"}, "config": {"enabled": true, "alias": null, "schema": "models", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "models"}, "created_at": 1702281448.135936, "relation_name": null, "raw_code": "WITH final AS (\n    SELECT\n        event_key,\n        COALESCE(e.batted_trajectory != 'Unknown', FALSE) AS has_trajectory,\n        COALESCE(e.batted_location_general != 'Unknown', FALSE) AS has_general_location,\n        -- To avoid false negatives, we'll say that a fielder is present regardless\n        -- if it's a ground-rule double or home run where there is location info\n        COALESCE(\n            e.batted_to_fielder != 0 OR (NOT rt.is_in_play AND has_general_location),\n            FALSE\n        ) AS has_batted_to_fielder,\n        has_batted_to_fielder OR has_general_location AS has_any_location,\n        -- Coverage of the fields below can't be determined at an event granularity, so\n        -- the false negative issue above isn't a concern. Coverage should be inferred\n        -- by having at least ~1 predicate-satisfying event over the course of\n        -- a game or another appropriate sample.\n        COALESCE(e.batted_location_depth != 'Default', FALSE) AS has_depth,\n        COALESCE(e.batted_location_depth = 'ExtraDeep', FALSE) AS has_extra_deep_depth,\n        COALESCE(e.batted_location_angle != 'Default', FALSE) AS has_angle,\n        COALESCE(e.batted_location_angle = 'Foul', FALSE) AS has_foul_angle,\n\n        COALESCE(e.batted_contact_strength != 'Default', FALSE) AS has_strength,\n        COALESCE(lt.is_mid_position, FALSE) AS has_mid_position,\n        COALESCE(\n            ct.broad_classification = 'GroundBall' AND e.batted_location_general IS NOT NULL,\n            FALSE\n        ) AS has_general_location_groundball,\n        COALESCE(\n            ct.broad_classification = 'AirBall' AND e.batted_location_general IS NOT NULL,\n            FALSE\n        ) AS has_general_location_airball,\n        COALESCE(\n            ct.broad_classification = 'GroundBall' AND lt.is_mid_position,\n            FALSE\n        ) AS has_mid_position_groundball,\n        COALESCE(\n            ct.broad_classification = 'AirBall' AND lt.is_mid_position,\n            FALSE\n        ) AS has_mid_position_airball,\n        COALESCE(\n            ct.broad_classification = 'GroundBall' AND e.batted_location_depth != 'Default',\n            FALSE\n        ) AS has_depth_groundball,\n        COALESCE(\n            ct.broad_classification = 'AirBall' AND e.batted_location_depth != 'Default',\n            FALSE\n        ) AS has_depth_airball,\n        COALESCE(\n            ct.broad_classification = 'GroundBall' AND e.batted_location_angle != 'Default',\n            FALSE\n        ) AS has_angle_groundball,\n        COALESCE(\n            ct.broad_classification = 'AirBall' AND e.batted_location_angle != 'Default',\n            FALSE\n        ) AS has_angle_airball,\n        COALESCE(\n            ct.broad_classification = 'GroundBall' AND e.batted_contact_strength != 'Default',\n            FALSE\n        ) AS has_strength_groundball,\n        COALESCE(\n            ct.broad_classification = 'AirBall' AND e.batted_contact_strength != 'Default',\n            FALSE\n        ) AS has_strength_airball,\n        -- Based on the location diagram, any outside-the-park home run\n        -- from left-center to right-center should be Deep or ExtraDeep in almost any park.\n        -- A default (or shallow) batted_location_depth is a strong indicator\n        -- that the batted_location_depth info is partially or entirely missing from the sample.\n        (\n            plate_appearance_result = 'HomeRun'\n            AND lt.category_edge = 'Middle'\n            AND e.batted_location_depth NOT LIKE '%Deep'\n        ) AS has_misclassified_home_run_distance,\n    FROM {{ ref('stg_events') }} e\n    INNER JOIN {{ ref('seed_plate_appearance_result_types') }} AS rt USING (plate_appearance_result)\n    LEFT JOIN {{ ref('seed_hit_location_categories') }} AS lt USING (batted_location_general)\n    LEFT JOIN {{ ref('seed_plate_appearance_trajectories') }} AS ct USING (batted_trajectory)\n)\n\nSELECT * FROM final", "language": "sql", "refs": [{"name": "stg_events", "package": null, "version": null}, {"name": "seed_plate_appearance_result_types", "package": null, "version": null}, {"name": "seed_hit_location_categories", "package": null, "version": null}, {"name": "seed_plate_appearance_trajectories", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.baseball_computer.stg_events", "seed.baseball_computer.seed_plate_appearance_result_types", "seed.baseball_computer.seed_hit_location_categories", "seed.baseball_computer.seed_plate_appearance_trajectories"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "analysis.baseball_computer.game_data_completeness": {"database": "bc", "schema": "main_models", "name": "game_data_completeness", "resource_type": "analysis", "package_name": "baseball_computer", "path": "analysis/completeness/game_data_completeness.sql", "original_file_path": "analyses/completeness/game_data_completeness.sql", "unique_id": "analysis.baseball_computer.game_data_completeness", "fqn": ["baseball_computer", "analysis", "completeness", "game_data_completeness"], "alias": "game_data_completeness", "checksum": {"name": "sha256", "checksum": "1ecf3b8a0ee89931ac328f1477c2ee49e09eaff547bd2645cb1d91210684986a"}, "config": {"enabled": true, "alias": null, "schema": "models", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "models"}, "created_at": 1702281448.1401799, "relation_name": null, "raw_code": "WITH batted_balls AS (\n    SELECT\n        bb.game_id,\n        BOOL_AND(bb.trajectory != 'Unknown') AS has_trajectory,\n        BOOL_AND(bb.location_side != 'Unknown') AS has_location,\n        BOOL_AND(bb.batted_to_fielder != 0 OR NOT rt.is_in_play) AS has_batted_to_fielder,\n    FROM {{ ref('calc_batted_ball_type') }} AS bb\n    LEFT JOIN {{ ref('seed_plate_appearance_result_types') }} AS rt USING (plate_appearance_result)\n    GROUP BY 1\n),\n\nfielding_credit AS (\n    SELECT\n        events.game_id,\n        BOOL_AND(fc.has_fielder_putouts) AS has_fielder_putouts,\n        BOOL_AND(fc.has_fielder_assists) AS has_fielder_assists,\n        BOOL_AND(fc.has_fielder_errors) AS has_fielder_errors,\n    FROM {{ ref('stg_events') }} AS events\n    {# LEFT JOIN {{ ref('event_completeness_fielding_credit') }} AS fc USING (event_key) #}\n    GROUP BY 1\n),\n\npitches AS (\n    SELECT\n        events.game_id,\n        BOOL_AND(p.has_count_balls) AS has_count_balls,\n        BOOL_AND(p.has_count_strikes) AS has_count_strikes,\n        BOOL_AND(p.has_count) AS has_count,\n        BOOL_AND(p.has_pitches) AS has_pitches,\n        BOOL_AND(p.has_pitch_results) AS has_pitch_results,\n        BOOL_AND(p.has_strike_types) AS has_pitch_strike_types,\n    FROM {{ ref('stg_events') }} AS events\n    {# LEFT JOIN {{ ref('event_completeness_pitches') }} AS p USING (event_key) #}\n    GROUP BY 1\n),\n\njoined AS (\n    SELECT\n        game_id,\n        game_start_info.season,\n        game_start_info.date,\n        game_start_info.home_league AS league,\n        game_start_info.source_type = 'PlayByPlay' AS has_play_by_play,\n        game_start_info.source_type IN ('Event', 'BoxScore') AS has_box_score,\n        COALESCE(batted_balls.has_trajectory, FALSE) AS has_trajectory,\n        COALESCE(batted_balls.has_location, FALSE) AS has_location,\n        COALESCE(batted_balls.has_batted_to_fielder, FALSE) AS has_batted_to_fielder,\n        COALESCE(fielding_credit.has_fielder_putouts, FALSE) AS has_fielder_putouts,\n        COALESCE(fielding_credit.has_fielder_assists, FALSE) AS has_fielder_assists,\n        COALESCE(fielding_credit.has_fielder_errors, FALSE) AS has_fielder_errors,\n        COALESCE(pitches.has_count_balls, FALSE) AS has_count_balls,\n        COALESCE(pitches.has_count_strikes, FALSE) AS has_count_strikes,\n        COALESCE(pitches.has_count, FALSE) AS has_count,\n        COALESCE(pitches.has_pitches, FALSE) AS has_pitches,\n        COALESCE(pitches.has_pitch_results, FALSE) AS has_pitch_results,\n        COALESCE(pitches.has_pitch_strike_types, FALSE) AS has_pitch_strike_types\n    FROM {{ ref('game_start_info') }} AS game_start_info\n    LEFT JOIN batted_balls USING (game_id)\n    LEFT JOIN fielding_credit USING (game_id)\n    LEFT JOIN pitches USING (game_id)\n)\n\nSELECT * FROM joined", "language": "sql", "refs": [{"name": "calc_batted_ball_type", "package": null, "version": null}, {"name": "seed_plate_appearance_result_types", "package": null, "version": null}, {"name": "stg_events", "package": null, "version": null}, {"name": "stg_events", "package": null, "version": null}, {"name": "game_start_info", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.baseball_computer.calc_batted_ball_type", "seed.baseball_computer.seed_plate_appearance_result_types", "model.baseball_computer.stg_events", "model.baseball_computer.game_start_info"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "analysis.baseball_computer.event_completeness_pitches": {"database": "bc", "schema": "main_models", "name": "event_completeness_pitches", "resource_type": "analysis", "package_name": "baseball_computer", "path": "analysis/completeness/event_completeness_pitches.sql", "original_file_path": "analyses/completeness/event_completeness_pitches.sql", "unique_id": "analysis.baseball_computer.event_completeness_pitches", "fqn": ["baseball_computer", "analysis", "completeness", "event_completeness_pitches"], "alias": "event_completeness_pitches", "checksum": {"name": "sha256", "checksum": "287b6e9357e4cfbe580bc2de1c18abeef750c3fd017482ae90c2e1a9a30b4e0e"}, "config": {"enabled": true, "alias": null, "schema": "models", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "models"}, "created_at": 1702281448.144531, "relation_name": null, "raw_code": "WITH counts AS (\n    SELECT\n        event_key,\n        plate_appearance_result IS NOT NULL AS has_plate_appearance,\n        count_balls IS NOT NULL AS has_count_balls,\n        count_strikes IS NOT NULL AS has_count_strikes,\n        count_balls + count_strikes IS NOT NULL AS has_count\n    FROM {{ ref('stg_events') }}\n    -- We don't use baserunning-only plays as criteria\n    -- for determining whether pitch data is missing,\n    -- as it is neither necessary nor sufficient for complete data.\n),\n\npitch_agg AS (\n    SELECT\n        ps.event_key,\n        BOOL_AND(spt.category != 'Unknown') AS has_pitch_results,\n        BOOL_AND(\n            spt.category != 'Unknown' AND spt.sequence_item != 'StrikeUnknownType'\n        ) AS has_strike_types\n    FROM {{ ref('stg_event_pitch_sequences') }} AS ps\n    INNER JOIN {{ ref('seed_pitch_types') }} AS spt USING (sequence_item)\n    WHERE spt.is_pitch\n    GROUP BY 1\n),\n\nfinal AS (\n    SELECT\n        event_key,\n        counts.has_count_balls,\n        counts.has_count_strikes,\n        counts.has_count,\n        COALESCE(pitch_agg.event_key IS NOT NULL) AS has_pitches,\n        COALESCE(pitch_agg.has_pitch_results, FALSE) AS has_pitch_results,\n        COALESCE(pitch_agg.has_strike_types, FALSE) AS has_strike_types\n    FROM counts\n    LEFT JOIN pitch_agg USING (event_key)\n    WHERE counts.has_plate_appearance\n        OR pitch_agg.event_key IS NOT NULL\n)\n\nSELECT * FROM final", "language": "sql", "refs": [{"name": "stg_events", "package": null, "version": null}, {"name": "stg_event_pitch_sequences", "package": null, "version": null}, {"name": "seed_pitch_types", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.baseball_computer.stg_events", "model.baseball_computer.stg_event_pitch_sequences", "seed.baseball_computer.seed_pitch_types"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "seed.baseball_computer.seed_stat_categories": {"database": "bc", "schema": "main_seeds", "name": "seed_stat_categories", "resource_type": "seed", "package_name": "baseball_computer", "path": "misc/seed_stat_categories.csv", "original_file_path": "seeds/misc/seed_stat_categories.csv", "unique_id": "seed.baseball_computer.seed_stat_categories", "fqn": ["baseball_computer", "misc", "seed_stat_categories"], "alias": "seed_stat_categories", "checksum": {"name": "sha256", "checksum": "ec9e73a38d06e5a8691c895534d4f4b68f2a57b8a3d9024a06f95fa2ffd0c6a7"}, "config": {"enabled": true, "alias": null, "schema": "seeds", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null, "contracts": {"enforced": true}}, "tags": [], "description": "", "columns": {"name": {"name": "name", "description": "", "meta": {}, "data_type": "varchar", "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "abbreviation": {"name": "abbreviation", "description": "", "meta": {}, "data_type": "varchar", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}, {"type": "unique", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "is_batting": {"name": "is_batting", "description": "", "meta": {}, "data_type": "boolean", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "is_pitching": {"name": "is_pitching", "description": "", "meta": {}, "data_type": "boolean", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "is_fielding": {"name": "is_fielding", "description": "", "meta": {}, "data_type": "boolean", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "baseball_computer://seeds/misc/seed_stat_categories.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "seeds", "contracts": {"enforced": true}}, "created_at": 1702281448.660911, "relation_name": "\"bc\".\"main_seeds\".\"seed_stat_categories\"", "raw_code": "", "root_path": "/Users/davidroher/Repos/baseball.computer/bc", "depends_on": {"macros": []}}, "seed.baseball_computer.seed_us_states_regions": {"database": "bc", "schema": "main_seeds", "name": "seed_us_states_regions", "resource_type": "seed", "package_name": "baseball_computer", "path": "misc/seed_us_states_regions.csv", "original_file_path": "seeds/misc/seed_us_states_regions.csv", "unique_id": "seed.baseball_computer.seed_us_states_regions", "fqn": ["baseball_computer", "misc", "seed_us_states_regions"], "alias": "seed_us_states_regions", "checksum": {"name": "sha256", "checksum": "3254bd969057b70a861a66587be0a164dc6cc81abebc765bbbaa8c5bd1be834c"}, "config": {"enabled": true, "alias": null, "schema": "seeds", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null, "contracts": {"enforced": true}}, "tags": [], "description": "", "columns": {"state": {"name": "state", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "region": {"name": "region", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "baseball_computer://seeds/misc/seed_us_states_regions.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "seeds", "contracts": {"enforced": true}}, "created_at": 1702281448.663121, "relation_name": "\"bc\".\"main_seeds\".\"seed_us_states_regions\"", "raw_code": "", "root_path": "/Users/davidroher/Repos/baseball.computer/bc", "depends_on": {"macros": []}}, "seed.baseball_computer.seed_plate_appearance_result_types": {"database": "bc", "schema": "main_seeds", "name": "seed_plate_appearance_result_types", "resource_type": "seed", "package_name": "baseball_computer", "path": "misc/seed_plate_appearance_result_types.csv", "original_file_path": "seeds/misc/seed_plate_appearance_result_types.csv", "unique_id": "seed.baseball_computer.seed_plate_appearance_result_types", "fqn": ["baseball_computer", "misc", "seed_plate_appearance_result_types"], "alias": "seed_plate_appearance_result_types", "checksum": {"name": "sha256", "checksum": "f0feca89e971f1a3c43830b565bd680605e961e2e8b29ea5df11463b36389cbc"}, "config": {"enabled": true, "alias": null, "schema": "seeds", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null, "contracts": {"enforced": true}}, "tags": [], "description": "", "columns": {"plate_appearance_result": {"name": "plate_appearance_result", "description": "", "meta": {}, "data_type": "varchar", "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "result_category": {"name": "result_category", "description": "", "meta": {}, "data_type": "varchar", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "is_at_bat": {"name": "is_at_bat", "description": "", "meta": {}, "data_type": "boolean", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "is_on_base_opportunity": {"name": "is_on_base_opportunity", "description": "", "meta": {}, "data_type": "boolean", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "is_on_base_success": {"name": "is_on_base_success", "description": "", "meta": {}, "data_type": "boolean", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "is_batting_out": {"name": "is_batting_out", "description": "", "meta": {}, "data_type": "boolean", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "is_batted": {"name": "is_batted", "description": "", "meta": {}, "data_type": "boolean", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "is_hit": {"name": "is_hit", "description": "", "meta": {}, "data_type": "boolean", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "is_in_play": {"name": "is_in_play", "description": "", "meta": {}, "data_type": "boolean", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "total_bases": {"name": "total_bases", "description": "", "meta": {}, "data_type": "integer", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "baseball_computer://seeds/misc/seed_plate_appearance_result_types.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "seeds", "contracts": {"enforced": true}}, "created_at": 1702281448.6698, "relation_name": "\"bc\".\"main_seeds\".\"seed_plate_appearance_result_types\"", "raw_code": "", "root_path": "/Users/davidroher/Repos/baseball.computer/bc", "depends_on": {"macros": []}}, "seed.baseball_computer.seed_country_regions": {"database": "bc", "schema": "main_seeds", "name": "seed_country_regions", "resource_type": "seed", "package_name": "baseball_computer", "path": "misc/seed_country_regions.csv", "original_file_path": "seeds/misc/seed_country_regions.csv", "unique_id": "seed.baseball_computer.seed_country_regions", "fqn": ["baseball_computer", "misc", "seed_country_regions"], "alias": "seed_country_regions", "checksum": {"name": "sha256", "checksum": "8f59f5abab8772d8a0081ea80bf93bb91d9cca84854e9d79fd07d3afc4d76961"}, "config": {"enabled": true, "alias": null, "schema": "seeds", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null, "contracts": {"enforced": true}}, "tags": [], "description": "", "columns": {"birth_country": {"name": "birth_country", "description": "", "meta": {}, "data_type": "varchar", "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "country_region": {"name": "country_region", "description": "", "meta": {}, "data_type": "varchar", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "baseball_computer://seeds/misc/seed_country_regions.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "seeds", "contracts": {"enforced": true}}, "created_at": 1702281448.665178, "relation_name": "\"bc\".\"main_seeds\".\"seed_country_regions\"", "raw_code": "", "root_path": "/Users/davidroher/Repos/baseball.computer/bc", "depends_on": {"macros": []}}, "seed.baseball_computer.seed_pitch_types": {"database": "bc", "schema": "main_seeds", "name": "seed_pitch_types", "resource_type": "seed", "package_name": "baseball_computer", "path": "misc/seed_pitch_types.csv", "original_file_path": "seeds/misc/seed_pitch_types.csv", "unique_id": "seed.baseball_computer.seed_pitch_types", "fqn": ["baseball_computer", "misc", "seed_pitch_types"], "alias": "seed_pitch_types", "checksum": {"name": "sha256", "checksum": "6797c23ca278054af9291433176dbec0514b8eb33102045d807cc685dd86df46"}, "config": {"enabled": true, "alias": null, "schema": "seeds", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null, "contracts": {"enforced": true}}, "tags": [], "description": "", "columns": {"sequence_item": {"name": "sequence_item", "description": "", "meta": {}, "data_type": "varchar", "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "is_pitch": {"name": "is_pitch", "description": "", "meta": {}, "data_type": "boolean", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "is_strike": {"name": "is_strike", "description": "", "meta": {}, "data_type": "boolean", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "is_in_play": {"name": "is_in_play", "description": "", "meta": {}, "data_type": "boolean", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "can_be_strike_three": {"name": "can_be_strike_three", "description": "", "meta": {}, "data_type": "boolean", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "is_swing": {"name": "is_swing", "description": "", "meta": {}, "data_type": "boolean", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "is_contact": {"name": "is_contact", "description": "", "meta": {}, "data_type": "boolean", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "category": {"name": "category", "description": "", "meta": {}, "data_type": "varchar", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "baseball_computer://seeds/misc/seed_pitch_types.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "seeds", "contracts": {"enforced": true}}, "created_at": 1702281448.677643, "relation_name": "\"bc\".\"main_seeds\".\"seed_pitch_types\"", "raw_code": "", "root_path": "/Users/davidroher/Repos/baseball.computer/bc", "depends_on": {"macros": []}}, "seed.baseball_computer.seed_franchises": {"database": "bc", "schema": "main_seeds", "name": "seed_franchises", "resource_type": "seed", "package_name": "baseball_computer", "path": "misc/seed_franchises.csv", "original_file_path": "seeds/misc/seed_franchises.csv", "unique_id": "seed.baseball_computer.seed_franchises", "fqn": ["baseball_computer", "misc", "seed_franchises"], "alias": "seed_franchises", "checksum": {"name": "sha256", "checksum": "bbc3c47030c90880877464a9be342397bc702236d1fd9aaf20167f2c3efeb8ca"}, "config": {"enabled": true, "alias": null, "schema": "seeds", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null, "contracts": {"enforced": true}}, "tags": [], "description": "", "columns": {"franchise_id": {"name": "franchise_id", "description": "", "meta": {}, "data_type": "varchar", "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "team_id": {"name": "team_id", "description": "", "meta": {}, "data_type": "varchar", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "league": {"name": "league", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "division": {"name": "division", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "location": {"name": "location", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "nickname": {"name": "nickname", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "alternative_nicknames": {"name": "alternative_nicknames", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "date_start": {"name": "date_start", "description": "", "meta": {}, "data_type": "date", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "date_end": {"name": "date_end", "description": "", "meta": {}, "data_type": "date", "constraints": [], "quote": null, "tags": []}, "city": {"name": "city", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "state": {"name": "state", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "baseball_computer://seeds/misc/seed_franchises.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "seeds", "contracts": {"enforced": true}}, "created_at": 1702281448.674077, "relation_name": "\"bc\".\"main_seeds\".\"seed_franchises\"", "raw_code": "", "root_path": "/Users/davidroher/Repos/baseball.computer/bc", "depends_on": {"macros": []}}, "seed.baseball_computer.seed_game_types": {"database": "bc", "schema": "main_seeds", "name": "seed_game_types", "resource_type": "seed", "package_name": "baseball_computer", "path": "misc/seed_game_types.csv", "original_file_path": "seeds/misc/seed_game_types.csv", "unique_id": "seed.baseball_computer.seed_game_types", "fqn": ["baseball_computer", "misc", "seed_game_types"], "alias": "seed_game_types", "checksum": {"name": "sha256", "checksum": "44334d5acd97b785b4fd4d7619e425639ed70883668479a23eaf5ca735cead3c"}, "config": {"enabled": true, "alias": null, "schema": "seeds", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null, "contracts": {"enforced": true}}, "tags": [], "description": "", "columns": {"game_type": {"name": "game_type", "description": "", "meta": {}, "data_type": "varchar", "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "is_regular_season": {"name": "is_regular_season", "description": "", "meta": {}, "data_type": "boolean", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "is_postseason": {"name": "is_postseason", "description": "", "meta": {}, "data_type": "boolean", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "baseball_computer://seeds/misc/seed_game_types.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "seeds", "contracts": {"enforced": true}}, "created_at": 1702281448.682694, "relation_name": "\"bc\".\"main_seeds\".\"seed_game_types\"", "raw_code": "", "root_path": "/Users/davidroher/Repos/baseball.computer/bc", "depends_on": {"macros": []}}, "seed.baseball_computer.seed_double_play_flag_types": {"database": "bc", "schema": "main_seeds", "name": "seed_double_play_flag_types", "resource_type": "seed", "package_name": "baseball_computer", "path": "misc/seed_double_play_flag_types.csv", "original_file_path": "seeds/misc/seed_double_play_flag_types.csv", "unique_id": "seed.baseball_computer.seed_double_play_flag_types", "fqn": ["baseball_computer", "misc", "seed_double_play_flag_types"], "alias": "seed_double_play_flag_types", "checksum": {"name": "sha256", "checksum": "b9c47daa453080d7c80dbb0b0c86faa491a3615cbea8c40e94539a491ba31ee8"}, "config": {"enabled": true, "alias": null, "schema": "seeds", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null, "contracts": {"enforced": true}}, "tags": [], "description": "", "columns": {"flag": {"name": "flag", "description": "", "meta": {}, "data_type": "varchar", "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "is_double_play": {"name": "is_double_play", "description": "", "meta": {}, "data_type": "boolean", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "is_ground_ball_double_play": {"name": "is_ground_ball_double_play", "description": "", "meta": {}, "data_type": "boolean", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "is_triple_play": {"name": "is_triple_play", "description": "", "meta": {}, "data_type": "boolean", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "baseball_computer://seeds/misc/seed_double_play_flag_types.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "seeds", "contracts": {"enforced": true}}, "created_at": 1702281448.680166, "relation_name": "\"bc\".\"main_seeds\".\"seed_double_play_flag_types\"", "raw_code": "", "root_path": "/Users/davidroher/Repos/baseball.computer/bc", "depends_on": {"macros": []}}, "seed.baseball_computer.seed_hit_location_categories": {"database": "bc", "schema": "main_seeds", "name": "seed_hit_location_categories", "resource_type": "seed", "package_name": "baseball_computer", "path": "batted_ball/seed_hit_location_categories.csv", "original_file_path": "seeds/batted_ball/seed_hit_location_categories.csv", "unique_id": "seed.baseball_computer.seed_hit_location_categories", "fqn": ["baseball_computer", "batted_ball", "seed_hit_location_categories"], "alias": "seed_hit_location_categories", "checksum": {"name": "sha256", "checksum": "8451a3154fe3ff7816bbc7c4c2aea4e0c1651bbac20bbb9c98d1bdbd4030cf4e"}, "config": {"enabled": true, "alias": null, "schema": "seeds", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null, "contracts": {"enforced": true}}, "tags": [], "description": "", "columns": {"batted_location_general": {"name": "batted_location_general", "description": "", "meta": {}, "data_type": "varchar", "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "category_depth": {"name": "category_depth", "description": "", "meta": {}, "data_type": "varchar", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "category_side": {"name": "category_side", "description": "", "meta": {}, "data_type": "varchar", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "category_edge": {"name": "category_edge", "description": "", "meta": {}, "data_type": "varchar", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "is_mid_position": {"name": "is_mid_position", "description": "", "meta": {}, "data_type": "boolean", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "baseball_computer://seeds/batted_ball/seed_hit_location_categories.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "seeds", "contracts": {"enforced": true}}, "created_at": 1702281448.685421, "relation_name": "\"bc\".\"main_seeds\".\"seed_hit_location_categories\"", "raw_code": "", "root_path": "/Users/davidroher/Repos/baseball.computer/bc", "depends_on": {"macros": []}}, "seed.baseball_computer.seed_hit_to_fielder_categories": {"database": "bc", "schema": "main_seeds", "name": "seed_hit_to_fielder_categories", "resource_type": "seed", "package_name": "baseball_computer", "path": "batted_ball/seed_hit_to_fielder_categories.csv", "original_file_path": "seeds/batted_ball/seed_hit_to_fielder_categories.csv", "unique_id": "seed.baseball_computer.seed_hit_to_fielder_categories", "fqn": ["baseball_computer", "batted_ball", "seed_hit_to_fielder_categories"], "alias": "seed_hit_to_fielder_categories", "checksum": {"name": "sha256", "checksum": "d5fc0bfe77a13c82b796ce7d03f62835a1e6ab2fec69020b261b02e8f1da9d9d"}, "config": {"enabled": true, "alias": null, "schema": "seeds", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null, "contracts": {"enforced": true}}, "tags": [], "description": "", "columns": {"batted_to_fielder": {"name": "batted_to_fielder", "description": "", "meta": {}, "data_type": "integer", "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "category_depth": {"name": "category_depth", "description": "", "meta": {}, "data_type": "varchar", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "category_side": {"name": "category_side", "description": "", "meta": {}, "data_type": "varchar", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "baseball_computer://seeds/batted_ball/seed_hit_to_fielder_categories.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "seeds", "contracts": {"enforced": true}}, "created_at": 1702281448.6872199, "relation_name": "\"bc\".\"main_seeds\".\"seed_hit_to_fielder_categories\"", "raw_code": "", "root_path": "/Users/davidroher/Repos/baseball.computer/bc", "depends_on": {"macros": []}}, "seed.baseball_computer.seed_hit_location_angles": {"database": "bc", "schema": "main_seeds", "name": "seed_hit_location_angles", "resource_type": "seed", "package_name": "baseball_computer", "path": "batted_ball/seed_hit_location_angles.csv", "original_file_path": "seeds/batted_ball/seed_hit_location_angles.csv", "unique_id": "seed.baseball_computer.seed_hit_location_angles", "fqn": ["baseball_computer", "batted_ball", "seed_hit_location_angles"], "alias": "seed_hit_location_angles", "checksum": {"name": "sha256", "checksum": "5f1d63ec9b4e4b5406d0ba80030032974608e81a2eb03d9351d2535363c377f4"}, "config": {"enabled": true, "alias": null, "schema": "seeds", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null, "contracts": {"enforced": true}}, "tags": [], "description": "", "columns": {"general_location": {"name": "general_location", "description": "", "meta": {}, "data_type": "varchar", "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "angle": {"name": "angle", "description": "", "meta": {}, "data_type": "varchar", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "theta_start": {"name": "theta_start", "description": "", "meta": {}, "data_type": "integer", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "theta_end": {"name": "theta_end", "description": "", "meta": {}, "data_type": "integer", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "baseball_computer://seeds/batted_ball/seed_hit_location_angles.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "seeds", "contracts": {"enforced": true}}, "created_at": 1702281448.689984, "relation_name": "\"bc\".\"main_seeds\".\"seed_hit_location_angles\"", "raw_code": "", "root_path": "/Users/davidroher/Repos/baseball.computer/bc", "depends_on": {"macros": []}}, "seed.baseball_computer.seed_hit_location_alignments": {"database": "bc", "schema": "main_seeds", "name": "seed_hit_location_alignments", "resource_type": "seed", "package_name": "baseball_computer", "path": "batted_ball/seed_hit_location_alignments.csv", "original_file_path": "seeds/batted_ball/seed_hit_location_alignments.csv", "unique_id": "seed.baseball_computer.seed_hit_location_alignments", "fqn": ["baseball_computer", "batted_ball", "seed_hit_location_alignments"], "alias": "seed_hit_location_alignments", "checksum": {"name": "sha256", "checksum": "9295fad2bf048d7b3d116c45cf7f558cbd6efcf299cf744627f45dde465db942"}, "config": {"enabled": true, "alias": null, "schema": "seeds", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null, "contracts": {"enforced": true}}, "tags": [], "description": "", "columns": {"infield_location": {"name": "infield_location", "description": "", "meta": {}, "data_type": "varchar", "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "infield_angle": {"name": "infield_angle", "description": "", "meta": {}, "data_type": "varchar", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "outfield_location": {"name": "outfield_location", "description": "", "meta": {}, "data_type": "varchar", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "outfield_angle": {"name": "outfield_angle", "description": "", "meta": {}, "data_type": "varchar", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "baseball_computer://seeds/batted_ball/seed_hit_location_alignments.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "seeds", "contracts": {"enforced": true}}, "created_at": 1702281448.692425, "relation_name": "\"bc\".\"main_seeds\".\"seed_hit_location_alignments\"", "raw_code": "", "root_path": "/Users/davidroher/Repos/baseball.computer/bc", "depends_on": {"macros": []}}, "seed.baseball_computer.seed_outfield_hit_inference": {"database": "bc", "schema": "main_seeds", "name": "seed_outfield_hit_inference", "resource_type": "seed", "package_name": "baseball_computer", "path": "batted_ball/seed_outfield_hit_inference.csv", "original_file_path": "seeds/batted_ball/seed_outfield_hit_inference.csv", "unique_id": "seed.baseball_computer.seed_outfield_hit_inference", "fqn": ["baseball_computer", "batted_ball", "seed_outfield_hit_inference"], "alias": "seed_outfield_hit_inference", "checksum": {"name": "sha256", "checksum": "1214b4dccae00f06a5c3bda1d36710773881e6c3f35bc034270ce8488ac2bcc0"}, "config": {"enabled": true, "alias": null, "schema": "seeds", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null, "contracts": {"enforced": true}}, "tags": [], "description": "", "columns": {"batter_hand": {"name": "batter_hand", "description": "", "meta": {}, "data_type": "varchar", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "batted_to_fielder": {"name": "batted_to_fielder", "description": "", "meta": {}, "data_type": "integer", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "total_bases": {"name": "total_bases", "description": "", "meta": {}, "data_type": "integer", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "gb_rate": {"name": "gb_rate", "description": "", "meta": {}, "data_type": "double", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "baseball_computer://seeds/batted_ball/seed_outfield_hit_inference.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "seeds", "contracts": {"enforced": true}}, "created_at": 1702281448.6947, "relation_name": "\"bc\".\"main_seeds\".\"seed_outfield_hit_inference\"", "raw_code": "", "root_path": "/Users/davidroher/Repos/baseball.computer/bc", "depends_on": {"macros": []}}, "seed.baseball_computer.seed_hit_location_distance_buckets": {"database": "bc", "schema": "main_seeds", "name": "seed_hit_location_distance_buckets", "resource_type": "seed", "package_name": "baseball_computer", "path": "batted_ball/seed_hit_location_distance_buckets.csv", "original_file_path": "seeds/batted_ball/seed_hit_location_distance_buckets.csv", "unique_id": "seed.baseball_computer.seed_hit_location_distance_buckets", "fqn": ["baseball_computer", "batted_ball", "seed_hit_location_distance_buckets"], "alias": "seed_hit_location_distance_buckets", "checksum": {"name": "sha256", "checksum": "d338779ac8f2b48485f3ee4453d501dbdfa6b4442bb7c331ba84e836eb101cbf"}, "config": {"enabled": true, "alias": null, "schema": "seeds", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null, "contracts": {"enforced": true}}, "tags": [], "description": "", "columns": {"general_location": {"name": "general_location", "description": "", "meta": {}, "data_type": "varchar", "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "depth": {"name": "depth", "description": "", "meta": {}, "data_type": "varchar", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "distance_bucket": {"name": "distance_bucket", "description": "", "meta": {}, "data_type": "integer", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "baseball_computer://seeds/batted_ball/seed_hit_location_distance_buckets.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "seeds", "contracts": {"enforced": true}}, "created_at": 1702281448.6969228, "relation_name": "\"bc\".\"main_seeds\".\"seed_hit_location_distance_buckets\"", "raw_code": "", "root_path": "/Users/davidroher/Repos/baseball.computer/bc", "depends_on": {"macros": []}}, "seed.baseball_computer.seed_plate_appearance_trajectories": {"database": "bc", "schema": "main_seeds", "name": "seed_plate_appearance_trajectories", "resource_type": "seed", "package_name": "baseball_computer", "path": "batted_ball/seed_plate_appearance_trajectories.csv", "original_file_path": "seeds/batted_ball/seed_plate_appearance_trajectories.csv", "unique_id": "seed.baseball_computer.seed_plate_appearance_trajectories", "fqn": ["baseball_computer", "batted_ball", "seed_plate_appearance_trajectories"], "alias": "seed_plate_appearance_trajectories", "checksum": {"name": "sha256", "checksum": "962de426b6fd668bfe28f7c55bc3fbd82a89cb444e01eaef13b47747ee17cff8"}, "config": {"enabled": true, "alias": null, "schema": "seeds", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null, "contracts": {"enforced": true}}, "tags": [], "description": "", "columns": {"batted_trajectory": {"name": "batted_trajectory", "description": "", "meta": {}, "data_type": "varchar", "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "broad_classification": {"name": "broad_classification", "description": "", "meta": {}, "data_type": "varchar", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "baseball_computer://seeds/batted_ball/seed_plate_appearance_trajectories.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "seeds", "contracts": {"enforced": true}}, "created_at": 1702281448.698907, "relation_name": "\"bc\".\"main_seeds\".\"seed_plate_appearance_trajectories\"", "raw_code": "", "root_path": "/Users/davidroher/Repos/baseball.computer/bc", "depends_on": {"macros": []}}, "seed.baseball_computer.seed_baserunner_info": {"database": "bc", "schema": "main_seeds", "name": "seed_baserunner_info", "resource_type": "seed", "package_name": "baseball_computer", "path": "baserunning/seed_baserunner_info.csv", "original_file_path": "seeds/baserunning/seed_baserunner_info.csv", "unique_id": "seed.baseball_computer.seed_baserunner_info", "fqn": ["baseball_computer", "baserunning", "seed_baserunner_info"], "alias": "seed_baserunner_info", "checksum": {"name": "sha256", "checksum": "20087704068098c181485211c43820e178b588966793d218cdbeec48dca7b17c"}, "config": {"enabled": true, "alias": null, "schema": "seeds", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null, "contracts": {"enforced": true}}, "tags": [], "description": "", "columns": {"baserunner": {"name": "baserunner", "description": "", "meta": {}, "data_type": "varchar", "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "numeric_value": {"name": "numeric_value", "description": "", "meta": {}, "data_type": "integer", "constraints": [{"type": "unique", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}, {"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "baseball_computer://seeds/baserunning/seed_baserunner_info.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "seeds", "contracts": {"enforced": true}}, "created_at": 1702281448.7007942, "relation_name": "\"bc\".\"main_seeds\".\"seed_baserunner_info\"", "raw_code": "", "root_path": "/Users/davidroher/Repos/baseball.computer/bc", "depends_on": {"macros": []}}, "seed.baseball_computer.seed_bases_info": {"database": "bc", "schema": "main_seeds", "name": "seed_bases_info", "resource_type": "seed", "package_name": "baseball_computer", "path": "baserunning/seed_bases_info.csv", "original_file_path": "seeds/baserunning/seed_bases_info.csv", "unique_id": "seed.baseball_computer.seed_bases_info", "fqn": ["baseball_computer", "baserunning", "seed_bases_info"], "alias": "seed_bases_info", "checksum": {"name": "sha256", "checksum": "70996637f123738ea94cd9a62506552a461bc92c7e22f4ba49566f5dcd4c1e34"}, "config": {"enabled": true, "alias": null, "schema": "seeds", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null, "contracts": {"enforced": true}}, "tags": [], "description": "", "columns": {"base": {"name": "base", "description": "", "meta": {}, "data_type": "varchar", "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "numeric_value": {"name": "numeric_value", "description": "", "meta": {}, "data_type": "integer", "constraints": [{"type": "unique", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}, {"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "baseball_computer://seeds/baserunning/seed_bases_info.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "seeds", "contracts": {"enforced": true}}, "created_at": 1702281448.702822, "relation_name": "\"bc\".\"main_seeds\".\"seed_bases_info\"", "raw_code": "", "root_path": "/Users/davidroher/Repos/baseball.computer/bc", "depends_on": {"macros": []}}, "seed.baseball_computer.seed_baserunning_play_types": {"database": "bc", "schema": "main_seeds", "name": "seed_baserunning_play_types", "resource_type": "seed", "package_name": "baseball_computer", "path": "baserunning/seed_baserunning_play_types.csv", "original_file_path": "seeds/baserunning/seed_baserunning_play_types.csv", "unique_id": "seed.baseball_computer.seed_baserunning_play_types", "fqn": ["baseball_computer", "baserunning", "seed_baserunning_play_types"], "alias": "seed_baserunning_play_types", "checksum": {"name": "sha256", "checksum": "db48a24d8bc9818e195f296b38a205ebd91123d633faf8a1817b96fea86a1556"}, "config": {"enabled": true, "alias": null, "schema": "seeds", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null, "contracts": {"enforced": true}}, "tags": [], "description": "", "columns": {"baserunning_play_type": {"name": "baserunning_play_type", "description": "", "meta": {}, "data_type": "varchar", "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "result_category_out": {"name": "result_category_out", "description": "", "meta": {}, "data_type": "varchar", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "result_category_safe": {"name": "result_category_safe", "description": "", "meta": {}, "data_type": "varchar", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "priority": {"name": "priority", "description": "", "meta": {}, "data_type": "integer", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}, {"type": "unique", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "baseball_computer://seeds/baserunning/seed_baserunning_play_types.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "seeds", "contracts": {"enforced": true}}, "created_at": 1702281448.709131, "relation_name": "\"bc\".\"main_seeds\".\"seed_baserunning_play_types\"", "raw_code": "", "root_path": "/Users/davidroher/Repos/baseball.computer/bc", "depends_on": {"macros": []}}, "seed.baseball_computer.seed_base_state_info": {"database": "bc", "schema": "main_seeds", "name": "seed_base_state_info", "resource_type": "seed", "package_name": "baseball_computer", "path": "baserunning/seed_base_state_info.csv", "original_file_path": "seeds/baserunning/seed_base_state_info.csv", "unique_id": "seed.baseball_computer.seed_base_state_info", "fqn": ["baseball_computer", "baserunning", "seed_base_state_info"], "alias": "seed_base_state_info", "checksum": {"name": "sha256", "checksum": "7ad41a9099acaa8bcca9cedc2c83d46132d6e4e04828fee107208e14c337734c"}, "config": {"enabled": true, "alias": null, "schema": "seeds", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"base_state_string": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null, "contracts": {"enforced": true}}, "tags": [], "description": "", "columns": {"base_state": {"name": "base_state", "description": "", "meta": {}, "data_type": "integer", "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "base_state_string": {"name": "base_state_string", "description": "", "meta": {}, "data_type": "varchar", "constraints": [{"type": "unique", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}, {"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "is_runner_on_first": {"name": "is_runner_on_first", "description": "", "meta": {}, "data_type": "boolean", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "is_runner_on_second": {"name": "is_runner_on_second", "description": "", "meta": {}, "data_type": "boolean", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "is_runner_on_third": {"name": "is_runner_on_third", "description": "", "meta": {}, "data_type": "boolean", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "is_force_on_second": {"name": "is_force_on_second", "description": "", "meta": {}, "data_type": "boolean", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "is_force_on_third": {"name": "is_force_on_third", "description": "", "meta": {}, "data_type": "boolean", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "is_force_on_home": {"name": "is_force_on_home", "description": "", "meta": {}, "data_type": "boolean", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "baseball_computer://seeds/baserunning/seed_base_state_info.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "seeds", "contracts": {"enforced": true}, "column_types": {"base_state_string": "varchar"}}, "created_at": 1702281448.7064471, "relation_name": "\"bc\".\"main_seeds\".\"seed_base_state_info\"", "raw_code": "", "root_path": "/Users/davidroher/Repos/baseball.computer/bc", "depends_on": {"macros": []}}, "seed.baseball_computer.seed_scorer_numerical_ranges": {"database": "bc", "schema": "main_seeds", "name": "seed_scorer_numerical_ranges", "resource_type": "seed", "package_name": "baseball_computer", "path": "scorekeeping/seed_scorer_numerical_ranges.csv", "original_file_path": "seeds/scorekeeping/seed_scorer_numerical_ranges.csv", "unique_id": "seed.baseball_computer.seed_scorer_numerical_ranges", "fqn": ["baseball_computer", "scorekeeping", "seed_scorer_numerical_ranges"], "alias": "seed_scorer_numerical_ranges", "checksum": {"name": "sha256", "checksum": "e238fffeba90e96710e7a5f9441cd9b55f7b20c3a3b83abb1ba5f6cf34a12ff0"}, "config": {"enabled": true, "alias": null, "schema": "seeds", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null, "contracts": {"enforced": true}}, "tags": [], "description": "", "columns": {"start": {"name": "start", "description": "", "meta": {}, "data_type": "integer", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "end": {"name": "end", "description": "", "meta": {}, "data_type": "integer", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "group_id": {"name": "group_id", "description": "", "meta": {}, "data_type": "integer", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "baseball_computer://seeds/scorekeeping/seed_scorer_numerical_ranges.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "seeds", "contracts": {"enforced": true}}, "created_at": 1702281448.71133, "relation_name": "\"bc\".\"main_seeds\".\"seed_scorer_numerical_ranges\"", "raw_code": "", "root_path": "/Users/davidroher/Repos/baseball.computer/bc", "depends_on": {"macros": []}}, "seed.baseball_computer.seed_scorer_disambiguation": {"database": "bc", "schema": "main_seeds", "name": "seed_scorer_disambiguation", "resource_type": "seed", "package_name": "baseball_computer", "path": "scorekeeping/seed_scorer_disambiguation.csv", "original_file_path": "seeds/scorekeeping/seed_scorer_disambiguation.csv", "unique_id": "seed.baseball_computer.seed_scorer_disambiguation", "fqn": ["baseball_computer", "scorekeeping", "seed_scorer_disambiguation"], "alias": "seed_scorer_disambiguation", "checksum": {"name": "sha256", "checksum": "2f752be4be33bad8f7961011466c56866dd7ee1cbd90bb07268f0e7c3aa977ac"}, "config": {"enabled": true, "alias": null, "schema": "seeds", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null, "contracts": {"enforced": true}}, "tags": [], "description": "", "columns": {"scorer": {"name": "scorer", "description": "", "meta": {}, "data_type": "varchar", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "team_id": {"name": "team_id", "description": "", "meta": {}, "data_type": "varchar", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "normalized_scorer": {"name": "normalized_scorer", "description": "", "meta": {}, "data_type": "varchar", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "baseball_computer://seeds/scorekeeping/seed_scorer_disambiguation.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "seeds", "contracts": {"enforced": true}}, "created_at": 1702281448.713265, "relation_name": "\"bc\".\"main_seeds\".\"seed_scorer_disambiguation\"", "raw_code": "", "root_path": "/Users/davidroher/Repos/baseball.computer/bc", "depends_on": {"macros": []}}, "seed.baseball_computer.seed_scorer_lookup": {"database": "bc", "schema": "main_seeds", "name": "seed_scorer_lookup", "resource_type": "seed", "package_name": "baseball_computer", "path": "scorekeeping/seed_scorer_lookup.csv", "original_file_path": "seeds/scorekeeping/seed_scorer_lookup.csv", "unique_id": "seed.baseball_computer.seed_scorer_lookup", "fqn": ["baseball_computer", "scorekeeping", "seed_scorer_lookup"], "alias": "seed_scorer_lookup", "checksum": {"name": "sha256", "checksum": "f3fe3110bae772b821041e68e9689e874bdae1186079dc038a43b21ce0794d90"}, "config": {"enabled": true, "alias": null, "schema": "seeds", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null, "contracts": {"enforced": true}}, "tags": [], "description": "", "columns": {"scorer": {"name": "scorer", "description": "", "meta": {}, "data_type": "varchar", "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "normalized_scorer": {"name": "normalized_scorer", "description": "", "meta": {}, "data_type": "varchar", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "baseball_computer://seeds/scorekeeping/seed_scorer_lookup.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "seeds", "contracts": {"enforced": true}}, "created_at": 1702281448.7147079, "relation_name": "\"bc\".\"main_seeds\".\"seed_scorer_lookup\"", "raw_code": "", "root_path": "/Users/davidroher/Repos/baseball.computer/bc", "depends_on": {"macros": []}}, "test.baseball_computer.relationships_stg_game_lineup_appearances_game_id__game_id__ref_stg_games_.e186087a87": {"test_metadata": {"name": "relationships", "kwargs": {"field": "game_id", "to": "ref('stg_games')", "column_name": "game_id", "model": "{{ get_where_subquery(ref('stg_game_lineup_appearances')) }}"}, "namespace": null}, "database": "bc", "schema": "main_dbt_test__audit", "name": "relationships_stg_game_lineup_appearances_game_id__game_id__ref_stg_games_", "resource_type": "test", "package_name": "baseball_computer", "path": "relationships_stg_game_lineup__3f399d2e884a07fa63c5ad57630a5bc8.sql", "original_file_path": "models/staging/game/stg_game_lineup_appearances.yml", "unique_id": "test.baseball_computer.relationships_stg_game_lineup_appearances_game_id__game_id__ref_stg_games_.e186087a87", "fqn": ["baseball_computer", "staging", "game", "relationships_stg_game_lineup_appearances_game_id__game_id__ref_stg_games_"], "alias": "relationships_stg_game_lineup__3f399d2e884a07fa63c5ad57630a5bc8", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_stg_game_lineup__3f399d2e884a07fa63c5ad57630a5bc8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_stg_game_lineup__3f399d2e884a07fa63c5ad57630a5bc8"}, "created_at": 1702281449.178407, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_stg_game_lineup__3f399d2e884a07fa63c5ad57630a5bc8\") }}", "language": "sql", "refs": [{"name": "stg_games", "package": null, "version": null}, {"name": "stg_game_lineup_appearances", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.baseball_computer.stg_games", "model.baseball_computer.stg_game_lineup_appearances"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "game_id", "file_key_name": "models.stg_game_lineup_appearances", "attached_node": "model.baseball_computer.stg_game_lineup_appearances"}, "test.baseball_computer.relationships_stg_game_lineup_appearances_player_id__player_id__ref_stg_bio_.032a75b5cb": {"test_metadata": {"name": "relationships", "kwargs": {"field": "player_id", "to": "ref('stg_bio')", "column_name": "player_id", "model": "{{ get_where_subquery(ref('stg_game_lineup_appearances')) }}"}, "namespace": null}, "database": "bc", "schema": "main_dbt_test__audit", "name": "relationships_stg_game_lineup_appearances_player_id__player_id__ref_stg_bio_", "resource_type": "test", "package_name": "baseball_computer", "path": "relationships_stg_game_lineup__7e68082c98b74b612d10bb909cff151a.sql", "original_file_path": "models/staging/game/stg_game_lineup_appearances.yml", "unique_id": "test.baseball_computer.relationships_stg_game_lineup_appearances_player_id__player_id__ref_stg_bio_.032a75b5cb", "fqn": ["baseball_computer", "staging", "game", "relationships_stg_game_lineup_appearances_player_id__player_id__ref_stg_bio_"], "alias": "relationships_stg_game_lineup__7e68082c98b74b612d10bb909cff151a", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_stg_game_lineup__7e68082c98b74b612d10bb909cff151a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_stg_game_lineup__7e68082c98b74b612d10bb909cff151a"}, "created_at": 1702281449.187309, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_stg_game_lineup__7e68082c98b74b612d10bb909cff151a\") }}", "language": "sql", "refs": [{"name": "stg_bio", "package": null, "version": null}, {"name": "stg_game_lineup_appearances", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.baseball_computer.stg_bio", "model.baseball_computer.stg_game_lineup_appearances"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "player_id", "file_key_name": "models.stg_game_lineup_appearances", "attached_node": "model.baseball_computer.stg_game_lineup_appearances"}, "test.baseball_computer.relationships_stg_game_earned_runs_game_id__game_id__ref_stg_games_.a12c168f7b": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('stg_games')", "field": "game_id", "column_name": "game_id", "model": "{{ get_where_subquery(ref('stg_game_earned_runs')) }}"}, "namespace": null}, "database": "bc", "schema": "main_dbt_test__audit", "name": "relationships_stg_game_earned_runs_game_id__game_id__ref_stg_games_", "resource_type": "test", "package_name": "baseball_computer", "path": "relationships_stg_game_earned__5d28523807abb16e3e4f7e6916175e41.sql", "original_file_path": "models/staging/game/stg_game_earned_runs.yml", "unique_id": "test.baseball_computer.relationships_stg_game_earned_runs_game_id__game_id__ref_stg_games_.a12c168f7b", "fqn": ["baseball_computer", "staging", "game", "relationships_stg_game_earned_runs_game_id__game_id__ref_stg_games_"], "alias": "relationships_stg_game_earned__5d28523807abb16e3e4f7e6916175e41", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_stg_game_earned__5d28523807abb16e3e4f7e6916175e41", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_stg_game_earned__5d28523807abb16e3e4f7e6916175e41"}, "created_at": 1702281449.192886, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_stg_game_earned__5d28523807abb16e3e4f7e6916175e41\") }}", "language": "sql", "refs": [{"name": "stg_games", "package": null, "version": null}, {"name": "stg_game_earned_runs", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.baseball_computer.stg_games", "model.baseball_computer.stg_game_earned_runs"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "game_id", "file_key_name": "models.stg_game_earned_runs", "attached_node": "model.baseball_computer.stg_game_earned_runs"}, "test.baseball_computer.relationships_stg_games_park_id__park_id__ref_stg_parks_.670e6f218e": {"test_metadata": {"name": "relationships", "kwargs": {"field": "park_id", "to": "ref('stg_parks')", "column_name": "park_id", "model": "{{ get_where_subquery(ref('stg_games')) }}"}, "namespace": null}, "database": "bc", "schema": "main_dbt_test__audit", "name": "relationships_stg_games_park_id__park_id__ref_stg_parks_", "resource_type": "test", "package_name": "baseball_computer", "path": "relationships_stg_games_park_id__park_id__ref_stg_parks_.sql", "original_file_path": "models/staging/game/stg_games.yml", "unique_id": "test.baseball_computer.relationships_stg_games_park_id__park_id__ref_stg_parks_.670e6f218e", "fqn": ["baseball_computer", "staging", "game", "relationships_stg_games_park_id__park_id__ref_stg_parks_"], "alias": "relationships_stg_games_park_id__park_id__ref_stg_parks_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1702281449.2010329, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_parks", "package": null, "version": null}, {"name": "stg_games", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.baseball_computer.stg_parks", "model.baseball_computer.stg_games"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "park_id", "file_key_name": "models.stg_games", "attached_node": "model.baseball_computer.stg_games"}, "test.baseball_computer.not_null_stg_games_park_id.5fec03cb29": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "park_id", "model": "{{ get_where_subquery(ref('stg_games')) }}"}, "namespace": null}, "database": "bc", "schema": "main_dbt_test__audit", "name": "not_null_stg_games_park_id", "resource_type": "test", "package_name": "baseball_computer", "path": "not_null_stg_games_park_id.sql", "original_file_path": "models/staging/game/stg_games.yml", "unique_id": "test.baseball_computer.not_null_stg_games_park_id.5fec03cb29", "fqn": ["baseball_computer", "staging", "game", "not_null_stg_games_park_id"], "alias": "not_null_stg_games_park_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "WARN", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "WARN"}, "created_at": 1702281449.204614, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\") }}", "language": "sql", "refs": [{"name": "stg_games", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.baseball_computer.stg_games"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "park_id", "file_key_name": "models.stg_games", "attached_node": "model.baseball_computer.stg_games"}, "test.baseball_computer.relationships_stg_game_fielding_appearances_game_id__game_id__ref_stg_games_.53b862f062": {"test_metadata": {"name": "relationships", "kwargs": {"field": "game_id", "to": "ref('stg_games')", "column_name": "game_id", "model": "{{ get_where_subquery(ref('stg_game_fielding_appearances')) }}"}, "namespace": null}, "database": "bc", "schema": "main_dbt_test__audit", "name": "relationships_stg_game_fielding_appearances_game_id__game_id__ref_stg_games_", "resource_type": "test", "package_name": "baseball_computer", "path": "relationships_stg_game_fieldin_ca098b62fa2ea992728ebf8954773ae2.sql", "original_file_path": "models/staging/game/stg_game_fielding_appearances.yml", "unique_id": "test.baseball_computer.relationships_stg_game_fielding_appearances_game_id__game_id__ref_stg_games_.53b862f062", "fqn": ["baseball_computer", "staging", "game", "relationships_stg_game_fielding_appearances_game_id__game_id__ref_stg_games_"], "alias": "relationships_stg_game_fieldin_ca098b62fa2ea992728ebf8954773ae2", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_stg_game_fieldin_ca098b62fa2ea992728ebf8954773ae2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_stg_game_fieldin_ca098b62fa2ea992728ebf8954773ae2"}, "created_at": 1702281449.2080462, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_stg_game_fieldin_ca098b62fa2ea992728ebf8954773ae2\") }}", "language": "sql", "refs": [{"name": "stg_games", "package": null, "version": null}, {"name": "stg_game_fielding_appearances", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.baseball_computer.stg_games", "model.baseball_computer.stg_game_fielding_appearances"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "game_id", "file_key_name": "models.stg_game_fielding_appearances", "attached_node": "model.baseball_computer.stg_game_fielding_appearances"}, "test.baseball_computer.relationships_stg_game_fielding_appearances_player_id__player_id__ref_stg_bio_.c79c4af955": {"test_metadata": {"name": "relationships", "kwargs": {"field": "player_id", "to": "ref('stg_bio')", "column_name": "player_id", "model": "{{ get_where_subquery(ref('stg_game_fielding_appearances')) }}"}, "namespace": null}, "database": "bc", "schema": "main_dbt_test__audit", "name": "relationships_stg_game_fielding_appearances_player_id__player_id__ref_stg_bio_", "resource_type": "test", "package_name": "baseball_computer", "path": "relationships_stg_game_fieldin_e1569f07e3dcf2e3d34d9c6b2861bf6e.sql", "original_file_path": "models/staging/game/stg_game_fielding_appearances.yml", "unique_id": "test.baseball_computer.relationships_stg_game_fielding_appearances_player_id__player_id__ref_stg_bio_.c79c4af955", "fqn": ["baseball_computer", "staging", "game", "relationships_stg_game_fielding_appearances_player_id__player_id__ref_stg_bio_"], "alias": "relationships_stg_game_fieldin_e1569f07e3dcf2e3d34d9c6b2861bf6e", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_stg_game_fieldin_e1569f07e3dcf2e3d34d9c6b2861bf6e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_stg_game_fieldin_e1569f07e3dcf2e3d34d9c6b2861bf6e"}, "created_at": 1702281449.211494, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_stg_game_fieldin_e1569f07e3dcf2e3d34d9c6b2861bf6e\") }}", "language": "sql", "refs": [{"name": "stg_bio", "package": null, "version": null}, {"name": "stg_game_fielding_appearances", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.baseball_computer.stg_bio", "model.baseball_computer.stg_game_fielding_appearances"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "player_id", "file_key_name": "models.stg_game_fielding_appearances", "attached_node": "model.baseball_computer.stg_game_fielding_appearances"}, "test.baseball_computer.relationships_stg_event_pitch_sequences_game_id__game_id__ref_stg_games_.41a391d15a": {"test_metadata": {"name": "relationships", "kwargs": {"field": "game_id", "to": "ref('stg_games')", "column_name": "game_id", "model": "{{ get_where_subquery(ref('stg_event_pitch_sequences')) }}"}, "namespace": null}, "database": "bc", "schema": "main_dbt_test__audit", "name": "relationships_stg_event_pitch_sequences_game_id__game_id__ref_stg_games_", "resource_type": "test", "package_name": "baseball_computer", "path": "relationships_stg_event_pitch__0d5de6c492ae60dc0f32bfe612dfb599.sql", "original_file_path": "models/staging/event/stg_event_pitch_sequences.yml", "unique_id": "test.baseball_computer.relationships_stg_event_pitch_sequences_game_id__game_id__ref_stg_games_.41a391d15a", "fqn": ["baseball_computer", "staging", "event", "relationships_stg_event_pitch_sequences_game_id__game_id__ref_stg_games_"], "alias": "relationships_stg_event_pitch__0d5de6c492ae60dc0f32bfe612dfb599", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_stg_event_pitch__0d5de6c492ae60dc0f32bfe612dfb599", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_stg_event_pitch__0d5de6c492ae60dc0f32bfe612dfb599"}, "created_at": 1702281449.2313821, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_stg_event_pitch__0d5de6c492ae60dc0f32bfe612dfb599\") }}", "language": "sql", "refs": [{"name": "stg_games", "package": null, "version": null}, {"name": "stg_event_pitch_sequences", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.baseball_computer.stg_games", "model.baseball_computer.stg_event_pitch_sequences"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "game_id", "file_key_name": "models.stg_event_pitch_sequences", "attached_node": "model.baseball_computer.stg_event_pitch_sequences"}, "test.baseball_computer.relationships_stg_event_pitch_sequences_event_key__event_key__ref_stg_events_.6567690dc0": {"test_metadata": {"name": "relationships", "kwargs": {"field": "event_key", "to": "ref('stg_events')", "column_name": "event_key", "model": "{{ get_where_subquery(ref('stg_event_pitch_sequences')) }}"}, "namespace": null}, "database": "bc", "schema": "main_dbt_test__audit", "name": "relationships_stg_event_pitch_sequences_event_key__event_key__ref_stg_events_", "resource_type": "test", "package_name": "baseball_computer", "path": "relationships_stg_event_pitch__6a73b4eb7d5bd00260500a9c88533ebc.sql", "original_file_path": "models/staging/event/stg_event_pitch_sequences.yml", "unique_id": "test.baseball_computer.relationships_stg_event_pitch_sequences_event_key__event_key__ref_stg_events_.6567690dc0", "fqn": ["baseball_computer", "staging", "event", "relationships_stg_event_pitch_sequences_event_key__event_key__ref_stg_events_"], "alias": "relationships_stg_event_pitch__6a73b4eb7d5bd00260500a9c88533ebc", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_stg_event_pitch__6a73b4eb7d5bd00260500a9c88533ebc", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_stg_event_pitch__6a73b4eb7d5bd00260500a9c88533ebc"}, "created_at": 1702281449.2350552, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_stg_event_pitch__6a73b4eb7d5bd00260500a9c88533ebc\") }}", "language": "sql", "refs": [{"name": "stg_events", "package": null, "version": null}, {"name": "stg_event_pitch_sequences", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.baseball_computer.stg_events", "model.baseball_computer.stg_event_pitch_sequences"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "event_key", "file_key_name": "models.stg_event_pitch_sequences", "attached_node": "model.baseball_computer.stg_event_pitch_sequences"}, "test.baseball_computer.relationships_stg_event_audit_event_key__event_key__ref_stg_events_.c365ebf19a": {"test_metadata": {"name": "relationships", "kwargs": {"field": "event_key", "to": "ref('stg_events')", "column_name": "event_key", "model": "{{ get_where_subquery(ref('stg_event_audit')) }}"}, "namespace": null}, "database": "bc", "schema": "main_dbt_test__audit", "name": "relationships_stg_event_audit_event_key__event_key__ref_stg_events_", "resource_type": "test", "package_name": "baseball_computer", "path": "relationships_stg_event_audit_3aeb1b1fb9d5e26b9345f092855d5c27.sql", "original_file_path": "models/staging/event/stg_event_audit.yml", "unique_id": "test.baseball_computer.relationships_stg_event_audit_event_key__event_key__ref_stg_events_.c365ebf19a", "fqn": ["baseball_computer", "staging", "event", "relationships_stg_event_audit_event_key__event_key__ref_stg_events_"], "alias": "relationships_stg_event_audit_3aeb1b1fb9d5e26b9345f092855d5c27", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_stg_event_audit_3aeb1b1fb9d5e26b9345f092855d5c27", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_stg_event_audit_3aeb1b1fb9d5e26b9345f092855d5c27"}, "created_at": 1702281449.24139, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_stg_event_audit_3aeb1b1fb9d5e26b9345f092855d5c27\") }}", "language": "sql", "refs": [{"name": "stg_events", "package": null, "version": null}, {"name": "stg_event_audit", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.baseball_computer.stg_events", "model.baseball_computer.stg_event_audit"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "event_key", "file_key_name": "models.stg_event_audit", "attached_node": "model.baseball_computer.stg_event_audit"}, "test.baseball_computer.relationships_stg_events_game_id__game_id__ref_stg_games_.2ff9f22170": {"test_metadata": {"name": "relationships", "kwargs": {"field": "game_id", "to": "ref('stg_games')", "column_name": "game_id", "model": "{{ get_where_subquery(ref('stg_events')) }}"}, "namespace": null}, "database": "bc", "schema": "main_dbt_test__audit", "name": "relationships_stg_events_game_id__game_id__ref_stg_games_", "resource_type": "test", "package_name": "baseball_computer", "path": "relationships_stg_events_game_id__game_id__ref_stg_games_.sql", "original_file_path": "models/staging/event/stg_events.yml", "unique_id": "test.baseball_computer.relationships_stg_events_game_id__game_id__ref_stg_games_.2ff9f22170", "fqn": ["baseball_computer", "staging", "event", "relationships_stg_events_game_id__game_id__ref_stg_games_"], "alias": "relationships_stg_events_game_id__game_id__ref_stg_games_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1702281449.249373, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_games", "package": null, "version": null}, {"name": "stg_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.baseball_computer.stg_games", "model.baseball_computer.stg_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "game_id", "file_key_name": "models.stg_events", "attached_node": "model.baseball_computer.stg_events"}, "test.baseball_computer.relationships_stg_event_fielding_plays_game_id__game_id__ref_stg_games_.377518fe2c": {"test_metadata": {"name": "relationships", "kwargs": {"field": "game_id", "to": "ref('stg_games')", "column_name": "game_id", "model": "{{ get_where_subquery(ref('stg_event_fielding_plays')) }}"}, "namespace": null}, "database": "bc", "schema": "main_dbt_test__audit", "name": "relationships_stg_event_fielding_plays_game_id__game_id__ref_stg_games_", "resource_type": "test", "package_name": "baseball_computer", "path": "relationships_stg_event_fieldi_a106aa45537d653721ee27d9c5121e1c.sql", "original_file_path": "models/staging/event/stg_event_fielding_plays.yml", "unique_id": "test.baseball_computer.relationships_stg_event_fielding_plays_game_id__game_id__ref_stg_games_.377518fe2c", "fqn": ["baseball_computer", "staging", "event", "relationships_stg_event_fielding_plays_game_id__game_id__ref_stg_games_"], "alias": "relationships_stg_event_fieldi_a106aa45537d653721ee27d9c5121e1c", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_stg_event_fieldi_a106aa45537d653721ee27d9c5121e1c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_stg_event_fieldi_a106aa45537d653721ee27d9c5121e1c"}, "created_at": 1702281449.254581, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_stg_event_fieldi_a106aa45537d653721ee27d9c5121e1c\") }}", "language": "sql", "refs": [{"name": "stg_games", "package": null, "version": null}, {"name": "stg_event_fielding_plays", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.baseball_computer.stg_games", "model.baseball_computer.stg_event_fielding_plays"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "game_id", "file_key_name": "models.stg_event_fielding_plays", "attached_node": "model.baseball_computer.stg_event_fielding_plays"}, "test.baseball_computer.relationships_stg_event_fielding_plays_event_key__event_key__ref_stg_events_.da88649ba4": {"test_metadata": {"name": "relationships", "kwargs": {"field": "event_key", "to": "ref('stg_events')", "column_name": "event_key", "model": "{{ get_where_subquery(ref('stg_event_fielding_plays')) }}"}, "namespace": null}, "database": "bc", "schema": "main_dbt_test__audit", "name": "relationships_stg_event_fielding_plays_event_key__event_key__ref_stg_events_", "resource_type": "test", "package_name": "baseball_computer", "path": "relationships_stg_event_fieldi_66138f9d3e623fa84f87871f2b288802.sql", "original_file_path": "models/staging/event/stg_event_fielding_plays.yml", "unique_id": "test.baseball_computer.relationships_stg_event_fielding_plays_event_key__event_key__ref_stg_events_.da88649ba4", "fqn": ["baseball_computer", "staging", "event", "relationships_stg_event_fielding_plays_event_key__event_key__ref_stg_events_"], "alias": "relationships_stg_event_fieldi_66138f9d3e623fa84f87871f2b288802", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_stg_event_fieldi_66138f9d3e623fa84f87871f2b288802", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_stg_event_fieldi_66138f9d3e623fa84f87871f2b288802"}, "created_at": 1702281449.258302, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_stg_event_fieldi_66138f9d3e623fa84f87871f2b288802\") }}", "language": "sql", "refs": [{"name": "stg_events", "package": null, "version": null}, {"name": "stg_event_fielding_plays", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.baseball_computer.stg_events", "model.baseball_computer.stg_event_fielding_plays"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "event_key", "file_key_name": "models.stg_event_fielding_plays", "attached_node": "model.baseball_computer.stg_event_fielding_plays"}, "test.baseball_computer.relationships_stg_event_baserunners_game_id__game_id__ref_stg_games_.d70abfb1df": {"test_metadata": {"name": "relationships", "kwargs": {"field": "game_id", "to": "ref('stg_games')", "column_name": "game_id", "model": "{{ get_where_subquery(ref('stg_event_baserunners')) }}"}, "namespace": null}, "database": "bc", "schema": "main_dbt_test__audit", "name": "relationships_stg_event_baserunners_game_id__game_id__ref_stg_games_", "resource_type": "test", "package_name": "baseball_computer", "path": "relationships_stg_event_baseru_644507d8f9cd23dc627a4b7330125c0a.sql", "original_file_path": "models/staging/event/stg_event_baserunners.yml", "unique_id": "test.baseball_computer.relationships_stg_event_baserunners_game_id__game_id__ref_stg_games_.d70abfb1df", "fqn": ["baseball_computer", "staging", "event", "relationships_stg_event_baserunners_game_id__game_id__ref_stg_games_"], "alias": "relationships_stg_event_baseru_644507d8f9cd23dc627a4b7330125c0a", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_stg_event_baseru_644507d8f9cd23dc627a4b7330125c0a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_stg_event_baseru_644507d8f9cd23dc627a4b7330125c0a"}, "created_at": 1702281449.265694, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_stg_event_baseru_644507d8f9cd23dc627a4b7330125c0a\") }}", "language": "sql", "refs": [{"name": "stg_games", "package": null, "version": null}, {"name": "stg_event_baserunners", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.baseball_computer.stg_games", "model.baseball_computer.stg_event_baserunners"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "game_id", "file_key_name": "models.stg_event_baserunners", "attached_node": "model.baseball_computer.stg_event_baserunners"}, "test.baseball_computer.relationships_stg_event_baserunners_event_key__event_key__ref_stg_events_.44661689b8": {"test_metadata": {"name": "relationships", "kwargs": {"field": "event_key", "to": "ref('stg_events')", "column_name": "event_key", "model": "{{ get_where_subquery(ref('stg_event_baserunners')) }}"}, "namespace": null}, "database": "bc", "schema": "main_dbt_test__audit", "name": "relationships_stg_event_baserunners_event_key__event_key__ref_stg_events_", "resource_type": "test", "package_name": "baseball_computer", "path": "relationships_stg_event_baseru_c7abe6e8aa96f0f0e07f24f97cc4e6d5.sql", "original_file_path": "models/staging/event/stg_event_baserunners.yml", "unique_id": "test.baseball_computer.relationships_stg_event_baserunners_event_key__event_key__ref_stg_events_.44661689b8", "fqn": ["baseball_computer", "staging", "event", "relationships_stg_event_baserunners_event_key__event_key__ref_stg_events_"], "alias": "relationships_stg_event_baseru_c7abe6e8aa96f0f0e07f24f97cc4e6d5", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_stg_event_baseru_c7abe6e8aa96f0f0e07f24f97cc4e6d5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_stg_event_baseru_c7abe6e8aa96f0f0e07f24f97cc4e6d5"}, "created_at": 1702281449.269309, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_stg_event_baseru_c7abe6e8aa96f0f0e07f24f97cc4e6d5\") }}", "language": "sql", "refs": [{"name": "stg_events", "package": null, "version": null}, {"name": "stg_event_baserunners", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.baseball_computer.stg_events", "model.baseball_computer.stg_event_baserunners"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "event_key", "file_key_name": "models.stg_event_baserunners", "attached_node": "model.baseball_computer.stg_event_baserunners"}, "test.baseball_computer.relationships_stg_event_comments_event_key__event_key__ref_stg_events_.10a708d8a1": {"test_metadata": {"name": "relationships", "kwargs": {"field": "event_key", "to": "ref('stg_events')", "column_name": "event_key", "model": "{{ get_where_subquery(ref('stg_event_comments')) }}"}, "namespace": null}, "database": "bc", "schema": "main_dbt_test__audit", "name": "relationships_stg_event_comments_event_key__event_key__ref_stg_events_", "resource_type": "test", "package_name": "baseball_computer", "path": "relationships_stg_event_commen_796ca3e95257c972985cdfa34f545a7d.sql", "original_file_path": "models/staging/event/stg_event_comments.yml", "unique_id": "test.baseball_computer.relationships_stg_event_comments_event_key__event_key__ref_stg_events_.10a708d8a1", "fqn": ["baseball_computer", "staging", "event", "relationships_stg_event_comments_event_key__event_key__ref_stg_events_"], "alias": "relationships_stg_event_commen_796ca3e95257c972985cdfa34f545a7d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_stg_event_commen_796ca3e95257c972985cdfa34f545a7d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_stg_event_commen_796ca3e95257c972985cdfa34f545a7d"}, "created_at": 1702281449.2762072, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_stg_event_commen_796ca3e95257c972985cdfa34f545a7d\") }}", "language": "sql", "refs": [{"name": "stg_events", "package": null, "version": null}, {"name": "stg_event_comments", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.baseball_computer.stg_events", "model.baseball_computer.stg_event_comments"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "event_key", "file_key_name": "models.stg_event_comments", "attached_node": "model.baseball_computer.stg_event_comments"}, "test.baseball_computer.dbt_utils_not_null_proportion_event_transition_values_0_999__expected_runs_change.1f88bb4978": {"test_metadata": {"name": "not_null_proportion", "kwargs": {"at_least": 0.999, "column_name": "expected_runs_change", "model": "{{ get_where_subquery(ref('event_transition_values')) }}"}, "namespace": "dbt_utils"}, "database": "bc", "schema": "main_dbt_test__audit", "name": "dbt_utils_not_null_proportion_event_transition_values_0_999__expected_runs_change", "resource_type": "test", "package_name": "baseball_computer", "path": "dbt_utils_not_null_proportion__9853965944b21394a600280636238ff0.sql", "original_file_path": "models/intermediate/expectancy/event_transition_values.yml", "unique_id": "test.baseball_computer.dbt_utils_not_null_proportion_event_transition_values_0_999__expected_runs_change.1f88bb4978", "fqn": ["baseball_computer", "intermediate", "expectancy", "dbt_utils_not_null_proportion_event_transition_values_0_999__expected_runs_change"], "alias": "dbt_utils_not_null_proportion__9853965944b21394a600280636238ff0", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_not_null_proportion__9853965944b21394a600280636238ff0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_not_null_proportion__9853965944b21394a600280636238ff0"}, "created_at": 1702281449.349309, "relation_name": null, "raw_code": "{{ dbt_utils.test_not_null_proportion(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_not_null_proportion__9853965944b21394a600280636238ff0\") }}", "language": "sql", "refs": [{"name": "event_transition_values", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_not_null_proportion", "macro.dbt.get_where_subquery"], "nodes": ["model.baseball_computer.event_transition_values"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "expected_runs_change", "file_key_name": "models.event_transition_values", "attached_node": "model.baseball_computer.event_transition_values"}, "test.baseball_computer.dbt_utils_not_null_proportion_event_transition_values_0_999__expected_home_win_change.c38533e897": {"test_metadata": {"name": "not_null_proportion", "kwargs": {"at_least": 0.999, "column_name": "expected_home_win_change", "model": "{{ get_where_subquery(ref('event_transition_values')) }}"}, "namespace": "dbt_utils"}, "database": "bc", "schema": "main_dbt_test__audit", "name": "dbt_utils_not_null_proportion_event_transition_values_0_999__expected_home_win_change", "resource_type": "test", "package_name": "baseball_computer", "path": "dbt_utils_not_null_proportion__92293115149cc9fe3c9be06b2ce7916c.sql", "original_file_path": "models/intermediate/expectancy/event_transition_values.yml", "unique_id": "test.baseball_computer.dbt_utils_not_null_proportion_event_transition_values_0_999__expected_home_win_change.c38533e897", "fqn": ["baseball_computer", "intermediate", "expectancy", "dbt_utils_not_null_proportion_event_transition_values_0_999__expected_home_win_change"], "alias": "dbt_utils_not_null_proportion__92293115149cc9fe3c9be06b2ce7916c", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_not_null_proportion__92293115149cc9fe3c9be06b2ce7916c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_not_null_proportion__92293115149cc9fe3c9be06b2ce7916c"}, "created_at": 1702281449.356927, "relation_name": null, "raw_code": "{{ dbt_utils.test_not_null_proportion(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_not_null_proportion__92293115149cc9fe3c9be06b2ce7916c\") }}", "language": "sql", "refs": [{"name": "event_transition_values", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_not_null_proportion", "macro.dbt.get_where_subquery"], "nodes": ["model.baseball_computer.event_transition_values"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "expected_home_win_change", "file_key_name": "models.event_transition_values", "attached_node": "model.baseball_computer.event_transition_values"}, "test.baseball_computer.dbt_utils_not_null_proportion_event_transition_values_0_999__expected_batting_win_change.a7ac9d0c20": {"test_metadata": {"name": "not_null_proportion", "kwargs": {"at_least": 0.999, "column_name": "expected_batting_win_change", "model": "{{ get_where_subquery(ref('event_transition_values')) }}"}, "namespace": "dbt_utils"}, "database": "bc", "schema": "main_dbt_test__audit", "name": "dbt_utils_not_null_proportion_event_transition_values_0_999__expected_batting_win_change", "resource_type": "test", "package_name": "baseball_computer", "path": "dbt_utils_not_null_proportion__4ddb599e4e20f3f4a42eb1a6d8df3ad9.sql", "original_file_path": "models/intermediate/expectancy/event_transition_values.yml", "unique_id": "test.baseball_computer.dbt_utils_not_null_proportion_event_transition_values_0_999__expected_batting_win_change.a7ac9d0c20", "fqn": ["baseball_computer", "intermediate", "expectancy", "dbt_utils_not_null_proportion_event_transition_values_0_999__expected_batting_win_change"], "alias": "dbt_utils_not_null_proportion__4ddb599e4e20f3f4a42eb1a6d8df3ad9", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_not_null_proportion__4ddb599e4e20f3f4a42eb1a6d8df3ad9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_not_null_proportion__4ddb599e4e20f3f4a42eb1a6d8df3ad9"}, "created_at": 1702281449.360377, "relation_name": null, "raw_code": "{{ dbt_utils.test_not_null_proportion(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_not_null_proportion__4ddb599e4e20f3f4a42eb1a6d8df3ad9\") }}", "language": "sql", "refs": [{"name": "event_transition_values", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_not_null_proportion", "macro.dbt.get_where_subquery"], "nodes": ["model.baseball_computer.event_transition_values"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "expected_batting_win_change", "file_key_name": "models.event_transition_values", "attached_node": "model.baseball_computer.event_transition_values"}, "test.baseball_computer.dbt_utils_not_null_proportion_player_position_game_fielding_stats_0_995__outs_played.8bb7eb59b4": {"test_metadata": {"name": "not_null_proportion", "kwargs": {"at_least": 0.995, "column_name": "outs_played", "model": "{{ get_where_subquery(ref('player_position_game_fielding_stats')) }}"}, "namespace": "dbt_utils"}, "database": "bc", "schema": "main_dbt_test__audit", "name": "dbt_utils_not_null_proportion_player_position_game_fielding_stats_0_995__outs_played", "resource_type": "test", "package_name": "baseball_computer", "path": "dbt_utils_not_null_proportion__3a0e23878af9fc9e25a1c6f78996ccf5.sql", "original_file_path": "models/intermediate/player_game_level/player_position_game_fielding_stats.yml", "unique_id": "test.baseball_computer.dbt_utils_not_null_proportion_player_position_game_fielding_stats_0_995__outs_played.8bb7eb59b4", "fqn": ["baseball_computer", "intermediate", "player_game_level", "dbt_utils_not_null_proportion_player_position_game_fielding_stats_0_995__outs_played"], "alias": "dbt_utils_not_null_proportion__3a0e23878af9fc9e25a1c6f78996ccf5", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_not_null_proportion__3a0e23878af9fc9e25a1c6f78996ccf5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_not_null_proportion__3a0e23878af9fc9e25a1c6f78996ccf5"}, "created_at": 1702281449.391548, "relation_name": null, "raw_code": "{{ dbt_utils.test_not_null_proportion(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_not_null_proportion__3a0e23878af9fc9e25a1c6f78996ccf5\") }}", "language": "sql", "refs": [{"name": "player_position_game_fielding_stats", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_not_null_proportion", "macro.dbt.get_where_subquery"], "nodes": ["model.baseball_computer.player_position_game_fielding_stats"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "outs_played", "file_key_name": "models.player_position_game_fielding_stats", "attached_node": "model.baseball_computer.player_position_game_fielding_stats"}, "test.baseball_computer.dbt_utils_not_null_proportion_player_position_game_fielding_stats_0_995__putouts.9e00a6ab61": {"test_metadata": {"name": "not_null_proportion", "kwargs": {"at_least": 0.995, "column_name": "putouts", "model": "{{ get_where_subquery(ref('player_position_game_fielding_stats')) }}"}, "namespace": "dbt_utils"}, "database": "bc", "schema": "main_dbt_test__audit", "name": "dbt_utils_not_null_proportion_player_position_game_fielding_stats_0_995__putouts", "resource_type": "test", "package_name": "baseball_computer", "path": "dbt_utils_not_null_proportion__380e014656c85950ee8ea8588da77410.sql", "original_file_path": "models/intermediate/player_game_level/player_position_game_fielding_stats.yml", "unique_id": "test.baseball_computer.dbt_utils_not_null_proportion_player_position_game_fielding_stats_0_995__putouts.9e00a6ab61", "fqn": ["baseball_computer", "intermediate", "player_game_level", "dbt_utils_not_null_proportion_player_position_game_fielding_stats_0_995__putouts"], "alias": "dbt_utils_not_null_proportion__380e014656c85950ee8ea8588da77410", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_not_null_proportion__380e014656c85950ee8ea8588da77410", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_not_null_proportion__380e014656c85950ee8ea8588da77410"}, "created_at": 1702281449.395016, "relation_name": null, "raw_code": "{{ dbt_utils.test_not_null_proportion(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_not_null_proportion__380e014656c85950ee8ea8588da77410\") }}", "language": "sql", "refs": [{"name": "player_position_game_fielding_stats", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_not_null_proportion", "macro.dbt.get_where_subquery"], "nodes": ["model.baseball_computer.player_position_game_fielding_stats"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "putouts", "file_key_name": "models.player_position_game_fielding_stats", "attached_node": "model.baseball_computer.player_position_game_fielding_stats"}, "test.baseball_computer.dbt_utils_not_null_proportion_player_position_game_fielding_stats_0_995__assists.a29066a509": {"test_metadata": {"name": "not_null_proportion", "kwargs": {"at_least": 0.995, "column_name": "assists", "model": "{{ get_where_subquery(ref('player_position_game_fielding_stats')) }}"}, "namespace": "dbt_utils"}, "database": "bc", "schema": "main_dbt_test__audit", "name": "dbt_utils_not_null_proportion_player_position_game_fielding_stats_0_995__assists", "resource_type": "test", "package_name": "baseball_computer", "path": "dbt_utils_not_null_proportion__20af38e027fae4ac76503045e054b7a7.sql", "original_file_path": "models/intermediate/player_game_level/player_position_game_fielding_stats.yml", "unique_id": "test.baseball_computer.dbt_utils_not_null_proportion_player_position_game_fielding_stats_0_995__assists.a29066a509", "fqn": ["baseball_computer", "intermediate", "player_game_level", "dbt_utils_not_null_proportion_player_position_game_fielding_stats_0_995__assists"], "alias": "dbt_utils_not_null_proportion__20af38e027fae4ac76503045e054b7a7", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_not_null_proportion__20af38e027fae4ac76503045e054b7a7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_not_null_proportion__20af38e027fae4ac76503045e054b7a7"}, "created_at": 1702281449.3983319, "relation_name": null, "raw_code": "{{ dbt_utils.test_not_null_proportion(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_not_null_proportion__20af38e027fae4ac76503045e054b7a7\") }}", "language": "sql", "refs": [{"name": "player_position_game_fielding_stats", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_not_null_proportion", "macro.dbt.get_where_subquery"], "nodes": ["model.baseball_computer.player_position_game_fielding_stats"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "assists", "file_key_name": "models.player_position_game_fielding_stats", "attached_node": "model.baseball_computer.player_position_game_fielding_stats"}, "test.baseball_computer.dbt_utils_not_null_proportion_player_position_game_fielding_stats_0_995__errors.8eea9cbcc8": {"test_metadata": {"name": "not_null_proportion", "kwargs": {"at_least": 0.995, "column_name": "errors", "model": "{{ get_where_subquery(ref('player_position_game_fielding_stats')) }}"}, "namespace": "dbt_utils"}, "database": "bc", "schema": "main_dbt_test__audit", "name": "dbt_utils_not_null_proportion_player_position_game_fielding_stats_0_995__errors", "resource_type": "test", "package_name": "baseball_computer", "path": "dbt_utils_not_null_proportion__5ad1b26148b60e198b68ab0e16334ed1.sql", "original_file_path": "models/intermediate/player_game_level/player_position_game_fielding_stats.yml", "unique_id": "test.baseball_computer.dbt_utils_not_null_proportion_player_position_game_fielding_stats_0_995__errors.8eea9cbcc8", "fqn": ["baseball_computer", "intermediate", "player_game_level", "dbt_utils_not_null_proportion_player_position_game_fielding_stats_0_995__errors"], "alias": "dbt_utils_not_null_proportion__5ad1b26148b60e198b68ab0e16334ed1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_not_null_proportion__5ad1b26148b60e198b68ab0e16334ed1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_not_null_proportion__5ad1b26148b60e198b68ab0e16334ed1"}, "created_at": 1702281449.4014049, "relation_name": null, "raw_code": "{{ dbt_utils.test_not_null_proportion(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_not_null_proportion__5ad1b26148b60e198b68ab0e16334ed1\") }}", "language": "sql", "refs": [{"name": "player_position_game_fielding_stats", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_not_null_proportion", "macro.dbt.get_where_subquery"], "nodes": ["model.baseball_computer.player_position_game_fielding_stats"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "errors", "file_key_name": "models.player_position_game_fielding_stats", "attached_node": "model.baseball_computer.player_position_game_fielding_stats"}, "test.baseball_computer.dbt_utils_not_null_proportion_player_position_game_fielding_stats_0_995__double_plays.5724973f8f": {"test_metadata": {"name": "not_null_proportion", "kwargs": {"at_least": 0.995, "column_name": "double_plays", "model": "{{ get_where_subquery(ref('player_position_game_fielding_stats')) }}"}, "namespace": "dbt_utils"}, "database": "bc", "schema": "main_dbt_test__audit", "name": "dbt_utils_not_null_proportion_player_position_game_fielding_stats_0_995__double_plays", "resource_type": "test", "package_name": "baseball_computer", "path": "dbt_utils_not_null_proportion__2542a8b140056382b6612d0d4918fc17.sql", "original_file_path": "models/intermediate/player_game_level/player_position_game_fielding_stats.yml", "unique_id": "test.baseball_computer.dbt_utils_not_null_proportion_player_position_game_fielding_stats_0_995__double_plays.5724973f8f", "fqn": ["baseball_computer", "intermediate", "player_game_level", "dbt_utils_not_null_proportion_player_position_game_fielding_stats_0_995__double_plays"], "alias": "dbt_utils_not_null_proportion__2542a8b140056382b6612d0d4918fc17", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_not_null_proportion__2542a8b140056382b6612d0d4918fc17", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_not_null_proportion__2542a8b140056382b6612d0d4918fc17"}, "created_at": 1702281449.404686, "relation_name": null, "raw_code": "{{ dbt_utils.test_not_null_proportion(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_not_null_proportion__2542a8b140056382b6612d0d4918fc17\") }}", "language": "sql", "refs": [{"name": "player_position_game_fielding_stats", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_not_null_proportion", "macro.dbt.get_where_subquery"], "nodes": ["model.baseball_computer.player_position_game_fielding_stats"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "double_plays", "file_key_name": "models.player_position_game_fielding_stats", "attached_node": "model.baseball_computer.player_position_game_fielding_stats"}, "test.baseball_computer.dbt_utils_not_null_proportion_player_position_game_fielding_stats_0_995__triple_plays.534ecb7a2b": {"test_metadata": {"name": "not_null_proportion", "kwargs": {"at_least": 0.995, "column_name": "triple_plays", "model": "{{ get_where_subquery(ref('player_position_game_fielding_stats')) }}"}, "namespace": "dbt_utils"}, "database": "bc", "schema": "main_dbt_test__audit", "name": "dbt_utils_not_null_proportion_player_position_game_fielding_stats_0_995__triple_plays", "resource_type": "test", "package_name": "baseball_computer", "path": "dbt_utils_not_null_proportion__bf8e4729a96512304d01c43bd0938e49.sql", "original_file_path": "models/intermediate/player_game_level/player_position_game_fielding_stats.yml", "unique_id": "test.baseball_computer.dbt_utils_not_null_proportion_player_position_game_fielding_stats_0_995__triple_plays.534ecb7a2b", "fqn": ["baseball_computer", "intermediate", "player_game_level", "dbt_utils_not_null_proportion_player_position_game_fielding_stats_0_995__triple_plays"], "alias": "dbt_utils_not_null_proportion__bf8e4729a96512304d01c43bd0938e49", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_not_null_proportion__bf8e4729a96512304d01c43bd0938e49", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_not_null_proportion__bf8e4729a96512304d01c43bd0938e49"}, "created_at": 1702281449.407775, "relation_name": null, "raw_code": "{{ dbt_utils.test_not_null_proportion(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_not_null_proportion__bf8e4729a96512304d01c43bd0938e49\") }}", "language": "sql", "refs": [{"name": "player_position_game_fielding_stats", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_not_null_proportion", "macro.dbt.get_where_subquery"], "nodes": ["model.baseball_computer.player_position_game_fielding_stats"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "triple_plays", "file_key_name": "models.player_position_game_fielding_stats", "attached_node": "model.baseball_computer.player_position_game_fielding_stats"}, "test.baseball_computer.dbt_utils_not_null_proportion_player_position_game_fielding_stats_0_93__stolen_bases.d6787fbb17": {"test_metadata": {"name": "not_null_proportion", "kwargs": {"at_least": 0.93, "column_name": "stolen_bases", "model": "{{ get_where_subquery(ref('player_position_game_fielding_stats')) }}"}, "namespace": "dbt_utils"}, "database": "bc", "schema": "main_dbt_test__audit", "name": "dbt_utils_not_null_proportion_player_position_game_fielding_stats_0_93__stolen_bases", "resource_type": "test", "package_name": "baseball_computer", "path": "dbt_utils_not_null_proportion__7ff9195c306771f99726b4eba94956c3.sql", "original_file_path": "models/intermediate/player_game_level/player_position_game_fielding_stats.yml", "unique_id": "test.baseball_computer.dbt_utils_not_null_proportion_player_position_game_fielding_stats_0_93__stolen_bases.d6787fbb17", "fqn": ["baseball_computer", "intermediate", "player_game_level", "dbt_utils_not_null_proportion_player_position_game_fielding_stats_0_93__stolen_bases"], "alias": "dbt_utils_not_null_proportion__7ff9195c306771f99726b4eba94956c3", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_not_null_proportion__7ff9195c306771f99726b4eba94956c3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_not_null_proportion__7ff9195c306771f99726b4eba94956c3"}, "created_at": 1702281449.41108, "relation_name": null, "raw_code": "{{ dbt_utils.test_not_null_proportion(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_not_null_proportion__7ff9195c306771f99726b4eba94956c3\") }}", "language": "sql", "refs": [{"name": "player_position_game_fielding_stats", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_not_null_proportion", "macro.dbt.get_where_subquery"], "nodes": ["model.baseball_computer.player_position_game_fielding_stats"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "stolen_bases", "file_key_name": "models.player_position_game_fielding_stats", "attached_node": "model.baseball_computer.player_position_game_fielding_stats"}, "test.baseball_computer.dbt_utils_not_null_proportion_player_position_game_fielding_stats_0_93__caught_stealing.5f9f3af801": {"test_metadata": {"name": "not_null_proportion", "kwargs": {"at_least": 0.93, "column_name": "caught_stealing", "model": "{{ get_where_subquery(ref('player_position_game_fielding_stats')) }}"}, "namespace": "dbt_utils"}, "database": "bc", "schema": "main_dbt_test__audit", "name": "dbt_utils_not_null_proportion_player_position_game_fielding_stats_0_93__caught_stealing", "resource_type": "test", "package_name": "baseball_computer", "path": "dbt_utils_not_null_proportion__d69d867a462458cc24b36b8c6392449f.sql", "original_file_path": "models/intermediate/player_game_level/player_position_game_fielding_stats.yml", "unique_id": "test.baseball_computer.dbt_utils_not_null_proportion_player_position_game_fielding_stats_0_93__caught_stealing.5f9f3af801", "fqn": ["baseball_computer", "intermediate", "player_game_level", "dbt_utils_not_null_proportion_player_position_game_fielding_stats_0_93__caught_stealing"], "alias": "dbt_utils_not_null_proportion__d69d867a462458cc24b36b8c6392449f", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_not_null_proportion__d69d867a462458cc24b36b8c6392449f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_not_null_proportion__d69d867a462458cc24b36b8c6392449f"}, "created_at": 1702281449.4143648, "relation_name": null, "raw_code": "{{ dbt_utils.test_not_null_proportion(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_not_null_proportion__d69d867a462458cc24b36b8c6392449f\") }}", "language": "sql", "refs": [{"name": "player_position_game_fielding_stats", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_not_null_proportion", "macro.dbt.get_where_subquery"], "nodes": ["model.baseball_computer.player_position_game_fielding_stats"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "caught_stealing", "file_key_name": "models.player_position_game_fielding_stats", "attached_node": "model.baseball_computer.player_position_game_fielding_stats"}, "test.baseball_computer.accepted_values_calc_batted_ball_type_location_edge__Left__Middle__Right__Unknown.c9ef91bfc9": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["Left", "Middle", "Right", "Unknown"], "column_name": "location_edge", "model": "{{ get_where_subquery(ref('calc_batted_ball_type')) }}"}, "namespace": null}, "database": "bc", "schema": "main_dbt_test__audit", "name": "accepted_values_calc_batted_ball_type_location_edge__Left__Middle__Right__Unknown", "resource_type": "test", "package_name": "baseball_computer", "path": "accepted_values_calc_batted_ba_881bdce54ca791447de72e9c0427c6d4.sql", "original_file_path": "models/intermediate/event_level/calc_batted_ball_type.yml", "unique_id": "test.baseball_computer.accepted_values_calc_batted_ball_type_location_edge__Left__Middle__Right__Unknown.c9ef91bfc9", "fqn": ["baseball_computer", "intermediate", "event_level", "accepted_values_calc_batted_ball_type_location_edge__Left__Middle__Right__Unknown"], "alias": "accepted_values_calc_batted_ba_881bdce54ca791447de72e9c0427c6d4", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_calc_batted_ba_881bdce54ca791447de72e9c0427c6d4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "accepted_values_calc_batted_ba_881bdce54ca791447de72e9c0427c6d4"}, "created_at": 1702281449.535281, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_calc_batted_ba_881bdce54ca791447de72e9c0427c6d4\") }}", "language": "sql", "refs": [{"name": "calc_batted_ball_type", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.baseball_computer.calc_batted_ball_type"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "location_edge", "file_key_name": "models.calc_batted_ball_type", "attached_node": "model.baseball_computer.calc_batted_ball_type"}, "test.baseball_computer.source_not_null_misc_park_park_id.6eb47dd84e": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "park_id", "model": "{{ get_where_subquery(source('misc', 'park')) }}"}, "namespace": null}, "database": "bc", "schema": "main_dbt_test__audit", "name": "source_not_null_misc_park_park_id", "resource_type": "test", "package_name": "baseball_computer", "path": "source_not_null_misc_park_park_id.sql", "original_file_path": "models/staging/misc/source.yml", "unique_id": "test.baseball_computer.source_not_null_misc_park_park_id.6eb47dd84e", "fqn": ["baseball_computer", "staging", "misc", "source_not_null_misc_park_park_id"], "alias": "source_not_null_misc_park_park_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1702281449.56418, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["misc", "park"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.baseball_computer.misc.park"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "park_id", "file_key_name": "sources.misc", "attached_node": null}, "test.baseball_computer.source_unique_misc_park_park_id.ab6b1ee1d3": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "park_id", "model": "{{ get_where_subquery(source('misc', 'park')) }}"}, "namespace": null}, "database": "bc", "schema": "main_dbt_test__audit", "name": "source_unique_misc_park_park_id", "resource_type": "test", "package_name": "baseball_computer", "path": "source_unique_misc_park_park_id.sql", "original_file_path": "models/staging/misc/source.yml", "unique_id": "test.baseball_computer.source_unique_misc_park_park_id.ab6b1ee1d3", "fqn": ["baseball_computer", "staging", "misc", "source_unique_misc_park_park_id"], "alias": "source_unique_misc_park_park_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1702281449.565446, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["misc", "park"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.baseball_computer.misc.park"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "park_id", "file_key_name": "sources.misc", "attached_node": null}, "test.baseball_computer.source_not_null_misc_park_name.cb07f266fc": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "name", "model": "{{ get_where_subquery(source('misc', 'park')) }}"}, "namespace": null}, "database": "bc", "schema": "main_dbt_test__audit", "name": "source_not_null_misc_park_name", "resource_type": "test", "package_name": "baseball_computer", "path": "source_not_null_misc_park_name.sql", "original_file_path": "models/staging/misc/source.yml", "unique_id": "test.baseball_computer.source_not_null_misc_park_name.cb07f266fc", "fqn": ["baseball_computer", "staging", "misc", "source_not_null_misc_park_name"], "alias": "source_not_null_misc_park_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1702281449.566656, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["misc", "park"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.baseball_computer.misc.park"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "name", "file_key_name": "sources.misc", "attached_node": null}, "test.baseball_computer.source_not_null_misc_park_city.dd95bd0af9": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "city", "model": "{{ get_where_subquery(source('misc', 'park')) }}"}, "namespace": null}, "database": "bc", "schema": "main_dbt_test__audit", "name": "source_not_null_misc_park_city", "resource_type": "test", "package_name": "baseball_computer", "path": "source_not_null_misc_park_city.sql", "original_file_path": "models/staging/misc/source.yml", "unique_id": "test.baseball_computer.source_not_null_misc_park_city.dd95bd0af9", "fqn": ["baseball_computer", "staging", "misc", "source_not_null_misc_park_city"], "alias": "source_not_null_misc_park_city", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1702281449.567868, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["misc", "park"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.baseball_computer.misc.park"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "city", "file_key_name": "sources.misc", "attached_node": null}, "test.baseball_computer.source_not_null_misc_park_start_date.7ab9b2c116": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "start_date", "model": "{{ get_where_subquery(source('misc', 'park')) }}"}, "namespace": null}, "database": "bc", "schema": "main_dbt_test__audit", "name": "source_not_null_misc_park_start_date", "resource_type": "test", "package_name": "baseball_computer", "path": "source_not_null_misc_park_start_date.sql", "original_file_path": "models/staging/misc/source.yml", "unique_id": "test.baseball_computer.source_not_null_misc_park_start_date.7ab9b2c116", "fqn": ["baseball_computer", "staging", "misc", "source_not_null_misc_park_start_date"], "alias": "source_not_null_misc_park_start_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1702281449.569111, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["misc", "park"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.baseball_computer.misc.park"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "start_date", "file_key_name": "sources.misc", "attached_node": null}, "test.baseball_computer.source_not_null_misc_roster_year.944fe03dad": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "year", "model": "{{ get_where_subquery(source('misc', 'roster')) }}"}, "namespace": null}, "database": "bc", "schema": "main_dbt_test__audit", "name": "source_not_null_misc_roster_year", "resource_type": "test", "package_name": "baseball_computer", "path": "source_not_null_misc_roster_year.sql", "original_file_path": "models/staging/misc/source.yml", "unique_id": "test.baseball_computer.source_not_null_misc_roster_year.944fe03dad", "fqn": ["baseball_computer", "staging", "misc", "source_not_null_misc_roster_year"], "alias": "source_not_null_misc_roster_year", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1702281449.570726, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["misc", "roster"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.baseball_computer.misc.roster"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "year", "file_key_name": "sources.misc", "attached_node": null}, "test.baseball_computer.source_not_null_misc_roster_player_id.a4e0bf60be": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "player_id", "model": "{{ get_where_subquery(source('misc', 'roster')) }}"}, "namespace": null}, "database": "bc", "schema": "main_dbt_test__audit", "name": "source_not_null_misc_roster_player_id", "resource_type": "test", "package_name": "baseball_computer", "path": "source_not_null_misc_roster_player_id.sql", "original_file_path": "models/staging/misc/source.yml", "unique_id": "test.baseball_computer.source_not_null_misc_roster_player_id.a4e0bf60be", "fqn": ["baseball_computer", "staging", "misc", "source_not_null_misc_roster_player_id"], "alias": "source_not_null_misc_roster_player_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1702281449.571923, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["misc", "roster"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.baseball_computer.misc.roster"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "player_id", "file_key_name": "sources.misc", "attached_node": null}, "test.baseball_computer.source_not_null_misc_roster_last_name.2016310734": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "last_name", "model": "{{ get_where_subquery(source('misc', 'roster')) }}"}, "namespace": null}, "database": "bc", "schema": "main_dbt_test__audit", "name": "source_not_null_misc_roster_last_name", "resource_type": "test", "package_name": "baseball_computer", "path": "source_not_null_misc_roster_last_name.sql", "original_file_path": "models/staging/misc/source.yml", "unique_id": "test.baseball_computer.source_not_null_misc_roster_last_name.2016310734", "fqn": ["baseball_computer", "staging", "misc", "source_not_null_misc_roster_last_name"], "alias": "source_not_null_misc_roster_last_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1702281449.573112, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["misc", "roster"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.baseball_computer.misc.roster"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "last_name", "file_key_name": "sources.misc", "attached_node": null}, "test.baseball_computer.source_not_null_misc_roster_team_id.251ed96cc3": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "team_id", "model": "{{ get_where_subquery(source('misc', 'roster')) }}"}, "namespace": null}, "database": "bc", "schema": "main_dbt_test__audit", "name": "source_not_null_misc_roster_team_id", "resource_type": "test", "package_name": "baseball_computer", "path": "source_not_null_misc_roster_team_id.sql", "original_file_path": "models/staging/misc/source.yml", "unique_id": "test.baseball_computer.source_not_null_misc_roster_team_id.251ed96cc3", "fqn": ["baseball_computer", "staging", "misc", "source_not_null_misc_roster_team_id"], "alias": "source_not_null_misc_roster_team_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1702281449.5742888, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["misc", "roster"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.baseball_computer.misc.roster"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "team_id", "file_key_name": "sources.misc", "attached_node": null}, "test.baseball_computer.source_not_null_misc_roster_position.0abc3727ad": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "position", "model": "{{ get_where_subquery(source('misc', 'roster')) }}"}, "namespace": null}, "database": "bc", "schema": "main_dbt_test__audit", "name": "source_not_null_misc_roster_position", "resource_type": "test", "package_name": "baseball_computer", "path": "source_not_null_misc_roster_position.sql", "original_file_path": "models/staging/misc/source.yml", "unique_id": "test.baseball_computer.source_not_null_misc_roster_position.0abc3727ad", "fqn": ["baseball_computer", "staging", "misc", "source_not_null_misc_roster_position"], "alias": "source_not_null_misc_roster_position", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1702281449.5754912, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["misc", "roster"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.baseball_computer.misc.roster"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "position", "file_key_name": "sources.misc", "attached_node": null}, "test.baseball_computer.source_unique_baseballdatabank_people_playerid.028c893cc1": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "playerid", "model": "{{ get_where_subquery(source('baseballdatabank', 'people')) }}"}, "namespace": null}, "database": "bc", "schema": "main_dbt_test__audit", "name": "source_unique_baseballdatabank_people_playerid", "resource_type": "test", "package_name": "baseball_computer", "path": "source_unique_baseballdatabank_people_playerid.sql", "original_file_path": "models/staging/baseballdatabank/source.yml", "unique_id": "test.baseball_computer.source_unique_baseballdatabank_people_playerid.028c893cc1", "fqn": ["baseball_computer", "staging", "baseballdatabank", "source_unique_baseballdatabank_people_playerid"], "alias": "source_unique_baseballdatabank_people_playerid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1702281449.577878, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["baseballdatabank", "people"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.baseball_computer.baseballdatabank.people"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "playerid", "file_key_name": "sources.baseballdatabank", "attached_node": null}, "test.baseball_computer.source_not_null_baseballdatabank_people_playerid.15b902dc68": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "playerid", "model": "{{ get_where_subquery(source('baseballdatabank', 'people')) }}"}, "namespace": null}, "database": "bc", "schema": "main_dbt_test__audit", "name": "source_not_null_baseballdatabank_people_playerid", "resource_type": "test", "package_name": "baseball_computer", "path": "source_not_null_baseballdatabank_people_playerid.sql", "original_file_path": "models/staging/baseballdatabank/source.yml", "unique_id": "test.baseball_computer.source_not_null_baseballdatabank_people_playerid.15b902dc68", "fqn": ["baseball_computer", "staging", "baseballdatabank", "source_not_null_baseballdatabank_people_playerid"], "alias": "source_not_null_baseballdatabank_people_playerid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1702281449.5790982, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["baseballdatabank", "people"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.baseball_computer.baseballdatabank.people"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "playerid", "file_key_name": "sources.baseballdatabank", "attached_node": null}, "test.baseball_computer.source_unique_baseballdatabank_people_retro_id.dd8c06d204": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "retro_id", "model": "{{ get_where_subquery(source('baseballdatabank', 'people')) }}"}, "namespace": null}, "database": "bc", "schema": "main_dbt_test__audit", "name": "source_unique_baseballdatabank_people_retro_id", "resource_type": "test", "package_name": "baseball_computer", "path": "source_unique_baseballdatabank_people_retro_id.sql", "original_file_path": "models/staging/baseballdatabank/source.yml", "unique_id": "test.baseball_computer.source_unique_baseballdatabank_people_retro_id.dd8c06d204", "fqn": ["baseball_computer", "staging", "baseballdatabank", "source_unique_baseballdatabank_people_retro_id"], "alias": "source_unique_baseballdatabank_people_retro_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1702281449.580438, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["baseballdatabank", "people"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.baseball_computer.baseballdatabank.people"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "retro_id", "file_key_name": "sources.baseballdatabank", "attached_node": null}, "test.baseball_computer.source_unique_baseballdatabank_people_bbrefid.ae622725ff": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "bbrefid", "model": "{{ get_where_subquery(source('baseballdatabank', 'people')) }}"}, "namespace": null}, "database": "bc", "schema": "main_dbt_test__audit", "name": "source_unique_baseballdatabank_people_bbrefid", "resource_type": "test", "package_name": "baseball_computer", "path": "source_unique_baseballdatabank_people_bbrefid.sql", "original_file_path": "models/staging/baseballdatabank/source.yml", "unique_id": "test.baseball_computer.source_unique_baseballdatabank_people_bbrefid.ae622725ff", "fqn": ["baseball_computer", "staging", "baseballdatabank", "source_unique_baseballdatabank_people_bbrefid"], "alias": "source_unique_baseballdatabank_people_bbrefid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1702281449.5816052, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["baseballdatabank", "people"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.baseball_computer.baseballdatabank.people"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "bbrefid", "file_key_name": "sources.baseballdatabank", "attached_node": null}, "test.baseball_computer.source_not_null_box_score_box_score_batting_lines_game_id.57dbc78fca": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "game_id", "model": "{{ get_where_subquery(source('box_score', 'box_score_batting_lines')) }}"}, "namespace": null}, "database": "bc", "schema": "main_dbt_test__audit", "name": "source_not_null_box_score_box_score_batting_lines_game_id", "resource_type": "test", "package_name": "baseball_computer", "path": "source_not_null_box_score_box_score_batting_lines_game_id.sql", "original_file_path": "models/staging/box_score/source.yml", "unique_id": "test.baseball_computer.source_not_null_box_score_box_score_batting_lines_game_id.57dbc78fca", "fqn": ["baseball_computer", "staging", "box_score", "source_not_null_box_score_box_score_batting_lines_game_id"], "alias": "source_not_null_box_score_box_score_batting_lines_game_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1702281449.5830789, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["box_score", "box_score_batting_lines"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.baseball_computer.box_score.box_score_batting_lines"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "game_id", "file_key_name": "sources.box_score", "attached_node": null}, "test.baseball_computer.source_not_null_box_score_box_score_batting_lines_batter_id.d0f6fb2a89": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "batter_id", "model": "{{ get_where_subquery(source('box_score', 'box_score_batting_lines')) }}"}, "namespace": null}, "database": "bc", "schema": "main_dbt_test__audit", "name": "source_not_null_box_score_box_score_batting_lines_batter_id", "resource_type": "test", "package_name": "baseball_computer", "path": "source_not_null_box_score_box_score_batting_lines_batter_id.sql", "original_file_path": "models/staging/box_score/source.yml", "unique_id": "test.baseball_computer.source_not_null_box_score_box_score_batting_lines_batter_id.d0f6fb2a89", "fqn": ["baseball_computer", "staging", "box_score", "source_not_null_box_score_box_score_batting_lines_batter_id"], "alias": "source_not_null_box_score_box_score_batting_lines_batter_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1702281449.5842822, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["box_score", "box_score_batting_lines"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.baseball_computer.box_score.box_score_batting_lines"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "batter_id", "file_key_name": "sources.box_score", "attached_node": null}, "test.baseball_computer.source_not_null_box_score_box_score_batting_lines_side.002275cba3": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "side", "model": "{{ get_where_subquery(source('box_score', 'box_score_batting_lines')) }}"}, "namespace": null}, "database": "bc", "schema": "main_dbt_test__audit", "name": "source_not_null_box_score_box_score_batting_lines_side", "resource_type": "test", "package_name": "baseball_computer", "path": "source_not_null_box_score_box_score_batting_lines_side.sql", "original_file_path": "models/staging/box_score/source.yml", "unique_id": "test.baseball_computer.source_not_null_box_score_box_score_batting_lines_side.002275cba3", "fqn": ["baseball_computer", "staging", "box_score", "source_not_null_box_score_box_score_batting_lines_side"], "alias": "source_not_null_box_score_box_score_batting_lines_side", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1702281449.585731, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["box_score", "box_score_batting_lines"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.baseball_computer.box_score.box_score_batting_lines"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "side", "file_key_name": "sources.box_score", "attached_node": null}, "test.baseball_computer.source_not_null_box_score_box_score_batting_lines_lineup_position.ad36913951": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "lineup_position", "model": "{{ get_where_subquery(source('box_score', 'box_score_batting_lines')) }}"}, "namespace": null}, "database": "bc", "schema": "main_dbt_test__audit", "name": "source_not_null_box_score_box_score_batting_lines_lineup_position", "resource_type": "test", "package_name": "baseball_computer", "path": "source_not_null_box_score_box__89dd31faa6172223ed48597cb079e0c1.sql", "original_file_path": "models/staging/box_score/source.yml", "unique_id": "test.baseball_computer.source_not_null_box_score_box_score_batting_lines_lineup_position.ad36913951", "fqn": ["baseball_computer", "staging", "box_score", "source_not_null_box_score_box_score_batting_lines_lineup_position"], "alias": "source_not_null_box_score_box__89dd31faa6172223ed48597cb079e0c1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_not_null_box_score_box__89dd31faa6172223ed48597cb079e0c1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_not_null_box_score_box__89dd31faa6172223ed48597cb079e0c1"}, "created_at": 1702281449.586932, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_box_score_box__89dd31faa6172223ed48597cb079e0c1\") }}", "language": "sql", "refs": [], "sources": [["box_score", "box_score_batting_lines"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.baseball_computer.box_score.box_score_batting_lines"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "lineup_position", "file_key_name": "sources.box_score", "attached_node": null}, "test.baseball_computer.source_not_null_box_score_box_score_batting_lines_nth_player_at_position.b79200b54d": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "nth_player_at_position", "model": "{{ get_where_subquery(source('box_score', 'box_score_batting_lines')) }}"}, "namespace": null}, "database": "bc", "schema": "main_dbt_test__audit", "name": "source_not_null_box_score_box_score_batting_lines_nth_player_at_position", "resource_type": "test", "package_name": "baseball_computer", "path": "source_not_null_box_score_box__5b46cefb50e2f22a24b87ea3033d9fb5.sql", "original_file_path": "models/staging/box_score/source.yml", "unique_id": "test.baseball_computer.source_not_null_box_score_box_score_batting_lines_nth_player_at_position.b79200b54d", "fqn": ["baseball_computer", "staging", "box_score", "source_not_null_box_score_box_score_batting_lines_nth_player_at_position"], "alias": "source_not_null_box_score_box__5b46cefb50e2f22a24b87ea3033d9fb5", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_not_null_box_score_box__5b46cefb50e2f22a24b87ea3033d9fb5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_not_null_box_score_box__5b46cefb50e2f22a24b87ea3033d9fb5"}, "created_at": 1702281449.5881221, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_box_score_box__5b46cefb50e2f22a24b87ea3033d9fb5\") }}", "language": "sql", "refs": [], "sources": [["box_score", "box_score_batting_lines"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.baseball_computer.box_score.box_score_batting_lines"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "nth_player_at_position", "file_key_name": "sources.box_score", "attached_node": null}, "test.baseball_computer.source_not_null_box_score_box_score_batting_lines_at_bats.b6d88915f8": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "at_bats", "model": "{{ get_where_subquery(source('box_score', 'box_score_batting_lines')) }}"}, "namespace": null}, "database": "bc", "schema": "main_dbt_test__audit", "name": "source_not_null_box_score_box_score_batting_lines_at_bats", "resource_type": "test", "package_name": "baseball_computer", "path": "source_not_null_box_score_box_score_batting_lines_at_bats.sql", "original_file_path": "models/staging/box_score/source.yml", "unique_id": "test.baseball_computer.source_not_null_box_score_box_score_batting_lines_at_bats.b6d88915f8", "fqn": ["baseball_computer", "staging", "box_score", "source_not_null_box_score_box_score_batting_lines_at_bats"], "alias": "source_not_null_box_score_box_score_batting_lines_at_bats", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1702281449.589288, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["box_score", "box_score_batting_lines"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.baseball_computer.box_score.box_score_batting_lines"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "at_bats", "file_key_name": "sources.box_score", "attached_node": null}, "test.baseball_computer.source_not_null_box_score_box_score_caught_stealing_game_id.6f95dd8a54": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "game_id", "model": "{{ get_where_subquery(source('box_score', 'box_score_caught_stealing')) }}"}, "namespace": null}, "database": "bc", "schema": "main_dbt_test__audit", "name": "source_not_null_box_score_box_score_caught_stealing_game_id", "resource_type": "test", "package_name": "baseball_computer", "path": "source_not_null_box_score_box_score_caught_stealing_game_id.sql", "original_file_path": "models/staging/box_score/source.yml", "unique_id": "test.baseball_computer.source_not_null_box_score_box_score_caught_stealing_game_id.6f95dd8a54", "fqn": ["baseball_computer", "staging", "box_score", "source_not_null_box_score_box_score_caught_stealing_game_id"], "alias": "source_not_null_box_score_box_score_caught_stealing_game_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1702281449.5906181, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["box_score", "box_score_caught_stealing"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.baseball_computer.box_score.box_score_caught_stealing"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "game_id", "file_key_name": "sources.box_score", "attached_node": null}, "test.baseball_computer.source_not_null_box_score_box_score_caught_stealing_running_side.e9ccccfdf3": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "running_side", "model": "{{ get_where_subquery(source('box_score', 'box_score_caught_stealing')) }}"}, "namespace": null}, "database": "bc", "schema": "main_dbt_test__audit", "name": "source_not_null_box_score_box_score_caught_stealing_running_side", "resource_type": "test", "package_name": "baseball_computer", "path": "source_not_null_box_score_box__c205652eb36e22054bb5fcd0920aa6e6.sql", "original_file_path": "models/staging/box_score/source.yml", "unique_id": "test.baseball_computer.source_not_null_box_score_box_score_caught_stealing_running_side.e9ccccfdf3", "fqn": ["baseball_computer", "staging", "box_score", "source_not_null_box_score_box_score_caught_stealing_running_side"], "alias": "source_not_null_box_score_box__c205652eb36e22054bb5fcd0920aa6e6", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_not_null_box_score_box__c205652eb36e22054bb5fcd0920aa6e6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_not_null_box_score_box__c205652eb36e22054bb5fcd0920aa6e6"}, "created_at": 1702281449.592083, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_box_score_box__c205652eb36e22054bb5fcd0920aa6e6\") }}", "language": "sql", "refs": [], "sources": [["box_score", "box_score_caught_stealing"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.baseball_computer.box_score.box_score_caught_stealing"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "running_side", "file_key_name": "sources.box_score", "attached_node": null}, "test.baseball_computer.source_not_null_box_score_box_score_caught_stealing_runner_id.f0b3ec2fc3": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "runner_id", "model": "{{ get_where_subquery(source('box_score', 'box_score_caught_stealing')) }}"}, "namespace": null}, "database": "bc", "schema": "main_dbt_test__audit", "name": "source_not_null_box_score_box_score_caught_stealing_runner_id", "resource_type": "test", "package_name": "baseball_computer", "path": "source_not_null_box_score_box_score_caught_stealing_runner_id.sql", "original_file_path": "models/staging/box_score/source.yml", "unique_id": "test.baseball_computer.source_not_null_box_score_box_score_caught_stealing_runner_id.f0b3ec2fc3", "fqn": ["baseball_computer", "staging", "box_score", "source_not_null_box_score_box_score_caught_stealing_runner_id"], "alias": "source_not_null_box_score_box_score_caught_stealing_runner_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1702281449.593251, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["box_score", "box_score_caught_stealing"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.baseball_computer.box_score.box_score_caught_stealing"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "runner_id", "file_key_name": "sources.box_score", "attached_node": null}, "test.baseball_computer.source_not_null_box_score_box_score_double_plays_game_id.3eb854846f": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "game_id", "model": "{{ get_where_subquery(source('box_score', 'box_score_double_plays')) }}"}, "namespace": null}, "database": "bc", "schema": "main_dbt_test__audit", "name": "source_not_null_box_score_box_score_double_plays_game_id", "resource_type": "test", "package_name": "baseball_computer", "path": "source_not_null_box_score_box_score_double_plays_game_id.sql", "original_file_path": "models/staging/box_score/source.yml", "unique_id": "test.baseball_computer.source_not_null_box_score_box_score_double_plays_game_id.3eb854846f", "fqn": ["baseball_computer", "staging", "box_score", "source_not_null_box_score_box_score_double_plays_game_id"], "alias": "source_not_null_box_score_box_score_double_plays_game_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1702281449.5945868, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["box_score", "box_score_double_plays"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.baseball_computer.box_score.box_score_double_plays"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "game_id", "file_key_name": "sources.box_score", "attached_node": null}, "test.baseball_computer.source_not_null_box_score_box_score_double_plays_defense_side.cea8fd9283": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "defense_side", "model": "{{ get_where_subquery(source('box_score', 'box_score_double_plays')) }}"}, "namespace": null}, "database": "bc", "schema": "main_dbt_test__audit", "name": "source_not_null_box_score_box_score_double_plays_defense_side", "resource_type": "test", "package_name": "baseball_computer", "path": "source_not_null_box_score_box_score_double_plays_defense_side.sql", "original_file_path": "models/staging/box_score/source.yml", "unique_id": "test.baseball_computer.source_not_null_box_score_box_score_double_plays_defense_side.cea8fd9283", "fqn": ["baseball_computer", "staging", "box_score", "source_not_null_box_score_box_score_double_plays_defense_side"], "alias": "source_not_null_box_score_box_score_double_plays_defense_side", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1702281449.595773, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["box_score", "box_score_double_plays"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.baseball_computer.box_score.box_score_double_plays"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "defense_side", "file_key_name": "sources.box_score", "attached_node": null}, "test.baseball_computer.source_not_null_box_score_box_score_fielding_lines_game_id.8a41130214": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "game_id", "model": "{{ get_where_subquery(source('box_score', 'box_score_fielding_lines')) }}"}, "namespace": null}, "database": "bc", "schema": "main_dbt_test__audit", "name": "source_not_null_box_score_box_score_fielding_lines_game_id", "resource_type": "test", "package_name": "baseball_computer", "path": "source_not_null_box_score_box_score_fielding_lines_game_id.sql", "original_file_path": "models/staging/box_score/source.yml", "unique_id": "test.baseball_computer.source_not_null_box_score_box_score_fielding_lines_game_id.8a41130214", "fqn": ["baseball_computer", "staging", "box_score", "source_not_null_box_score_box_score_fielding_lines_game_id"], "alias": "source_not_null_box_score_box_score_fielding_lines_game_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1702281449.597077, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["box_score", "box_score_fielding_lines"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.baseball_computer.box_score.box_score_fielding_lines"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "game_id", "file_key_name": "sources.box_score", "attached_node": null}, "test.baseball_computer.source_not_null_box_score_box_score_fielding_lines_fielder_id.cf9c2b33ad": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "fielder_id", "model": "{{ get_where_subquery(source('box_score', 'box_score_fielding_lines')) }}"}, "namespace": null}, "database": "bc", "schema": "main_dbt_test__audit", "name": "source_not_null_box_score_box_score_fielding_lines_fielder_id", "resource_type": "test", "package_name": "baseball_computer", "path": "source_not_null_box_score_box_score_fielding_lines_fielder_id.sql", "original_file_path": "models/staging/box_score/source.yml", "unique_id": "test.baseball_computer.source_not_null_box_score_box_score_fielding_lines_fielder_id.cf9c2b33ad", "fqn": ["baseball_computer", "staging", "box_score", "source_not_null_box_score_box_score_fielding_lines_fielder_id"], "alias": "source_not_null_box_score_box_score_fielding_lines_fielder_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1702281449.5985332, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["box_score", "box_score_fielding_lines"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.baseball_computer.box_score.box_score_fielding_lines"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "fielder_id", "file_key_name": "sources.box_score", "attached_node": null}, "test.baseball_computer.source_not_null_box_score_box_score_fielding_lines_side.c31b2fa481": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "side", "model": "{{ get_where_subquery(source('box_score', 'box_score_fielding_lines')) }}"}, "namespace": null}, "database": "bc", "schema": "main_dbt_test__audit", "name": "source_not_null_box_score_box_score_fielding_lines_side", "resource_type": "test", "package_name": "baseball_computer", "path": "source_not_null_box_score_box_score_fielding_lines_side.sql", "original_file_path": "models/staging/box_score/source.yml", "unique_id": "test.baseball_computer.source_not_null_box_score_box_score_fielding_lines_side.c31b2fa481", "fqn": ["baseball_computer", "staging", "box_score", "source_not_null_box_score_box_score_fielding_lines_side"], "alias": "source_not_null_box_score_box_score_fielding_lines_side", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1702281449.599692, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["box_score", "box_score_fielding_lines"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.baseball_computer.box_score.box_score_fielding_lines"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "side", "file_key_name": "sources.box_score", "attached_node": null}, "test.baseball_computer.source_not_null_box_score_box_score_fielding_lines_fielding_position.1a91f0160e": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "fielding_position", "model": "{{ get_where_subquery(source('box_score', 'box_score_fielding_lines')) }}"}, "namespace": null}, "database": "bc", "schema": "main_dbt_test__audit", "name": "source_not_null_box_score_box_score_fielding_lines_fielding_position", "resource_type": "test", "package_name": "baseball_computer", "path": "source_not_null_box_score_box__150967c05e7a4e1c4248bd91d6261c19.sql", "original_file_path": "models/staging/box_score/source.yml", "unique_id": "test.baseball_computer.source_not_null_box_score_box_score_fielding_lines_fielding_position.1a91f0160e", "fqn": ["baseball_computer", "staging", "box_score", "source_not_null_box_score_box_score_fielding_lines_fielding_position"], "alias": "source_not_null_box_score_box__150967c05e7a4e1c4248bd91d6261c19", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_not_null_box_score_box__150967c05e7a4e1c4248bd91d6261c19", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_not_null_box_score_box__150967c05e7a4e1c4248bd91d6261c19"}, "created_at": 1702281449.6008608, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_box_score_box__150967c05e7a4e1c4248bd91d6261c19\") }}", "language": "sql", "refs": [], "sources": [["box_score", "box_score_fielding_lines"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.baseball_computer.box_score.box_score_fielding_lines"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "fielding_position", "file_key_name": "sources.box_score", "attached_node": null}, "test.baseball_computer.source_not_null_box_score_box_score_fielding_lines_nth_position_played_by_player.3dc8b9aa9e": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "nth_position_played_by_player", "model": "{{ get_where_subquery(source('box_score', 'box_score_fielding_lines')) }}"}, "namespace": null}, "database": "bc", "schema": "main_dbt_test__audit", "name": "source_not_null_box_score_box_score_fielding_lines_nth_position_played_by_player", "resource_type": "test", "package_name": "baseball_computer", "path": "source_not_null_box_score_box__811cae3d1dae3189e67f8a8b4775beb1.sql", "original_file_path": "models/staging/box_score/source.yml", "unique_id": "test.baseball_computer.source_not_null_box_score_box_score_fielding_lines_nth_position_played_by_player.3dc8b9aa9e", "fqn": ["baseball_computer", "staging", "box_score", "source_not_null_box_score_box_score_fielding_lines_nth_position_played_by_player"], "alias": "source_not_null_box_score_box__811cae3d1dae3189e67f8a8b4775beb1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_not_null_box_score_box__811cae3d1dae3189e67f8a8b4775beb1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_not_null_box_score_box__811cae3d1dae3189e67f8a8b4775beb1"}, "created_at": 1702281449.6020339, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_box_score_box__811cae3d1dae3189e67f8a8b4775beb1\") }}", "language": "sql", "refs": [], "sources": [["box_score", "box_score_fielding_lines"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.baseball_computer.box_score.box_score_fielding_lines"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "nth_position_played_by_player", "file_key_name": "sources.box_score", "attached_node": null}, "test.baseball_computer.source_unique_box_score_box_score_games_game_id.b94243eaff": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "game_id", "model": "{{ get_where_subquery(source('box_score', 'box_score_games')) }}"}, "namespace": null}, "database": "bc", "schema": "main_dbt_test__audit", "name": "source_unique_box_score_box_score_games_game_id", "resource_type": "test", "package_name": "baseball_computer", "path": "source_unique_box_score_box_score_games_game_id.sql", "original_file_path": "models/staging/box_score/source.yml", "unique_id": "test.baseball_computer.source_unique_box_score_box_score_games_game_id.b94243eaff", "fqn": ["baseball_computer", "staging", "box_score", "source_unique_box_score_box_score_games_game_id"], "alias": "source_unique_box_score_box_score_games_game_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1702281449.6033359, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["box_score", "box_score_games"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.baseball_computer.box_score.box_score_games"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "game_id", "file_key_name": "sources.box_score", "attached_node": null}, "test.baseball_computer.source_not_null_box_score_box_score_games_game_id.44872eca82": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "game_id", "model": "{{ get_where_subquery(source('box_score', 'box_score_games')) }}"}, "namespace": null}, "database": "bc", "schema": "main_dbt_test__audit", "name": "source_not_null_box_score_box_score_games_game_id", "resource_type": "test", "package_name": "baseball_computer", "path": "source_not_null_box_score_box_score_games_game_id.sql", "original_file_path": "models/staging/box_score/source.yml", "unique_id": "test.baseball_computer.source_not_null_box_score_box_score_games_game_id.44872eca82", "fqn": ["baseball_computer", "staging", "box_score", "source_not_null_box_score_box_score_games_game_id"], "alias": "source_not_null_box_score_box_score_games_game_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1702281449.6047978, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["box_score", "box_score_games"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.baseball_computer.box_score.box_score_games"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "game_id", "file_key_name": "sources.box_score", "attached_node": null}, "test.baseball_computer.source_not_null_box_score_box_score_games_game_key.76f62a5ea0": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "game_key", "model": "{{ get_where_subquery(source('box_score', 'box_score_games')) }}"}, "namespace": null}, "database": "bc", "schema": "main_dbt_test__audit", "name": "source_not_null_box_score_box_score_games_game_key", "resource_type": "test", "package_name": "baseball_computer", "path": "source_not_null_box_score_box_score_games_game_key.sql", "original_file_path": "models/staging/box_score/source.yml", "unique_id": "test.baseball_computer.source_not_null_box_score_box_score_games_game_key.76f62a5ea0", "fqn": ["baseball_computer", "staging", "box_score", "source_not_null_box_score_box_score_games_game_key"], "alias": "source_not_null_box_score_box_score_games_game_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1702281449.6059651, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["box_score", "box_score_games"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.baseball_computer.box_score.box_score_games"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "game_key", "file_key_name": "sources.box_score", "attached_node": null}, "test.baseball_computer.source_unique_box_score_box_score_games_game_key.a9054ce21a": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "game_key", "model": "{{ get_where_subquery(source('box_score', 'box_score_games')) }}"}, "namespace": null}, "database": "bc", "schema": "main_dbt_test__audit", "name": "source_unique_box_score_box_score_games_game_key", "resource_type": "test", "package_name": "baseball_computer", "path": "source_unique_box_score_box_score_games_game_key.sql", "original_file_path": "models/staging/box_score/source.yml", "unique_id": "test.baseball_computer.source_unique_box_score_box_score_games_game_key.a9054ce21a", "fqn": ["baseball_computer", "staging", "box_score", "source_unique_box_score_box_score_games_game_key"], "alias": "source_unique_box_score_box_score_games_game_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1702281449.607136, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["box_score", "box_score_games"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.baseball_computer.box_score.box_score_games"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "game_key", "file_key_name": "sources.box_score", "attached_node": null}, "test.baseball_computer.source_not_null_box_score_box_score_games_date.4e354fb03d": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "date", "model": "{{ get_where_subquery(source('box_score', 'box_score_games')) }}"}, "namespace": null}, "database": "bc", "schema": "main_dbt_test__audit", "name": "source_not_null_box_score_box_score_games_date", "resource_type": "test", "package_name": "baseball_computer", "path": "source_not_null_box_score_box_score_games_date.sql", "original_file_path": "models/staging/box_score/source.yml", "unique_id": "test.baseball_computer.source_not_null_box_score_box_score_games_date.4e354fb03d", "fqn": ["baseball_computer", "staging", "box_score", "source_not_null_box_score_box_score_games_date"], "alias": "source_not_null_box_score_box_score_games_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1702281449.608313, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["box_score", "box_score_games"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.baseball_computer.box_score.box_score_games"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "date", "file_key_name": "sources.box_score", "attached_node": null}, "test.baseball_computer.source_not_null_box_score_box_score_games_doubleheader_status.d596eb38d8": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "doubleheader_status", "model": "{{ get_where_subquery(source('box_score', 'box_score_games')) }}"}, "namespace": null}, "database": "bc", "schema": "main_dbt_test__audit", "name": "source_not_null_box_score_box_score_games_doubleheader_status", "resource_type": "test", "package_name": "baseball_computer", "path": "source_not_null_box_score_box_score_games_doubleheader_status.sql", "original_file_path": "models/staging/box_score/source.yml", "unique_id": "test.baseball_computer.source_not_null_box_score_box_score_games_doubleheader_status.d596eb38d8", "fqn": ["baseball_computer", "staging", "box_score", "source_not_null_box_score_box_score_games_doubleheader_status"], "alias": "source_not_null_box_score_box_score_games_doubleheader_status", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1702281449.609493, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["box_score", "box_score_games"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.baseball_computer.box_score.box_score_games"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "doubleheader_status", "file_key_name": "sources.box_score", "attached_node": null}, "test.baseball_computer.source_not_null_box_score_box_score_games_time_of_day.c0265c9214": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "time_of_day", "model": "{{ get_where_subquery(source('box_score', 'box_score_games')) }}"}, "namespace": null}, "database": "bc", "schema": "main_dbt_test__audit", "name": "source_not_null_box_score_box_score_games_time_of_day", "resource_type": "test", "package_name": "baseball_computer", "path": "source_not_null_box_score_box_score_games_time_of_day.sql", "original_file_path": "models/staging/box_score/source.yml", "unique_id": "test.baseball_computer.source_not_null_box_score_box_score_games_time_of_day.c0265c9214", "fqn": ["baseball_computer", "staging", "box_score", "source_not_null_box_score_box_score_games_time_of_day"], "alias": "source_not_null_box_score_box_score_games_time_of_day", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1702281449.6110148, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["box_score", "box_score_games"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.baseball_computer.box_score.box_score_games"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "time_of_day", "file_key_name": "sources.box_score", "attached_node": null}, "test.baseball_computer.source_not_null_box_score_box_score_games_game_type.bec21d95d6": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "game_type", "model": "{{ get_where_subquery(source('box_score', 'box_score_games')) }}"}, "namespace": null}, "database": "bc", "schema": "main_dbt_test__audit", "name": "source_not_null_box_score_box_score_games_game_type", "resource_type": "test", "package_name": "baseball_computer", "path": "source_not_null_box_score_box_score_games_game_type.sql", "original_file_path": "models/staging/box_score/source.yml", "unique_id": "test.baseball_computer.source_not_null_box_score_box_score_games_game_type.bec21d95d6", "fqn": ["baseball_computer", "staging", "box_score", "source_not_null_box_score_box_score_games_game_type"], "alias": "source_not_null_box_score_box_score_games_game_type", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1702281449.612181, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["box_score", "box_score_games"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.baseball_computer.box_score.box_score_games"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "game_type", "file_key_name": "sources.box_score", "attached_node": null}, "test.baseball_computer.source_not_null_box_score_box_score_games_bat_first_side.f20df82299": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "bat_first_side", "model": "{{ get_where_subquery(source('box_score', 'box_score_games')) }}"}, "namespace": null}, "database": "bc", "schema": "main_dbt_test__audit", "name": "source_not_null_box_score_box_score_games_bat_first_side", "resource_type": "test", "package_name": "baseball_computer", "path": "source_not_null_box_score_box_score_games_bat_first_side.sql", "original_file_path": "models/staging/box_score/source.yml", "unique_id": "test.baseball_computer.source_not_null_box_score_box_score_games_bat_first_side.f20df82299", "fqn": ["baseball_computer", "staging", "box_score", "source_not_null_box_score_box_score_games_bat_first_side"], "alias": "source_not_null_box_score_box_score_games_bat_first_side", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1702281449.6133618, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["box_score", "box_score_games"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.baseball_computer.box_score.box_score_games"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "bat_first_side", "file_key_name": "sources.box_score", "attached_node": null}, "test.baseball_computer.source_not_null_box_score_box_score_games_sky.d531881035": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "sky", "model": "{{ get_where_subquery(source('box_score', 'box_score_games')) }}"}, "namespace": null}, "database": "bc", "schema": "main_dbt_test__audit", "name": "source_not_null_box_score_box_score_games_sky", "resource_type": "test", "package_name": "baseball_computer", "path": "source_not_null_box_score_box_score_games_sky.sql", "original_file_path": "models/staging/box_score/source.yml", "unique_id": "test.baseball_computer.source_not_null_box_score_box_score_games_sky.d531881035", "fqn": ["baseball_computer", "staging", "box_score", "source_not_null_box_score_box_score_games_sky"], "alias": "source_not_null_box_score_box_score_games_sky", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1702281449.614517, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["box_score", "box_score_games"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.baseball_computer.box_score.box_score_games"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "sky", "file_key_name": "sources.box_score", "attached_node": null}, "test.baseball_computer.source_not_null_box_score_box_score_games_field_condition.db9cd2b113": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "field_condition", "model": "{{ get_where_subquery(source('box_score', 'box_score_games')) }}"}, "namespace": null}, "database": "bc", "schema": "main_dbt_test__audit", "name": "source_not_null_box_score_box_score_games_field_condition", "resource_type": "test", "package_name": "baseball_computer", "path": "source_not_null_box_score_box_score_games_field_condition.sql", "original_file_path": "models/staging/box_score/source.yml", "unique_id": "test.baseball_computer.source_not_null_box_score_box_score_games_field_condition.db9cd2b113", "fqn": ["baseball_computer", "staging", "box_score", "source_not_null_box_score_box_score_games_field_condition"], "alias": "source_not_null_box_score_box_score_games_field_condition", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1702281449.615672, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["box_score", "box_score_games"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.baseball_computer.box_score.box_score_games"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "field_condition", "file_key_name": "sources.box_score", "attached_node": null}, "test.baseball_computer.source_not_null_box_score_box_score_games_precipitation.b66a143e37": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "precipitation", "model": "{{ get_where_subquery(source('box_score', 'box_score_games')) }}"}, "namespace": null}, "database": "bc", "schema": "main_dbt_test__audit", "name": "source_not_null_box_score_box_score_games_precipitation", "resource_type": "test", "package_name": "baseball_computer", "path": "source_not_null_box_score_box_score_games_precipitation.sql", "original_file_path": "models/staging/box_score/source.yml", "unique_id": "test.baseball_computer.source_not_null_box_score_box_score_games_precipitation.b66a143e37", "fqn": ["baseball_computer", "staging", "box_score", "source_not_null_box_score_box_score_games_precipitation"], "alias": "source_not_null_box_score_box_score_games_precipitation", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1702281449.6168509, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["box_score", "box_score_games"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.baseball_computer.box_score.box_score_games"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "precipitation", "file_key_name": "sources.box_score", "attached_node": null}, "test.baseball_computer.source_not_null_box_score_box_score_games_wind_direction.61c0ecd269": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "wind_direction", "model": "{{ get_where_subquery(source('box_score', 'box_score_games')) }}"}, "namespace": null}, "database": "bc", "schema": "main_dbt_test__audit", "name": "source_not_null_box_score_box_score_games_wind_direction", "resource_type": "test", "package_name": "baseball_computer", "path": "source_not_null_box_score_box_score_games_wind_direction.sql", "original_file_path": "models/staging/box_score/source.yml", "unique_id": "test.baseball_computer.source_not_null_box_score_box_score_games_wind_direction.61c0ecd269", "fqn": ["baseball_computer", "staging", "box_score", "source_not_null_box_score_box_score_games_wind_direction"], "alias": "source_not_null_box_score_box_score_games_wind_direction", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1702281449.6187782, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["box_score", "box_score_games"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.baseball_computer.box_score.box_score_games"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "wind_direction", "file_key_name": "sources.box_score", "attached_node": null}, "test.baseball_computer.source_not_null_box_score_box_score_games_park_id.2bbc694559": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "park_id", "model": "{{ get_where_subquery(source('box_score', 'box_score_games')) }}"}, "namespace": null}, "database": "bc", "schema": "main_dbt_test__audit", "name": "source_not_null_box_score_box_score_games_park_id", "resource_type": "test", "package_name": "baseball_computer", "path": "source_not_null_box_score_box_score_games_park_id.sql", "original_file_path": "models/staging/box_score/source.yml", "unique_id": "test.baseball_computer.source_not_null_box_score_box_score_games_park_id.2bbc694559", "fqn": ["baseball_computer", "staging", "box_score", "source_not_null_box_score_box_score_games_park_id"], "alias": "source_not_null_box_score_box_score_games_park_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1702281449.61996, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["box_score", "box_score_games"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.baseball_computer.box_score.box_score_games"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "park_id", "file_key_name": "sources.box_score", "attached_node": null}, "test.baseball_computer.source_not_null_box_score_box_score_games_use_dh.0576fbd0ba": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "use_dh", "model": "{{ get_where_subquery(source('box_score', 'box_score_games')) }}"}, "namespace": null}, "database": "bc", "schema": "main_dbt_test__audit", "name": "source_not_null_box_score_box_score_games_use_dh", "resource_type": "test", "package_name": "baseball_computer", "path": "source_not_null_box_score_box_score_games_use_dh.sql", "original_file_path": "models/staging/box_score/source.yml", "unique_id": "test.baseball_computer.source_not_null_box_score_box_score_games_use_dh.0576fbd0ba", "fqn": ["baseball_computer", "staging", "box_score", "source_not_null_box_score_box_score_games_use_dh"], "alias": "source_not_null_box_score_box_score_games_use_dh", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1702281449.6211221, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["box_score", "box_score_games"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.baseball_computer.box_score.box_score_games"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "use_dh", "file_key_name": "sources.box_score", "attached_node": null}, "test.baseball_computer.source_not_null_box_score_box_score_games_scoring_method.2983bc45ed": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "scoring_method", "model": "{{ get_where_subquery(source('box_score', 'box_score_games')) }}"}, "namespace": null}, "database": "bc", "schema": "main_dbt_test__audit", "name": "source_not_null_box_score_box_score_games_scoring_method", "resource_type": "test", "package_name": "baseball_computer", "path": "source_not_null_box_score_box_score_games_scoring_method.sql", "original_file_path": "models/staging/box_score/source.yml", "unique_id": "test.baseball_computer.source_not_null_box_score_box_score_games_scoring_method.2983bc45ed", "fqn": ["baseball_computer", "staging", "box_score", "source_not_null_box_score_box_score_games_scoring_method"], "alias": "source_not_null_box_score_box_score_games_scoring_method", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1702281449.622293, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["box_score", "box_score_games"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.baseball_computer.box_score.box_score_games"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "scoring_method", "file_key_name": "sources.box_score", "attached_node": null}, "test.baseball_computer.source_not_null_box_score_box_score_games_account_type.ee49ce5d5e": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "account_type", "model": "{{ get_where_subquery(source('box_score', 'box_score_games')) }}"}, "namespace": null}, "database": "bc", "schema": "main_dbt_test__audit", "name": "source_not_null_box_score_box_score_games_account_type", "resource_type": "test", "package_name": "baseball_computer", "path": "source_not_null_box_score_box_score_games_account_type.sql", "original_file_path": "models/staging/box_score/source.yml", "unique_id": "test.baseball_computer.source_not_null_box_score_box_score_games_account_type.ee49ce5d5e", "fqn": ["baseball_computer", "staging", "box_score", "source_not_null_box_score_box_score_games_account_type"], "alias": "source_not_null_box_score_box_score_games_account_type", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1702281449.623461, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["box_score", "box_score_games"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.baseball_computer.box_score.box_score_games"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "account_type", "file_key_name": "sources.box_score", "attached_node": null}, "test.baseball_computer.source_not_null_box_score_box_score_games_away_team_id.3db65a46ed": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "away_team_id", "model": "{{ get_where_subquery(source('box_score', 'box_score_games')) }}"}, "namespace": null}, "database": "bc", "schema": "main_dbt_test__audit", "name": "source_not_null_box_score_box_score_games_away_team_id", "resource_type": "test", "package_name": "baseball_computer", "path": "source_not_null_box_score_box_score_games_away_team_id.sql", "original_file_path": "models/staging/box_score/source.yml", "unique_id": "test.baseball_computer.source_not_null_box_score_box_score_games_away_team_id.3db65a46ed", "fqn": ["baseball_computer", "staging", "box_score", "source_not_null_box_score_box_score_games_away_team_id"], "alias": "source_not_null_box_score_box_score_games_away_team_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1702281449.624918, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["box_score", "box_score_games"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.baseball_computer.box_score.box_score_games"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "away_team_id", "file_key_name": "sources.box_score", "attached_node": null}, "test.baseball_computer.source_not_null_box_score_box_score_games_home_team_id.7a5b9e78fc": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "home_team_id", "model": "{{ get_where_subquery(source('box_score', 'box_score_games')) }}"}, "namespace": null}, "database": "bc", "schema": "main_dbt_test__audit", "name": "source_not_null_box_score_box_score_games_home_team_id", "resource_type": "test", "package_name": "baseball_computer", "path": "source_not_null_box_score_box_score_games_home_team_id.sql", "original_file_path": "models/staging/box_score/source.yml", "unique_id": "test.baseball_computer.source_not_null_box_score_box_score_games_home_team_id.7a5b9e78fc", "fqn": ["baseball_computer", "staging", "box_score", "source_not_null_box_score_box_score_games_home_team_id"], "alias": "source_not_null_box_score_box_score_games_home_team_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1702281449.6260748, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["box_score", "box_score_games"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.baseball_computer.box_score.box_score_games"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "home_team_id", "file_key_name": "sources.box_score", "attached_node": null}, "test.baseball_computer.source_not_null_box_score_box_score_home_runs_game_id.e28865fff5": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "game_id", "model": "{{ get_where_subquery(source('box_score', 'box_score_home_runs')) }}"}, "namespace": null}, "database": "bc", "schema": "main_dbt_test__audit", "name": "source_not_null_box_score_box_score_home_runs_game_id", "resource_type": "test", "package_name": "baseball_computer", "path": "source_not_null_box_score_box_score_home_runs_game_id.sql", "original_file_path": "models/staging/box_score/source.yml", "unique_id": "test.baseball_computer.source_not_null_box_score_box_score_home_runs_game_id.e28865fff5", "fqn": ["baseball_computer", "staging", "box_score", "source_not_null_box_score_box_score_home_runs_game_id"], "alias": "source_not_null_box_score_box_score_home_runs_game_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1702281449.627528, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["box_score", "box_score_home_runs"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.baseball_computer.box_score.box_score_home_runs"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "game_id", "file_key_name": "sources.box_score", "attached_node": null}, "test.baseball_computer.source_not_null_box_score_box_score_home_runs_batting_side.d8a1a565f0": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "batting_side", "model": "{{ get_where_subquery(source('box_score', 'box_score_home_runs')) }}"}, "namespace": null}, "database": "bc", "schema": "main_dbt_test__audit", "name": "source_not_null_box_score_box_score_home_runs_batting_side", "resource_type": "test", "package_name": "baseball_computer", "path": "source_not_null_box_score_box_score_home_runs_batting_side.sql", "original_file_path": "models/staging/box_score/source.yml", "unique_id": "test.baseball_computer.source_not_null_box_score_box_score_home_runs_batting_side.d8a1a565f0", "fqn": ["baseball_computer", "staging", "box_score", "source_not_null_box_score_box_score_home_runs_batting_side"], "alias": "source_not_null_box_score_box_score_home_runs_batting_side", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1702281449.628695, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["box_score", "box_score_home_runs"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.baseball_computer.box_score.box_score_home_runs"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "batting_side", "file_key_name": "sources.box_score", "attached_node": null}, "test.baseball_computer.source_not_null_box_score_box_score_home_runs_batter_id.61a8db5c58": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "batter_id", "model": "{{ get_where_subquery(source('box_score', 'box_score_home_runs')) }}"}, "namespace": null}, "database": "bc", "schema": "main_dbt_test__audit", "name": "source_not_null_box_score_box_score_home_runs_batter_id", "resource_type": "test", "package_name": "baseball_computer", "path": "source_not_null_box_score_box_score_home_runs_batter_id.sql", "original_file_path": "models/staging/box_score/source.yml", "unique_id": "test.baseball_computer.source_not_null_box_score_box_score_home_runs_batter_id.61a8db5c58", "fqn": ["baseball_computer", "staging", "box_score", "source_not_null_box_score_box_score_home_runs_batter_id"], "alias": "source_not_null_box_score_box_score_home_runs_batter_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1702281449.630144, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["box_score", "box_score_home_runs"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.baseball_computer.box_score.box_score_home_runs"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "batter_id", "file_key_name": "sources.box_score", "attached_node": null}, "test.baseball_computer.source_not_null_box_score_box_score_home_runs_pitcher_id.469cea3d74": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "pitcher_id", "model": "{{ get_where_subquery(source('box_score', 'box_score_home_runs')) }}"}, "namespace": null}, "database": "bc", "schema": "main_dbt_test__audit", "name": "source_not_null_box_score_box_score_home_runs_pitcher_id", "resource_type": "test", "package_name": "baseball_computer", "path": "source_not_null_box_score_box_score_home_runs_pitcher_id.sql", "original_file_path": "models/staging/box_score/source.yml", "unique_id": "test.baseball_computer.source_not_null_box_score_box_score_home_runs_pitcher_id.469cea3d74", "fqn": ["baseball_computer", "staging", "box_score", "source_not_null_box_score_box_score_home_runs_pitcher_id"], "alias": "source_not_null_box_score_box_score_home_runs_pitcher_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1702281449.631305, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["box_score", "box_score_home_runs"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.baseball_computer.box_score.box_score_home_runs"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "pitcher_id", "file_key_name": "sources.box_score", "attached_node": null}, "test.baseball_computer.source_not_null_box_score_box_score_pinch_hitting_lines_game_id.162a4e38b5": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "game_id", "model": "{{ get_where_subquery(source('box_score', 'box_score_pinch_hitting_lines')) }}"}, "namespace": null}, "database": "bc", "schema": "main_dbt_test__audit", "name": "source_not_null_box_score_box_score_pinch_hitting_lines_game_id", "resource_type": "test", "package_name": "baseball_computer", "path": "source_not_null_box_score_box_score_pinch_hitting_lines_game_id.sql", "original_file_path": "models/staging/box_score/source.yml", "unique_id": "test.baseball_computer.source_not_null_box_score_box_score_pinch_hitting_lines_game_id.162a4e38b5", "fqn": ["baseball_computer", "staging", "box_score", "source_not_null_box_score_box_score_pinch_hitting_lines_game_id"], "alias": "source_not_null_box_score_box_score_pinch_hitting_lines_game_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1702281449.632601, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["box_score", "box_score_pinch_hitting_lines"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.baseball_computer.box_score.box_score_pinch_hitting_lines"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "game_id", "file_key_name": "sources.box_score", "attached_node": null}, "test.baseball_computer.source_not_null_box_score_box_score_pinch_hitting_lines_pinch_hitter_id.bae1f38990": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "pinch_hitter_id", "model": "{{ get_where_subquery(source('box_score', 'box_score_pinch_hitting_lines')) }}"}, "namespace": null}, "database": "bc", "schema": "main_dbt_test__audit", "name": "source_not_null_box_score_box_score_pinch_hitting_lines_pinch_hitter_id", "resource_type": "test", "package_name": "baseball_computer", "path": "source_not_null_box_score_box__03fff34e3ef55b236359fbbe8a924e50.sql", "original_file_path": "models/staging/box_score/source.yml", "unique_id": "test.baseball_computer.source_not_null_box_score_box_score_pinch_hitting_lines_pinch_hitter_id.bae1f38990", "fqn": ["baseball_computer", "staging", "box_score", "source_not_null_box_score_box_score_pinch_hitting_lines_pinch_hitter_id"], "alias": "source_not_null_box_score_box__03fff34e3ef55b236359fbbe8a924e50", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_not_null_box_score_box__03fff34e3ef55b236359fbbe8a924e50", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_not_null_box_score_box__03fff34e3ef55b236359fbbe8a924e50"}, "created_at": 1702281449.633774, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_box_score_box__03fff34e3ef55b236359fbbe8a924e50\") }}", "language": "sql", "refs": [], "sources": [["box_score", "box_score_pinch_hitting_lines"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.baseball_computer.box_score.box_score_pinch_hitting_lines"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "pinch_hitter_id", "file_key_name": "sources.box_score", "attached_node": null}, "test.baseball_computer.source_not_null_box_score_box_score_pinch_hitting_lines_side.d772416d56": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "side", "model": "{{ get_where_subquery(source('box_score', 'box_score_pinch_hitting_lines')) }}"}, "namespace": null}, "database": "bc", "schema": "main_dbt_test__audit", "name": "source_not_null_box_score_box_score_pinch_hitting_lines_side", "resource_type": "test", "package_name": "baseball_computer", "path": "source_not_null_box_score_box_score_pinch_hitting_lines_side.sql", "original_file_path": "models/staging/box_score/source.yml", "unique_id": "test.baseball_computer.source_not_null_box_score_box_score_pinch_hitting_lines_side.d772416d56", "fqn": ["baseball_computer", "staging", "box_score", "source_not_null_box_score_box_score_pinch_hitting_lines_side"], "alias": "source_not_null_box_score_box_score_pinch_hitting_lines_side", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1702281449.634933, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["box_score", "box_score_pinch_hitting_lines"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.baseball_computer.box_score.box_score_pinch_hitting_lines"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "side", "file_key_name": "sources.box_score", "attached_node": null}, "test.baseball_computer.source_not_null_box_score_box_score_pinch_running_lines_game_id.08777674e3": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "game_id", "model": "{{ get_where_subquery(source('box_score', 'box_score_pinch_running_lines')) }}"}, "namespace": null}, "database": "bc", "schema": "main_dbt_test__audit", "name": "source_not_null_box_score_box_score_pinch_running_lines_game_id", "resource_type": "test", "package_name": "baseball_computer", "path": "source_not_null_box_score_box_score_pinch_running_lines_game_id.sql", "original_file_path": "models/staging/box_score/source.yml", "unique_id": "test.baseball_computer.source_not_null_box_score_box_score_pinch_running_lines_game_id.08777674e3", "fqn": ["baseball_computer", "staging", "box_score", "source_not_null_box_score_box_score_pinch_running_lines_game_id"], "alias": "source_not_null_box_score_box_score_pinch_running_lines_game_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1702281449.6365209, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["box_score", "box_score_pinch_running_lines"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.baseball_computer.box_score.box_score_pinch_running_lines"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "game_id", "file_key_name": "sources.box_score", "attached_node": null}, "test.baseball_computer.source_not_null_box_score_box_score_pinch_running_lines_pinch_runner_id.b0d9ccfc3e": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "pinch_runner_id", "model": "{{ get_where_subquery(source('box_score', 'box_score_pinch_running_lines')) }}"}, "namespace": null}, "database": "bc", "schema": "main_dbt_test__audit", "name": "source_not_null_box_score_box_score_pinch_running_lines_pinch_runner_id", "resource_type": "test", "package_name": "baseball_computer", "path": "source_not_null_box_score_box__d10a1096c0940db8b0ff443f4e50a0a6.sql", "original_file_path": "models/staging/box_score/source.yml", "unique_id": "test.baseball_computer.source_not_null_box_score_box_score_pinch_running_lines_pinch_runner_id.b0d9ccfc3e", "fqn": ["baseball_computer", "staging", "box_score", "source_not_null_box_score_box_score_pinch_running_lines_pinch_runner_id"], "alias": "source_not_null_box_score_box__d10a1096c0940db8b0ff443f4e50a0a6", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_not_null_box_score_box__d10a1096c0940db8b0ff443f4e50a0a6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_not_null_box_score_box__d10a1096c0940db8b0ff443f4e50a0a6"}, "created_at": 1702281449.6376908, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_box_score_box__d10a1096c0940db8b0ff443f4e50a0a6\") }}", "language": "sql", "refs": [], "sources": [["box_score", "box_score_pinch_running_lines"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.baseball_computer.box_score.box_score_pinch_running_lines"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "pinch_runner_id", "file_key_name": "sources.box_score", "attached_node": null}, "test.baseball_computer.source_not_null_box_score_box_score_stolen_bases_game_id.026246df9e": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "game_id", "model": "{{ get_where_subquery(source('box_score', 'box_score_stolen_bases')) }}"}, "namespace": null}, "database": "bc", "schema": "main_dbt_test__audit", "name": "source_not_null_box_score_box_score_stolen_bases_game_id", "resource_type": "test", "package_name": "baseball_computer", "path": "source_not_null_box_score_box_score_stolen_bases_game_id.sql", "original_file_path": "models/staging/box_score/source.yml", "unique_id": "test.baseball_computer.source_not_null_box_score_box_score_stolen_bases_game_id.026246df9e", "fqn": ["baseball_computer", "staging", "box_score", "source_not_null_box_score_box_score_stolen_bases_game_id"], "alias": "source_not_null_box_score_box_score_stolen_bases_game_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1702281449.639133, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["box_score", "box_score_stolen_bases"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.baseball_computer.box_score.box_score_stolen_bases"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "game_id", "file_key_name": "sources.box_score", "attached_node": null}, "test.baseball_computer.source_not_null_box_score_box_score_stolen_bases_running_side.c2c5c13135": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "running_side", "model": "{{ get_where_subquery(source('box_score', 'box_score_stolen_bases')) }}"}, "namespace": null}, "database": "bc", "schema": "main_dbt_test__audit", "name": "source_not_null_box_score_box_score_stolen_bases_running_side", "resource_type": "test", "package_name": "baseball_computer", "path": "source_not_null_box_score_box_score_stolen_bases_running_side.sql", "original_file_path": "models/staging/box_score/source.yml", "unique_id": "test.baseball_computer.source_not_null_box_score_box_score_stolen_bases_running_side.c2c5c13135", "fqn": ["baseball_computer", "staging", "box_score", "source_not_null_box_score_box_score_stolen_bases_running_side"], "alias": "source_not_null_box_score_box_score_stolen_bases_running_side", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1702281449.640289, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["box_score", "box_score_stolen_bases"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.baseball_computer.box_score.box_score_stolen_bases"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "running_side", "file_key_name": "sources.box_score", "attached_node": null}, "test.baseball_computer.source_not_null_box_score_box_score_stolen_bases_runner_id.c702a78489": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "runner_id", "model": "{{ get_where_subquery(source('box_score', 'box_score_stolen_bases')) }}"}, "namespace": null}, "database": "bc", "schema": "main_dbt_test__audit", "name": "source_not_null_box_score_box_score_stolen_bases_runner_id", "resource_type": "test", "package_name": "baseball_computer", "path": "source_not_null_box_score_box_score_stolen_bases_runner_id.sql", "original_file_path": "models/staging/box_score/source.yml", "unique_id": "test.baseball_computer.source_not_null_box_score_box_score_stolen_bases_runner_id.c702a78489", "fqn": ["baseball_computer", "staging", "box_score", "source_not_null_box_score_box_score_stolen_bases_runner_id"], "alias": "source_not_null_box_score_box_score_stolen_bases_runner_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1702281449.641671, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["box_score", "box_score_stolen_bases"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.baseball_computer.box_score.box_score_stolen_bases"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "runner_id", "file_key_name": "sources.box_score", "attached_node": null}, "test.baseball_computer.source_not_null_box_score_box_score_team_batting_lines_game_id.bd95c834cc": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "game_id", "model": "{{ get_where_subquery(source('box_score', 'box_score_team_batting_lines')) }}"}, "namespace": null}, "database": "bc", "schema": "main_dbt_test__audit", "name": "source_not_null_box_score_box_score_team_batting_lines_game_id", "resource_type": "test", "package_name": "baseball_computer", "path": "source_not_null_box_score_box_score_team_batting_lines_game_id.sql", "original_file_path": "models/staging/box_score/source.yml", "unique_id": "test.baseball_computer.source_not_null_box_score_box_score_team_batting_lines_game_id.bd95c834cc", "fqn": ["baseball_computer", "staging", "box_score", "source_not_null_box_score_box_score_team_batting_lines_game_id"], "alias": "source_not_null_box_score_box_score_team_batting_lines_game_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1702281449.6429381, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["box_score", "box_score_team_batting_lines"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.baseball_computer.box_score.box_score_team_batting_lines"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "game_id", "file_key_name": "sources.box_score", "attached_node": null}, "test.baseball_computer.source_not_null_box_score_box_score_team_batting_lines_side.804ee6c99a": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "side", "model": "{{ get_where_subquery(source('box_score', 'box_score_team_batting_lines')) }}"}, "namespace": null}, "database": "bc", "schema": "main_dbt_test__audit", "name": "source_not_null_box_score_box_score_team_batting_lines_side", "resource_type": "test", "package_name": "baseball_computer", "path": "source_not_null_box_score_box_score_team_batting_lines_side.sql", "original_file_path": "models/staging/box_score/source.yml", "unique_id": "test.baseball_computer.source_not_null_box_score_box_score_team_batting_lines_side.804ee6c99a", "fqn": ["baseball_computer", "staging", "box_score", "source_not_null_box_score_box_score_team_batting_lines_side"], "alias": "source_not_null_box_score_box_score_team_batting_lines_side", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1702281449.644094, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["box_score", "box_score_team_batting_lines"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.baseball_computer.box_score.box_score_team_batting_lines"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "side", "file_key_name": "sources.box_score", "attached_node": null}, "test.baseball_computer.source_not_null_box_score_box_score_team_batting_lines_at_bats.0a61108426": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "at_bats", "model": "{{ get_where_subquery(source('box_score', 'box_score_team_batting_lines')) }}"}, "namespace": null}, "database": "bc", "schema": "main_dbt_test__audit", "name": "source_not_null_box_score_box_score_team_batting_lines_at_bats", "resource_type": "test", "package_name": "baseball_computer", "path": "source_not_null_box_score_box_score_team_batting_lines_at_bats.sql", "original_file_path": "models/staging/box_score/source.yml", "unique_id": "test.baseball_computer.source_not_null_box_score_box_score_team_batting_lines_at_bats.0a61108426", "fqn": ["baseball_computer", "staging", "box_score", "source_not_null_box_score_box_score_team_batting_lines_at_bats"], "alias": "source_not_null_box_score_box_score_team_batting_lines_at_bats", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1702281449.6452422, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["box_score", "box_score_team_batting_lines"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.baseball_computer.box_score.box_score_team_batting_lines"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "at_bats", "file_key_name": "sources.box_score", "attached_node": null}, "test.baseball_computer.source_not_null_box_score_box_score_team_batting_lines_runs.eb5d3c40d4": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "runs", "model": "{{ get_where_subquery(source('box_score', 'box_score_team_batting_lines')) }}"}, "namespace": null}, "database": "bc", "schema": "main_dbt_test__audit", "name": "source_not_null_box_score_box_score_team_batting_lines_runs", "resource_type": "test", "package_name": "baseball_computer", "path": "source_not_null_box_score_box_score_team_batting_lines_runs.sql", "original_file_path": "models/staging/box_score/source.yml", "unique_id": "test.baseball_computer.source_not_null_box_score_box_score_team_batting_lines_runs.eb5d3c40d4", "fqn": ["baseball_computer", "staging", "box_score", "source_not_null_box_score_box_score_team_batting_lines_runs"], "alias": "source_not_null_box_score_box_score_team_batting_lines_runs", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1702281449.646415, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["box_score", "box_score_team_batting_lines"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.baseball_computer.box_score.box_score_team_batting_lines"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "runs", "file_key_name": "sources.box_score", "attached_node": null}, "test.baseball_computer.source_not_null_box_score_box_score_team_batting_lines_hits.a6fddad181": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "hits", "model": "{{ get_where_subquery(source('box_score', 'box_score_team_batting_lines')) }}"}, "namespace": null}, "database": "bc", "schema": "main_dbt_test__audit", "name": "source_not_null_box_score_box_score_team_batting_lines_hits", "resource_type": "test", "package_name": "baseball_computer", "path": "source_not_null_box_score_box_score_team_batting_lines_hits.sql", "original_file_path": "models/staging/box_score/source.yml", "unique_id": "test.baseball_computer.source_not_null_box_score_box_score_team_batting_lines_hits.a6fddad181", "fqn": ["baseball_computer", "staging", "box_score", "source_not_null_box_score_box_score_team_batting_lines_hits"], "alias": "source_not_null_box_score_box_score_team_batting_lines_hits", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1702281449.6478562, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["box_score", "box_score_team_batting_lines"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.baseball_computer.box_score.box_score_team_batting_lines"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "hits", "file_key_name": "sources.box_score", "attached_node": null}, "test.baseball_computer.source_not_null_box_score_box_score_team_fielding_lines_game_id.8437d7158c": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "game_id", "model": "{{ get_where_subquery(source('box_score', 'box_score_team_fielding_lines')) }}"}, "namespace": null}, "database": "bc", "schema": "main_dbt_test__audit", "name": "source_not_null_box_score_box_score_team_fielding_lines_game_id", "resource_type": "test", "package_name": "baseball_computer", "path": "source_not_null_box_score_box_score_team_fielding_lines_game_id.sql", "original_file_path": "models/staging/box_score/source.yml", "unique_id": "test.baseball_computer.source_not_null_box_score_box_score_team_fielding_lines_game_id.8437d7158c", "fqn": ["baseball_computer", "staging", "box_score", "source_not_null_box_score_box_score_team_fielding_lines_game_id"], "alias": "source_not_null_box_score_box_score_team_fielding_lines_game_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1702281449.649136, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["box_score", "box_score_team_fielding_lines"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.baseball_computer.box_score.box_score_team_fielding_lines"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "game_id", "file_key_name": "sources.box_score", "attached_node": null}, "test.baseball_computer.source_not_null_box_score_box_score_team_fielding_lines_side.7918cf72f9": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "side", "model": "{{ get_where_subquery(source('box_score', 'box_score_team_fielding_lines')) }}"}, "namespace": null}, "database": "bc", "schema": "main_dbt_test__audit", "name": "source_not_null_box_score_box_score_team_fielding_lines_side", "resource_type": "test", "package_name": "baseball_computer", "path": "source_not_null_box_score_box_score_team_fielding_lines_side.sql", "original_file_path": "models/staging/box_score/source.yml", "unique_id": "test.baseball_computer.source_not_null_box_score_box_score_team_fielding_lines_side.7918cf72f9", "fqn": ["baseball_computer", "staging", "box_score", "source_not_null_box_score_box_score_team_fielding_lines_side"], "alias": "source_not_null_box_score_box_score_team_fielding_lines_side", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1702281449.6502988, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["box_score", "box_score_team_fielding_lines"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.baseball_computer.box_score.box_score_team_fielding_lines"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "side", "file_key_name": "sources.box_score", "attached_node": null}, "test.baseball_computer.source_not_null_box_score_box_score_team_fielding_lines_outs_played.14ebdb3b7b": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "outs_played", "model": "{{ get_where_subquery(source('box_score', 'box_score_team_fielding_lines')) }}"}, "namespace": null}, "database": "bc", "schema": "main_dbt_test__audit", "name": "source_not_null_box_score_box_score_team_fielding_lines_outs_played", "resource_type": "test", "package_name": "baseball_computer", "path": "source_not_null_box_score_box__ff722fc74f869113cafbf7fc1f6f5116.sql", "original_file_path": "models/staging/box_score/source.yml", "unique_id": "test.baseball_computer.source_not_null_box_score_box_score_team_fielding_lines_outs_played.14ebdb3b7b", "fqn": ["baseball_computer", "staging", "box_score", "source_not_null_box_score_box_score_team_fielding_lines_outs_played"], "alias": "source_not_null_box_score_box__ff722fc74f869113cafbf7fc1f6f5116", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_not_null_box_score_box__ff722fc74f869113cafbf7fc1f6f5116", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_not_null_box_score_box__ff722fc74f869113cafbf7fc1f6f5116"}, "created_at": 1702281449.6514618, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_box_score_box__ff722fc74f869113cafbf7fc1f6f5116\") }}", "language": "sql", "refs": [], "sources": [["box_score", "box_score_team_fielding_lines"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.baseball_computer.box_score.box_score_team_fielding_lines"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "outs_played", "file_key_name": "sources.box_score", "attached_node": null}, "test.baseball_computer.source_not_null_box_score_box_score_team_miscellaneous_lines_game_id.fcda3e41c8": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "game_id", "model": "{{ get_where_subquery(source('box_score', 'box_score_team_miscellaneous_lines')) }}"}, "namespace": null}, "database": "bc", "schema": "main_dbt_test__audit", "name": "source_not_null_box_score_box_score_team_miscellaneous_lines_game_id", "resource_type": "test", "package_name": "baseball_computer", "path": "source_not_null_box_score_box__76f5aad54779e650ee68b689220f5893.sql", "original_file_path": "models/staging/box_score/source.yml", "unique_id": "test.baseball_computer.source_not_null_box_score_box_score_team_miscellaneous_lines_game_id.fcda3e41c8", "fqn": ["baseball_computer", "staging", "box_score", "source_not_null_box_score_box_score_team_miscellaneous_lines_game_id"], "alias": "source_not_null_box_score_box__76f5aad54779e650ee68b689220f5893", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_not_null_box_score_box__76f5aad54779e650ee68b689220f5893", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_not_null_box_score_box__76f5aad54779e650ee68b689220f5893"}, "created_at": 1702281449.6527638, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_box_score_box__76f5aad54779e650ee68b689220f5893\") }}", "language": "sql", "refs": [], "sources": [["box_score", "box_score_team_miscellaneous_lines"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.baseball_computer.box_score.box_score_team_miscellaneous_lines"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "game_id", "file_key_name": "sources.box_score", "attached_node": null}, "test.baseball_computer.source_not_null_box_score_box_score_team_miscellaneous_lines_side.40c4727a51": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "side", "model": "{{ get_where_subquery(source('box_score', 'box_score_team_miscellaneous_lines')) }}"}, "namespace": null}, "database": "bc", "schema": "main_dbt_test__audit", "name": "source_not_null_box_score_box_score_team_miscellaneous_lines_side", "resource_type": "test", "package_name": "baseball_computer", "path": "source_not_null_box_score_box__ae495d979f4c435c3750e5b90e9ce53e.sql", "original_file_path": "models/staging/box_score/source.yml", "unique_id": "test.baseball_computer.source_not_null_box_score_box_score_team_miscellaneous_lines_side.40c4727a51", "fqn": ["baseball_computer", "staging", "box_score", "source_not_null_box_score_box_score_team_miscellaneous_lines_side"], "alias": "source_not_null_box_score_box__ae495d979f4c435c3750e5b90e9ce53e", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_not_null_box_score_box__ae495d979f4c435c3750e5b90e9ce53e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_not_null_box_score_box__ae495d979f4c435c3750e5b90e9ce53e"}, "created_at": 1702281449.654164, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_box_score_box__ae495d979f4c435c3750e5b90e9ce53e\") }}", "language": "sql", "refs": [], "sources": [["box_score", "box_score_team_miscellaneous_lines"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.baseball_computer.box_score.box_score_team_miscellaneous_lines"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "side", "file_key_name": "sources.box_score", "attached_node": null}, "test.baseball_computer.source_not_null_box_score_box_score_triple_plays_game_id.bcc2a3622b": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "game_id", "model": "{{ get_where_subquery(source('box_score', 'box_score_triple_plays')) }}"}, "namespace": null}, "database": "bc", "schema": "main_dbt_test__audit", "name": "source_not_null_box_score_box_score_triple_plays_game_id", "resource_type": "test", "package_name": "baseball_computer", "path": "source_not_null_box_score_box_score_triple_plays_game_id.sql", "original_file_path": "models/staging/box_score/source.yml", "unique_id": "test.baseball_computer.source_not_null_box_score_box_score_triple_plays_game_id.bcc2a3622b", "fqn": ["baseball_computer", "staging", "box_score", "source_not_null_box_score_box_score_triple_plays_game_id"], "alias": "source_not_null_box_score_box_score_triple_plays_game_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1702281449.655437, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["box_score", "box_score_triple_plays"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.baseball_computer.box_score.box_score_triple_plays"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "game_id", "file_key_name": "sources.box_score", "attached_node": null}, "test.baseball_computer.source_not_null_box_score_box_score_triple_plays_defense_side.2eec5d74dc": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "defense_side", "model": "{{ get_where_subquery(source('box_score', 'box_score_triple_plays')) }}"}, "namespace": null}, "database": "bc", "schema": "main_dbt_test__audit", "name": "source_not_null_box_score_box_score_triple_plays_defense_side", "resource_type": "test", "package_name": "baseball_computer", "path": "source_not_null_box_score_box_score_triple_plays_defense_side.sql", "original_file_path": "models/staging/box_score/source.yml", "unique_id": "test.baseball_computer.source_not_null_box_score_box_score_triple_plays_defense_side.2eec5d74dc", "fqn": ["baseball_computer", "staging", "box_score", "source_not_null_box_score_box_score_triple_plays_defense_side"], "alias": "source_not_null_box_score_box_score_triple_plays_defense_side", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1702281449.6565812, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["box_score", "box_score_triple_plays"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.baseball_computer.box_score.box_score_triple_plays"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "defense_side", "file_key_name": "sources.box_score", "attached_node": null}, "test.baseball_computer.source_not_null_box_score_box_score_comments_game_id.ee9b68198f": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "game_id", "model": "{{ get_where_subquery(source('box_score', 'box_score_comments')) }}"}, "namespace": null}, "database": "bc", "schema": "main_dbt_test__audit", "name": "source_not_null_box_score_box_score_comments_game_id", "resource_type": "test", "package_name": "baseball_computer", "path": "source_not_null_box_score_box_score_comments_game_id.sql", "original_file_path": "models/staging/box_score/source.yml", "unique_id": "test.baseball_computer.source_not_null_box_score_box_score_comments_game_id.ee9b68198f", "fqn": ["baseball_computer", "staging", "box_score", "source_not_null_box_score_box_score_comments_game_id"], "alias": "source_not_null_box_score_box_score_comments_game_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1702281449.657855, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["box_score", "box_score_comments"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.baseball_computer.box_score.box_score_comments"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "game_id", "file_key_name": "sources.box_score", "attached_node": null}, "test.baseball_computer.source_not_null_box_score_box_score_comments_sequence_id.61b7b70a39": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "sequence_id", "model": "{{ get_where_subquery(source('box_score', 'box_score_comments')) }}"}, "namespace": null}, "database": "bc", "schema": "main_dbt_test__audit", "name": "source_not_null_box_score_box_score_comments_sequence_id", "resource_type": "test", "package_name": "baseball_computer", "path": "source_not_null_box_score_box_score_comments_sequence_id.sql", "original_file_path": "models/staging/box_score/source.yml", "unique_id": "test.baseball_computer.source_not_null_box_score_box_score_comments_sequence_id.61b7b70a39", "fqn": ["baseball_computer", "staging", "box_score", "source_not_null_box_score_box_score_comments_sequence_id"], "alias": "source_not_null_box_score_box_score_comments_sequence_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1702281449.659025, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["box_score", "box_score_comments"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.baseball_computer.box_score.box_score_comments"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "sequence_id", "file_key_name": "sources.box_score", "attached_node": null}, "test.baseball_computer.source_not_null_box_score_box_score_comments_comment.27f5650bb2": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "comment", "model": "{{ get_where_subquery(source('box_score', 'box_score_comments')) }}"}, "namespace": null}, "database": "bc", "schema": "main_dbt_test__audit", "name": "source_not_null_box_score_box_score_comments_comment", "resource_type": "test", "package_name": "baseball_computer", "path": "source_not_null_box_score_box_score_comments_comment.sql", "original_file_path": "models/staging/box_score/source.yml", "unique_id": "test.baseball_computer.source_not_null_box_score_box_score_comments_comment.27f5650bb2", "fqn": ["baseball_computer", "staging", "box_score", "source_not_null_box_score_box_score_comments_comment"], "alias": "source_not_null_box_score_box_score_comments_comment", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1702281449.660453, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["box_score", "box_score_comments"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.baseball_computer.box_score.box_score_comments"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "comment", "file_key_name": "sources.box_score", "attached_node": null}, "test.baseball_computer.source_unique_game_games_game_id.ed73a19cd5": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "game_id", "model": "{{ get_where_subquery(source('game', 'games')) }}"}, "namespace": null}, "database": "bc", "schema": "main_dbt_test__audit", "name": "source_unique_game_games_game_id", "resource_type": "test", "package_name": "baseball_computer", "path": "source_unique_game_games_game_id.sql", "original_file_path": "models/staging/game/source.yml", "unique_id": "test.baseball_computer.source_unique_game_games_game_id.ed73a19cd5", "fqn": ["baseball_computer", "staging", "game", "source_unique_game_games_game_id"], "alias": "source_unique_game_games_game_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1702281449.661835, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["game", "games"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.baseball_computer.game.games"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "game_id", "file_key_name": "sources.game", "attached_node": null}, "test.baseball_computer.source_not_null_game_games_game_id.2418071e8e": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "game_id", "model": "{{ get_where_subquery(source('game', 'games')) }}"}, "namespace": null}, "database": "bc", "schema": "main_dbt_test__audit", "name": "source_not_null_game_games_game_id", "resource_type": "test", "package_name": "baseball_computer", "path": "source_not_null_game_games_game_id.sql", "original_file_path": "models/staging/game/source.yml", "unique_id": "test.baseball_computer.source_not_null_game_games_game_id.2418071e8e", "fqn": ["baseball_computer", "staging", "game", "source_not_null_game_games_game_id"], "alias": "source_not_null_game_games_game_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1702281449.662996, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["game", "games"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.baseball_computer.game.games"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "game_id", "file_key_name": "sources.game", "attached_node": null}, "test.baseball_computer.source_not_null_game_games_game_key.888d752037": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "game_key", "model": "{{ get_where_subquery(source('game', 'games')) }}"}, "namespace": null}, "database": "bc", "schema": "main_dbt_test__audit", "name": "source_not_null_game_games_game_key", "resource_type": "test", "package_name": "baseball_computer", "path": "source_not_null_game_games_game_key.sql", "original_file_path": "models/staging/game/source.yml", "unique_id": "test.baseball_computer.source_not_null_game_games_game_key.888d752037", "fqn": ["baseball_computer", "staging", "game", "source_not_null_game_games_game_key"], "alias": "source_not_null_game_games_game_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1702281449.6641479, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["game", "games"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.baseball_computer.game.games"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "game_key", "file_key_name": "sources.game", "attached_node": null}, "test.baseball_computer.source_unique_game_games_game_key.caa87137ff": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "game_key", "model": "{{ get_where_subquery(source('game', 'games')) }}"}, "namespace": null}, "database": "bc", "schema": "main_dbt_test__audit", "name": "source_unique_game_games_game_key", "resource_type": "test", "package_name": "baseball_computer", "path": "source_unique_game_games_game_key.sql", "original_file_path": "models/staging/game/source.yml", "unique_id": "test.baseball_computer.source_unique_game_games_game_key.caa87137ff", "fqn": ["baseball_computer", "staging", "game", "source_unique_game_games_game_key"], "alias": "source_unique_game_games_game_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1702281449.665326, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["game", "games"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.baseball_computer.game.games"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "game_key", "file_key_name": "sources.game", "attached_node": null}, "test.baseball_computer.source_not_null_game_games_date.742eb9e3c2": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "date", "model": "{{ get_where_subquery(source('game', 'games')) }}"}, "namespace": null}, "database": "bc", "schema": "main_dbt_test__audit", "name": "source_not_null_game_games_date", "resource_type": "test", "package_name": "baseball_computer", "path": "source_not_null_game_games_date.sql", "original_file_path": "models/staging/game/source.yml", "unique_id": "test.baseball_computer.source_not_null_game_games_date.742eb9e3c2", "fqn": ["baseball_computer", "staging", "game", "source_not_null_game_games_date"], "alias": "source_not_null_game_games_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1702281449.666791, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["game", "games"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.baseball_computer.game.games"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "date", "file_key_name": "sources.game", "attached_node": null}, "test.baseball_computer.source_not_null_game_games_doubleheader_status.053829553b": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "doubleheader_status", "model": "{{ get_where_subquery(source('game', 'games')) }}"}, "namespace": null}, "database": "bc", "schema": "main_dbt_test__audit", "name": "source_not_null_game_games_doubleheader_status", "resource_type": "test", "package_name": "baseball_computer", "path": "source_not_null_game_games_doubleheader_status.sql", "original_file_path": "models/staging/game/source.yml", "unique_id": "test.baseball_computer.source_not_null_game_games_doubleheader_status.053829553b", "fqn": ["baseball_computer", "staging", "game", "source_not_null_game_games_doubleheader_status"], "alias": "source_not_null_game_games_doubleheader_status", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1702281449.6679559, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["game", "games"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.baseball_computer.game.games"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "doubleheader_status", "file_key_name": "sources.game", "attached_node": null}, "test.baseball_computer.source_not_null_game_games_time_of_day.c9113d1123": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "time_of_day", "model": "{{ get_where_subquery(source('game', 'games')) }}"}, "namespace": null}, "database": "bc", "schema": "main_dbt_test__audit", "name": "source_not_null_game_games_time_of_day", "resource_type": "test", "package_name": "baseball_computer", "path": "source_not_null_game_games_time_of_day.sql", "original_file_path": "models/staging/game/source.yml", "unique_id": "test.baseball_computer.source_not_null_game_games_time_of_day.c9113d1123", "fqn": ["baseball_computer", "staging", "game", "source_not_null_game_games_time_of_day"], "alias": "source_not_null_game_games_time_of_day", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1702281449.669104, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["game", "games"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.baseball_computer.game.games"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "time_of_day", "file_key_name": "sources.game", "attached_node": null}, "test.baseball_computer.source_not_null_game_games_game_type.8ba97fed9b": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "game_type", "model": "{{ get_where_subquery(source('game', 'games')) }}"}, "namespace": null}, "database": "bc", "schema": "main_dbt_test__audit", "name": "source_not_null_game_games_game_type", "resource_type": "test", "package_name": "baseball_computer", "path": "source_not_null_game_games_game_type.sql", "original_file_path": "models/staging/game/source.yml", "unique_id": "test.baseball_computer.source_not_null_game_games_game_type.8ba97fed9b", "fqn": ["baseball_computer", "staging", "game", "source_not_null_game_games_game_type"], "alias": "source_not_null_game_games_game_type", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1702281449.670259, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["game", "games"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.baseball_computer.game.games"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "game_type", "file_key_name": "sources.game", "attached_node": null}, "test.baseball_computer.source_not_null_game_games_bat_first_side.91b0360bdd": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "bat_first_side", "model": "{{ get_where_subquery(source('game', 'games')) }}"}, "namespace": null}, "database": "bc", "schema": "main_dbt_test__audit", "name": "source_not_null_game_games_bat_first_side", "resource_type": "test", "package_name": "baseball_computer", "path": "source_not_null_game_games_bat_first_side.sql", "original_file_path": "models/staging/game/source.yml", "unique_id": "test.baseball_computer.source_not_null_game_games_bat_first_side.91b0360bdd", "fqn": ["baseball_computer", "staging", "game", "source_not_null_game_games_bat_first_side"], "alias": "source_not_null_game_games_bat_first_side", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1702281449.671415, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["game", "games"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.baseball_computer.game.games"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "bat_first_side", "file_key_name": "sources.game", "attached_node": null}, "test.baseball_computer.source_not_null_game_games_sky.d1e4d31777": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "sky", "model": "{{ get_where_subquery(source('game', 'games')) }}"}, "namespace": null}, "database": "bc", "schema": "main_dbt_test__audit", "name": "source_not_null_game_games_sky", "resource_type": "test", "package_name": "baseball_computer", "path": "source_not_null_game_games_sky.sql", "original_file_path": "models/staging/game/source.yml", "unique_id": "test.baseball_computer.source_not_null_game_games_sky.d1e4d31777", "fqn": ["baseball_computer", "staging", "game", "source_not_null_game_games_sky"], "alias": "source_not_null_game_games_sky", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1702281449.6728902, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["game", "games"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.baseball_computer.game.games"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "sky", "file_key_name": "sources.game", "attached_node": null}, "test.baseball_computer.source_not_null_game_games_field_condition.68aa42357b": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "field_condition", "model": "{{ get_where_subquery(source('game', 'games')) }}"}, "namespace": null}, "database": "bc", "schema": "main_dbt_test__audit", "name": "source_not_null_game_games_field_condition", "resource_type": "test", "package_name": "baseball_computer", "path": "source_not_null_game_games_field_condition.sql", "original_file_path": "models/staging/game/source.yml", "unique_id": "test.baseball_computer.source_not_null_game_games_field_condition.68aa42357b", "fqn": ["baseball_computer", "staging", "game", "source_not_null_game_games_field_condition"], "alias": "source_not_null_game_games_field_condition", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1702281449.674037, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["game", "games"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.baseball_computer.game.games"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "field_condition", "file_key_name": "sources.game", "attached_node": null}, "test.baseball_computer.source_not_null_game_games_precipitation.53cfe6a1d5": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "precipitation", "model": "{{ get_where_subquery(source('game', 'games')) }}"}, "namespace": null}, "database": "bc", "schema": "main_dbt_test__audit", "name": "source_not_null_game_games_precipitation", "resource_type": "test", "package_name": "baseball_computer", "path": "source_not_null_game_games_precipitation.sql", "original_file_path": "models/staging/game/source.yml", "unique_id": "test.baseball_computer.source_not_null_game_games_precipitation.53cfe6a1d5", "fqn": ["baseball_computer", "staging", "game", "source_not_null_game_games_precipitation"], "alias": "source_not_null_game_games_precipitation", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1702281449.675186, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["game", "games"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.baseball_computer.game.games"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "precipitation", "file_key_name": "sources.game", "attached_node": null}, "test.baseball_computer.source_not_null_game_games_wind_direction.28ae0e1ff6": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "wind_direction", "model": "{{ get_where_subquery(source('game', 'games')) }}"}, "namespace": null}, "database": "bc", "schema": "main_dbt_test__audit", "name": "source_not_null_game_games_wind_direction", "resource_type": "test", "package_name": "baseball_computer", "path": "source_not_null_game_games_wind_direction.sql", "original_file_path": "models/staging/game/source.yml", "unique_id": "test.baseball_computer.source_not_null_game_games_wind_direction.28ae0e1ff6", "fqn": ["baseball_computer", "staging", "game", "source_not_null_game_games_wind_direction"], "alias": "source_not_null_game_games_wind_direction", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1702281449.676342, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["game", "games"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.baseball_computer.game.games"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "wind_direction", "file_key_name": "sources.game", "attached_node": null}, "test.baseball_computer.source_not_null_game_games_park_id.ae1e9e1fda": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "park_id", "model": "{{ get_where_subquery(source('game', 'games')) }}"}, "namespace": null}, "database": "bc", "schema": "main_dbt_test__audit", "name": "source_not_null_game_games_park_id", "resource_type": "test", "package_name": "baseball_computer", "path": "source_not_null_game_games_park_id.sql", "original_file_path": "models/staging/game/source.yml", "unique_id": "test.baseball_computer.source_not_null_game_games_park_id.ae1e9e1fda", "fqn": ["baseball_computer", "staging", "game", "source_not_null_game_games_park_id"], "alias": "source_not_null_game_games_park_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1702281449.6774888, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["game", "games"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.baseball_computer.game.games"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "park_id", "file_key_name": "sources.game", "attached_node": null}, "test.baseball_computer.source_not_null_game_games_use_dh.9dcb036550": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "use_dh", "model": "{{ get_where_subquery(source('game', 'games')) }}"}, "namespace": null}, "database": "bc", "schema": "main_dbt_test__audit", "name": "source_not_null_game_games_use_dh", "resource_type": "test", "package_name": "baseball_computer", "path": "source_not_null_game_games_use_dh.sql", "original_file_path": "models/staging/game/source.yml", "unique_id": "test.baseball_computer.source_not_null_game_games_use_dh.9dcb036550", "fqn": ["baseball_computer", "staging", "game", "source_not_null_game_games_use_dh"], "alias": "source_not_null_game_games_use_dh", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1702281449.678656, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["game", "games"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.baseball_computer.game.games"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "use_dh", "file_key_name": "sources.game", "attached_node": null}, "test.baseball_computer.source_not_null_game_games_scoring_method.b1ac89e487": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "scoring_method", "model": "{{ get_where_subquery(source('game', 'games')) }}"}, "namespace": null}, "database": "bc", "schema": "main_dbt_test__audit", "name": "source_not_null_game_games_scoring_method", "resource_type": "test", "package_name": "baseball_computer", "path": "source_not_null_game_games_scoring_method.sql", "original_file_path": "models/staging/game/source.yml", "unique_id": "test.baseball_computer.source_not_null_game_games_scoring_method.b1ac89e487", "fqn": ["baseball_computer", "staging", "game", "source_not_null_game_games_scoring_method"], "alias": "source_not_null_game_games_scoring_method", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1702281449.680118, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["game", "games"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.baseball_computer.game.games"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "scoring_method", "file_key_name": "sources.game", "attached_node": null}, "test.baseball_computer.source_not_null_game_games_account_type.7a0a3ee64a": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "account_type", "model": "{{ get_where_subquery(source('game', 'games')) }}"}, "namespace": null}, "database": "bc", "schema": "main_dbt_test__audit", "name": "source_not_null_game_games_account_type", "resource_type": "test", "package_name": "baseball_computer", "path": "source_not_null_game_games_account_type.sql", "original_file_path": "models/staging/game/source.yml", "unique_id": "test.baseball_computer.source_not_null_game_games_account_type.7a0a3ee64a", "fqn": ["baseball_computer", "staging", "game", "source_not_null_game_games_account_type"], "alias": "source_not_null_game_games_account_type", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1702281449.6812742, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["game", "games"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.baseball_computer.game.games"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "account_type", "file_key_name": "sources.game", "attached_node": null}, "test.baseball_computer.source_not_null_game_games_filename.b603af55c2": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "filename", "model": "{{ get_where_subquery(source('game', 'games')) }}"}, "namespace": null}, "database": "bc", "schema": "main_dbt_test__audit", "name": "source_not_null_game_games_filename", "resource_type": "test", "package_name": "baseball_computer", "path": "source_not_null_game_games_filename.sql", "original_file_path": "models/staging/game/source.yml", "unique_id": "test.baseball_computer.source_not_null_game_games_filename.b603af55c2", "fqn": ["baseball_computer", "staging", "game", "source_not_null_game_games_filename"], "alias": "source_not_null_game_games_filename", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1702281449.682415, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["game", "games"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.baseball_computer.game.games"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "filename", "file_key_name": "sources.game", "attached_node": null}, "test.baseball_computer.source_not_null_game_games_away_team_id.8e41b8425b": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "away_team_id", "model": "{{ get_where_subquery(source('game', 'games')) }}"}, "namespace": null}, "database": "bc", "schema": "main_dbt_test__audit", "name": "source_not_null_game_games_away_team_id", "resource_type": "test", "package_name": "baseball_computer", "path": "source_not_null_game_games_away_team_id.sql", "original_file_path": "models/staging/game/source.yml", "unique_id": "test.baseball_computer.source_not_null_game_games_away_team_id.8e41b8425b", "fqn": ["baseball_computer", "staging", "game", "source_not_null_game_games_away_team_id"], "alias": "source_not_null_game_games_away_team_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1702281449.683564, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["game", "games"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.baseball_computer.game.games"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "away_team_id", "file_key_name": "sources.game", "attached_node": null}, "test.baseball_computer.source_not_null_game_games_home_team_id.8a8347ed3c": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "home_team_id", "model": "{{ get_where_subquery(source('game', 'games')) }}"}, "namespace": null}, "database": "bc", "schema": "main_dbt_test__audit", "name": "source_not_null_game_games_home_team_id", "resource_type": "test", "package_name": "baseball_computer", "path": "source_not_null_game_games_home_team_id.sql", "original_file_path": "models/staging/game/source.yml", "unique_id": "test.baseball_computer.source_not_null_game_games_home_team_id.8a8347ed3c", "fqn": ["baseball_computer", "staging", "game", "source_not_null_game_games_home_team_id"], "alias": "source_not_null_game_games_home_team_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1702281449.684733, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["game", "games"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.baseball_computer.game.games"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "home_team_id", "file_key_name": "sources.game", "attached_node": null}, "test.baseball_computer.source_not_null_game_game_earned_runs_game_id.5b52e3dc8e": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "game_id", "model": "{{ get_where_subquery(source('game', 'game_earned_runs')) }}"}, "namespace": null}, "database": "bc", "schema": "main_dbt_test__audit", "name": "source_not_null_game_game_earned_runs_game_id", "resource_type": "test", "package_name": "baseball_computer", "path": "source_not_null_game_game_earned_runs_game_id.sql", "original_file_path": "models/staging/game/source.yml", "unique_id": "test.baseball_computer.source_not_null_game_game_earned_runs_game_id.5b52e3dc8e", "fqn": ["baseball_computer", "staging", "game", "source_not_null_game_game_earned_runs_game_id"], "alias": "source_not_null_game_game_earned_runs_game_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1702281449.686361, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["game", "game_earned_runs"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.baseball_computer.game.game_earned_runs"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "game_id", "file_key_name": "sources.game", "attached_node": null}, "test.baseball_computer.source_not_null_game_game_earned_runs_player_id.c46963cd36": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "player_id", "model": "{{ get_where_subquery(source('game', 'game_earned_runs')) }}"}, "namespace": null}, "database": "bc", "schema": "main_dbt_test__audit", "name": "source_not_null_game_game_earned_runs_player_id", "resource_type": "test", "package_name": "baseball_computer", "path": "source_not_null_game_game_earned_runs_player_id.sql", "original_file_path": "models/staging/game/source.yml", "unique_id": "test.baseball_computer.source_not_null_game_game_earned_runs_player_id.c46963cd36", "fqn": ["baseball_computer", "staging", "game", "source_not_null_game_game_earned_runs_player_id"], "alias": "source_not_null_game_game_earned_runs_player_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1702281449.68752, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["game", "game_earned_runs"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.baseball_computer.game.game_earned_runs"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "player_id", "file_key_name": "sources.game", "attached_node": null}, "test.baseball_computer.source_not_null_game_game_earned_runs_earned_runs.e4409d3c75": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "earned_runs", "model": "{{ get_where_subquery(source('game', 'game_earned_runs')) }}"}, "namespace": null}, "database": "bc", "schema": "main_dbt_test__audit", "name": "source_not_null_game_game_earned_runs_earned_runs", "resource_type": "test", "package_name": "baseball_computer", "path": "source_not_null_game_game_earned_runs_earned_runs.sql", "original_file_path": "models/staging/game/source.yml", "unique_id": "test.baseball_computer.source_not_null_game_game_earned_runs_earned_runs.e4409d3c75", "fqn": ["baseball_computer", "staging", "game", "source_not_null_game_game_earned_runs_earned_runs"], "alias": "source_not_null_game_game_earned_runs_earned_runs", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1702281449.688674, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["game", "game_earned_runs"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.baseball_computer.game.game_earned_runs"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "earned_runs", "file_key_name": "sources.game", "attached_node": null}, "test.baseball_computer.source_not_null_game_game_fielding_appearances_game_id.dd2b7e8969": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "game_id", "model": "{{ get_where_subquery(source('game', 'game_fielding_appearances')) }}"}, "namespace": null}, "database": "bc", "schema": "main_dbt_test__audit", "name": "source_not_null_game_game_fielding_appearances_game_id", "resource_type": "test", "package_name": "baseball_computer", "path": "source_not_null_game_game_fielding_appearances_game_id.sql", "original_file_path": "models/staging/game/source.yml", "unique_id": "test.baseball_computer.source_not_null_game_game_fielding_appearances_game_id.dd2b7e8969", "fqn": ["baseball_computer", "staging", "game", "source_not_null_game_game_fielding_appearances_game_id"], "alias": "source_not_null_game_game_fielding_appearances_game_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1702281449.689936, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["game", "game_fielding_appearances"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.baseball_computer.game.game_fielding_appearances"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "game_id", "file_key_name": "sources.game", "attached_node": null}, "test.baseball_computer.source_not_null_game_game_fielding_appearances_player_id.0c7ac8daaa": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "player_id", "model": "{{ get_where_subquery(source('game', 'game_fielding_appearances')) }}"}, "namespace": null}, "database": "bc", "schema": "main_dbt_test__audit", "name": "source_not_null_game_game_fielding_appearances_player_id", "resource_type": "test", "package_name": "baseball_computer", "path": "source_not_null_game_game_fielding_appearances_player_id.sql", "original_file_path": "models/staging/game/source.yml", "unique_id": "test.baseball_computer.source_not_null_game_game_fielding_appearances_player_id.0c7ac8daaa", "fqn": ["baseball_computer", "staging", "game", "source_not_null_game_game_fielding_appearances_player_id"], "alias": "source_not_null_game_game_fielding_appearances_player_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1702281449.691605, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["game", "game_fielding_appearances"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.baseball_computer.game.game_fielding_appearances"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "player_id", "file_key_name": "sources.game", "attached_node": null}, "test.baseball_computer.source_not_null_game_game_fielding_appearances_side.266aa13571": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "side", "model": "{{ get_where_subquery(source('game', 'game_fielding_appearances')) }}"}, "namespace": null}, "database": "bc", "schema": "main_dbt_test__audit", "name": "source_not_null_game_game_fielding_appearances_side", "resource_type": "test", "package_name": "baseball_computer", "path": "source_not_null_game_game_fielding_appearances_side.sql", "original_file_path": "models/staging/game/source.yml", "unique_id": "test.baseball_computer.source_not_null_game_game_fielding_appearances_side.266aa13571", "fqn": ["baseball_computer", "staging", "game", "source_not_null_game_game_fielding_appearances_side"], "alias": "source_not_null_game_game_fielding_appearances_side", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1702281449.692749, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["game", "game_fielding_appearances"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.baseball_computer.game.game_fielding_appearances"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "side", "file_key_name": "sources.game", "attached_node": null}, "test.baseball_computer.source_not_null_game_game_fielding_appearances_fielding_position.fb3999bb73": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "fielding_position", "model": "{{ get_where_subquery(source('game', 'game_fielding_appearances')) }}"}, "namespace": null}, "database": "bc", "schema": "main_dbt_test__audit", "name": "source_not_null_game_game_fielding_appearances_fielding_position", "resource_type": "test", "package_name": "baseball_computer", "path": "source_not_null_game_game_fiel_b3aea314c8cc5b51cd44e1501fb8d62d.sql", "original_file_path": "models/staging/game/source.yml", "unique_id": "test.baseball_computer.source_not_null_game_game_fielding_appearances_fielding_position.fb3999bb73", "fqn": ["baseball_computer", "staging", "game", "source_not_null_game_game_fielding_appearances_fielding_position"], "alias": "source_not_null_game_game_fiel_b3aea314c8cc5b51cd44e1501fb8d62d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_not_null_game_game_fiel_b3aea314c8cc5b51cd44e1501fb8d62d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_not_null_game_game_fiel_b3aea314c8cc5b51cd44e1501fb8d62d"}, "created_at": 1702281449.6939058, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_game_game_fiel_b3aea314c8cc5b51cd44e1501fb8d62d\") }}", "language": "sql", "refs": [], "sources": [["game", "game_fielding_appearances"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.baseball_computer.game.game_fielding_appearances"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "fielding_position", "file_key_name": "sources.game", "attached_node": null}, "test.baseball_computer.source_not_null_game_game_fielding_appearances_start_event_id.408c346cde": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "start_event_id", "model": "{{ get_where_subquery(source('game', 'game_fielding_appearances')) }}"}, "namespace": null}, "database": "bc", "schema": "main_dbt_test__audit", "name": "source_not_null_game_game_fielding_appearances_start_event_id", "resource_type": "test", "package_name": "baseball_computer", "path": "source_not_null_game_game_fielding_appearances_start_event_id.sql", "original_file_path": "models/staging/game/source.yml", "unique_id": "test.baseball_computer.source_not_null_game_game_fielding_appearances_start_event_id.408c346cde", "fqn": ["baseball_computer", "staging", "game", "source_not_null_game_game_fielding_appearances_start_event_id"], "alias": "source_not_null_game_game_fielding_appearances_start_event_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1702281449.6950521, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["game", "game_fielding_appearances"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.baseball_computer.game.game_fielding_appearances"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "start_event_id", "file_key_name": "sources.game", "attached_node": null}, "test.baseball_computer.source_not_null_game_game_fielding_appearances_end_event_id.60aa09d0ec": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "end_event_id", "model": "{{ get_where_subquery(source('game', 'game_fielding_appearances')) }}"}, "namespace": null}, "database": "bc", "schema": "main_dbt_test__audit", "name": "source_not_null_game_game_fielding_appearances_end_event_id", "resource_type": "test", "package_name": "baseball_computer", "path": "source_not_null_game_game_fielding_appearances_end_event_id.sql", "original_file_path": "models/staging/game/source.yml", "unique_id": "test.baseball_computer.source_not_null_game_game_fielding_appearances_end_event_id.60aa09d0ec", "fqn": ["baseball_computer", "staging", "game", "source_not_null_game_game_fielding_appearances_end_event_id"], "alias": "source_not_null_game_game_fielding_appearances_end_event_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1702281449.696203, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["game", "game_fielding_appearances"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.baseball_computer.game.game_fielding_appearances"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "end_event_id", "file_key_name": "sources.game", "attached_node": null}, "test.baseball_computer.source_not_null_game_game_lineup_appearances_game_id.f63a900428": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "game_id", "model": "{{ get_where_subquery(source('game', 'game_lineup_appearances')) }}"}, "namespace": null}, "database": "bc", "schema": "main_dbt_test__audit", "name": "source_not_null_game_game_lineup_appearances_game_id", "resource_type": "test", "package_name": "baseball_computer", "path": "source_not_null_game_game_lineup_appearances_game_id.sql", "original_file_path": "models/staging/game/source.yml", "unique_id": "test.baseball_computer.source_not_null_game_game_lineup_appearances_game_id.f63a900428", "fqn": ["baseball_computer", "staging", "game", "source_not_null_game_game_lineup_appearances_game_id"], "alias": "source_not_null_game_game_lineup_appearances_game_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1702281449.697748, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["game", "game_lineup_appearances"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.baseball_computer.game.game_lineup_appearances"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "game_id", "file_key_name": "sources.game", "attached_node": null}, "test.baseball_computer.source_not_null_game_game_lineup_appearances_player_id.6033a911ba": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "player_id", "model": "{{ get_where_subquery(source('game', 'game_lineup_appearances')) }}"}, "namespace": null}, "database": "bc", "schema": "main_dbt_test__audit", "name": "source_not_null_game_game_lineup_appearances_player_id", "resource_type": "test", "package_name": "baseball_computer", "path": "source_not_null_game_game_lineup_appearances_player_id.sql", "original_file_path": "models/staging/game/source.yml", "unique_id": "test.baseball_computer.source_not_null_game_game_lineup_appearances_player_id.6033a911ba", "fqn": ["baseball_computer", "staging", "game", "source_not_null_game_game_lineup_appearances_player_id"], "alias": "source_not_null_game_game_lineup_appearances_player_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1702281449.69891, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["game", "game_lineup_appearances"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.baseball_computer.game.game_lineup_appearances"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "player_id", "file_key_name": "sources.game", "attached_node": null}, "test.baseball_computer.source_not_null_game_game_lineup_appearances_side.bcbf5ff7f4": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "side", "model": "{{ get_where_subquery(source('game', 'game_lineup_appearances')) }}"}, "namespace": null}, "database": "bc", "schema": "main_dbt_test__audit", "name": "source_not_null_game_game_lineup_appearances_side", "resource_type": "test", "package_name": "baseball_computer", "path": "source_not_null_game_game_lineup_appearances_side.sql", "original_file_path": "models/staging/game/source.yml", "unique_id": "test.baseball_computer.source_not_null_game_game_lineup_appearances_side.bcbf5ff7f4", "fqn": ["baseball_computer", "staging", "game", "source_not_null_game_game_lineup_appearances_side"], "alias": "source_not_null_game_game_lineup_appearances_side", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1702281449.700059, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["game", "game_lineup_appearances"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.baseball_computer.game.game_lineup_appearances"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "side", "file_key_name": "sources.game", "attached_node": null}, "test.baseball_computer.source_not_null_game_game_lineup_appearances_lineup_position.4b45e3e931": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "lineup_position", "model": "{{ get_where_subquery(source('game', 'game_lineup_appearances')) }}"}, "namespace": null}, "database": "bc", "schema": "main_dbt_test__audit", "name": "source_not_null_game_game_lineup_appearances_lineup_position", "resource_type": "test", "package_name": "baseball_computer", "path": "source_not_null_game_game_lineup_appearances_lineup_position.sql", "original_file_path": "models/staging/game/source.yml", "unique_id": "test.baseball_computer.source_not_null_game_game_lineup_appearances_lineup_position.4b45e3e931", "fqn": ["baseball_computer", "staging", "game", "source_not_null_game_game_lineup_appearances_lineup_position"], "alias": "source_not_null_game_game_lineup_appearances_lineup_position", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1702281449.701199, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["game", "game_lineup_appearances"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.baseball_computer.game.game_lineup_appearances"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "lineup_position", "file_key_name": "sources.game", "attached_node": null}, "test.baseball_computer.source_not_null_game_game_lineup_appearances_entered_game_as.a9e19b02e5": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "entered_game_as", "model": "{{ get_where_subquery(source('game', 'game_lineup_appearances')) }}"}, "namespace": null}, "database": "bc", "schema": "main_dbt_test__audit", "name": "source_not_null_game_game_lineup_appearances_entered_game_as", "resource_type": "test", "package_name": "baseball_computer", "path": "source_not_null_game_game_lineup_appearances_entered_game_as.sql", "original_file_path": "models/staging/game/source.yml", "unique_id": "test.baseball_computer.source_not_null_game_game_lineup_appearances_entered_game_as.a9e19b02e5", "fqn": ["baseball_computer", "staging", "game", "source_not_null_game_game_lineup_appearances_entered_game_as"], "alias": "source_not_null_game_game_lineup_appearances_entered_game_as", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1702281449.702355, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["game", "game_lineup_appearances"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.baseball_computer.game.game_lineup_appearances"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "entered_game_as", "file_key_name": "sources.game", "attached_node": null}, "test.baseball_computer.source_not_null_game_game_lineup_appearances_start_event_id.b44f764b97": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "start_event_id", "model": "{{ get_where_subquery(source('game', 'game_lineup_appearances')) }}"}, "namespace": null}, "database": "bc", "schema": "main_dbt_test__audit", "name": "source_not_null_game_game_lineup_appearances_start_event_id", "resource_type": "test", "package_name": "baseball_computer", "path": "source_not_null_game_game_lineup_appearances_start_event_id.sql", "original_file_path": "models/staging/game/source.yml", "unique_id": "test.baseball_computer.source_not_null_game_game_lineup_appearances_start_event_id.b44f764b97", "fqn": ["baseball_computer", "staging", "game", "source_not_null_game_game_lineup_appearances_start_event_id"], "alias": "source_not_null_game_game_lineup_appearances_start_event_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1702281449.703516, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["game", "game_lineup_appearances"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.baseball_computer.game.game_lineup_appearances"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "start_event_id", "file_key_name": "sources.game", "attached_node": null}, "test.baseball_computer.source_not_null_game_game_lineup_appearances_end_event_id.62781ded2c": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "end_event_id", "model": "{{ get_where_subquery(source('game', 'game_lineup_appearances')) }}"}, "namespace": null}, "database": "bc", "schema": "main_dbt_test__audit", "name": "source_not_null_game_game_lineup_appearances_end_event_id", "resource_type": "test", "package_name": "baseball_computer", "path": "source_not_null_game_game_lineup_appearances_end_event_id.sql", "original_file_path": "models/staging/game/source.yml", "unique_id": "test.baseball_computer.source_not_null_game_game_lineup_appearances_end_event_id.62781ded2c", "fqn": ["baseball_computer", "staging", "game", "source_not_null_game_game_lineup_appearances_end_event_id"], "alias": "source_not_null_game_game_lineup_appearances_end_event_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1702281449.704952, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["game", "game_lineup_appearances"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.baseball_computer.game.game_lineup_appearances"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "end_event_id", "file_key_name": "sources.game", "attached_node": null}, "model.baseball_computer.metrics_player_career_fielding": {"database": "bc", "schema": "main_models", "name": "metrics_player_career_fielding", "resource_type": "model", "package_name": "baseball_computer", "path": "metrics/metrics_player_career_fielding.sql", "original_file_path": "models/metrics/metrics_player_career_fielding.sql", "unique_id": "model.baseball_computer.metrics_player_career_fielding", "fqn": ["baseball_computer", "metrics", "metrics_player_career_fielding"], "alias": "metrics_player_career_fielding", "checksum": {"name": "sha256", "checksum": "6e0055e9eafe2b4e3146cd99d0d184254634cc77b8f294f5146cde77d3795563"}, "config": {"enabled": true, "alias": null, "schema": "models", "database": null, "tags": [], "meta": {"primary_keys": ["player_id"]}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Aggregate fielding statistics and averages over player careers.\nRegular season only.\n", "columns": {"player_id": {"name": "player_id", "description": "Retrosheet 8-character person ID for a player, which consists of\n    the first four characters of the last name, the first character\n    of the first name, and then three digits to disambiguate between\n    players with the same five characters.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "outs_played": {"name": "outs_played", "description": "", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "plate_appearances_in_field": {"name": "plate_appearances_in_field", "description": "", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "plate_appearances_in_field_with_ball_in_play": {"name": "plate_appearances_in_field_with_ball_in_play", "description": "", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "unknown_putouts_while_fielding": {"name": "unknown_putouts_while_fielding", "description": "", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "balls_hit_to": {"name": "balls_hit_to", "description": "", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "putouts": {"name": "putouts", "description": "(PO) Outs credited to fielder based on who physically made the out, either by:\n        - Catching a ball on the fly\n        - Tagging a runner out\n        - Forcing a runner out\n        - Catching a called third strike\n        - Being the nearest fielder to a baserunner who is called out for interference\n\n    Putouts have been an important baseball statistic longer than MLB has been around,\n    so it has excellent historical coverage. Unassisted\n    putouts are very important in determining the location of batted balls.\n    \n    In modern baseball rules, each out in the game is credited as a putout, and at the play/event\n    level this will always be the case. However, in older games for which we only have box score or season-level\n    data, rare plays like baserunner interference may not be assigned to a specific fielder.\n    \n    Every play-by-play out has a putout, but the fielder who gets the putout may be unknown.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "assists": {"name": "assists", "description": "(A) Number of outs in which a fielder touched the ball before anothber fielder recorded a putout.\n    This is almost always a throw to another fielder, but it can also be a deflection.\n\n    Assists have excellent historical data coverage, and they are particularly useful in determining\n    the location of ground balls. The data is present in almost all season-level and game-level accounts.\n    However, individual plays with unknown-fielder putouts are likely to be missing assists entirely.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "errors": {"name": "errors", "description": "(E) Number of errors recorded by a fielder. This is recorded when a fielder either fails to make an out\n    that an average fielder should have made or makes a bad play that allows a baserunner to advance.\n    Errors are awarded at the scorekeeper's discretion, making them more subjective than the other two main\n    fielding stats.\n    \n    Errors used to be a much larger component of evaluating fielder quality.\n    When the stat was invented, routine plays were completed much less frequently than they are today.\n    As baseball evolved, routine plays became truly routine, and a fielder's ability to get to the ball\n    became more relevant than their ability\n    to reliably convert the out once they got there. While plenty of people as early as the 19th century were\n    aware of this, statistics mostly failed to reflect it until the 1980s, when Bill James and others\n    developed Range Factor and other stats that attempted to measure a fielder's ability to create chances.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "fielders_choices": {"name": "fielders_choices", "description": "(FC) Number of times a fielder who fielded the ball attempted to put out a baserunner other than the batter.\n    A fielder's choice can be assigned when the attempt fails, even if there was no error on the play.\n\n    Fielder's choices are only available on play-by-play data and tend to be recorded when the attempt was\n    a tag and not a force. Force plays are explicitly noted and have little overlap with fielder's choices.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "assisted_putouts": {"name": "assisted_putouts", "description": "Number of putouts by the fielder that had at least one recorded, associated assist. For older games, this may be a subset\n    of the true total assisted putouts, as unknown-fielder putouts almost never have recorded assists.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "in_play_putouts": {"name": "in_play_putouts", "description": "", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "in_play_assists": {"name": "in_play_assists", "description": "", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "reaching_errors": {"name": "reaching_errors", "description": "", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "stolen_bases": {"name": "stolen_bases", "description": "(SB) Number of successful stolen bases.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "caught_stealing": {"name": "caught_stealing", "description": "(CS) Number of times a runner was caught stealing.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "pickoffs": {"name": "pickoffs", "description": "", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "passed_balls": {"name": "passed_balls", "description": "(PB) Number of passed balls.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "double_plays": {"name": "double_plays", "description": "(DP) Number of times a play ended in two outs being recorded.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "triple_plays": {"name": "triple_plays", "description": "(TP) Number of times a play ended in three outs being recorded.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "ground_ball_double_plays": {"name": "ground_ball_double_plays", "description": "", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "double_plays_started": {"name": "double_plays_started", "description": "", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "ground_ball_double_plays_started": {"name": "ground_ball_double_plays_started", "description": "", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "fielding_percentage": {"name": "fielding_percentage", "description": "", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "range_factor": {"name": "range_factor", "description": "", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "innings_played": {"name": "innings_played", "description": "", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "event_coverage_rate": {"name": "event_coverage_rate", "description": "", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}}, "meta": {"primary_keys": ["player_id"]}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "baseball_computer://models/metrics/metrics_player_career_fielding.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "models", "contract": {"enforced": true}, "meta": {"primary_keys": ["player_id"]}}, "created_at": 1702284989.4675221, "relation_name": "\"bc\".\"main_models\".\"metrics_player_career_fielding\"", "raw_code": "{{  metric_table_generator(\"fielding\", [\"player_id\"], agg_type=\"player\", regular_season_only=True)  }}", "language": "sql", "refs": [{"name": "event_player_fielding_stats", "package": null, "version": null}, {"name": "seed_franchises", "package": null, "version": null}, {"name": "player_position_team_season_fielding_stats", "package": null, "version": null}, {"name": "player_position_team_season_fielding_stats", "package": null, "version": null}, {"name": "seed_franchises", "package": null, "version": null}, {"name": "team_game_start_info", "package": null, "version": null}, {"name": "player_position_game_fielding_stats", "package": null, "version": null}, {"name": "event_player_fielding_stats", "package": null, "version": null}, {"name": "team_game_start_info", "package": null, "version": null}, {"name": "seed_game_types", "package": null, "version": null}, {"name": "game_start_info", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.baseball_computer.metric_table_generator"], "nodes": ["model.baseball_computer.event_player_fielding_stats", "seed.baseball_computer.seed_franchises", "model.baseball_computer.player_position_team_season_fielding_stats", "model.baseball_computer.team_game_start_info", "model.baseball_computer.player_position_game_fielding_stats", "seed.baseball_computer.seed_game_types", "model.baseball_computer.game_start_info"]}, "compiled_path": null, "contract": {"enforced": true, "alias_types": true, "checksum": "06b605107a320e3f6c75094606c25333f4c8c31860b54661595764167ac6c0b9"}, "access": "protected", "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true, "columns": ["player_id"]}], "version": null, "latest_version": null, "deprecation_date": null}, "model.baseball_computer.metrics_player_career_offense": {"database": "bc", "schema": "main_models", "name": "metrics_player_career_offense", "resource_type": "model", "package_name": "baseball_computer", "path": "metrics/metrics_player_career_offense.sql", "original_file_path": "models/metrics/metrics_player_career_offense.sql", "unique_id": "model.baseball_computer.metrics_player_career_offense", "fqn": ["baseball_computer", "metrics", "metrics_player_career_offense"], "alias": "metrics_player_career_offense", "checksum": {"name": "sha256", "checksum": "d5e5ecbf6119d9f53e5984e806f3f42a2bd4e83abf185bd0fa652a6a8d830673"}, "config": {"enabled": true, "alias": null, "schema": "models", "database": null, "tags": [], "meta": {"primary_keys": ["player_id"]}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Aggregate offensive statistics and averages over player careers.\nRegular season only.\n", "columns": {"player_id": {"name": "player_id", "description": "Retrosheet 8-character person ID for a player, which consists of\n    the first four characters of the last name, the first character\n    of the first name, and then three digits to disambiguate between\n    players with the same five characters.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "plate_appearances": {"name": "plate_appearances", "description": "(PA) Number of times a batter came to the plate, including walks, hit by pitches, sacrifices, and at-bats.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "at_bats": {"name": "at_bats", "description": "(AB) Number of plate appearances that ended in either a hit or a non-sacrifice out.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "hits": {"name": "hits", "description": "(H) Number of times a batter reached base safely without an error or fielder's choice.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "singles": {"name": "singles", "description": "(1B) Number of hits in which a batter reached first base.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "doubles": {"name": "doubles", "description": "(2B) Number of hits in which a batter reached second base without the help of an error or an attempted\n    play on another runner.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "triples": {"name": "triples", "description": "(3B) Number of hits in which a batter reached third base without the help of an error or an attempted\n    play on another runner.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "home_runs": {"name": "home_runs", "description": "(HR) Number of hits in which a batter reached home plate without the help of an error or an attempted\n    play on another runner (usually by hitting the ball out of the park).", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "total_bases": {"name": "total_bases", "description": "(TB) Number of bases a batter reached safely without the help of an error or an attempted\n    play on another runner. HR * 4 + 3B * 3 + 2B * 2 + (H - HR - 3B - 2B)", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "strikeouts": {"name": "strikeouts", "description": "(K, SO) Number of times a batter struck out. This includes plays in which a batter reached base on\n    a dropped third strike.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "walks": {"name": "walks", "description": "(BB, occasionally W) Number of times a batter reaches base on called balls out of the strike zone\n    (Four balls for all of MLB history after the 1880s).", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "intentional_walks": {"name": "intentional_walks", "description": "(IBB, occasionally IW) Number of times a batter was intentionally walked. This number may be missing or undercounted\n    in earlier years, as intentional walks were not officially tracked until 1955.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "hit_by_pitches": {"name": "hit_by_pitches", "description": "(HBP) Number of times a batter was awarded first base after being hit by a pitch.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "sacrifice_hits": {"name": "sacrifice_hits", "description": "(SH) Number of times a batter performed a sacrifice bunt to advance another runner.\n    A bunt may count as a sacrifice even if the batter reaches base safely.\n    Unsuccessful attempts are not counted, nor are non-sacrifice bunts.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "sacrifice_flies": {"name": "sacrifice_flies", "description": "(SF) Number of times a batter hit a fly ball that resulted in an out (or error),\n    but allowed a runner to score on the throw.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "reached_on_errors": {"name": "reached_on_errors", "description": "(ROE) Number of times a batter reached base safely due to an error.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "reached_on_interferences": {"name": "reached_on_interferences", "description": "Number of times a batter was awarded first base for being illegally hindered\n    by a fielder, usually the catcher.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "inside_the_park_home_runs": {"name": "inside_the_park_home_runs", "description": "Number of times a batter hit a home run without the ball leaving the field of play.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "ground_rule_doubles": {"name": "ground_rule_doubles", "description": "Number of times a batter was awarded a double on a ball that went out of play after\n    bouncing in fair territory.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "infield_hits": {"name": "infield_hits", "description": "Number of times a batter reached base safely on a hit that did not reach the outfield.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "on_base_opportunities": {"name": "on_base_opportunities", "description": "Number of plate appearances in which a batter either did or did not reach base,\n    as defined by the formula for on-base percentage. Note that this is very similar to but different\n    from plate_appearances, as it does not include sacrifice hits or interference.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "on_base_successes": {"name": "on_base_successes", "description": "Number of hits, walks, and hit by pitches that serves as the numerator in the formula\n    for on-base percentage.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "runs_batted_in": {"name": "runs_batted_in", "description": "(RBI) Number of runs that scored as a result of a batter's plate appearance. This is usually\n    the number of runs that scored on the play, but errors and other similar cases may cause\n    some runs not to be credited to the batter. Scorerkeeper discretion occasionally causes differences\n    between the number in the database and the official MLB total.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "grounded_into_double_plays": {"name": "grounded_into_double_plays", "description": "(GIDP) Number of times a batter grounded into a double play. This is the conventional way\n    to record a double play and as such is an important statistic on its own. Games without\n    play-by-play accounts don't have data on the trajectory of the double play, so\n    this number is not populated for those games.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "double_plays": {"name": "double_plays", "description": "(DP) Number of times a play ended in two outs being recorded.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "triple_plays": {"name": "triple_plays", "description": "(TP) Number of times a play ended in three outs being recorded.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batting_outs": {"name": "batting_outs", "description": "Number of outs that \"should\" have been recorded as a result of a batter's plate apperances.\n    A batting out is still counted if no actual out is recorded on an error or a failed fielder's choice.\n    Outs on baserunners (including the batter trying to stretch a hit) do not count here.\n    Grounded-into-double-plays count as two outs, but other types of double plays do not (the \n    idea here is that the baserunner is responsible on other types of double plays).\n    Unofficial stat, but designed here to be generally useful in determining rates of official stats.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "balls_in_play": {"name": "balls_in_play", "description": "Number of plate appearances that resulted in a live\n    ball on the field of play. The difference between this and batted_balls is that\n    balls_in_play does not include out-of-the-park home runs. This distinction is important\n    for calculating batting average on balls in play, a stat designed to isolate at_bats\n    in which the defense was involved.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "balls_batted": {"name": "balls_batted", "description": "Number of plate appearances that ended in a fair ball or a foul flyout. This is equivalent\n    to balls_in_play + home_runs, and may be a more useful denominator for \"in play\" stats depending\n    on the context.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "trajectory_fly_ball": {"name": "trajectory_fly_ball", "description": "(FB) Number of plate appearances that ended in a fly ball. A fly ball is defined here\n    as the subset of balls hit in the air that are neither line drives nor pop flies.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "trajectory_ground_ball": {"name": "trajectory_ground_ball", "description": "(GB) Number of plate appearances that ended in a ground ball, also called a grounder. A ground ball is defined\n    here to only include swings, not bunts, although older data may not have a proper distinction. Ground\n    balls tend to be easy to distinguish between other types of contact, but Statcast-era data defines it\n    as balls with a launch angle under 10 degrees.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "trajectory_line_drive": {"name": "trajectory_line_drive", "description": "(LD) Number of plate appearances that ended in a line drive, also called a liner. Line drives are distiguished\n    from fly balls by some combination of angle and exit velocity. In the Statcast era, line drives\n    are defined purely in terms of launch angle (10-25 degrees), but just about any colloquial definition\n    involves hard-hitness as well. The line-drive-fly-ball distinction is by far the most arbitrary\n    and subjective trajectory categorization. Many scorekeepers never included line drives, while others counted\n    any successful in-play air-hit as a line drive. Nevertheless, the distinction is a crucial one,\n    as line drives are by far the most likely type of batted ball to result in a hit (even when they are not hit very hard).", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "trajectory_pop_up": {"name": "trajectory_pop_up", "description": "(sometimes PU)  Number of plate appearances that ended in a pop-up, also called a pop fly.\n    Pop-ups are distinguished from fly balls in that they are hit at a higher angle, tend to be\n    hit with less exit velocity, and (as a result) end up in the infield or shallow outfield. Before\n    Statcast-era standardization, the distinction between a fly ball and a pop-up was a matter of\n    scorerkeeper judgement, and many unofficial scorekeepers did not distinguish between the two.\n    Statcast determines pop flies exclusively by angle (> 50 degrees).", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "trajectory_unknown": {"name": "trajectory_unknown", "description": "Number of plate appearances ending in a batted ball whose trajectory was not recorded and cannot\n    be reliably deduced from context. This number includes balls that we know were hit in the air,\n    but do not know which kind of air ball (FB/PU/LD) they were (see trajectory_broad_classification_unknown\n    for a number that does not include those balls). The strong majority of batted balls prior to 1988\n    fall into this category, especially hits.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "trajectory_known": {"name": "trajectory_known", "description": "Number of plate appearances ending in a batted ball whose trajectory was recorded or was reliably deduced\n    from the context. An example of reliable deduction is an at-bat with the fielding play 6-3, which\n    almost always is a ground ball fielded by the shortstop and thrown to the first baseman. See\n    `calc_batted_ball_type` for the deduction logic.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "trajectory_broad_air_ball": {"name": "trajectory_broad_air_ball", "description": "Number of plate appearances that ended in an air ball (a fly ball, line drive, or pop-up).\n    Because it is much easier to deduce that a ball was hit in the air than it is to deduce the exact\n    trajectory, this number field is more reliably populated than any of its three consituent parts.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "trajectory_broad_ground_ball": {"name": "trajectory_broad_ground_ball", "description": "Same as `trajectory_ground_ball`.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "trajectory_broad_unknown": {"name": "trajectory_broad_unknown", "description": "Number of plate appearances ending in a batted ball whose trajectory was not recorded and cannot\n    be reliably deduced from context, even to the extent of knowing whether it was a ground ball or an air ball.\n    This will include a disproportionate number of hits, which are more likely to be missing trajectory data\n    and harder to make deductions about.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "trajectory_broad_known": {"name": "trajectory_broad_known", "description": "Number of plate appearances ending in a batted ball whose ground/air status was recorded or\n    reliably deduced from the context. This is the sum of `trajectory_broad_air_ball` and\n    `trajectory_broad_ground_ball`. Outs in play have excellent coverage historically here,\n    even for older games.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "bunts": {"name": "bunts", "description": "Number of plate appearances ending in an in-play bunt.\n    This does not include strikeouts on foul bunts with two strikes.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_distance_plate": {"name": "batted_distance_plate", "description": "Number of plate appearances in which the ball was batted to catcher's area around home plate.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_distance_infield": {"name": "batted_distance_infield", "description": "Number of plate appearances in which the ball was batted to the infield (not including the catcher).\n    All ground balls are included here, regardless of whether they made it through to the outfield.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_distance_outfield": {"name": "batted_distance_outfield", "description": "Number of plate appearances in which the ball was hit on the fly to the outfield.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_distance_unknown": {"name": "batted_distance_unknown", "description": "Number of plate appearances in which the ball was hit, but the distance was not recorded\n    and cannot be reliably deduced from context.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_distance_known": {"name": "batted_distance_known", "description": "Number of plate appearances in which the ball was hit, and the distance was either\n    recorded or reliably deduced from context.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "fielded_by_battery": {"name": "fielded_by_battery", "description": "Number of plate appearances in which the ball was fielded by the pitcher or catcher.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "fielded_by_infielder": {"name": "fielded_by_infielder", "description": "Number of plate appearances in which the ball was fielded by an infielder.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "fielded_by_outfielder": {"name": "fielded_by_outfielder", "description": "Number of plate appearances in which the ball was fielded by an outfielder.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "fielded_by_known": {"name": "fielded_by_known", "description": "Number of plate appearances in which the ball was fielded by a player, and the player was recorded.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "fielded_by_unknown": {"name": "fielded_by_unknown", "description": "Number of plate appearances in which the ball was fielded by a player, but the player was not recorded.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_angle_left": {"name": "batted_angle_left", "description": "Number of plate appearances in which the ball was batted to the left side of the field.\n    This includes balls where the location was not recorded, but the fielder is on the left side\n    (3B, LF). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_angle_right": {"name": "batted_angle_right", "description": "Number of plate appearances in which the ball was batted to the right side of the field.\n    This includes balls where the location was not recorded, but the fielder is on the right side\n    (1B, RF). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_angle_middle": {"name": "batted_angle_middle", "description": "Number of plate appearances in which the ball was batted to the middle of the field.\n    This includes balls where the location was not recorded, but the fielder is up the middle\n    (P, 2B, SS, CF). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_angle_unknown": {"name": "batted_angle_unknown", "description": "Number of plate appearances in which the ball was batted, but we don't have enough location\n    to determine the spray angle.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_angle_known": {"name": "batted_angle_known", "description": "Number of plate appearances in which the ball was hit and we have enough location to determine\n    the spray angle.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_location_plate": {"name": "batted_location_plate", "description": "Number of plate appearances in which the ball was batted to the catcher's area around home plate.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_location_right_infield": {"name": "batted_location_right_infield", "description": "Number of plate appearances in which the ball was batted to the right side of the infield.\n    This includes balls where the location was not recorded, but the fielder is on the right side\n    (1B). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_location_middle_infield": {"name": "batted_location_middle_infield", "description": "Number of plate appearances in which the ball was batted to the middle of the infield.\n    This includes balls where the location was not recorded, but the fielder is up the middle\n    (P, SS, 2B). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_location_left_infield": {"name": "batted_location_left_infield", "description": "Number of plate appearances in which the ball was batted to the left side of the infield.\n    This includes balls where the location was not recorded, but the fielder is on the left side\n    (3B). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_location_left_field": {"name": "batted_location_left_field", "description": "Number of plate appearances in which the ball was batted to the left side of the outfield.\n    This includes balls where the location was not recorded, but the fielder is on the left side\n    (LF). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_location_center_field": {"name": "batted_location_center_field", "description": "Number of plate appearances in which the ball was batted to the center of the outfield.\n    This includes balls where the location was not recorded, but the fielder is up the middle\n    (CF). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_location_right_field": {"name": "batted_location_right_field", "description": "Number of plate appearances in which the ball was batted to the right side of the outfield.\n    This includes balls where the location was not recorded, but the fielder is on the right side\n    (RF, CF). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_location_unknown": {"name": "batted_location_unknown", "description": "Number of plate appearances in which the ball was batted, but we don't have enough location\n    to determine the specific location.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_location_known": {"name": "batted_location_known", "description": "Number of plate appearances in which the ball was batted and we have enough location to determine\n    the specific location.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_balls_pulled": {"name": "batted_balls_pulled", "description": "Number of plate appearances in which the ball was pulled (the left side for right-handed batters, the right side for left-handed batters).", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_balls_opposite_field": {"name": "batted_balls_opposite_field", "description": "Number of plate appearances in which the ball was hit to the opposite field (the right side for right-handed batters, the left side for left-handed batters).", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "runs": {"name": "runs", "description": "(R) Number of runs scored.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "times_reached_base": {"name": "times_reached_base", "description": "Number of times a batter ended a plate appearance on base, even if it was through a fielder's choice, error, etc.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "stolen_bases": {"name": "stolen_bases", "description": "(SB) Number of successful stolen bases.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "caught_stealing": {"name": "caught_stealing", "description": "(CS) Number of times a runner was caught stealing.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "picked_off": {"name": "picked_off", "description": "(PO, at risk of confusion with putouts) Number of times a runner was picked off.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "picked_off_caught_stealing": {"name": "picked_off_caught_stealing", "description": "(POCS) Number of times a runner was picked off, but instead of going back to the bag,\n    tried to run to the next base and was put out.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "outs_on_basepaths": {"name": "outs_on_basepaths", "description": "Number of outs recorded by a baserunner (this is not mutually exclusive with outs recorded by the batter\n    in cases like failed advances or dropped third-strike putouts).", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "unforced_outs_on_basepaths": {"name": "unforced_outs_on_basepaths", "description": "Number of outs recorded by a baserunner that was not the result of a force on the runner.\n    \"Unforced\" is meant to be in both the literal sense of a force not being in play, but also\n    the figurative sense of the runner being responsible for the out. The latter may or may not\n    be the best interpretation of any given play, but it is useful to assign responsibility to the\n    runner by default in those contexts.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "outs_avoided_on_errors": {"name": "outs_avoided_on_errors", "description": "Number of times that a baserunner would have been out, but an error allowed them to remain\n    on the basepaths (either staying put or advancing).", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "advances_on_wild_pitches": {"name": "advances_on_wild_pitches", "description": "(WP) Number of times a baserunner advanced on a wild pitch.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "advances_on_passed_balls": {"name": "advances_on_passed_balls", "description": "(PB) Number of times a baserunner advanced on a passed ball.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "advances_on_balks": {"name": "advances_on_balks", "description": "(sometimes BK) Number of times a baserunner advanced on a balk.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "advances_on_unspecified_plays": {"name": "advances_on_unspecified_plays", "description": "Number of times a baserunner advanced for an unspecified reason.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "advances_on_defensive_indifference": {"name": "advances_on_defensive_indifference", "description": "(DI) Number of times a baserunner advanced on defensive indifference.\n   Defensive indifference is a judgement call by the official scorer that the defense\n   did not try to stop the runner from stealing a base. This usually happens\n   when the defense has a lead late in the game.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "advances_on_errors": {"name": "advances_on_errors", "description": "Number of times a baserunner advanced on an error.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "plate_appearances_while_on_base": {"name": "plate_appearances_while_on_base", "description": "Number of plate appearances in which the baserunner started on 1st, 2nd, or 3rd base.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "balls_in_play_while_running": {"name": "balls_in_play_while_running", "description": "Number of balls in play while either batting or on base.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "balls_in_play_while_on_base": {"name": "balls_in_play_while_on_base", "description": "Number of balls in play in which the baserunner started on 1st, 2nd, or 3rd base.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batter_total_bases_while_running": {"name": "batter_total_bases_while_running", "description": "Number of total bases accumulated by the batter while the baserunner was running, including the batter.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batter_total_bases_while_on_base": {"name": "batter_total_bases_while_on_base", "description": "Number of total bases accumulated by the batter while the baserunner was on base, excluding the batter.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "extra_base_advance_attempts": {"name": "extra_base_advance_attempts", "description": "Number of times a baserunner tried to advance by a greater number of bases than the batter.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "bases_advanced": {"name": "bases_advanced", "description": "Number of bases advanced by a baserunner, including the batter.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "bases_advanced_on_balls_in_play": {"name": "bases_advanced_on_balls_in_play", "description": "Number of bases advanced by a baserunner on a ball in play, including the batter.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "surplus_bases_advanced_on_balls_in_play": {"name": "surplus_bases_advanced_on_balls_in_play", "description": "Number of bases advanced by a baserunner on a ball in play minus the number of total bases\n    accumulated by the batter on the same play. For example, if a runner goes from first to third\n    on a single, this number is 1 (3 - 2). If a runner only goes from second to third on a double,\n    this number is -1 (1 - 2).", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "outs_on_extra_base_advance_attempts": {"name": "outs_on_extra_base_advance_attempts", "description": "Number of times a baserunner was out attempting to advance\n    by a greater number of bases than the batter. This includes\n    batters who were put out trying to stretch a hit to the next base.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "pitches": {"name": "pitches", "description": "Number of pitches thrown.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "swings": {"name": "swings", "description": "Number of pitches that were swung at.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "swings_with_contact": {"name": "swings_with_contact", "description": "Number of pitches that were swung at and made contact.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "strikes": {"name": "strikes", "description": "Number of pitches that were called or swinging strikes.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "strikes_called": {"name": "strikes_called", "description": "Number of pitches that were called strikes.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "strikes_swinging": {"name": "strikes_swinging", "description": "Number of pitches that were swung on and missed (mutually exclusive\n    with `swings_with_contact`, which also count as strikes).", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "strikes_foul": {"name": "strikes_foul", "description": "Number of pitches that were fouled off.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "strikes_foul_tip": {"name": "strikes_foul_tip", "description": "Number of pitches that were fouled off and caught by the catcher for strike three.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "strikes_in_play": {"name": "strikes_in_play", "description": "Number of pitches that were swung on and batted into play.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "strikes_unknown": {"name": "strikes_unknown", "description": "Number of pitches that we know were strikes, but don't know what kind.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "balls": {"name": "balls", "description": "Number of pitches that were called balls.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "balls_called": {"name": "balls_called", "description": "Number of pitches that were called balls (as opposed to automatic balls that were\n    not actually thrown).", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "balls_intentional": {"name": "balls_intentional", "description": "Number of pitches that were called balls as part of an intentional walk.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "balls_automatic": {"name": "balls_automatic", "description": "Number of pitches that were called balls on an automatic walk or a delay penalty.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "unknown_pitches": {"name": "unknown_pitches", "description": "Number of pitches that were thrown without any other information recorded.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "pitchouts": {"name": "pitchouts", "description": "Number of pitches that were thrown as pitchouts. A pitchout is a pitch that is thrown\n    intentionally very far outside in order to make it easier for the catcher to throw out\n    a baserunner who is likely to steal.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "pitcher_pickoff_attempts": {"name": "pitcher_pickoff_attempts", "description": "Number of times the pitcher attempted to pick off a baserunner.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "catcher_pickoff_attempts": {"name": "catcher_pickoff_attempts", "description": "Number of times the catcher attempted to pick off a baserunner.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "pitches_blocked_by_catcher": {"name": "pitches_blocked_by_catcher", "description": "Number of pitches that were blocked by the catcher.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "pitches_with_runners_going": {"name": "pitches_with_runners_going", "description": "Number of pitches that were thrown while a baserunner was on the move\n    (as part of a steal or hit-and-run).", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "passed_balls": {"name": "passed_balls", "description": "(PB) Number of passed balls.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "wild_pitches": {"name": "wild_pitches", "description": "(WP) Number of wild pitches.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "balks": {"name": "balks", "description": "(BK) Number of balks.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "left_on_base": {"name": "left_on_base", "description": "(LOB) At an individual level, the number of baserunners that a batter failed to advance during a plate appearance.\n    At a team level, the number of baserunners remaining on base at the end of an inning. In order to count, baserunners\n    must not have scored or been put out.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "left_on_base_with_two_outs": {"name": "left_on_base_with_two_outs", "description": "(LOB) At an individual level, the number of baserunners that remain on base (unscored and not out) after a plate appearance that ends with the third out recorded. At a team level, this is interchangable with `left_on_base`.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "stolen_bases_second": {"name": "stolen_bases_second", "description": "Number of successful steals of second base.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "stolen_bases_third": {"name": "stolen_bases_third", "description": "Number of successful steals of third base.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "stolen_bases_home": {"name": "stolen_bases_home", "description": "Number of successful steals of home.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "caught_stealing_second": {"name": "caught_stealing_second", "description": "Number of times a runner was caught stealing second base.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "caught_stealing_third": {"name": "caught_stealing_third", "description": "Number of times a runner was caught stealing third base.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "caught_stealing_home": {"name": "caught_stealing_home", "description": "Number of times a runner was caught stealing home.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "stolen_base_opportunities": {"name": "stolen_base_opportunities", "description": "Number of events in which a runner had an opportunity to steal a base as the\n    lead basestealer OR the runner recorded a SB/CS in any situation.\n    \"Opportunity\" is defined as a situation in which the next base\n    was empty at the start of the event (not including the batter).\n    No-play events excluded, but events without plate appearances are included.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "stolen_base_opportunities_second": {"name": "stolen_base_opportunities_second", "description": "Number of opportunities to steal second base (see `stolen_base_opportunities` for detailed criteria).", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "stolen_base_opportunities_third": {"name": "stolen_base_opportunities_third", "description": "Number of opportunities to steal third base (see `stolen_base_opportunities` for detailed criteria).", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "stolen_base_opportunities_home": {"name": "stolen_base_opportunities_home", "description": "Number of opportunities to steal home (see `stolen_base_opportunities` for detailed criteria).", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "picked_off_first": {"name": "picked_off_first", "description": "Number of times a runner was picked off first base.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "picked_off_second": {"name": "picked_off_second", "description": "Number of times a runner was picked off second base.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "picked_off_third": {"name": "picked_off_third", "description": "Number of times a runner was picked off third base.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "times_force_on_runner": {"name": "times_force_on_runner", "description": "Number of events that a force existed on the runner's next base.\n    The batter is counted as having a force on them (at first).\n    No-play events excluded, but events without plate appearances are included.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "times_lead_runner": {"name": "times_lead_runner", "description": "Number of events that a runner was the lead runner on a play\n    (the runner who is furthest along the basepaths).\n    Batter is never counted as the lead runner. No-play events excluded,\n    but events without plate appearances are included.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "times_next_base_empty": {"name": "times_next_base_empty", "description": "Number of events that the runner's next base was empty.\n    The batter is counted on events where first base is empty.\n    No-play events excluded, but events without plate appearances are included.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "extra_base_chances": {"name": "extra_base_chances", "description": "", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "extra_bases_taken": {"name": "extra_bases_taken", "description": "", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batting_average": {"name": "batting_average", "description": "(AVG, BA) Hits divided by at bats. Historically speaking, the single most well-known hitting statistic.\n    It retains much of its popularity and cultural significance today, if not its importance: the\n    \"batting title\" goes to the player with the highest batting average.\n    While batting average is rightly maligned for the limited picture it captures of a player's offensive\n    contribution, it's still a nice object of study when learning about statistical inference.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "on_base_percentage": {"name": "on_base_percentage", "description": "(OBP) Measures a player's ability to get on base. It is calculated as (H + BB + HBP)/(AB + BB + HBP + SF),\n    which is confusingly a bit different from on-base events per plate appearance. We have `on_base_successes`\n    and `on_base_opportunities` to make the OBP calculation simpler. The modern analogue to batting average,\n    both in what it tries to measure and in its cultural significance.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "slugging_percentage": {"name": "slugging_percentage", "description": "(SLG) Total bases per at bat. More of an average than a percentage, but the name has stuck (though\n    you'll also hear \"slugging average\"). The simplest and most well-known measure of the \"advancement factor\"\n    of a player's offensive ability.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "on_base_plus_slugging": {"name": "on_base_plus_slugging", "description": "(OPS) On-base percentage plus slugging percentage. Popularized in the 1980s, OPS is a simple way to\n    combine the two aspects of a player's hitting ability. In terms of its overall precision, it is easily surpassed\n    by other metrics, but it remains hard to beat for its economy of calculation and expression.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "isolated_power": {"name": "isolated_power", "description": "(ISO) Slugging percentage minus batting average, or the average number of extra bases per at bat.\n    An intuitive expression of a player's raw power or ability to push runners around the bases.\n    Less indicative of overall ability than slugging percentage, but more precise in what it tries to measure.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "secondary_average": {"name": "secondary_average", "description": "(SecA) A statistic invented by Bill James that measures a player's ability to gain bases by means independent\n    of batting average. Its formula is (TB - H + BB + SB - CS)/(AB). A good way to answer the question of which players\n    would be most underrated by only looking at their batting averages. Also a good way to show how well you can understand\n    a player's offensive ability without taking their batting average into account.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "batting_average_on_balls_in_play": {"name": "batting_average_on_balls_in_play", "description": "(BABIP) A measure of the rate at which fieldable balls go for hits. It is calculated as (H - HR)/(AB - K - HR + SF).\n    Pitchers are generally (but controversially) thought to have little control over balls in play, so a high BABIP\n    is a good sign that that they have been unlucky or have played in front of a poor defense. Most pitchers do have some\n    \"true\" BABIP ability that is different from the league average, but the difference is usually much smaller than the year-to-year\n    variance in their actual BABIP. In rare cases, pitchers can have such a strong influence on balls in play that their\n    contribution is measurable in smaller sample sizes. For pitchers in the dead-ball era and earlier, it makes less sense\n    to treat BABIP as luck because a much higher percentage of at-bats ended in balls in play, and pitchers were more focused\n    on getting outs by inducing weak contact without having to worry about home runs.\n\n    All of the above is also true for hitters, but to a much lesser extent, as hitters face different defenses, control\n    their ability to beat out grounders for infield hits, and generally have more control over the quality of contact they\n    make. BABIP can also be misleading for hitters because it excludes home runs, so Barry Bonds ends up having a lower BABIP\n    even though there were occasional eyewitness reports of his making solid contact.\n\n    BABIP was invented by Voros McCracken around the turn of the millenium, and it remains the most prominent\n    example of a statistic that tracks player luck as opposed to skill or performance.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "home_run_rate": {"name": "home_run_rate", "description": "(HR/PA) Home runs per plate appearance.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "walk_rate": {"name": "walk_rate", "description": "(BB/PA) Walks per plate appearance.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "strikeout_rate": {"name": "strikeout_rate", "description": "(K/PA) Strikeouts per plate appearance.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "stolen_base_percentage": {"name": "stolen_base_percentage", "description": "(SB%) The rate of stolen base attempts that are successful. Calculated as SB/(SB + CS).", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "event_coverage_rate": {"name": "event_coverage_rate", "description": "", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "known_trajectory_rate_outs": {"name": "known_trajectory_rate_outs", "description": "Rate of outs in play for which we know the detailed trajectory of the batted ball.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "known_trajectory_rate_hits": {"name": "known_trajectory_rate_hits", "description": "Rate of hits for which we know the detailed trajectory of the batted ball.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "known_trajectory_rate": {"name": "known_trajectory_rate", "description": "Overall rate of batted balls for which we know the detailed trajectory.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "known_trajectory_broad_rate_outs": {"name": "known_trajectory_broad_rate_outs", "description": "Overall rate of outs in play for which we know whether\n    the ball was hit in the air or on the ground.\n    This is generally very high even for the oldest play-by-play data.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "known_trajectory_broad_rate_hits": {"name": "known_trajectory_broad_rate_hits", "description": "Overall rate of hits for which we know whether\n    the ball was hit in the air or on the ground.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "known_trajectory_broad_rate": {"name": "known_trajectory_broad_rate", "description": "Overall rate of batted balls for which we know whether\n    the ball was hit in the air or on the ground.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "known_trajectory_out_hit_ratio": {"name": "known_trajectory_out_hit_ratio", "description": "The ratio of `known_trajectory_rate_outs` to `known_trajectory_rate_hits`.\n    This ratio is generally very high for years without complete batted ball data,\n    which makes it useful for estimating quantities that would be affected by\n    the selection bias.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "known_trajectory_broad_out_hit_ratio": {"name": "known_trajectory_broad_out_hit_ratio", "description": "The ratio of `known_trajectory_broad_rate_outs` to `known_trajectory_broad_rate_hits`.\n    This ratio is generally very high for years without complete batted ball data,\n    which makes it useful for estimating quantities that would be affected by\n    the selection bias.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "air_ball_rate_outs": {"name": "air_ball_rate_outs", "description": "The rate of outs in play that were fly balls, pop-ups, or line drives.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "ground_ball_rate_outs": {"name": "ground_ball_rate_outs", "description": "The rate of outs in play that were ground balls.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "ground_air_out_ratio": {"name": "ground_air_out_ratio", "description": "The ratio of `ground_ball_rate_outs` to `air_ball_rate_outs`.\n    This is a useful metric by itself because it is unaffected by\n    the higher percentage of missing data on hits, so it is probably\n    a more accurate measure of overall ground ball rate than `ground_ball_rate`\n    itself for most seasons.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "air_ball_hit_rate": {"name": "air_ball_hit_rate", "description": "The rate of hits in play that were fly balls, pop-ups, or line drives.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "ground_ball_hit_rate": {"name": "ground_ball_hit_rate", "description": "The rate of hits in play that were ground balls.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "ground_air_hit_ratio": {"name": "ground_air_hit_ratio", "description": "The ratio of `ground_ball_hit_rate` to `air_ball_hit_rate`.\n    Difference between this and `ground_air_out_ratio` is potentially interesting,\n    but will be noisy for older years.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "fly_ball_rate": {"name": "fly_ball_rate", "description": "Of all batted_balls for which we know the trajectory,\n    The rate that were fly balls.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "line_drive_rate": {"name": "line_drive_rate", "description": "Of all batted_balls for which we know the trajectory,\n    The rate that were line drives.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "pop_up_rate": {"name": "pop_up_rate", "description": "Of all batted_balls for which we know the trajectory,\n    The rate that were pop-ups.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "ground_ball_rate": {"name": "ground_ball_rate", "description": "Of all batted_balls for which we know the trajectory,\n    The rate that were ground balls.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "coverage_weighted_air_ball_batting_average": {"name": "coverage_weighted_air_ball_batting_average", "description": "The batting average of batted_balls that were fly balls, pop-ups, or line drives,\n    weighted according to the `known_trajectory_broad_out_hit_ratio`. This is an attempt\n    to measure trajectory-specific BABIP even in years where trajectory data is rarely\n    present for hits. While it handles that specific bias, it is still likely to be noisy\n    because of the small sample size of known-trajectory balls.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "coverage_weighted_ground_ball_batting_average": {"name": "coverage_weighted_ground_ball_batting_average", "description": "The batting average of batted_balls that were ground balls,\n    weighted according to the `known_trajectory_broad_out_hit_ratio`. This is an attempt\n    to measure trajectory-specific BABIP even in years where trajectory data is rarely\n    present for hits. While it handles that specific bias, it is still likely to be noisy\n    because of the small sample size of known-trajectory balls.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "coverage_weighted_fly_ball_batting_average": {"name": "coverage_weighted_fly_ball_batting_average", "description": "The batting average of batted_balls that were fly balls,\n    weighted according to the `known_trajectory_out_hit_ratio`. This is an attempt\n    to measure trajectory-specific BABIP even in years where trajectory data is rarely\n    present for hits. It is still vulnerable to the variance and arbitrariness with which\n    historical scorekeepers differentiated fly balls from line drives and pop-ups.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "coverage_weighted_line_drive_batting_average": {"name": "coverage_weighted_line_drive_batting_average", "description": "The batting average of batted_balls that were line drives,\n    weighted according to the `known_trajectory_out_hit_ratio`. This is an attempt\n    to measure trajectory-specific BABIP even in years where trajectory data is rarely\n    present for hits. It is still vulnerable to the variance and arbitrariness with which\n    historical scorekeepers differentiated line drives from other air outs, which was\n    extremely high all the way up to the Statcast era.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "coverage_weighted_pop_up_batting_average": {"name": "coverage_weighted_pop_up_batting_average", "description": "The batting average of batted_balls that were pop-ups,\n    weighted according to the `known_trajectory_out_hit_ratio`. This is an attempt\n    to measure trajectory-specific BABIP even in years where trajectory data is rarely\n    present for hits. It is still vulnerable to the variance and arbitrariness with which\n    historical scorekeepers differentiated pop-ups from other air outs.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "known_angle_rate_outs": {"name": "known_angle_rate_outs", "description": "Rate of batted-ball outs for which we know (or have a good proxy for)\n    whether the ball was hit to the left, right, or middle of the field.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "known_angle_rate_hits": {"name": "known_angle_rate_hits", "description": "Rate of batted-ball hits for which we know (or have a good proxy for)\n    whether the ball was hit to the left, right, or middle of the field.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "known_angle_rate": {"name": "known_angle_rate", "description": "Rate of batted balls for which we know (or have a good proxy for)\n    whether the ball was hit to the left, right, or middle of the field.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "known_angle_out_hit_ratio": {"name": "known_angle_out_hit_ratio", "description": "The ratio of `known_angle_rate_outs` to `known_angle_rate_hits`.\n    This ratio is generally very high for years without complete batted ball data,\n    which makes it useful for estimating quantities that would be affected by\n    the selection bias. Angle is generally better known than location itself, because\n    when a batter gets a hit, we often know which outfielder fielded the ball even\n    though we don't know how it got there.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "angle_left_rate_outs": {"name": "angle_left_rate_outs", "description": "The rate of batted-ball outs that were hit to the left side of the field.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "angle_left_rate_hits": {"name": "angle_left_rate_hits", "description": "The rate of hits that were hit to the left side of the field.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "angle_left_rate": {"name": "angle_left_rate", "description": "The overall rate of batted balls that were hit to the left side of the field.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "coverage_weighted_angle_left_batting_average": {"name": "coverage_weighted_angle_left_batting_average", "description": "The batting average on batted balls that were hit to the left side of the field,\n    weighted according to the `known_angle_out_hit_ratio`. This is an attempt\n    to measure angle-specific BABIP even in years where angle data is rarely\n    present for hits.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "angle_right_rate_outs": {"name": "angle_right_rate_outs", "description": "The rate of batted-ball outs that were hit to the right side of the field.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "angle_right_rate_hits": {"name": "angle_right_rate_hits", "description": "The rate of hits that were hit to the right side of the field.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "angle_right_rate": {"name": "angle_right_rate", "description": "The overall rate of batted balls that were hit to the right side of the field.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "coverage_weighted_angle_right_batting_average": {"name": "coverage_weighted_angle_right_batting_average", "description": "The batting average on batted balls that were hit to the right side of the field,\n    weighted according to the `known_angle_out_hit_ratio`. This is an attempt\n    to measure angle-specific BABIP even in years where angle data is rarely\n    present for hits.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "angle_middle_rate_outs": {"name": "angle_middle_rate_outs", "description": "The rate of batted-ball outs that were hit to the middle of the field.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "angle_middle_rate_hits": {"name": "angle_middle_rate_hits", "description": "The rate of hits that were hit to the middle of the field.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "angle_middle_rate": {"name": "angle_middle_rate", "description": "The overall rate of batted balls that were hit to the middle of the field.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "coverage_weighted_angle_middle_batting_average": {"name": "coverage_weighted_angle_middle_batting_average", "description": "The batting average on batted balls that were hit to the middle of the field,\n    weighted according to the `known_angle_out_hit_ratio`. This is an attempt\n    to measure angle-specific BABIP even in years where angle data is rarely\n    present for hits.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "pulled_rate_outs": {"name": "pulled_rate_outs", "description": "`angle_right_rate_outs` for lefty batters\n    and `angle_left_rate_outs` for righty batters.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "pulled_rate_hits": {"name": "pulled_rate_hits", "description": "`angle_right_rate_hits` for lefty batters\n    and `angle_left_rate_hits` for righty batters.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "pulled_rate": {"name": "pulled_rate", "description": "`angle_right_rate` for lefty batters\n    and `angle_left_rate` for righty batters.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "coverage_weighted_pulled_batting_average": {"name": "coverage_weighted_pulled_batting_average", "description": "`coverage_weighted_angle_right_batting_average` for lefty batters\n    and `coverage_weighted_angle_left_batting_average` for righty batters.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "opposite_field_rate_outs": {"name": "opposite_field_rate_outs", "description": "`angle_left_rate_outs` for lefty batters\n    and `angle_right_rate_outs` for righty batters.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "opposite_field_rate_hits": {"name": "opposite_field_rate_hits", "description": "`angle_left_rate_hits` for lefty batters\n    and `angle_right_rate_hits` for righty batters.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "opposite_field_rate": {"name": "opposite_field_rate", "description": "`angle_left_rate` for lefty batters\n    and `angle_right_rate` for righty batters.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "coverage_weighted_opposite_field_batting_average": {"name": "coverage_weighted_opposite_field_batting_average", "description": "`coverage_weighted_angle_left_batting_average` for lefty batters\n    and `coverage_weighted_angle_right_batting_average` for righty batters.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "stolen_base_attempt_rate_second": {"name": "stolen_base_attempt_rate_second", "description": "The rate of stolen base opportunities taken\n    when the runner was on first base (trying to steal second).\n    See `stolen_base_opportunities` for the definition.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "stolen_base_attempt_rate_third": {"name": "stolen_base_attempt_rate_third", "description": "The rate of stolen base opportunities taken\n    when the runner was on second base (trying to steal third).\n    See `stolen_base_opportunities` for the definition.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "stolen_base_attempt_rate_home": {"name": "stolen_base_attempt_rate_home", "description": "The rate of stolen base opportunities taken\n    when the runner was on third base (trying to steal home).\n    See `stolen_base_opportunities` for the definition.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "unforced_out_rate": {"name": "unforced_out_rate", "description": "The rate of appearances on the basepaths that ended in an unforced out.\n    See `unforced_outs_on_basepaths` for the definition.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "pitch_strike_rate": {"name": "pitch_strike_rate", "description": "The rate of pitches that were strikes.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "pitch_contact_rate": {"name": "pitch_contact_rate", "description": "The rate of pitches where some kind of contact was made.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "pitch_swing_rate": {"name": "pitch_swing_rate", "description": "The rate of pitches where the batter swung (and either made\n    contact or missed).", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "pitch_ball_rate": {"name": "pitch_ball_rate", "description": "The rate of pitches that were balls.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "pitch_swing_and_miss_rate": {"name": "pitch_swing_and_miss_rate", "description": "The rate of pitches where the batter swung and missed.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "pitch_foul_rate": {"name": "pitch_foul_rate", "description": "The rate of pitches that were fouled off.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "pitched_called_strike_rate": {"name": "pitched_called_strike_rate", "description": "The rate of pitches that were called strikes.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "pitch_data_coverage_rate": {"name": "pitch_data_coverage_rate", "description": "The rate of plate appearances for which we have pitch-by-pitch data.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}}, "meta": {"primary_keys": ["player_id"]}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "baseball_computer://models/metrics/metrics_player_career_offense.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "models", "contract": {"enforced": true}, "meta": {"primary_keys": ["player_id"]}}, "created_at": 1702284995.680654, "relation_name": "\"bc\".\"main_models\".\"metrics_player_career_offense\"", "raw_code": "{{  metric_table_generator(\"offense\", [\"player_id\"], agg_type=\"player\", regular_season_only=True)  }}", "language": "sql", "refs": [{"name": "event_offense_stats", "package": null, "version": null}, {"name": "seed_franchises", "package": null, "version": null}, {"name": "player_team_season_offense_stats", "package": null, "version": null}, {"name": "player_team_season_offense_stats", "package": null, "version": null}, {"name": "seed_franchises", "package": null, "version": null}, {"name": "team_game_start_info", "package": null, "version": null}, {"name": "player_game_offense_stats", "package": null, "version": null}, {"name": "event_offense_stats", "package": null, "version": null}, {"name": "team_game_start_info", "package": null, "version": null}, {"name": "seed_game_types", "package": null, "version": null}, {"name": "game_start_info", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.baseball_computer.metric_table_generator"], "nodes": ["model.baseball_computer.event_offense_stats", "seed.baseball_computer.seed_franchises", "model.baseball_computer.player_team_season_offense_stats", "model.baseball_computer.team_game_start_info", "model.baseball_computer.player_game_offense_stats", "seed.baseball_computer.seed_game_types", "model.baseball_computer.game_start_info"]}, "compiled_path": null, "contract": {"enforced": true, "alias_types": true, "checksum": "4846422d20504387eddc553d19cc51aac4865b759a0fdbe050f4ff81c85a1ad4"}, "access": "protected", "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true, "columns": ["player_id"]}], "version": null, "latest_version": null, "deprecation_date": null}, "model.baseball_computer.metrics_player_career_pitching": {"database": "bc", "schema": "main_models", "name": "metrics_player_career_pitching", "resource_type": "model", "package_name": "baseball_computer", "path": "metrics/metrics_player_career_pitching.sql", "original_file_path": "models/metrics/metrics_player_career_pitching.sql", "unique_id": "model.baseball_computer.metrics_player_career_pitching", "fqn": ["baseball_computer", "metrics", "metrics_player_career_pitching"], "alias": "metrics_player_career_pitching", "checksum": {"name": "sha256", "checksum": "5c6720416ff1bf43d70888b551ced55910205abc601984fd871c2feb96f38d36"}, "config": {"enabled": true, "alias": null, "schema": "models", "database": null, "tags": [], "meta": {"primary_keys": ["player_id"]}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Aggregate pitching statistics and averages over player careers.\nRegular season only.\n", "columns": {"player_id": {"name": "player_id", "description": "Retrosheet 8-character person ID for a player, which consists of\n    the first four characters of the last name, the first character\n    of the first name, and then three digits to disambiguate between\n    players with the same five characters.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "batters_faced": {"name": "batters_faced", "description": "Number of batters faced by a pitcher, generally equivalent to plate appearances (in old box-score-only games, this may not match up perfectly).", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "outs_recorded": {"name": "outs_recorded", "description": "Number of outs recorded by a pitcher.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "inherited_runners_scored": {"name": "inherited_runners_scored", "description": "(IRS) Number of inherited runners that scored while a pitcher was on the mound.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "bequeathed_runners_scored": {"name": "bequeathed_runners_scored", "description": "Number of bequeathed runners that scored after a pitcher left the game.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "team_unearned_runs": {"name": "team_unearned_runs", "description": "Number of runs that are charged as earned to the pitcher, but unearned to the team.\n    This happens when a pitcher enters an inning which should have been over already because\n    of an error and then the pitcher allows a run to score without the help of any additional\n    errors. This is a rare occurrence and it might seem unnecessary to track,\n    but it is absolutely essential that we do so in order to preserve the space-time continuu-\n    T\u0355he\u030a\u0346\u0328\u035c y\u036a\u0363e\u0321\u0303\u0313\u030ea\u0347r\u0350\u0355\u035c\u035d i\u0313\u035a\u0314\u0324\u033a\u033b\u035bs 20\u032e\u033f89\u032a\u030a an\u032b\u032b\u035e\u0326\u0305d\u0331\u033f\u0369 E\u0361\u0354\u0330\u0351\u0320s\u036d\u0366t\u0351\u0359\u035de\u0303\u0352\u0310b\u0301\u036e\u0359a\u0361\u0359\u0310\u0301\u0330\u0330\u0320n\u036f\u0352\u035f Y\u032a\u0318\u0311a\u035c\u0302\u031c\u031a\u036c\u0345\u0360n\u0304\u0301\u0309 h\u035c\u0314\u0306a\u0359\u033e\u031d\u035f\u0361\u0308\u0301\u0351s\u035f\u0338 fu\u0326\u036d\u030f\u032e\u0306\u030dl\u033a\u0347\u0311\u0349\u034c\u0305\u0303l\u0345\u030f\u0308\u036a\u033f\u031dy\u0312\u0313\u034b\u036e\u0332\u0347 m\u0326\u030a\u0363e\u0365\u034a\u0367\u0320\u0325rg\u0347\u0366\u0300e\u0309\u0339\u031c\u031f\u0353\u0331\u0319d\u0331\u0327 wi\u0307\u034eth\u0366\u0361\u031b\u036d\u0358 t\u031d\u0362\u035d\u0328\u035e\u0342h\u0336\u0357\u031e\u032d\u035f\u0319e\u0322\u030a\u0321\u032f w\u0300\u0329\u0309\u032co\u036d\u0349r\u0311\u0367\u0327\u0360\u036a\u0327\u036cm\u034c\u031c.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "plate_appearances": {"name": "plate_appearances", "description": "(PA) Number of times a batter came to the plate, including walks, hit by pitches, sacrifices, and at-bats.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "at_bats": {"name": "at_bats", "description": "(AB) Number of plate appearances that ended in either a hit or a non-sacrifice out.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "hits": {"name": "hits", "description": "(H) Number of times a batter reached base safely without an error or fielder's choice.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "singles": {"name": "singles", "description": "(1B) Number of hits in which a batter reached first base.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "doubles": {"name": "doubles", "description": "(2B) Number of hits in which a batter reached second base without the help of an error or an attempted\n    play on another runner.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "triples": {"name": "triples", "description": "(3B) Number of hits in which a batter reached third base without the help of an error or an attempted\n    play on another runner.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "home_runs": {"name": "home_runs", "description": "(HR) Number of hits in which a batter reached home plate without the help of an error or an attempted\n    play on another runner (usually by hitting the ball out of the park).", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "total_bases": {"name": "total_bases", "description": "(TB) Number of bases a batter reached safely without the help of an error or an attempted\n    play on another runner. HR * 4 + 3B * 3 + 2B * 2 + (H - HR - 3B - 2B)", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "strikeouts": {"name": "strikeouts", "description": "(K, SO) Number of times a batter struck out. This includes plays in which a batter reached base on\n    a dropped third strike.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "walks": {"name": "walks", "description": "(BB, occasionally W) Number of times a batter reaches base on called balls out of the strike zone\n    (Four balls for all of MLB history after the 1880s).", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "intentional_walks": {"name": "intentional_walks", "description": "(IBB, occasionally IW) Number of times a batter was intentionally walked. This number may be missing or undercounted\n    in earlier years, as intentional walks were not officially tracked until 1955.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "hit_by_pitches": {"name": "hit_by_pitches", "description": "(HBP) Number of times a batter was awarded first base after being hit by a pitch.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "sacrifice_hits": {"name": "sacrifice_hits", "description": "(SH) Number of times a batter performed a sacrifice bunt to advance another runner.\n    A bunt may count as a sacrifice even if the batter reaches base safely.\n    Unsuccessful attempts are not counted, nor are non-sacrifice bunts.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "sacrifice_flies": {"name": "sacrifice_flies", "description": "(SF) Number of times a batter hit a fly ball that resulted in an out (or error),\n    but allowed a runner to score on the throw.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "reached_on_errors": {"name": "reached_on_errors", "description": "(ROE) Number of times a batter reached base safely due to an error.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "reached_on_interferences": {"name": "reached_on_interferences", "description": "Number of times a batter was awarded first base for being illegally hindered\n    by a fielder, usually the catcher.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "inside_the_park_home_runs": {"name": "inside_the_park_home_runs", "description": "Number of times a batter hit a home run without the ball leaving the field of play.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "ground_rule_doubles": {"name": "ground_rule_doubles", "description": "Number of times a batter was awarded a double on a ball that went out of play after\n    bouncing in fair territory.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "infield_hits": {"name": "infield_hits", "description": "Number of times a batter reached base safely on a hit that did not reach the outfield.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "on_base_opportunities": {"name": "on_base_opportunities", "description": "Number of plate appearances in which a batter either did or did not reach base,\n    as defined by the formula for on-base percentage. Note that this is very similar to but different\n    from plate_appearances, as it does not include sacrifice hits or interference.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "on_base_successes": {"name": "on_base_successes", "description": "Number of hits, walks, and hit by pitches that serves as the numerator in the formula\n    for on-base percentage.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "grounded_into_double_plays": {"name": "grounded_into_double_plays", "description": "(GIDP) Number of times a batter grounded into a double play. This is the conventional way\n    to record a double play and as such is an important statistic on its own. Games without\n    play-by-play accounts don't have data on the trajectory of the double play, so\n    this number is not populated for those games.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "double_plays": {"name": "double_plays", "description": "(DP) Number of times a play ended in two outs being recorded.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "triple_plays": {"name": "triple_plays", "description": "(TP) Number of times a play ended in three outs being recorded.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batting_outs": {"name": "batting_outs", "description": "Number of outs that \"should\" have been recorded as a result of a batter's plate apperances.\n    A batting out is still counted if no actual out is recorded on an error or a failed fielder's choice.\n    Outs on baserunners (including the batter trying to stretch a hit) do not count here.\n    Grounded-into-double-plays count as two outs, but other types of double plays do not (the \n    idea here is that the baserunner is responsible on other types of double plays).\n    Unofficial stat, but designed here to be generally useful in determining rates of official stats.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "balls_in_play": {"name": "balls_in_play", "description": "Number of plate appearances that resulted in a live\n    ball on the field of play. The difference between this and batted_balls is that\n    balls_in_play does not include out-of-the-park home runs. This distinction is important\n    for calculating batting average on balls in play, a stat designed to isolate at_bats\n    in which the defense was involved.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "balls_batted": {"name": "balls_batted", "description": "Number of plate appearances that ended in a fair ball or a foul flyout. This is equivalent\n    to balls_in_play + home_runs, and may be a more useful denominator for \"in play\" stats depending\n    on the context.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "trajectory_fly_ball": {"name": "trajectory_fly_ball", "description": "(FB) Number of plate appearances that ended in a fly ball. A fly ball is defined here\n    as the subset of balls hit in the air that are neither line drives nor pop flies.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "trajectory_ground_ball": {"name": "trajectory_ground_ball", "description": "(GB) Number of plate appearances that ended in a ground ball, also called a grounder. A ground ball is defined\n    here to only include swings, not bunts, although older data may not have a proper distinction. Ground\n    balls tend to be easy to distinguish between other types of contact, but Statcast-era data defines it\n    as balls with a launch angle under 10 degrees.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "trajectory_line_drive": {"name": "trajectory_line_drive", "description": "(LD) Number of plate appearances that ended in a line drive, also called a liner. Line drives are distiguished\n    from fly balls by some combination of angle and exit velocity. In the Statcast era, line drives\n    are defined purely in terms of launch angle (10-25 degrees), but just about any colloquial definition\n    involves hard-hitness as well. The line-drive-fly-ball distinction is by far the most arbitrary\n    and subjective trajectory categorization. Many scorekeepers never included line drives, while others counted\n    any successful in-play air-hit as a line drive. Nevertheless, the distinction is a crucial one,\n    as line drives are by far the most likely type of batted ball to result in a hit (even when they are not hit very hard).", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "trajectory_pop_up": {"name": "trajectory_pop_up", "description": "(sometimes PU)  Number of plate appearances that ended in a pop-up, also called a pop fly.\n    Pop-ups are distinguished from fly balls in that they are hit at a higher angle, tend to be\n    hit with less exit velocity, and (as a result) end up in the infield or shallow outfield. Before\n    Statcast-era standardization, the distinction between a fly ball and a pop-up was a matter of\n    scorerkeeper judgement, and many unofficial scorekeepers did not distinguish between the two.\n    Statcast determines pop flies exclusively by angle (> 50 degrees).", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "trajectory_unknown": {"name": "trajectory_unknown", "description": "Number of plate appearances ending in a batted ball whose trajectory was not recorded and cannot\n    be reliably deduced from context. This number includes balls that we know were hit in the air,\n    but do not know which kind of air ball (FB/PU/LD) they were (see trajectory_broad_classification_unknown\n    for a number that does not include those balls). The strong majority of batted balls prior to 1988\n    fall into this category, especially hits.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "trajectory_known": {"name": "trajectory_known", "description": "Number of plate appearances ending in a batted ball whose trajectory was recorded or was reliably deduced\n    from the context. An example of reliable deduction is an at-bat with the fielding play 6-3, which\n    almost always is a ground ball fielded by the shortstop and thrown to the first baseman. See\n    `calc_batted_ball_type` for the deduction logic.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "trajectory_broad_air_ball": {"name": "trajectory_broad_air_ball", "description": "Number of plate appearances that ended in an air ball (a fly ball, line drive, or pop-up).\n    Because it is much easier to deduce that a ball was hit in the air than it is to deduce the exact\n    trajectory, this number field is more reliably populated than any of its three consituent parts.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "trajectory_broad_ground_ball": {"name": "trajectory_broad_ground_ball", "description": "Same as `trajectory_ground_ball`.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "trajectory_broad_unknown": {"name": "trajectory_broad_unknown", "description": "Number of plate appearances ending in a batted ball whose trajectory was not recorded and cannot\n    be reliably deduced from context, even to the extent of knowing whether it was a ground ball or an air ball.\n    This will include a disproportionate number of hits, which are more likely to be missing trajectory data\n    and harder to make deductions about.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "trajectory_broad_known": {"name": "trajectory_broad_known", "description": "Number of plate appearances ending in a batted ball whose ground/air status was recorded or\n    reliably deduced from the context. This is the sum of `trajectory_broad_air_ball` and\n    `trajectory_broad_ground_ball`. Outs in play have excellent coverage historically here,\n    even for older games.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "bunts": {"name": "bunts", "description": "Number of plate appearances ending in an in-play bunt.\n    This does not include strikeouts on foul bunts with two strikes.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_distance_plate": {"name": "batted_distance_plate", "description": "Number of plate appearances in which the ball was batted to catcher's area around home plate.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_distance_infield": {"name": "batted_distance_infield", "description": "Number of plate appearances in which the ball was batted to the infield (not including the catcher).\n    All ground balls are included here, regardless of whether they made it through to the outfield.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_distance_outfield": {"name": "batted_distance_outfield", "description": "Number of plate appearances in which the ball was hit on the fly to the outfield.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_distance_unknown": {"name": "batted_distance_unknown", "description": "Number of plate appearances in which the ball was hit, but the distance was not recorded\n    and cannot be reliably deduced from context.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_distance_known": {"name": "batted_distance_known", "description": "Number of plate appearances in which the ball was hit, and the distance was either\n    recorded or reliably deduced from context.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "fielded_by_battery": {"name": "fielded_by_battery", "description": "Number of plate appearances in which the ball was fielded by the pitcher or catcher.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "fielded_by_infielder": {"name": "fielded_by_infielder", "description": "Number of plate appearances in which the ball was fielded by an infielder.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "fielded_by_outfielder": {"name": "fielded_by_outfielder", "description": "Number of plate appearances in which the ball was fielded by an outfielder.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "fielded_by_known": {"name": "fielded_by_known", "description": "Number of plate appearances in which the ball was fielded by a player, and the player was recorded.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "fielded_by_unknown": {"name": "fielded_by_unknown", "description": "Number of plate appearances in which the ball was fielded by a player, but the player was not recorded.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_angle_left": {"name": "batted_angle_left", "description": "Number of plate appearances in which the ball was batted to the left side of the field.\n    This includes balls where the location was not recorded, but the fielder is on the left side\n    (3B, LF). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_angle_right": {"name": "batted_angle_right", "description": "Number of plate appearances in which the ball was batted to the right side of the field.\n    This includes balls where the location was not recorded, but the fielder is on the right side\n    (1B, RF). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_angle_middle": {"name": "batted_angle_middle", "description": "Number of plate appearances in which the ball was batted to the middle of the field.\n    This includes balls where the location was not recorded, but the fielder is up the middle\n    (P, 2B, SS, CF). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_angle_unknown": {"name": "batted_angle_unknown", "description": "Number of plate appearances in which the ball was batted, but we don't have enough location\n    to determine the spray angle.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_angle_known": {"name": "batted_angle_known", "description": "Number of plate appearances in which the ball was hit and we have enough location to determine\n    the spray angle.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_location_plate": {"name": "batted_location_plate", "description": "Number of plate appearances in which the ball was batted to the catcher's area around home plate.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_location_right_infield": {"name": "batted_location_right_infield", "description": "Number of plate appearances in which the ball was batted to the right side of the infield.\n    This includes balls where the location was not recorded, but the fielder is on the right side\n    (1B). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_location_middle_infield": {"name": "batted_location_middle_infield", "description": "Number of plate appearances in which the ball was batted to the middle of the infield.\n    This includes balls where the location was not recorded, but the fielder is up the middle\n    (P, SS, 2B). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_location_left_infield": {"name": "batted_location_left_infield", "description": "Number of plate appearances in which the ball was batted to the left side of the infield.\n    This includes balls where the location was not recorded, but the fielder is on the left side\n    (3B). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_location_left_field": {"name": "batted_location_left_field", "description": "Number of plate appearances in which the ball was batted to the left side of the outfield.\n    This includes balls where the location was not recorded, but the fielder is on the left side\n    (LF). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_location_center_field": {"name": "batted_location_center_field", "description": "Number of plate appearances in which the ball was batted to the center of the outfield.\n    This includes balls where the location was not recorded, but the fielder is up the middle\n    (CF). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_location_right_field": {"name": "batted_location_right_field", "description": "Number of plate appearances in which the ball was batted to the right side of the outfield.\n    This includes balls where the location was not recorded, but the fielder is on the right side\n    (RF, CF). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_location_unknown": {"name": "batted_location_unknown", "description": "Number of plate appearances in which the ball was batted, but we don't have enough location\n    to determine the specific location.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_location_known": {"name": "batted_location_known", "description": "Number of plate appearances in which the ball was batted and we have enough location to determine\n    the specific location.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_balls_pulled": {"name": "batted_balls_pulled", "description": "Number of plate appearances in which the ball was pulled (the left side for right-handed batters, the right side for left-handed batters).", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_balls_opposite_field": {"name": "batted_balls_opposite_field", "description": "Number of plate appearances in which the ball was hit to the opposite field (the right side for right-handed batters, the left side for left-handed batters).", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "runs": {"name": "runs", "description": "(R) Number of runs scored.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "times_reached_base": {"name": "times_reached_base", "description": "Number of times a batter ended a plate appearance on base, even if it was through a fielder's choice, error, etc.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "stolen_base_opportunities": {"name": "stolen_base_opportunities", "description": "Number of events in which a runner had an opportunity to steal a base as the\n    lead basestealer OR the runner recorded a SB/CS in any situation.\n    \"Opportunity\" is defined as a situation in which the next base\n    was empty at the start of the event (not including the batter).\n    No-play events excluded, but events without plate appearances are included.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "stolen_base_opportunities_second": {"name": "stolen_base_opportunities_second", "description": "Number of opportunities to steal second base (see `stolen_base_opportunities` for detailed criteria).", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "stolen_base_opportunities_third": {"name": "stolen_base_opportunities_third", "description": "Number of opportunities to steal third base (see `stolen_base_opportunities` for detailed criteria).", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "stolen_base_opportunities_home": {"name": "stolen_base_opportunities_home", "description": "Number of opportunities to steal home (see `stolen_base_opportunities` for detailed criteria).", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "stolen_bases": {"name": "stolen_bases", "description": "(SB) Number of successful stolen bases.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "stolen_bases_second": {"name": "stolen_bases_second", "description": "Number of successful steals of second base.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "stolen_bases_third": {"name": "stolen_bases_third", "description": "Number of successful steals of third base.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "stolen_bases_home": {"name": "stolen_bases_home", "description": "Number of successful steals of home.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "caught_stealing": {"name": "caught_stealing", "description": "(CS) Number of times a runner was caught stealing.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "caught_stealing_second": {"name": "caught_stealing_second", "description": "Number of times a runner was caught stealing second base.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "caught_stealing_third": {"name": "caught_stealing_third", "description": "Number of times a runner was caught stealing third base.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "caught_stealing_home": {"name": "caught_stealing_home", "description": "Number of times a runner was caught stealing home.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "picked_off": {"name": "picked_off", "description": "(PO, at risk of confusion with putouts) Number of times a runner was picked off.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "picked_off_first": {"name": "picked_off_first", "description": "Number of times a runner was picked off first base.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "picked_off_second": {"name": "picked_off_second", "description": "Number of times a runner was picked off second base.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "picked_off_third": {"name": "picked_off_third", "description": "Number of times a runner was picked off third base.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "picked_off_caught_stealing": {"name": "picked_off_caught_stealing", "description": "(POCS) Number of times a runner was picked off, but instead of going back to the bag,\n    tried to run to the next base and was put out.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "outs_on_basepaths": {"name": "outs_on_basepaths", "description": "Number of outs recorded by a baserunner (this is not mutually exclusive with outs recorded by the batter\n    in cases like failed advances or dropped third-strike putouts).", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "unforced_outs_on_basepaths": {"name": "unforced_outs_on_basepaths", "description": "Number of outs recorded by a baserunner that was not the result of a force on the runner.\n    \"Unforced\" is meant to be in both the literal sense of a force not being in play, but also\n    the figurative sense of the runner being responsible for the out. The latter may or may not\n    be the best interpretation of any given play, but it is useful to assign responsibility to the\n    runner by default in those contexts.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "outs_avoided_on_errors": {"name": "outs_avoided_on_errors", "description": "Number of times that a baserunner would have been out, but an error allowed them to remain\n    on the basepaths (either staying put or advancing).", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "advances_on_wild_pitches": {"name": "advances_on_wild_pitches", "description": "(WP) Number of times a baserunner advanced on a wild pitch.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "advances_on_passed_balls": {"name": "advances_on_passed_balls", "description": "(PB) Number of times a baserunner advanced on a passed ball.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "advances_on_balks": {"name": "advances_on_balks", "description": "(sometimes BK) Number of times a baserunner advanced on a balk.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "advances_on_unspecified_plays": {"name": "advances_on_unspecified_plays", "description": "Number of times a baserunner advanced for an unspecified reason.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "advances_on_defensive_indifference": {"name": "advances_on_defensive_indifference", "description": "(DI) Number of times a baserunner advanced on defensive indifference.\n   Defensive indifference is a judgement call by the official scorer that the defense\n   did not try to stop the runner from stealing a base. This usually happens\n   when the defense has a lead late in the game.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "advances_on_errors": {"name": "advances_on_errors", "description": "Number of times a baserunner advanced on an error.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "extra_base_chances": {"name": "extra_base_chances", "description": "", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "extra_base_advance_attempts": {"name": "extra_base_advance_attempts", "description": "Number of times a baserunner tried to advance by a greater number of bases than the batter.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "extra_bases_taken": {"name": "extra_bases_taken", "description": "", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "bases_advanced": {"name": "bases_advanced", "description": "Number of bases advanced by a baserunner, including the batter.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "bases_advanced_on_balls_in_play": {"name": "bases_advanced_on_balls_in_play", "description": "Number of bases advanced by a baserunner on a ball in play, including the batter.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "surplus_bases_advanced_on_balls_in_play": {"name": "surplus_bases_advanced_on_balls_in_play", "description": "Number of bases advanced by a baserunner on a ball in play minus the number of total bases\n    accumulated by the batter on the same play. For example, if a runner goes from first to third\n    on a single, this number is 1 (3 - 2). If a runner only goes from second to third on a double,\n    this number is -1 (1 - 2).", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "outs_on_extra_base_advance_attempts": {"name": "outs_on_extra_base_advance_attempts", "description": "Number of times a baserunner was out attempting to advance\n    by a greater number of bases than the batter. This includes\n    batters who were put out trying to stretch a hit to the next base.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "pitches": {"name": "pitches", "description": "Number of pitches thrown.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "swings": {"name": "swings", "description": "Number of pitches that were swung at.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "swings_with_contact": {"name": "swings_with_contact", "description": "Number of pitches that were swung at and made contact.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "strikes": {"name": "strikes", "description": "Number of pitches that were called or swinging strikes.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "strikes_called": {"name": "strikes_called", "description": "Number of pitches that were called strikes.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "strikes_swinging": {"name": "strikes_swinging", "description": "Number of pitches that were swung on and missed (mutually exclusive\n    with `swings_with_contact`, which also count as strikes).", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "strikes_foul": {"name": "strikes_foul", "description": "Number of pitches that were fouled off.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "strikes_foul_tip": {"name": "strikes_foul_tip", "description": "Number of pitches that were fouled off and caught by the catcher for strike three.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "strikes_in_play": {"name": "strikes_in_play", "description": "Number of pitches that were swung on and batted into play.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "strikes_unknown": {"name": "strikes_unknown", "description": "Number of pitches that we know were strikes, but don't know what kind.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "balls": {"name": "balls", "description": "Number of pitches that were called balls.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "balls_called": {"name": "balls_called", "description": "Number of pitches that were called balls (as opposed to automatic balls that were\n    not actually thrown).", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "balls_intentional": {"name": "balls_intentional", "description": "Number of pitches that were called balls as part of an intentional walk.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "balls_automatic": {"name": "balls_automatic", "description": "Number of pitches that were called balls on an automatic walk or a delay penalty.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "unknown_pitches": {"name": "unknown_pitches", "description": "Number of pitches that were thrown without any other information recorded.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "pitchouts": {"name": "pitchouts", "description": "Number of pitches that were thrown as pitchouts. A pitchout is a pitch that is thrown\n    intentionally very far outside in order to make it easier for the catcher to throw out\n    a baserunner who is likely to steal.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "pitcher_pickoff_attempts": {"name": "pitcher_pickoff_attempts", "description": "Number of times the pitcher attempted to pick off a baserunner.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "catcher_pickoff_attempts": {"name": "catcher_pickoff_attempts", "description": "Number of times the catcher attempted to pick off a baserunner.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "pitches_blocked_by_catcher": {"name": "pitches_blocked_by_catcher", "description": "Number of pitches that were blocked by the catcher.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "pitches_with_runners_going": {"name": "pitches_with_runners_going", "description": "Number of pitches that were thrown while a baserunner was on the move\n    (as part of a steal or hit-and-run).", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "passed_balls": {"name": "passed_balls", "description": "(PB) Number of passed balls.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "wild_pitches": {"name": "wild_pitches", "description": "(WP) Number of wild pitches.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "balks": {"name": "balks", "description": "(BK) Number of balks.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "left_on_base": {"name": "left_on_base", "description": "(LOB) At an individual level, the number of baserunners that a batter failed to advance during a plate appearance.\n    At a team level, the number of baserunners remaining on base at the end of an inning. In order to count, baserunners\n    must not have scored or been put out.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "left_on_base_with_two_outs": {"name": "left_on_base_with_two_outs", "description": "(LOB) At an individual level, the number of baserunners that remain on base (unscored and not out) after a plate appearance that ends with the third out recorded. At a team level, this is interchangable with `left_on_base`.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "earned_run_average": {"name": "earned_run_average", "description": "(ERA) Earned runs per nine innings, the analogue of batting average for pitchers in both its\n    fame and its limitations. `earned_runs` are a subset of the total runs allowed by a pitcher:\n    those unaffected by fielding errors. ERA is a strange compromise between the desire to isolate\n    a pitcher's true defense-independent ability and to describe actually happened when they were on the mound.\n    Because fielding errors are a small component of overall luck and defense, it doesn't really remove much\n    noise and might even add more. In general, the idea is right but the execution is wrong.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "run_average": {"name": "run_average", "description": "(RA) Runs allowed by the pitcher per nine innings. Because of the historical importance of ERA,\n    this is often thought of as earned run average plus unearned run average, but this obscures how much simpler\n    it is to calculate than ERA. While it is subject to many factors beyond the pitcher's control, it does arguably\n    the best possible job of describing what actually happened when the pitcher was on the mound. This makes it a popular\n    starting point for some implementations of WAR (such as Baseball Reference's).", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "walks_per_9_innings": {"name": "walks_per_9_innings", "description": "(BB/9) Walks allowed by the pitcher per nine innings. Probably the statistic most \n    frequently used to describe a pitcher's control. One of the three main \"peripheral\"\n    stats that describe a pitcher's performance on outcomes over which they have the most control.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "strikeouts_per_9_innings": {"name": "strikeouts_per_9_innings", "description": "(K/9) Strikeouts recorded by the pitcher per nine innings. One of the three main \"peripheral\"\n    stats that describe a pitcher's performance on outcomes over which they have the most control.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "home_runs_per_9_innings": {"name": "home_runs_per_9_innings", "description": "(HR/9) Home runs allowed by the pitcher per nine innings. One of the three main \"peripheral\"\n    stats that describe a pitcher's performance on outcomes over which they have the most control,\n    although the lower frequency of home runs gives it a much higher relative variance than the other two.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "hits_per_9_innings": {"name": "hits_per_9_innings", "description": "(H/9) Hits allowed by the pitcher per nine innings.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "walks_and_hits_per_innings_pitched": {"name": "walks_and_hits_per_innings_pitched", "description": "", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "strikeout_to_walk_ratio": {"name": "strikeout_to_walk_ratio", "description": "(K/BB) Ratio of strikeouts to walks, almost always appearing as a pitching statistic even though it\n    can also be expressed for hitters. A simple and useful way to describe pitching performance\n    on non-at-bat outcomes. Also a bit more robust when comparing across time periods than most\n    unadjusted strikeout-related statistics. Leaders in this stat tend to be a mix\n    of the most dominant pitchers in the league and contact-oriented control freaks,\n    e.g. Pedro Martinez and Phil Hughes (respectively or not, who's to say).", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "walk_rate": {"name": "walk_rate", "description": "(BB/PA) Walks per plate appearance.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "strikeout_rate": {"name": "strikeout_rate", "description": "(K/PA) Strikeouts per plate appearance.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "home_run_rate": {"name": "home_run_rate", "description": "(HR/PA) Home runs per plate appearance.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "batting_average_against": {"name": "batting_average_against", "description": "(BAA, OAV) Same as batting average, but for pitchers. For the most part,\n    this database doesn't rephrase hitting statistics for pitchers, but this one is\n    so common that it's worth including.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "on_base_percentage_against": {"name": "on_base_percentage_against", "description": "Same as on-base percentage, but for pitchers/defense.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "slugging_percentage_against": {"name": "slugging_percentage_against", "description": "Same as slugging percentage, but for pitchers/defense.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "on_base_plus_slugging_against": {"name": "on_base_plus_slugging_against", "description": "Same as OPS, but for pitchers/defense.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "batting_average_on_balls_in_play": {"name": "batting_average_on_balls_in_play", "description": "(BABIP) A measure of the rate at which fieldable balls go for hits. It is calculated as (H - HR)/(AB - K - HR + SF).\n    Pitchers are generally (but controversially) thought to have little control over balls in play, so a high BABIP\n    is a good sign that that they have been unlucky or have played in front of a poor defense. Most pitchers do have some\n    \"true\" BABIP ability that is different from the league average, but the difference is usually much smaller than the year-to-year\n    variance in their actual BABIP. In rare cases, pitchers can have such a strong influence on balls in play that their\n    contribution is measurable in smaller sample sizes. For pitchers in the dead-ball era and earlier, it makes less sense\n    to treat BABIP as luck because a much higher percentage of at-bats ended in balls in play, and pitchers were more focused\n    on getting outs by inducing weak contact without having to worry about home runs.\n\n    All of the above is also true for hitters, but to a much lesser extent, as hitters face different defenses, control\n    their ability to beat out grounders for infield hits, and generally have more control over the quality of contact they\n    make. BABIP can also be misleading for hitters because it excludes home runs, so Barry Bonds ends up having a lower BABIP\n    even though there were occasional eyewitness reports of his making solid contact.\n\n    BABIP was invented by Voros McCracken around the turn of the millenium, and it remains the most prominent\n    example of a statistic that tracks player luck as opposed to skill or performance.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "event_coverage_rate": {"name": "event_coverage_rate", "description": "", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "known_trajectory_rate_outs": {"name": "known_trajectory_rate_outs", "description": "Rate of outs in play for which we know the detailed trajectory of the batted ball.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "known_trajectory_rate_hits": {"name": "known_trajectory_rate_hits", "description": "Rate of hits for which we know the detailed trajectory of the batted ball.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "known_trajectory_rate": {"name": "known_trajectory_rate", "description": "Overall rate of batted balls for which we know the detailed trajectory.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "known_trajectory_broad_rate_outs": {"name": "known_trajectory_broad_rate_outs", "description": "Overall rate of outs in play for which we know whether\n    the ball was hit in the air or on the ground.\n    This is generally very high even for the oldest play-by-play data.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "known_trajectory_broad_rate_hits": {"name": "known_trajectory_broad_rate_hits", "description": "Overall rate of hits for which we know whether\n    the ball was hit in the air or on the ground.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "known_trajectory_broad_rate": {"name": "known_trajectory_broad_rate", "description": "Overall rate of batted balls for which we know whether\n    the ball was hit in the air or on the ground.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "known_trajectory_out_hit_ratio": {"name": "known_trajectory_out_hit_ratio", "description": "The ratio of `known_trajectory_rate_outs` to `known_trajectory_rate_hits`.\n    This ratio is generally very high for years without complete batted ball data,\n    which makes it useful for estimating quantities that would be affected by\n    the selection bias.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "known_trajectory_broad_out_hit_ratio": {"name": "known_trajectory_broad_out_hit_ratio", "description": "The ratio of `known_trajectory_broad_rate_outs` to `known_trajectory_broad_rate_hits`.\n    This ratio is generally very high for years without complete batted ball data,\n    which makes it useful for estimating quantities that would be affected by\n    the selection bias.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "air_ball_rate_outs": {"name": "air_ball_rate_outs", "description": "The rate of outs in play that were fly balls, pop-ups, or line drives.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "ground_ball_rate_outs": {"name": "ground_ball_rate_outs", "description": "The rate of outs in play that were ground balls.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "ground_air_out_ratio": {"name": "ground_air_out_ratio", "description": "The ratio of `ground_ball_rate_outs` to `air_ball_rate_outs`.\n    This is a useful metric by itself because it is unaffected by\n    the higher percentage of missing data on hits, so it is probably\n    a more accurate measure of overall ground ball rate than `ground_ball_rate`\n    itself for most seasons.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "air_ball_hit_rate": {"name": "air_ball_hit_rate", "description": "The rate of hits in play that were fly balls, pop-ups, or line drives.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "ground_ball_hit_rate": {"name": "ground_ball_hit_rate", "description": "The rate of hits in play that were ground balls.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "ground_air_hit_ratio": {"name": "ground_air_hit_ratio", "description": "The ratio of `ground_ball_hit_rate` to `air_ball_hit_rate`.\n    Difference between this and `ground_air_out_ratio` is potentially interesting,\n    but will be noisy for older years.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "fly_ball_rate": {"name": "fly_ball_rate", "description": "Of all batted_balls for which we know the trajectory,\n    The rate that were fly balls.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "line_drive_rate": {"name": "line_drive_rate", "description": "Of all batted_balls for which we know the trajectory,\n    The rate that were line drives.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "pop_up_rate": {"name": "pop_up_rate", "description": "Of all batted_balls for which we know the trajectory,\n    The rate that were pop-ups.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "ground_ball_rate": {"name": "ground_ball_rate", "description": "Of all batted_balls for which we know the trajectory,\n    The rate that were ground balls.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "coverage_weighted_air_ball_batting_average": {"name": "coverage_weighted_air_ball_batting_average", "description": "The batting average of batted_balls that were fly balls, pop-ups, or line drives,\n    weighted according to the `known_trajectory_broad_out_hit_ratio`. This is an attempt\n    to measure trajectory-specific BABIP even in years where trajectory data is rarely\n    present for hits. While it handles that specific bias, it is still likely to be noisy\n    because of the small sample size of known-trajectory balls.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "coverage_weighted_ground_ball_batting_average": {"name": "coverage_weighted_ground_ball_batting_average", "description": "The batting average of batted_balls that were ground balls,\n    weighted according to the `known_trajectory_broad_out_hit_ratio`. This is an attempt\n    to measure trajectory-specific BABIP even in years where trajectory data is rarely\n    present for hits. While it handles that specific bias, it is still likely to be noisy\n    because of the small sample size of known-trajectory balls.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "coverage_weighted_fly_ball_batting_average": {"name": "coverage_weighted_fly_ball_batting_average", "description": "The batting average of batted_balls that were fly balls,\n    weighted according to the `known_trajectory_out_hit_ratio`. This is an attempt\n    to measure trajectory-specific BABIP even in years where trajectory data is rarely\n    present for hits. It is still vulnerable to the variance and arbitrariness with which\n    historical scorekeepers differentiated fly balls from line drives and pop-ups.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "coverage_weighted_line_drive_batting_average": {"name": "coverage_weighted_line_drive_batting_average", "description": "The batting average of batted_balls that were line drives,\n    weighted according to the `known_trajectory_out_hit_ratio`. This is an attempt\n    to measure trajectory-specific BABIP even in years where trajectory data is rarely\n    present for hits. It is still vulnerable to the variance and arbitrariness with which\n    historical scorekeepers differentiated line drives from other air outs, which was\n    extremely high all the way up to the Statcast era.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "coverage_weighted_pop_up_batting_average": {"name": "coverage_weighted_pop_up_batting_average", "description": "The batting average of batted_balls that were pop-ups,\n    weighted according to the `known_trajectory_out_hit_ratio`. This is an attempt\n    to measure trajectory-specific BABIP even in years where trajectory data is rarely\n    present for hits. It is still vulnerable to the variance and arbitrariness with which\n    historical scorekeepers differentiated pop-ups from other air outs.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "known_angle_rate_outs": {"name": "known_angle_rate_outs", "description": "Rate of batted-ball outs for which we know (or have a good proxy for)\n    whether the ball was hit to the left, right, or middle of the field.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "known_angle_rate_hits": {"name": "known_angle_rate_hits", "description": "Rate of batted-ball hits for which we know (or have a good proxy for)\n    whether the ball was hit to the left, right, or middle of the field.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "known_angle_rate": {"name": "known_angle_rate", "description": "Rate of batted balls for which we know (or have a good proxy for)\n    whether the ball was hit to the left, right, or middle of the field.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "known_angle_out_hit_ratio": {"name": "known_angle_out_hit_ratio", "description": "The ratio of `known_angle_rate_outs` to `known_angle_rate_hits`.\n    This ratio is generally very high for years without complete batted ball data,\n    which makes it useful for estimating quantities that would be affected by\n    the selection bias. Angle is generally better known than location itself, because\n    when a batter gets a hit, we often know which outfielder fielded the ball even\n    though we don't know how it got there.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "angle_left_rate_outs": {"name": "angle_left_rate_outs", "description": "The rate of batted-ball outs that were hit to the left side of the field.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "angle_left_rate_hits": {"name": "angle_left_rate_hits", "description": "The rate of hits that were hit to the left side of the field.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "angle_left_rate": {"name": "angle_left_rate", "description": "The overall rate of batted balls that were hit to the left side of the field.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "coverage_weighted_angle_left_batting_average": {"name": "coverage_weighted_angle_left_batting_average", "description": "The batting average on batted balls that were hit to the left side of the field,\n    weighted according to the `known_angle_out_hit_ratio`. This is an attempt\n    to measure angle-specific BABIP even in years where angle data is rarely\n    present for hits.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "angle_right_rate_outs": {"name": "angle_right_rate_outs", "description": "The rate of batted-ball outs that were hit to the right side of the field.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "angle_right_rate_hits": {"name": "angle_right_rate_hits", "description": "The rate of hits that were hit to the right side of the field.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "angle_right_rate": {"name": "angle_right_rate", "description": "The overall rate of batted balls that were hit to the right side of the field.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "coverage_weighted_angle_right_batting_average": {"name": "coverage_weighted_angle_right_batting_average", "description": "The batting average on batted balls that were hit to the right side of the field,\n    weighted according to the `known_angle_out_hit_ratio`. This is an attempt\n    to measure angle-specific BABIP even in years where angle data is rarely\n    present for hits.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "angle_middle_rate_outs": {"name": "angle_middle_rate_outs", "description": "The rate of batted-ball outs that were hit to the middle of the field.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "angle_middle_rate_hits": {"name": "angle_middle_rate_hits", "description": "The rate of hits that were hit to the middle of the field.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "angle_middle_rate": {"name": "angle_middle_rate", "description": "The overall rate of batted balls that were hit to the middle of the field.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "coverage_weighted_angle_middle_batting_average": {"name": "coverage_weighted_angle_middle_batting_average", "description": "The batting average on batted balls that were hit to the middle of the field,\n    weighted according to the `known_angle_out_hit_ratio`. This is an attempt\n    to measure angle-specific BABIP even in years where angle data is rarely\n    present for hits.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "pulled_rate_outs": {"name": "pulled_rate_outs", "description": "`angle_right_rate_outs` for lefty batters\n    and `angle_left_rate_outs` for righty batters.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "pulled_rate_hits": {"name": "pulled_rate_hits", "description": "`angle_right_rate_hits` for lefty batters\n    and `angle_left_rate_hits` for righty batters.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "pulled_rate": {"name": "pulled_rate", "description": "`angle_right_rate` for lefty batters\n    and `angle_left_rate` for righty batters.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "coverage_weighted_pulled_batting_average": {"name": "coverage_weighted_pulled_batting_average", "description": "`coverage_weighted_angle_right_batting_average` for lefty batters\n    and `coverage_weighted_angle_left_batting_average` for righty batters.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "opposite_field_rate_outs": {"name": "opposite_field_rate_outs", "description": "`angle_left_rate_outs` for lefty batters\n    and `angle_right_rate_outs` for righty batters.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "opposite_field_rate_hits": {"name": "opposite_field_rate_hits", "description": "`angle_left_rate_hits` for lefty batters\n    and `angle_right_rate_hits` for righty batters.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "opposite_field_rate": {"name": "opposite_field_rate", "description": "`angle_left_rate` for lefty batters\n    and `angle_right_rate` for righty batters.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "coverage_weighted_opposite_field_batting_average": {"name": "coverage_weighted_opposite_field_batting_average", "description": "`coverage_weighted_angle_left_batting_average` for lefty batters\n    and `coverage_weighted_angle_right_batting_average` for righty batters.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "stolen_base_attempt_rate_second": {"name": "stolen_base_attempt_rate_second", "description": "The rate of stolen base opportunities taken\n    when the runner was on first base (trying to steal second).\n    See `stolen_base_opportunities` for the definition.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "stolen_base_attempt_rate_third": {"name": "stolen_base_attempt_rate_third", "description": "The rate of stolen base opportunities taken\n    when the runner was on second base (trying to steal third).\n    See `stolen_base_opportunities` for the definition.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "stolen_base_attempt_rate_home": {"name": "stolen_base_attempt_rate_home", "description": "The rate of stolen base opportunities taken\n    when the runner was on third base (trying to steal home).\n    See `stolen_base_opportunities` for the definition.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "unforced_out_rate": {"name": "unforced_out_rate", "description": "The rate of appearances on the basepaths that ended in an unforced out.\n    See `unforced_outs_on_basepaths` for the definition.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "pitch_strike_rate": {"name": "pitch_strike_rate", "description": "The rate of pitches that were strikes.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "pitch_contact_rate": {"name": "pitch_contact_rate", "description": "The rate of pitches where some kind of contact was made.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "pitch_swing_rate": {"name": "pitch_swing_rate", "description": "The rate of pitches where the batter swung (and either made\n    contact or missed).", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "pitch_ball_rate": {"name": "pitch_ball_rate", "description": "The rate of pitches that were balls.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "pitch_swing_and_miss_rate": {"name": "pitch_swing_and_miss_rate", "description": "The rate of pitches where the batter swung and missed.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "pitch_foul_rate": {"name": "pitch_foul_rate", "description": "The rate of pitches that were fouled off.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "pitched_called_strike_rate": {"name": "pitched_called_strike_rate", "description": "The rate of pitches that were called strikes.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "pitch_data_coverage_rate": {"name": "pitch_data_coverage_rate", "description": "The rate of plate appearances for which we have pitch-by-pitch data.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}}, "meta": {"primary_keys": ["player_id"]}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "baseball_computer://models/metrics/metrics_player_career_pitching.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "models", "contract": {"enforced": true}, "meta": {"primary_keys": ["player_id"]}}, "created_at": 1702285009.77343, "relation_name": "\"bc\".\"main_models\".\"metrics_player_career_pitching\"", "raw_code": "{{  metric_table_generator(\"pitching\", [\"player_id\"], agg_type=\"player\", regular_season_only=True)  }}", "language": "sql", "refs": [{"name": "event_pitching_stats", "package": null, "version": null}, {"name": "seed_franchises", "package": null, "version": null}, {"name": "player_team_season_pitching_stats", "package": null, "version": null}, {"name": "player_team_season_pitching_stats", "package": null, "version": null}, {"name": "seed_franchises", "package": null, "version": null}, {"name": "team_game_start_info", "package": null, "version": null}, {"name": "player_game_pitching_stats", "package": null, "version": null}, {"name": "event_pitching_stats", "package": null, "version": null}, {"name": "team_game_start_info", "package": null, "version": null}, {"name": "seed_game_types", "package": null, "version": null}, {"name": "game_start_info", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.baseball_computer.metric_table_generator"], "nodes": ["model.baseball_computer.event_pitching_stats", "seed.baseball_computer.seed_franchises", "model.baseball_computer.player_team_season_pitching_stats", "model.baseball_computer.team_game_start_info", "model.baseball_computer.player_game_pitching_stats", "seed.baseball_computer.seed_game_types", "model.baseball_computer.game_start_info"]}, "compiled_path": null, "contract": {"enforced": true, "alias_types": true, "checksum": "c8f2297d3d3e34f08eb03ecd08dcb998597bedbfafddd3b85364c4ae00a9a1c8"}, "access": "protected", "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true, "columns": ["player_id"]}], "version": null, "latest_version": null, "deprecation_date": null}, "model.baseball_computer.metrics_player_season_league_fielding": {"database": "bc", "schema": "main_models", "name": "metrics_player_season_league_fielding", "resource_type": "model", "package_name": "baseball_computer", "path": "metrics/metrics_player_season_league_fielding.sql", "original_file_path": "models/metrics/metrics_player_season_league_fielding.sql", "unique_id": "model.baseball_computer.metrics_player_season_league_fielding", "fqn": ["baseball_computer", "metrics", "metrics_player_season_league_fielding"], "alias": "metrics_player_season_league_fielding", "checksum": {"name": "sha256", "checksum": "a776e2b2dd650f7f5824855987517a495cf5424f35f799d03c7665d45f19eefc"}, "config": {"enabled": true, "alias": null, "schema": "models", "database": null, "tags": [], "meta": {"primary_keys": ["player_id", "season", "league"]}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Aggregate fielding statistics and averages for each player-season,\nsplit if the player played in multiple leagues that year. Regular season only.\n", "columns": {"player_id": {"name": "player_id", "description": "Retrosheet 8-character person ID for a player, which consists of\n    the first four characters of the last name, the first character\n    of the first name, and then three digits to disambiguate between\n    players with the same five characters.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "season": {"name": "season", "description": "Year, 4-digit integer", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "league": {"name": "league", "description": "Abbreviation for the league associated with this entity. NULL\n    indicates that a team is not part of a league (e.g. all-star games\n    or Negro League barnstorming teams).", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "outs_played": {"name": "outs_played", "description": "", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "plate_appearances_in_field": {"name": "plate_appearances_in_field", "description": "", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "plate_appearances_in_field_with_ball_in_play": {"name": "plate_appearances_in_field_with_ball_in_play", "description": "", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "unknown_putouts_while_fielding": {"name": "unknown_putouts_while_fielding", "description": "", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "balls_hit_to": {"name": "balls_hit_to", "description": "", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "putouts": {"name": "putouts", "description": "(PO) Outs credited to fielder based on who physically made the out, either by:\n        - Catching a ball on the fly\n        - Tagging a runner out\n        - Forcing a runner out\n        - Catching a called third strike\n        - Being the nearest fielder to a baserunner who is called out for interference\n\n    Putouts have been an important baseball statistic longer than MLB has been around,\n    so it has excellent historical coverage. Unassisted\n    putouts are very important in determining the location of batted balls.\n    \n    In modern baseball rules, each out in the game is credited as a putout, and at the play/event\n    level this will always be the case. However, in older games for which we only have box score or season-level\n    data, rare plays like baserunner interference may not be assigned to a specific fielder.\n    \n    Every play-by-play out has a putout, but the fielder who gets the putout may be unknown.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "assists": {"name": "assists", "description": "(A) Number of outs in which a fielder touched the ball before anothber fielder recorded a putout.\n    This is almost always a throw to another fielder, but it can also be a deflection.\n\n    Assists have excellent historical data coverage, and they are particularly useful in determining\n    the location of ground balls. The data is present in almost all season-level and game-level accounts.\n    However, individual plays with unknown-fielder putouts are likely to be missing assists entirely.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "errors": {"name": "errors", "description": "(E) Number of errors recorded by a fielder. This is recorded when a fielder either fails to make an out\n    that an average fielder should have made or makes a bad play that allows a baserunner to advance.\n    Errors are awarded at the scorekeeper's discretion, making them more subjective than the other two main\n    fielding stats.\n    \n    Errors used to be a much larger component of evaluating fielder quality.\n    When the stat was invented, routine plays were completed much less frequently than they are today.\n    As baseball evolved, routine plays became truly routine, and a fielder's ability to get to the ball\n    became more relevant than their ability\n    to reliably convert the out once they got there. While plenty of people as early as the 19th century were\n    aware of this, statistics mostly failed to reflect it until the 1980s, when Bill James and others\n    developed Range Factor and other stats that attempted to measure a fielder's ability to create chances.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "fielders_choices": {"name": "fielders_choices", "description": "(FC) Number of times a fielder who fielded the ball attempted to put out a baserunner other than the batter.\n    A fielder's choice can be assigned when the attempt fails, even if there was no error on the play.\n\n    Fielder's choices are only available on play-by-play data and tend to be recorded when the attempt was\n    a tag and not a force. Force plays are explicitly noted and have little overlap with fielder's choices.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "assisted_putouts": {"name": "assisted_putouts", "description": "Number of putouts by the fielder that had at least one recorded, associated assist. For older games, this may be a subset\n    of the true total assisted putouts, as unknown-fielder putouts almost never have recorded assists.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "in_play_putouts": {"name": "in_play_putouts", "description": "", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "in_play_assists": {"name": "in_play_assists", "description": "", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "reaching_errors": {"name": "reaching_errors", "description": "", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "stolen_bases": {"name": "stolen_bases", "description": "(SB) Number of successful stolen bases.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "caught_stealing": {"name": "caught_stealing", "description": "(CS) Number of times a runner was caught stealing.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "pickoffs": {"name": "pickoffs", "description": "", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "passed_balls": {"name": "passed_balls", "description": "(PB) Number of passed balls.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "double_plays": {"name": "double_plays", "description": "(DP) Number of times a play ended in two outs being recorded.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "triple_plays": {"name": "triple_plays", "description": "(TP) Number of times a play ended in three outs being recorded.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "ground_ball_double_plays": {"name": "ground_ball_double_plays", "description": "", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "double_plays_started": {"name": "double_plays_started", "description": "", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "ground_ball_double_plays_started": {"name": "ground_ball_double_plays_started", "description": "", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "fielding_percentage": {"name": "fielding_percentage", "description": "", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "range_factor": {"name": "range_factor", "description": "", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "innings_played": {"name": "innings_played", "description": "", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "event_coverage_rate": {"name": "event_coverage_rate", "description": "", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}}, "meta": {"primary_keys": ["player_id", "season", "league"]}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "baseball_computer://models/metrics/metrics_player_season_league_fielding.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "models", "contract": {"enforced": true}, "meta": {"primary_keys": ["player_id", "season", "league"]}}, "created_at": 1702285020.773289, "relation_name": "\"bc\".\"main_models\".\"metrics_player_season_league_fielding\"", "raw_code": "{{  metric_table_generator(\"fielding\", [\"player_id\", \"season\", \"league\"], agg_type=\"player\", regular_season_only=True)  }}", "language": "sql", "refs": [{"name": "event_player_fielding_stats", "package": null, "version": null}, {"name": "seed_franchises", "package": null, "version": null}, {"name": "player_position_team_season_fielding_stats", "package": null, "version": null}, {"name": "player_position_team_season_fielding_stats", "package": null, "version": null}, {"name": "seed_franchises", "package": null, "version": null}, {"name": "team_game_start_info", "package": null, "version": null}, {"name": "player_position_game_fielding_stats", "package": null, "version": null}, {"name": "event_player_fielding_stats", "package": null, "version": null}, {"name": "team_game_start_info", "package": null, "version": null}, {"name": "seed_game_types", "package": null, "version": null}, {"name": "game_start_info", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.baseball_computer.metric_table_generator"], "nodes": ["model.baseball_computer.event_player_fielding_stats", "seed.baseball_computer.seed_franchises", "model.baseball_computer.player_position_team_season_fielding_stats", "model.baseball_computer.team_game_start_info", "model.baseball_computer.player_position_game_fielding_stats", "seed.baseball_computer.seed_game_types", "model.baseball_computer.game_start_info"]}, "compiled_path": null, "contract": {"enforced": true, "alias_types": true, "checksum": "9ccc4ca6cda8e1b6141f0f3fae72dfa22d5ae1030a5f74001cef93d6150d85d6"}, "access": "protected", "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true, "columns": ["player_id", "season", "league"]}], "version": null, "latest_version": null, "deprecation_date": null}, "model.baseball_computer.metrics_player_season_league_offense": {"database": "bc", "schema": "main_models", "name": "metrics_player_season_league_offense", "resource_type": "model", "package_name": "baseball_computer", "path": "metrics/metrics_player_season_league_offense.sql", "original_file_path": "models/metrics/metrics_player_season_league_offense.sql", "unique_id": "model.baseball_computer.metrics_player_season_league_offense", "fqn": ["baseball_computer", "metrics", "metrics_player_season_league_offense"], "alias": "metrics_player_season_league_offense", "checksum": {"name": "sha256", "checksum": "1a7bc33cb1eef62179306e8fbe6951729c07e89cd1833cf252b403cf02c9cd09"}, "config": {"enabled": true, "alias": null, "schema": "models", "database": null, "tags": [], "meta": {"primary_keys": ["player_id", "season", "league"]}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Aggregate offensive statistics and averages for each player-season,\nsplit if the player played in multiple leagues that year. Regular season only.\n", "columns": {"player_id": {"name": "player_id", "description": "Retrosheet 8-character person ID for a player, which consists of\n    the first four characters of the last name, the first character\n    of the first name, and then three digits to disambiguate between\n    players with the same five characters.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "season": {"name": "season", "description": "Year, 4-digit integer", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "league": {"name": "league", "description": "Abbreviation for the league associated with this entity. NULL\n    indicates that a team is not part of a league (e.g. all-star games\n    or Negro League barnstorming teams).", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "plate_appearances": {"name": "plate_appearances", "description": "(PA) Number of times a batter came to the plate, including walks, hit by pitches, sacrifices, and at-bats.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "at_bats": {"name": "at_bats", "description": "(AB) Number of plate appearances that ended in either a hit or a non-sacrifice out.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "hits": {"name": "hits", "description": "(H) Number of times a batter reached base safely without an error or fielder's choice.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "singles": {"name": "singles", "description": "(1B) Number of hits in which a batter reached first base.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "doubles": {"name": "doubles", "description": "(2B) Number of hits in which a batter reached second base without the help of an error or an attempted\n    play on another runner.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "triples": {"name": "triples", "description": "(3B) Number of hits in which a batter reached third base without the help of an error or an attempted\n    play on another runner.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "home_runs": {"name": "home_runs", "description": "(HR) Number of hits in which a batter reached home plate without the help of an error or an attempted\n    play on another runner (usually by hitting the ball out of the park).", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "total_bases": {"name": "total_bases", "description": "(TB) Number of bases a batter reached safely without the help of an error or an attempted\n    play on another runner. HR * 4 + 3B * 3 + 2B * 2 + (H - HR - 3B - 2B)", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "strikeouts": {"name": "strikeouts", "description": "(K, SO) Number of times a batter struck out. This includes plays in which a batter reached base on\n    a dropped third strike.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "walks": {"name": "walks", "description": "(BB, occasionally W) Number of times a batter reaches base on called balls out of the strike zone\n    (Four balls for all of MLB history after the 1880s).", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "intentional_walks": {"name": "intentional_walks", "description": "(IBB, occasionally IW) Number of times a batter was intentionally walked. This number may be missing or undercounted\n    in earlier years, as intentional walks were not officially tracked until 1955.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "hit_by_pitches": {"name": "hit_by_pitches", "description": "(HBP) Number of times a batter was awarded first base after being hit by a pitch.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "sacrifice_hits": {"name": "sacrifice_hits", "description": "(SH) Number of times a batter performed a sacrifice bunt to advance another runner.\n    A bunt may count as a sacrifice even if the batter reaches base safely.\n    Unsuccessful attempts are not counted, nor are non-sacrifice bunts.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "sacrifice_flies": {"name": "sacrifice_flies", "description": "(SF) Number of times a batter hit a fly ball that resulted in an out (or error),\n    but allowed a runner to score on the throw.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "reached_on_errors": {"name": "reached_on_errors", "description": "(ROE) Number of times a batter reached base safely due to an error.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "reached_on_interferences": {"name": "reached_on_interferences", "description": "Number of times a batter was awarded first base for being illegally hindered\n    by a fielder, usually the catcher.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "inside_the_park_home_runs": {"name": "inside_the_park_home_runs", "description": "Number of times a batter hit a home run without the ball leaving the field of play.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "ground_rule_doubles": {"name": "ground_rule_doubles", "description": "Number of times a batter was awarded a double on a ball that went out of play after\n    bouncing in fair territory.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "infield_hits": {"name": "infield_hits", "description": "Number of times a batter reached base safely on a hit that did not reach the outfield.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "on_base_opportunities": {"name": "on_base_opportunities", "description": "Number of plate appearances in which a batter either did or did not reach base,\n    as defined by the formula for on-base percentage. Note that this is very similar to but different\n    from plate_appearances, as it does not include sacrifice hits or interference.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "on_base_successes": {"name": "on_base_successes", "description": "Number of hits, walks, and hit by pitches that serves as the numerator in the formula\n    for on-base percentage.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "runs_batted_in": {"name": "runs_batted_in", "description": "(RBI) Number of runs that scored as a result of a batter's plate appearance. This is usually\n    the number of runs that scored on the play, but errors and other similar cases may cause\n    some runs not to be credited to the batter. Scorerkeeper discretion occasionally causes differences\n    between the number in the database and the official MLB total.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "grounded_into_double_plays": {"name": "grounded_into_double_plays", "description": "(GIDP) Number of times a batter grounded into a double play. This is the conventional way\n    to record a double play and as such is an important statistic on its own. Games without\n    play-by-play accounts don't have data on the trajectory of the double play, so\n    this number is not populated for those games.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "double_plays": {"name": "double_plays", "description": "(DP) Number of times a play ended in two outs being recorded.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "triple_plays": {"name": "triple_plays", "description": "(TP) Number of times a play ended in three outs being recorded.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batting_outs": {"name": "batting_outs", "description": "Number of outs that \"should\" have been recorded as a result of a batter's plate apperances.\n    A batting out is still counted if no actual out is recorded on an error or a failed fielder's choice.\n    Outs on baserunners (including the batter trying to stretch a hit) do not count here.\n    Grounded-into-double-plays count as two outs, but other types of double plays do not (the \n    idea here is that the baserunner is responsible on other types of double plays).\n    Unofficial stat, but designed here to be generally useful in determining rates of official stats.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "balls_in_play": {"name": "balls_in_play", "description": "Number of plate appearances that resulted in a live\n    ball on the field of play. The difference between this and batted_balls is that\n    balls_in_play does not include out-of-the-park home runs. This distinction is important\n    for calculating batting average on balls in play, a stat designed to isolate at_bats\n    in which the defense was involved.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "balls_batted": {"name": "balls_batted", "description": "Number of plate appearances that ended in a fair ball or a foul flyout. This is equivalent\n    to balls_in_play + home_runs, and may be a more useful denominator for \"in play\" stats depending\n    on the context.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "trajectory_fly_ball": {"name": "trajectory_fly_ball", "description": "(FB) Number of plate appearances that ended in a fly ball. A fly ball is defined here\n    as the subset of balls hit in the air that are neither line drives nor pop flies.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "trajectory_ground_ball": {"name": "trajectory_ground_ball", "description": "(GB) Number of plate appearances that ended in a ground ball, also called a grounder. A ground ball is defined\n    here to only include swings, not bunts, although older data may not have a proper distinction. Ground\n    balls tend to be easy to distinguish between other types of contact, but Statcast-era data defines it\n    as balls with a launch angle under 10 degrees.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "trajectory_line_drive": {"name": "trajectory_line_drive", "description": "(LD) Number of plate appearances that ended in a line drive, also called a liner. Line drives are distiguished\n    from fly balls by some combination of angle and exit velocity. In the Statcast era, line drives\n    are defined purely in terms of launch angle (10-25 degrees), but just about any colloquial definition\n    involves hard-hitness as well. The line-drive-fly-ball distinction is by far the most arbitrary\n    and subjective trajectory categorization. Many scorekeepers never included line drives, while others counted\n    any successful in-play air-hit as a line drive. Nevertheless, the distinction is a crucial one,\n    as line drives are by far the most likely type of batted ball to result in a hit (even when they are not hit very hard).", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "trajectory_pop_up": {"name": "trajectory_pop_up", "description": "(sometimes PU)  Number of plate appearances that ended in a pop-up, also called a pop fly.\n    Pop-ups are distinguished from fly balls in that they are hit at a higher angle, tend to be\n    hit with less exit velocity, and (as a result) end up in the infield or shallow outfield. Before\n    Statcast-era standardization, the distinction between a fly ball and a pop-up was a matter of\n    scorerkeeper judgement, and many unofficial scorekeepers did not distinguish between the two.\n    Statcast determines pop flies exclusively by angle (> 50 degrees).", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "trajectory_unknown": {"name": "trajectory_unknown", "description": "Number of plate appearances ending in a batted ball whose trajectory was not recorded and cannot\n    be reliably deduced from context. This number includes balls that we know were hit in the air,\n    but do not know which kind of air ball (FB/PU/LD) they were (see trajectory_broad_classification_unknown\n    for a number that does not include those balls). The strong majority of batted balls prior to 1988\n    fall into this category, especially hits.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "trajectory_known": {"name": "trajectory_known", "description": "Number of plate appearances ending in a batted ball whose trajectory was recorded or was reliably deduced\n    from the context. An example of reliable deduction is an at-bat with the fielding play 6-3, which\n    almost always is a ground ball fielded by the shortstop and thrown to the first baseman. See\n    `calc_batted_ball_type` for the deduction logic.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "trajectory_broad_air_ball": {"name": "trajectory_broad_air_ball", "description": "Number of plate appearances that ended in an air ball (a fly ball, line drive, or pop-up).\n    Because it is much easier to deduce that a ball was hit in the air than it is to deduce the exact\n    trajectory, this number field is more reliably populated than any of its three consituent parts.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "trajectory_broad_ground_ball": {"name": "trajectory_broad_ground_ball", "description": "Same as `trajectory_ground_ball`.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "trajectory_broad_unknown": {"name": "trajectory_broad_unknown", "description": "Number of plate appearances ending in a batted ball whose trajectory was not recorded and cannot\n    be reliably deduced from context, even to the extent of knowing whether it was a ground ball or an air ball.\n    This will include a disproportionate number of hits, which are more likely to be missing trajectory data\n    and harder to make deductions about.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "trajectory_broad_known": {"name": "trajectory_broad_known", "description": "Number of plate appearances ending in a batted ball whose ground/air status was recorded or\n    reliably deduced from the context. This is the sum of `trajectory_broad_air_ball` and\n    `trajectory_broad_ground_ball`. Outs in play have excellent coverage historically here,\n    even for older games.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "bunts": {"name": "bunts", "description": "Number of plate appearances ending in an in-play bunt.\n    This does not include strikeouts on foul bunts with two strikes.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_distance_plate": {"name": "batted_distance_plate", "description": "Number of plate appearances in which the ball was batted to catcher's area around home plate.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_distance_infield": {"name": "batted_distance_infield", "description": "Number of plate appearances in which the ball was batted to the infield (not including the catcher).\n    All ground balls are included here, regardless of whether they made it through to the outfield.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_distance_outfield": {"name": "batted_distance_outfield", "description": "Number of plate appearances in which the ball was hit on the fly to the outfield.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_distance_unknown": {"name": "batted_distance_unknown", "description": "Number of plate appearances in which the ball was hit, but the distance was not recorded\n    and cannot be reliably deduced from context.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_distance_known": {"name": "batted_distance_known", "description": "Number of plate appearances in which the ball was hit, and the distance was either\n    recorded or reliably deduced from context.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "fielded_by_battery": {"name": "fielded_by_battery", "description": "Number of plate appearances in which the ball was fielded by the pitcher or catcher.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "fielded_by_infielder": {"name": "fielded_by_infielder", "description": "Number of plate appearances in which the ball was fielded by an infielder.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "fielded_by_outfielder": {"name": "fielded_by_outfielder", "description": "Number of plate appearances in which the ball was fielded by an outfielder.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "fielded_by_known": {"name": "fielded_by_known", "description": "Number of plate appearances in which the ball was fielded by a player, and the player was recorded.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "fielded_by_unknown": {"name": "fielded_by_unknown", "description": "Number of plate appearances in which the ball was fielded by a player, but the player was not recorded.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_angle_left": {"name": "batted_angle_left", "description": "Number of plate appearances in which the ball was batted to the left side of the field.\n    This includes balls where the location was not recorded, but the fielder is on the left side\n    (3B, LF). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_angle_right": {"name": "batted_angle_right", "description": "Number of plate appearances in which the ball was batted to the right side of the field.\n    This includes balls where the location was not recorded, but the fielder is on the right side\n    (1B, RF). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_angle_middle": {"name": "batted_angle_middle", "description": "Number of plate appearances in which the ball was batted to the middle of the field.\n    This includes balls where the location was not recorded, but the fielder is up the middle\n    (P, 2B, SS, CF). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_angle_unknown": {"name": "batted_angle_unknown", "description": "Number of plate appearances in which the ball was batted, but we don't have enough location\n    to determine the spray angle.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_angle_known": {"name": "batted_angle_known", "description": "Number of plate appearances in which the ball was hit and we have enough location to determine\n    the spray angle.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_location_plate": {"name": "batted_location_plate", "description": "Number of plate appearances in which the ball was batted to the catcher's area around home plate.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_location_right_infield": {"name": "batted_location_right_infield", "description": "Number of plate appearances in which the ball was batted to the right side of the infield.\n    This includes balls where the location was not recorded, but the fielder is on the right side\n    (1B). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_location_middle_infield": {"name": "batted_location_middle_infield", "description": "Number of plate appearances in which the ball was batted to the middle of the infield.\n    This includes balls where the location was not recorded, but the fielder is up the middle\n    (P, SS, 2B). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_location_left_infield": {"name": "batted_location_left_infield", "description": "Number of plate appearances in which the ball was batted to the left side of the infield.\n    This includes balls where the location was not recorded, but the fielder is on the left side\n    (3B). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_location_left_field": {"name": "batted_location_left_field", "description": "Number of plate appearances in which the ball was batted to the left side of the outfield.\n    This includes balls where the location was not recorded, but the fielder is on the left side\n    (LF). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_location_center_field": {"name": "batted_location_center_field", "description": "Number of plate appearances in which the ball was batted to the center of the outfield.\n    This includes balls where the location was not recorded, but the fielder is up the middle\n    (CF). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_location_right_field": {"name": "batted_location_right_field", "description": "Number of plate appearances in which the ball was batted to the right side of the outfield.\n    This includes balls where the location was not recorded, but the fielder is on the right side\n    (RF, CF). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_location_unknown": {"name": "batted_location_unknown", "description": "Number of plate appearances in which the ball was batted, but we don't have enough location\n    to determine the specific location.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_location_known": {"name": "batted_location_known", "description": "Number of plate appearances in which the ball was batted and we have enough location to determine\n    the specific location.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_balls_pulled": {"name": "batted_balls_pulled", "description": "Number of plate appearances in which the ball was pulled (the left side for right-handed batters, the right side for left-handed batters).", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_balls_opposite_field": {"name": "batted_balls_opposite_field", "description": "Number of plate appearances in which the ball was hit to the opposite field (the right side for right-handed batters, the left side for left-handed batters).", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "runs": {"name": "runs", "description": "(R) Number of runs scored.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "times_reached_base": {"name": "times_reached_base", "description": "Number of times a batter ended a plate appearance on base, even if it was through a fielder's choice, error, etc.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "stolen_bases": {"name": "stolen_bases", "description": "(SB) Number of successful stolen bases.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "caught_stealing": {"name": "caught_stealing", "description": "(CS) Number of times a runner was caught stealing.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "picked_off": {"name": "picked_off", "description": "(PO, at risk of confusion with putouts) Number of times a runner was picked off.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "picked_off_caught_stealing": {"name": "picked_off_caught_stealing", "description": "(POCS) Number of times a runner was picked off, but instead of going back to the bag,\n    tried to run to the next base and was put out.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "outs_on_basepaths": {"name": "outs_on_basepaths", "description": "Number of outs recorded by a baserunner (this is not mutually exclusive with outs recorded by the batter\n    in cases like failed advances or dropped third-strike putouts).", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "unforced_outs_on_basepaths": {"name": "unforced_outs_on_basepaths", "description": "Number of outs recorded by a baserunner that was not the result of a force on the runner.\n    \"Unforced\" is meant to be in both the literal sense of a force not being in play, but also\n    the figurative sense of the runner being responsible for the out. The latter may or may not\n    be the best interpretation of any given play, but it is useful to assign responsibility to the\n    runner by default in those contexts.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "outs_avoided_on_errors": {"name": "outs_avoided_on_errors", "description": "Number of times that a baserunner would have been out, but an error allowed them to remain\n    on the basepaths (either staying put or advancing).", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "advances_on_wild_pitches": {"name": "advances_on_wild_pitches", "description": "(WP) Number of times a baserunner advanced on a wild pitch.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "advances_on_passed_balls": {"name": "advances_on_passed_balls", "description": "(PB) Number of times a baserunner advanced on a passed ball.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "advances_on_balks": {"name": "advances_on_balks", "description": "(sometimes BK) Number of times a baserunner advanced on a balk.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "advances_on_unspecified_plays": {"name": "advances_on_unspecified_plays", "description": "Number of times a baserunner advanced for an unspecified reason.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "advances_on_defensive_indifference": {"name": "advances_on_defensive_indifference", "description": "(DI) Number of times a baserunner advanced on defensive indifference.\n   Defensive indifference is a judgement call by the official scorer that the defense\n   did not try to stop the runner from stealing a base. This usually happens\n   when the defense has a lead late in the game.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "advances_on_errors": {"name": "advances_on_errors", "description": "Number of times a baserunner advanced on an error.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "plate_appearances_while_on_base": {"name": "plate_appearances_while_on_base", "description": "Number of plate appearances in which the baserunner started on 1st, 2nd, or 3rd base.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "balls_in_play_while_running": {"name": "balls_in_play_while_running", "description": "Number of balls in play while either batting or on base.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "balls_in_play_while_on_base": {"name": "balls_in_play_while_on_base", "description": "Number of balls in play in which the baserunner started on 1st, 2nd, or 3rd base.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batter_total_bases_while_running": {"name": "batter_total_bases_while_running", "description": "Number of total bases accumulated by the batter while the baserunner was running, including the batter.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batter_total_bases_while_on_base": {"name": "batter_total_bases_while_on_base", "description": "Number of total bases accumulated by the batter while the baserunner was on base, excluding the batter.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "extra_base_advance_attempts": {"name": "extra_base_advance_attempts", "description": "Number of times a baserunner tried to advance by a greater number of bases than the batter.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "bases_advanced": {"name": "bases_advanced", "description": "Number of bases advanced by a baserunner, including the batter.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "bases_advanced_on_balls_in_play": {"name": "bases_advanced_on_balls_in_play", "description": "Number of bases advanced by a baserunner on a ball in play, including the batter.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "surplus_bases_advanced_on_balls_in_play": {"name": "surplus_bases_advanced_on_balls_in_play", "description": "Number of bases advanced by a baserunner on a ball in play minus the number of total bases\n    accumulated by the batter on the same play. For example, if a runner goes from first to third\n    on a single, this number is 1 (3 - 2). If a runner only goes from second to third on a double,\n    this number is -1 (1 - 2).", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "outs_on_extra_base_advance_attempts": {"name": "outs_on_extra_base_advance_attempts", "description": "Number of times a baserunner was out attempting to advance\n    by a greater number of bases than the batter. This includes\n    batters who were put out trying to stretch a hit to the next base.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "pitches": {"name": "pitches", "description": "Number of pitches thrown.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "swings": {"name": "swings", "description": "Number of pitches that were swung at.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "swings_with_contact": {"name": "swings_with_contact", "description": "Number of pitches that were swung at and made contact.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "strikes": {"name": "strikes", "description": "Number of pitches that were called or swinging strikes.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "strikes_called": {"name": "strikes_called", "description": "Number of pitches that were called strikes.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "strikes_swinging": {"name": "strikes_swinging", "description": "Number of pitches that were swung on and missed (mutually exclusive\n    with `swings_with_contact`, which also count as strikes).", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "strikes_foul": {"name": "strikes_foul", "description": "Number of pitches that were fouled off.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "strikes_foul_tip": {"name": "strikes_foul_tip", "description": "Number of pitches that were fouled off and caught by the catcher for strike three.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "strikes_in_play": {"name": "strikes_in_play", "description": "Number of pitches that were swung on and batted into play.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "strikes_unknown": {"name": "strikes_unknown", "description": "Number of pitches that we know were strikes, but don't know what kind.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "balls": {"name": "balls", "description": "Number of pitches that were called balls.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "balls_called": {"name": "balls_called", "description": "Number of pitches that were called balls (as opposed to automatic balls that were\n    not actually thrown).", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "balls_intentional": {"name": "balls_intentional", "description": "Number of pitches that were called balls as part of an intentional walk.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "balls_automatic": {"name": "balls_automatic", "description": "Number of pitches that were called balls on an automatic walk or a delay penalty.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "unknown_pitches": {"name": "unknown_pitches", "description": "Number of pitches that were thrown without any other information recorded.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "pitchouts": {"name": "pitchouts", "description": "Number of pitches that were thrown as pitchouts. A pitchout is a pitch that is thrown\n    intentionally very far outside in order to make it easier for the catcher to throw out\n    a baserunner who is likely to steal.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "pitcher_pickoff_attempts": {"name": "pitcher_pickoff_attempts", "description": "Number of times the pitcher attempted to pick off a baserunner.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "catcher_pickoff_attempts": {"name": "catcher_pickoff_attempts", "description": "Number of times the catcher attempted to pick off a baserunner.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "pitches_blocked_by_catcher": {"name": "pitches_blocked_by_catcher", "description": "Number of pitches that were blocked by the catcher.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "pitches_with_runners_going": {"name": "pitches_with_runners_going", "description": "Number of pitches that were thrown while a baserunner was on the move\n    (as part of a steal or hit-and-run).", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "passed_balls": {"name": "passed_balls", "description": "(PB) Number of passed balls.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "wild_pitches": {"name": "wild_pitches", "description": "(WP) Number of wild pitches.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "balks": {"name": "balks", "description": "(BK) Number of balks.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "left_on_base": {"name": "left_on_base", "description": "(LOB) At an individual level, the number of baserunners that a batter failed to advance during a plate appearance.\n    At a team level, the number of baserunners remaining on base at the end of an inning. In order to count, baserunners\n    must not have scored or been put out.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "left_on_base_with_two_outs": {"name": "left_on_base_with_two_outs", "description": "(LOB) At an individual level, the number of baserunners that remain on base (unscored and not out) after a plate appearance that ends with the third out recorded. At a team level, this is interchangable with `left_on_base`.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "stolen_bases_second": {"name": "stolen_bases_second", "description": "Number of successful steals of second base.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "stolen_bases_third": {"name": "stolen_bases_third", "description": "Number of successful steals of third base.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "stolen_bases_home": {"name": "stolen_bases_home", "description": "Number of successful steals of home.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "caught_stealing_second": {"name": "caught_stealing_second", "description": "Number of times a runner was caught stealing second base.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "caught_stealing_third": {"name": "caught_stealing_third", "description": "Number of times a runner was caught stealing third base.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "caught_stealing_home": {"name": "caught_stealing_home", "description": "Number of times a runner was caught stealing home.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "stolen_base_opportunities": {"name": "stolen_base_opportunities", "description": "Number of events in which a runner had an opportunity to steal a base as the\n    lead basestealer OR the runner recorded a SB/CS in any situation.\n    \"Opportunity\" is defined as a situation in which the next base\n    was empty at the start of the event (not including the batter).\n    No-play events excluded, but events without plate appearances are included.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "stolen_base_opportunities_second": {"name": "stolen_base_opportunities_second", "description": "Number of opportunities to steal second base (see `stolen_base_opportunities` for detailed criteria).", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "stolen_base_opportunities_third": {"name": "stolen_base_opportunities_third", "description": "Number of opportunities to steal third base (see `stolen_base_opportunities` for detailed criteria).", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "stolen_base_opportunities_home": {"name": "stolen_base_opportunities_home", "description": "Number of opportunities to steal home (see `stolen_base_opportunities` for detailed criteria).", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "picked_off_first": {"name": "picked_off_first", "description": "Number of times a runner was picked off first base.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "picked_off_second": {"name": "picked_off_second", "description": "Number of times a runner was picked off second base.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "picked_off_third": {"name": "picked_off_third", "description": "Number of times a runner was picked off third base.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "times_force_on_runner": {"name": "times_force_on_runner", "description": "Number of events that a force existed on the runner's next base.\n    The batter is counted as having a force on them (at first).\n    No-play events excluded, but events without plate appearances are included.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "times_lead_runner": {"name": "times_lead_runner", "description": "Number of events that a runner was the lead runner on a play\n    (the runner who is furthest along the basepaths).\n    Batter is never counted as the lead runner. No-play events excluded,\n    but events without plate appearances are included.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "times_next_base_empty": {"name": "times_next_base_empty", "description": "Number of events that the runner's next base was empty.\n    The batter is counted on events where first base is empty.\n    No-play events excluded, but events without plate appearances are included.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "extra_base_chances": {"name": "extra_base_chances", "description": "", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "extra_bases_taken": {"name": "extra_bases_taken", "description": "", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batting_average": {"name": "batting_average", "description": "(AVG, BA) Hits divided by at bats. Historically speaking, the single most well-known hitting statistic.\n    It retains much of its popularity and cultural significance today, if not its importance: the\n    \"batting title\" goes to the player with the highest batting average.\n    While batting average is rightly maligned for the limited picture it captures of a player's offensive\n    contribution, it's still a nice object of study when learning about statistical inference.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "on_base_percentage": {"name": "on_base_percentage", "description": "(OBP) Measures a player's ability to get on base. It is calculated as (H + BB + HBP)/(AB + BB + HBP + SF),\n    which is confusingly a bit different from on-base events per plate appearance. We have `on_base_successes`\n    and `on_base_opportunities` to make the OBP calculation simpler. The modern analogue to batting average,\n    both in what it tries to measure and in its cultural significance.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "slugging_percentage": {"name": "slugging_percentage", "description": "(SLG) Total bases per at bat. More of an average than a percentage, but the name has stuck (though\n    you'll also hear \"slugging average\"). The simplest and most well-known measure of the \"advancement factor\"\n    of a player's offensive ability.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "on_base_plus_slugging": {"name": "on_base_plus_slugging", "description": "(OPS) On-base percentage plus slugging percentage. Popularized in the 1980s, OPS is a simple way to\n    combine the two aspects of a player's hitting ability. In terms of its overall precision, it is easily surpassed\n    by other metrics, but it remains hard to beat for its economy of calculation and expression.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "isolated_power": {"name": "isolated_power", "description": "(ISO) Slugging percentage minus batting average, or the average number of extra bases per at bat.\n    An intuitive expression of a player's raw power or ability to push runners around the bases.\n    Less indicative of overall ability than slugging percentage, but more precise in what it tries to measure.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "secondary_average": {"name": "secondary_average", "description": "(SecA) A statistic invented by Bill James that measures a player's ability to gain bases by means independent\n    of batting average. Its formula is (TB - H + BB + SB - CS)/(AB). A good way to answer the question of which players\n    would be most underrated by only looking at their batting averages. Also a good way to show how well you can understand\n    a player's offensive ability without taking their batting average into account.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "batting_average_on_balls_in_play": {"name": "batting_average_on_balls_in_play", "description": "(BABIP) A measure of the rate at which fieldable balls go for hits. It is calculated as (H - HR)/(AB - K - HR + SF).\n    Pitchers are generally (but controversially) thought to have little control over balls in play, so a high BABIP\n    is a good sign that that they have been unlucky or have played in front of a poor defense. Most pitchers do have some\n    \"true\" BABIP ability that is different from the league average, but the difference is usually much smaller than the year-to-year\n    variance in their actual BABIP. In rare cases, pitchers can have such a strong influence on balls in play that their\n    contribution is measurable in smaller sample sizes. For pitchers in the dead-ball era and earlier, it makes less sense\n    to treat BABIP as luck because a much higher percentage of at-bats ended in balls in play, and pitchers were more focused\n    on getting outs by inducing weak contact without having to worry about home runs.\n\n    All of the above is also true for hitters, but to a much lesser extent, as hitters face different defenses, control\n    their ability to beat out grounders for infield hits, and generally have more control over the quality of contact they\n    make. BABIP can also be misleading for hitters because it excludes home runs, so Barry Bonds ends up having a lower BABIP\n    even though there were occasional eyewitness reports of his making solid contact.\n\n    BABIP was invented by Voros McCracken around the turn of the millenium, and it remains the most prominent\n    example of a statistic that tracks player luck as opposed to skill or performance.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "home_run_rate": {"name": "home_run_rate", "description": "(HR/PA) Home runs per plate appearance.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "walk_rate": {"name": "walk_rate", "description": "(BB/PA) Walks per plate appearance.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "strikeout_rate": {"name": "strikeout_rate", "description": "(K/PA) Strikeouts per plate appearance.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "stolen_base_percentage": {"name": "stolen_base_percentage", "description": "(SB%) The rate of stolen base attempts that are successful. Calculated as SB/(SB + CS).", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "event_coverage_rate": {"name": "event_coverage_rate", "description": "", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "known_trajectory_rate_outs": {"name": "known_trajectory_rate_outs", "description": "Rate of outs in play for which we know the detailed trajectory of the batted ball.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "known_trajectory_rate_hits": {"name": "known_trajectory_rate_hits", "description": "Rate of hits for which we know the detailed trajectory of the batted ball.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "known_trajectory_rate": {"name": "known_trajectory_rate", "description": "Overall rate of batted balls for which we know the detailed trajectory.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "known_trajectory_broad_rate_outs": {"name": "known_trajectory_broad_rate_outs", "description": "Overall rate of outs in play for which we know whether\n    the ball was hit in the air or on the ground.\n    This is generally very high even for the oldest play-by-play data.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "known_trajectory_broad_rate_hits": {"name": "known_trajectory_broad_rate_hits", "description": "Overall rate of hits for which we know whether\n    the ball was hit in the air or on the ground.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "known_trajectory_broad_rate": {"name": "known_trajectory_broad_rate", "description": "Overall rate of batted balls for which we know whether\n    the ball was hit in the air or on the ground.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "known_trajectory_out_hit_ratio": {"name": "known_trajectory_out_hit_ratio", "description": "The ratio of `known_trajectory_rate_outs` to `known_trajectory_rate_hits`.\n    This ratio is generally very high for years without complete batted ball data,\n    which makes it useful for estimating quantities that would be affected by\n    the selection bias.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "known_trajectory_broad_out_hit_ratio": {"name": "known_trajectory_broad_out_hit_ratio", "description": "The ratio of `known_trajectory_broad_rate_outs` to `known_trajectory_broad_rate_hits`.\n    This ratio is generally very high for years without complete batted ball data,\n    which makes it useful for estimating quantities that would be affected by\n    the selection bias.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "air_ball_rate_outs": {"name": "air_ball_rate_outs", "description": "The rate of outs in play that were fly balls, pop-ups, or line drives.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "ground_ball_rate_outs": {"name": "ground_ball_rate_outs", "description": "The rate of outs in play that were ground balls.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "ground_air_out_ratio": {"name": "ground_air_out_ratio", "description": "The ratio of `ground_ball_rate_outs` to `air_ball_rate_outs`.\n    This is a useful metric by itself because it is unaffected by\n    the higher percentage of missing data on hits, so it is probably\n    a more accurate measure of overall ground ball rate than `ground_ball_rate`\n    itself for most seasons.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "air_ball_hit_rate": {"name": "air_ball_hit_rate", "description": "The rate of hits in play that were fly balls, pop-ups, or line drives.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "ground_ball_hit_rate": {"name": "ground_ball_hit_rate", "description": "The rate of hits in play that were ground balls.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "ground_air_hit_ratio": {"name": "ground_air_hit_ratio", "description": "The ratio of `ground_ball_hit_rate` to `air_ball_hit_rate`.\n    Difference between this and `ground_air_out_ratio` is potentially interesting,\n    but will be noisy for older years.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "fly_ball_rate": {"name": "fly_ball_rate", "description": "Of all batted_balls for which we know the trajectory,\n    The rate that were fly balls.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "line_drive_rate": {"name": "line_drive_rate", "description": "Of all batted_balls for which we know the trajectory,\n    The rate that were line drives.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "pop_up_rate": {"name": "pop_up_rate", "description": "Of all batted_balls for which we know the trajectory,\n    The rate that were pop-ups.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "ground_ball_rate": {"name": "ground_ball_rate", "description": "Of all batted_balls for which we know the trajectory,\n    The rate that were ground balls.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "coverage_weighted_air_ball_batting_average": {"name": "coverage_weighted_air_ball_batting_average", "description": "The batting average of batted_balls that were fly balls, pop-ups, or line drives,\n    weighted according to the `known_trajectory_broad_out_hit_ratio`. This is an attempt\n    to measure trajectory-specific BABIP even in years where trajectory data is rarely\n    present for hits. While it handles that specific bias, it is still likely to be noisy\n    because of the small sample size of known-trajectory balls.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "coverage_weighted_ground_ball_batting_average": {"name": "coverage_weighted_ground_ball_batting_average", "description": "The batting average of batted_balls that were ground balls,\n    weighted according to the `known_trajectory_broad_out_hit_ratio`. This is an attempt\n    to measure trajectory-specific BABIP even in years where trajectory data is rarely\n    present for hits. While it handles that specific bias, it is still likely to be noisy\n    because of the small sample size of known-trajectory balls.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "coverage_weighted_fly_ball_batting_average": {"name": "coverage_weighted_fly_ball_batting_average", "description": "The batting average of batted_balls that were fly balls,\n    weighted according to the `known_trajectory_out_hit_ratio`. This is an attempt\n    to measure trajectory-specific BABIP even in years where trajectory data is rarely\n    present for hits. It is still vulnerable to the variance and arbitrariness with which\n    historical scorekeepers differentiated fly balls from line drives and pop-ups.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "coverage_weighted_line_drive_batting_average": {"name": "coverage_weighted_line_drive_batting_average", "description": "The batting average of batted_balls that were line drives,\n    weighted according to the `known_trajectory_out_hit_ratio`. This is an attempt\n    to measure trajectory-specific BABIP even in years where trajectory data is rarely\n    present for hits. It is still vulnerable to the variance and arbitrariness with which\n    historical scorekeepers differentiated line drives from other air outs, which was\n    extremely high all the way up to the Statcast era.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "coverage_weighted_pop_up_batting_average": {"name": "coverage_weighted_pop_up_batting_average", "description": "The batting average of batted_balls that were pop-ups,\n    weighted according to the `known_trajectory_out_hit_ratio`. This is an attempt\n    to measure trajectory-specific BABIP even in years where trajectory data is rarely\n    present for hits. It is still vulnerable to the variance and arbitrariness with which\n    historical scorekeepers differentiated pop-ups from other air outs.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "known_angle_rate_outs": {"name": "known_angle_rate_outs", "description": "Rate of batted-ball outs for which we know (or have a good proxy for)\n    whether the ball was hit to the left, right, or middle of the field.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "known_angle_rate_hits": {"name": "known_angle_rate_hits", "description": "Rate of batted-ball hits for which we know (or have a good proxy for)\n    whether the ball was hit to the left, right, or middle of the field.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "known_angle_rate": {"name": "known_angle_rate", "description": "Rate of batted balls for which we know (or have a good proxy for)\n    whether the ball was hit to the left, right, or middle of the field.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "known_angle_out_hit_ratio": {"name": "known_angle_out_hit_ratio", "description": "The ratio of `known_angle_rate_outs` to `known_angle_rate_hits`.\n    This ratio is generally very high for years without complete batted ball data,\n    which makes it useful for estimating quantities that would be affected by\n    the selection bias. Angle is generally better known than location itself, because\n    when a batter gets a hit, we often know which outfielder fielded the ball even\n    though we don't know how it got there.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "angle_left_rate_outs": {"name": "angle_left_rate_outs", "description": "The rate of batted-ball outs that were hit to the left side of the field.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "angle_left_rate_hits": {"name": "angle_left_rate_hits", "description": "The rate of hits that were hit to the left side of the field.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "angle_left_rate": {"name": "angle_left_rate", "description": "The overall rate of batted balls that were hit to the left side of the field.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "coverage_weighted_angle_left_batting_average": {"name": "coverage_weighted_angle_left_batting_average", "description": "The batting average on batted balls that were hit to the left side of the field,\n    weighted according to the `known_angle_out_hit_ratio`. This is an attempt\n    to measure angle-specific BABIP even in years where angle data is rarely\n    present for hits.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "angle_right_rate_outs": {"name": "angle_right_rate_outs", "description": "The rate of batted-ball outs that were hit to the right side of the field.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "angle_right_rate_hits": {"name": "angle_right_rate_hits", "description": "The rate of hits that were hit to the right side of the field.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "angle_right_rate": {"name": "angle_right_rate", "description": "The overall rate of batted balls that were hit to the right side of the field.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "coverage_weighted_angle_right_batting_average": {"name": "coverage_weighted_angle_right_batting_average", "description": "The batting average on batted balls that were hit to the right side of the field,\n    weighted according to the `known_angle_out_hit_ratio`. This is an attempt\n    to measure angle-specific BABIP even in years where angle data is rarely\n    present for hits.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "angle_middle_rate_outs": {"name": "angle_middle_rate_outs", "description": "The rate of batted-ball outs that were hit to the middle of the field.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "angle_middle_rate_hits": {"name": "angle_middle_rate_hits", "description": "The rate of hits that were hit to the middle of the field.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "angle_middle_rate": {"name": "angle_middle_rate", "description": "The overall rate of batted balls that were hit to the middle of the field.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "coverage_weighted_angle_middle_batting_average": {"name": "coverage_weighted_angle_middle_batting_average", "description": "The batting average on batted balls that were hit to the middle of the field,\n    weighted according to the `known_angle_out_hit_ratio`. This is an attempt\n    to measure angle-specific BABIP even in years where angle data is rarely\n    present for hits.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "pulled_rate_outs": {"name": "pulled_rate_outs", "description": "`angle_right_rate_outs` for lefty batters\n    and `angle_left_rate_outs` for righty batters.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "pulled_rate_hits": {"name": "pulled_rate_hits", "description": "`angle_right_rate_hits` for lefty batters\n    and `angle_left_rate_hits` for righty batters.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "pulled_rate": {"name": "pulled_rate", "description": "`angle_right_rate` for lefty batters\n    and `angle_left_rate` for righty batters.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "coverage_weighted_pulled_batting_average": {"name": "coverage_weighted_pulled_batting_average", "description": "`coverage_weighted_angle_right_batting_average` for lefty batters\n    and `coverage_weighted_angle_left_batting_average` for righty batters.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "opposite_field_rate_outs": {"name": "opposite_field_rate_outs", "description": "`angle_left_rate_outs` for lefty batters\n    and `angle_right_rate_outs` for righty batters.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "opposite_field_rate_hits": {"name": "opposite_field_rate_hits", "description": "`angle_left_rate_hits` for lefty batters\n    and `angle_right_rate_hits` for righty batters.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "opposite_field_rate": {"name": "opposite_field_rate", "description": "`angle_left_rate` for lefty batters\n    and `angle_right_rate` for righty batters.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "coverage_weighted_opposite_field_batting_average": {"name": "coverage_weighted_opposite_field_batting_average", "description": "`coverage_weighted_angle_left_batting_average` for lefty batters\n    and `coverage_weighted_angle_right_batting_average` for righty batters.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "stolen_base_attempt_rate_second": {"name": "stolen_base_attempt_rate_second", "description": "The rate of stolen base opportunities taken\n    when the runner was on first base (trying to steal second).\n    See `stolen_base_opportunities` for the definition.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "stolen_base_attempt_rate_third": {"name": "stolen_base_attempt_rate_third", "description": "The rate of stolen base opportunities taken\n    when the runner was on second base (trying to steal third).\n    See `stolen_base_opportunities` for the definition.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "stolen_base_attempt_rate_home": {"name": "stolen_base_attempt_rate_home", "description": "The rate of stolen base opportunities taken\n    when the runner was on third base (trying to steal home).\n    See `stolen_base_opportunities` for the definition.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "unforced_out_rate": {"name": "unforced_out_rate", "description": "The rate of appearances on the basepaths that ended in an unforced out.\n    See `unforced_outs_on_basepaths` for the definition.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "pitch_strike_rate": {"name": "pitch_strike_rate", "description": "The rate of pitches that were strikes.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "pitch_contact_rate": {"name": "pitch_contact_rate", "description": "The rate of pitches where some kind of contact was made.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "pitch_swing_rate": {"name": "pitch_swing_rate", "description": "The rate of pitches where the batter swung (and either made\n    contact or missed).", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "pitch_ball_rate": {"name": "pitch_ball_rate", "description": "The rate of pitches that were balls.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "pitch_swing_and_miss_rate": {"name": "pitch_swing_and_miss_rate", "description": "The rate of pitches where the batter swung and missed.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "pitch_foul_rate": {"name": "pitch_foul_rate", "description": "The rate of pitches that were fouled off.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "pitched_called_strike_rate": {"name": "pitched_called_strike_rate", "description": "The rate of pitches that were called strikes.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "pitch_data_coverage_rate": {"name": "pitch_data_coverage_rate", "description": "The rate of plate appearances for which we have pitch-by-pitch data.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}}, "meta": {"primary_keys": ["player_id", "season", "league"]}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "baseball_computer://models/metrics/metrics_player_season_league_offense.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "models", "contract": {"enforced": true}, "meta": {"primary_keys": ["player_id", "season", "league"]}}, "created_at": 1702285031.6629498, "relation_name": "\"bc\".\"main_models\".\"metrics_player_season_league_offense\"", "raw_code": "{{  metric_table_generator(\"offense\", [\"player_id\", \"season\", \"league\"], agg_type=\"player\", regular_season_only=True)  }}", "language": "sql", "refs": [{"name": "event_offense_stats", "package": null, "version": null}, {"name": "seed_franchises", "package": null, "version": null}, {"name": "player_team_season_offense_stats", "package": null, "version": null}, {"name": "player_team_season_offense_stats", "package": null, "version": null}, {"name": "seed_franchises", "package": null, "version": null}, {"name": "team_game_start_info", "package": null, "version": null}, {"name": "player_game_offense_stats", "package": null, "version": null}, {"name": "event_offense_stats", "package": null, "version": null}, {"name": "team_game_start_info", "package": null, "version": null}, {"name": "seed_game_types", "package": null, "version": null}, {"name": "game_start_info", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.baseball_computer.metric_table_generator"], "nodes": ["model.baseball_computer.event_offense_stats", "seed.baseball_computer.seed_franchises", "model.baseball_computer.player_team_season_offense_stats", "model.baseball_computer.team_game_start_info", "model.baseball_computer.player_game_offense_stats", "seed.baseball_computer.seed_game_types", "model.baseball_computer.game_start_info"]}, "compiled_path": null, "contract": {"enforced": true, "alias_types": true, "checksum": "5b6b60456495265054251f72461a63d8be15ecc8b65de1388309db47bb55cf82"}, "access": "protected", "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true, "columns": ["player_id", "season", "league"]}], "version": null, "latest_version": null, "deprecation_date": null}, "model.baseball_computer.metrics_player_season_league_pitching": {"database": "bc", "schema": "main_models", "name": "metrics_player_season_league_pitching", "resource_type": "model", "package_name": "baseball_computer", "path": "metrics/metrics_player_season_league_pitching.sql", "original_file_path": "models/metrics/metrics_player_season_league_pitching.sql", "unique_id": "model.baseball_computer.metrics_player_season_league_pitching", "fqn": ["baseball_computer", "metrics", "metrics_player_season_league_pitching"], "alias": "metrics_player_season_league_pitching", "checksum": {"name": "sha256", "checksum": "44ab7cce6728339af4468ca47e9d643743a4b7b56259f6481a77ffd3651707a5"}, "config": {"enabled": true, "alias": null, "schema": "models", "database": null, "tags": [], "meta": {"primary_keys": ["player_id", "season", "league"]}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Aggregate pitching statistics and averages for each player-season,\nsplit if the player played in multiple leagues that year. Regular season only.\n", "columns": {"player_id": {"name": "player_id", "description": "Retrosheet 8-character person ID for a player, which consists of\n    the first four characters of the last name, the first character\n    of the first name, and then three digits to disambiguate between\n    players with the same five characters.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "season": {"name": "season", "description": "Year, 4-digit integer", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "league": {"name": "league", "description": "Abbreviation for the league associated with this entity. NULL\n    indicates that a team is not part of a league (e.g. all-star games\n    or Negro League barnstorming teams).", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "batters_faced": {"name": "batters_faced", "description": "Number of batters faced by a pitcher, generally equivalent to plate appearances (in old box-score-only games, this may not match up perfectly).", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "outs_recorded": {"name": "outs_recorded", "description": "Number of outs recorded by a pitcher.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "inherited_runners_scored": {"name": "inherited_runners_scored", "description": "(IRS) Number of inherited runners that scored while a pitcher was on the mound.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "bequeathed_runners_scored": {"name": "bequeathed_runners_scored", "description": "Number of bequeathed runners that scored after a pitcher left the game.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "team_unearned_runs": {"name": "team_unearned_runs", "description": "Number of runs that are charged as earned to the pitcher, but unearned to the team.\n    This happens when a pitcher enters an inning which should have been over already because\n    of an error and then the pitcher allows a run to score without the help of any additional\n    errors. This is a rare occurrence and it might seem unnecessary to track,\n    but it is absolutely essential that we do so in order to preserve the space-time continuu-\n    T\u0355he\u030a\u0346\u0328\u035c y\u036a\u0363e\u0321\u0303\u0313\u030ea\u0347r\u0350\u0355\u035c\u035d i\u0313\u035a\u0314\u0324\u033a\u033b\u035bs 20\u032e\u033f89\u032a\u030a an\u032b\u032b\u035e\u0326\u0305d\u0331\u033f\u0369 E\u0361\u0354\u0330\u0351\u0320s\u036d\u0366t\u0351\u0359\u035de\u0303\u0352\u0310b\u0301\u036e\u0359a\u0361\u0359\u0310\u0301\u0330\u0330\u0320n\u036f\u0352\u035f Y\u032a\u0318\u0311a\u035c\u0302\u031c\u031a\u036c\u0345\u0360n\u0304\u0301\u0309 h\u035c\u0314\u0306a\u0359\u033e\u031d\u035f\u0361\u0308\u0301\u0351s\u035f\u0338 fu\u0326\u036d\u030f\u032e\u0306\u030dl\u033a\u0347\u0311\u0349\u034c\u0305\u0303l\u0345\u030f\u0308\u036a\u033f\u031dy\u0312\u0313\u034b\u036e\u0332\u0347 m\u0326\u030a\u0363e\u0365\u034a\u0367\u0320\u0325rg\u0347\u0366\u0300e\u0309\u0339\u031c\u031f\u0353\u0331\u0319d\u0331\u0327 wi\u0307\u034eth\u0366\u0361\u031b\u036d\u0358 t\u031d\u0362\u035d\u0328\u035e\u0342h\u0336\u0357\u031e\u032d\u035f\u0319e\u0322\u030a\u0321\u032f w\u0300\u0329\u0309\u032co\u036d\u0349r\u0311\u0367\u0327\u0360\u036a\u0327\u036cm\u034c\u031c.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "plate_appearances": {"name": "plate_appearances", "description": "(PA) Number of times a batter came to the plate, including walks, hit by pitches, sacrifices, and at-bats.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "at_bats": {"name": "at_bats", "description": "(AB) Number of plate appearances that ended in either a hit or a non-sacrifice out.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "hits": {"name": "hits", "description": "(H) Number of times a batter reached base safely without an error or fielder's choice.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "singles": {"name": "singles", "description": "(1B) Number of hits in which a batter reached first base.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "doubles": {"name": "doubles", "description": "(2B) Number of hits in which a batter reached second base without the help of an error or an attempted\n    play on another runner.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "triples": {"name": "triples", "description": "(3B) Number of hits in which a batter reached third base without the help of an error or an attempted\n    play on another runner.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "home_runs": {"name": "home_runs", "description": "(HR) Number of hits in which a batter reached home plate without the help of an error or an attempted\n    play on another runner (usually by hitting the ball out of the park).", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "total_bases": {"name": "total_bases", "description": "(TB) Number of bases a batter reached safely without the help of an error or an attempted\n    play on another runner. HR * 4 + 3B * 3 + 2B * 2 + (H - HR - 3B - 2B)", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "strikeouts": {"name": "strikeouts", "description": "(K, SO) Number of times a batter struck out. This includes plays in which a batter reached base on\n    a dropped third strike.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "walks": {"name": "walks", "description": "(BB, occasionally W) Number of times a batter reaches base on called balls out of the strike zone\n    (Four balls for all of MLB history after the 1880s).", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "intentional_walks": {"name": "intentional_walks", "description": "(IBB, occasionally IW) Number of times a batter was intentionally walked. This number may be missing or undercounted\n    in earlier years, as intentional walks were not officially tracked until 1955.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "hit_by_pitches": {"name": "hit_by_pitches", "description": "(HBP) Number of times a batter was awarded first base after being hit by a pitch.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "sacrifice_hits": {"name": "sacrifice_hits", "description": "(SH) Number of times a batter performed a sacrifice bunt to advance another runner.\n    A bunt may count as a sacrifice even if the batter reaches base safely.\n    Unsuccessful attempts are not counted, nor are non-sacrifice bunts.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "sacrifice_flies": {"name": "sacrifice_flies", "description": "(SF) Number of times a batter hit a fly ball that resulted in an out (or error),\n    but allowed a runner to score on the throw.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "reached_on_errors": {"name": "reached_on_errors", "description": "(ROE) Number of times a batter reached base safely due to an error.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "reached_on_interferences": {"name": "reached_on_interferences", "description": "Number of times a batter was awarded first base for being illegally hindered\n    by a fielder, usually the catcher.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "inside_the_park_home_runs": {"name": "inside_the_park_home_runs", "description": "Number of times a batter hit a home run without the ball leaving the field of play.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "ground_rule_doubles": {"name": "ground_rule_doubles", "description": "Number of times a batter was awarded a double on a ball that went out of play after\n    bouncing in fair territory.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "infield_hits": {"name": "infield_hits", "description": "Number of times a batter reached base safely on a hit that did not reach the outfield.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "on_base_opportunities": {"name": "on_base_opportunities", "description": "Number of plate appearances in which a batter either did or did not reach base,\n    as defined by the formula for on-base percentage. Note that this is very similar to but different\n    from plate_appearances, as it does not include sacrifice hits or interference.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "on_base_successes": {"name": "on_base_successes", "description": "Number of hits, walks, and hit by pitches that serves as the numerator in the formula\n    for on-base percentage.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "grounded_into_double_plays": {"name": "grounded_into_double_plays", "description": "(GIDP) Number of times a batter grounded into a double play. This is the conventional way\n    to record a double play and as such is an important statistic on its own. Games without\n    play-by-play accounts don't have data on the trajectory of the double play, so\n    this number is not populated for those games.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "double_plays": {"name": "double_plays", "description": "(DP) Number of times a play ended in two outs being recorded.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "triple_plays": {"name": "triple_plays", "description": "(TP) Number of times a play ended in three outs being recorded.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batting_outs": {"name": "batting_outs", "description": "Number of outs that \"should\" have been recorded as a result of a batter's plate apperances.\n    A batting out is still counted if no actual out is recorded on an error or a failed fielder's choice.\n    Outs on baserunners (including the batter trying to stretch a hit) do not count here.\n    Grounded-into-double-plays count as two outs, but other types of double plays do not (the \n    idea here is that the baserunner is responsible on other types of double plays).\n    Unofficial stat, but designed here to be generally useful in determining rates of official stats.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "balls_in_play": {"name": "balls_in_play", "description": "Number of plate appearances that resulted in a live\n    ball on the field of play. The difference between this and batted_balls is that\n    balls_in_play does not include out-of-the-park home runs. This distinction is important\n    for calculating batting average on balls in play, a stat designed to isolate at_bats\n    in which the defense was involved.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "balls_batted": {"name": "balls_batted", "description": "Number of plate appearances that ended in a fair ball or a foul flyout. This is equivalent\n    to balls_in_play + home_runs, and may be a more useful denominator for \"in play\" stats depending\n    on the context.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "trajectory_fly_ball": {"name": "trajectory_fly_ball", "description": "(FB) Number of plate appearances that ended in a fly ball. A fly ball is defined here\n    as the subset of balls hit in the air that are neither line drives nor pop flies.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "trajectory_ground_ball": {"name": "trajectory_ground_ball", "description": "(GB) Number of plate appearances that ended in a ground ball, also called a grounder. A ground ball is defined\n    here to only include swings, not bunts, although older data may not have a proper distinction. Ground\n    balls tend to be easy to distinguish between other types of contact, but Statcast-era data defines it\n    as balls with a launch angle under 10 degrees.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "trajectory_line_drive": {"name": "trajectory_line_drive", "description": "(LD) Number of plate appearances that ended in a line drive, also called a liner. Line drives are distiguished\n    from fly balls by some combination of angle and exit velocity. In the Statcast era, line drives\n    are defined purely in terms of launch angle (10-25 degrees), but just about any colloquial definition\n    involves hard-hitness as well. The line-drive-fly-ball distinction is by far the most arbitrary\n    and subjective trajectory categorization. Many scorekeepers never included line drives, while others counted\n    any successful in-play air-hit as a line drive. Nevertheless, the distinction is a crucial one,\n    as line drives are by far the most likely type of batted ball to result in a hit (even when they are not hit very hard).", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "trajectory_pop_up": {"name": "trajectory_pop_up", "description": "(sometimes PU)  Number of plate appearances that ended in a pop-up, also called a pop fly.\n    Pop-ups are distinguished from fly balls in that they are hit at a higher angle, tend to be\n    hit with less exit velocity, and (as a result) end up in the infield or shallow outfield. Before\n    Statcast-era standardization, the distinction between a fly ball and a pop-up was a matter of\n    scorerkeeper judgement, and many unofficial scorekeepers did not distinguish between the two.\n    Statcast determines pop flies exclusively by angle (> 50 degrees).", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "trajectory_unknown": {"name": "trajectory_unknown", "description": "Number of plate appearances ending in a batted ball whose trajectory was not recorded and cannot\n    be reliably deduced from context. This number includes balls that we know were hit in the air,\n    but do not know which kind of air ball (FB/PU/LD) they were (see trajectory_broad_classification_unknown\n    for a number that does not include those balls). The strong majority of batted balls prior to 1988\n    fall into this category, especially hits.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "trajectory_known": {"name": "trajectory_known", "description": "Number of plate appearances ending in a batted ball whose trajectory was recorded or was reliably deduced\n    from the context. An example of reliable deduction is an at-bat with the fielding play 6-3, which\n    almost always is a ground ball fielded by the shortstop and thrown to the first baseman. See\n    `calc_batted_ball_type` for the deduction logic.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "trajectory_broad_air_ball": {"name": "trajectory_broad_air_ball", "description": "Number of plate appearances that ended in an air ball (a fly ball, line drive, or pop-up).\n    Because it is much easier to deduce that a ball was hit in the air than it is to deduce the exact\n    trajectory, this number field is more reliably populated than any of its three consituent parts.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "trajectory_broad_ground_ball": {"name": "trajectory_broad_ground_ball", "description": "Same as `trajectory_ground_ball`.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "trajectory_broad_unknown": {"name": "trajectory_broad_unknown", "description": "Number of plate appearances ending in a batted ball whose trajectory was not recorded and cannot\n    be reliably deduced from context, even to the extent of knowing whether it was a ground ball or an air ball.\n    This will include a disproportionate number of hits, which are more likely to be missing trajectory data\n    and harder to make deductions about.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "trajectory_broad_known": {"name": "trajectory_broad_known", "description": "Number of plate appearances ending in a batted ball whose ground/air status was recorded or\n    reliably deduced from the context. This is the sum of `trajectory_broad_air_ball` and\n    `trajectory_broad_ground_ball`. Outs in play have excellent coverage historically here,\n    even for older games.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "bunts": {"name": "bunts", "description": "Number of plate appearances ending in an in-play bunt.\n    This does not include strikeouts on foul bunts with two strikes.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_distance_plate": {"name": "batted_distance_plate", "description": "Number of plate appearances in which the ball was batted to catcher's area around home plate.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_distance_infield": {"name": "batted_distance_infield", "description": "Number of plate appearances in which the ball was batted to the infield (not including the catcher).\n    All ground balls are included here, regardless of whether they made it through to the outfield.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_distance_outfield": {"name": "batted_distance_outfield", "description": "Number of plate appearances in which the ball was hit on the fly to the outfield.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_distance_unknown": {"name": "batted_distance_unknown", "description": "Number of plate appearances in which the ball was hit, but the distance was not recorded\n    and cannot be reliably deduced from context.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_distance_known": {"name": "batted_distance_known", "description": "Number of plate appearances in which the ball was hit, and the distance was either\n    recorded or reliably deduced from context.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "fielded_by_battery": {"name": "fielded_by_battery", "description": "Number of plate appearances in which the ball was fielded by the pitcher or catcher.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "fielded_by_infielder": {"name": "fielded_by_infielder", "description": "Number of plate appearances in which the ball was fielded by an infielder.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "fielded_by_outfielder": {"name": "fielded_by_outfielder", "description": "Number of plate appearances in which the ball was fielded by an outfielder.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "fielded_by_known": {"name": "fielded_by_known", "description": "Number of plate appearances in which the ball was fielded by a player, and the player was recorded.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "fielded_by_unknown": {"name": "fielded_by_unknown", "description": "Number of plate appearances in which the ball was fielded by a player, but the player was not recorded.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_angle_left": {"name": "batted_angle_left", "description": "Number of plate appearances in which the ball was batted to the left side of the field.\n    This includes balls where the location was not recorded, but the fielder is on the left side\n    (3B, LF). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_angle_right": {"name": "batted_angle_right", "description": "Number of plate appearances in which the ball was batted to the right side of the field.\n    This includes balls where the location was not recorded, but the fielder is on the right side\n    (1B, RF). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_angle_middle": {"name": "batted_angle_middle", "description": "Number of plate appearances in which the ball was batted to the middle of the field.\n    This includes balls where the location was not recorded, but the fielder is up the middle\n    (P, 2B, SS, CF). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_angle_unknown": {"name": "batted_angle_unknown", "description": "Number of plate appearances in which the ball was batted, but we don't have enough location\n    to determine the spray angle.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_angle_known": {"name": "batted_angle_known", "description": "Number of plate appearances in which the ball was hit and we have enough location to determine\n    the spray angle.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_location_plate": {"name": "batted_location_plate", "description": "Number of plate appearances in which the ball was batted to the catcher's area around home plate.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_location_right_infield": {"name": "batted_location_right_infield", "description": "Number of plate appearances in which the ball was batted to the right side of the infield.\n    This includes balls where the location was not recorded, but the fielder is on the right side\n    (1B). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_location_middle_infield": {"name": "batted_location_middle_infield", "description": "Number of plate appearances in which the ball was batted to the middle of the infield.\n    This includes balls where the location was not recorded, but the fielder is up the middle\n    (P, SS, 2B). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_location_left_infield": {"name": "batted_location_left_infield", "description": "Number of plate appearances in which the ball was batted to the left side of the infield.\n    This includes balls where the location was not recorded, but the fielder is on the left side\n    (3B). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_location_left_field": {"name": "batted_location_left_field", "description": "Number of plate appearances in which the ball was batted to the left side of the outfield.\n    This includes balls where the location was not recorded, but the fielder is on the left side\n    (LF). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_location_center_field": {"name": "batted_location_center_field", "description": "Number of plate appearances in which the ball was batted to the center of the outfield.\n    This includes balls where the location was not recorded, but the fielder is up the middle\n    (CF). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_location_right_field": {"name": "batted_location_right_field", "description": "Number of plate appearances in which the ball was batted to the right side of the outfield.\n    This includes balls where the location was not recorded, but the fielder is on the right side\n    (RF, CF). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_location_unknown": {"name": "batted_location_unknown", "description": "Number of plate appearances in which the ball was batted, but we don't have enough location\n    to determine the specific location.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_location_known": {"name": "batted_location_known", "description": "Number of plate appearances in which the ball was batted and we have enough location to determine\n    the specific location.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_balls_pulled": {"name": "batted_balls_pulled", "description": "Number of plate appearances in which the ball was pulled (the left side for right-handed batters, the right side for left-handed batters).", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_balls_opposite_field": {"name": "batted_balls_opposite_field", "description": "Number of plate appearances in which the ball was hit to the opposite field (the right side for right-handed batters, the left side for left-handed batters).", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "runs": {"name": "runs", "description": "(R) Number of runs scored.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "times_reached_base": {"name": "times_reached_base", "description": "Number of times a batter ended a plate appearance on base, even if it was through a fielder's choice, error, etc.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "stolen_base_opportunities": {"name": "stolen_base_opportunities", "description": "Number of events in which a runner had an opportunity to steal a base as the\n    lead basestealer OR the runner recorded a SB/CS in any situation.\n    \"Opportunity\" is defined as a situation in which the next base\n    was empty at the start of the event (not including the batter).\n    No-play events excluded, but events without plate appearances are included.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "stolen_base_opportunities_second": {"name": "stolen_base_opportunities_second", "description": "Number of opportunities to steal second base (see `stolen_base_opportunities` for detailed criteria).", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "stolen_base_opportunities_third": {"name": "stolen_base_opportunities_third", "description": "Number of opportunities to steal third base (see `stolen_base_opportunities` for detailed criteria).", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "stolen_base_opportunities_home": {"name": "stolen_base_opportunities_home", "description": "Number of opportunities to steal home (see `stolen_base_opportunities` for detailed criteria).", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "stolen_bases": {"name": "stolen_bases", "description": "(SB) Number of successful stolen bases.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "stolen_bases_second": {"name": "stolen_bases_second", "description": "Number of successful steals of second base.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "stolen_bases_third": {"name": "stolen_bases_third", "description": "Number of successful steals of third base.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "stolen_bases_home": {"name": "stolen_bases_home", "description": "Number of successful steals of home.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "caught_stealing": {"name": "caught_stealing", "description": "(CS) Number of times a runner was caught stealing.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "caught_stealing_second": {"name": "caught_stealing_second", "description": "Number of times a runner was caught stealing second base.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "caught_stealing_third": {"name": "caught_stealing_third", "description": "Number of times a runner was caught stealing third base.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "caught_stealing_home": {"name": "caught_stealing_home", "description": "Number of times a runner was caught stealing home.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "picked_off": {"name": "picked_off", "description": "(PO, at risk of confusion with putouts) Number of times a runner was picked off.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "picked_off_first": {"name": "picked_off_first", "description": "Number of times a runner was picked off first base.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "picked_off_second": {"name": "picked_off_second", "description": "Number of times a runner was picked off second base.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "picked_off_third": {"name": "picked_off_third", "description": "Number of times a runner was picked off third base.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "picked_off_caught_stealing": {"name": "picked_off_caught_stealing", "description": "(POCS) Number of times a runner was picked off, but instead of going back to the bag,\n    tried to run to the next base and was put out.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "outs_on_basepaths": {"name": "outs_on_basepaths", "description": "Number of outs recorded by a baserunner (this is not mutually exclusive with outs recorded by the batter\n    in cases like failed advances or dropped third-strike putouts).", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "unforced_outs_on_basepaths": {"name": "unforced_outs_on_basepaths", "description": "Number of outs recorded by a baserunner that was not the result of a force on the runner.\n    \"Unforced\" is meant to be in both the literal sense of a force not being in play, but also\n    the figurative sense of the runner being responsible for the out. The latter may or may not\n    be the best interpretation of any given play, but it is useful to assign responsibility to the\n    runner by default in those contexts.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "outs_avoided_on_errors": {"name": "outs_avoided_on_errors", "description": "Number of times that a baserunner would have been out, but an error allowed them to remain\n    on the basepaths (either staying put or advancing).", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "advances_on_wild_pitches": {"name": "advances_on_wild_pitches", "description": "(WP) Number of times a baserunner advanced on a wild pitch.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "advances_on_passed_balls": {"name": "advances_on_passed_balls", "description": "(PB) Number of times a baserunner advanced on a passed ball.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "advances_on_balks": {"name": "advances_on_balks", "description": "(sometimes BK) Number of times a baserunner advanced on a balk.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "advances_on_unspecified_plays": {"name": "advances_on_unspecified_plays", "description": "Number of times a baserunner advanced for an unspecified reason.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "advances_on_defensive_indifference": {"name": "advances_on_defensive_indifference", "description": "(DI) Number of times a baserunner advanced on defensive indifference.\n   Defensive indifference is a judgement call by the official scorer that the defense\n   did not try to stop the runner from stealing a base. This usually happens\n   when the defense has a lead late in the game.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "advances_on_errors": {"name": "advances_on_errors", "description": "Number of times a baserunner advanced on an error.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "extra_base_chances": {"name": "extra_base_chances", "description": "", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "extra_base_advance_attempts": {"name": "extra_base_advance_attempts", "description": "Number of times a baserunner tried to advance by a greater number of bases than the batter.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "extra_bases_taken": {"name": "extra_bases_taken", "description": "", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "bases_advanced": {"name": "bases_advanced", "description": "Number of bases advanced by a baserunner, including the batter.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "bases_advanced_on_balls_in_play": {"name": "bases_advanced_on_balls_in_play", "description": "Number of bases advanced by a baserunner on a ball in play, including the batter.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "surplus_bases_advanced_on_balls_in_play": {"name": "surplus_bases_advanced_on_balls_in_play", "description": "Number of bases advanced by a baserunner on a ball in play minus the number of total bases\n    accumulated by the batter on the same play. For example, if a runner goes from first to third\n    on a single, this number is 1 (3 - 2). If a runner only goes from second to third on a double,\n    this number is -1 (1 - 2).", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "outs_on_extra_base_advance_attempts": {"name": "outs_on_extra_base_advance_attempts", "description": "Number of times a baserunner was out attempting to advance\n    by a greater number of bases than the batter. This includes\n    batters who were put out trying to stretch a hit to the next base.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "pitches": {"name": "pitches", "description": "Number of pitches thrown.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "swings": {"name": "swings", "description": "Number of pitches that were swung at.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "swings_with_contact": {"name": "swings_with_contact", "description": "Number of pitches that were swung at and made contact.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "strikes": {"name": "strikes", "description": "Number of pitches that were called or swinging strikes.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "strikes_called": {"name": "strikes_called", "description": "Number of pitches that were called strikes.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "strikes_swinging": {"name": "strikes_swinging", "description": "Number of pitches that were swung on and missed (mutually exclusive\n    with `swings_with_contact`, which also count as strikes).", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "strikes_foul": {"name": "strikes_foul", "description": "Number of pitches that were fouled off.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "strikes_foul_tip": {"name": "strikes_foul_tip", "description": "Number of pitches that were fouled off and caught by the catcher for strike three.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "strikes_in_play": {"name": "strikes_in_play", "description": "Number of pitches that were swung on and batted into play.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "strikes_unknown": {"name": "strikes_unknown", "description": "Number of pitches that we know were strikes, but don't know what kind.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "balls": {"name": "balls", "description": "Number of pitches that were called balls.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "balls_called": {"name": "balls_called", "description": "Number of pitches that were called balls (as opposed to automatic balls that were\n    not actually thrown).", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "balls_intentional": {"name": "balls_intentional", "description": "Number of pitches that were called balls as part of an intentional walk.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "balls_automatic": {"name": "balls_automatic", "description": "Number of pitches that were called balls on an automatic walk or a delay penalty.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "unknown_pitches": {"name": "unknown_pitches", "description": "Number of pitches that were thrown without any other information recorded.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "pitchouts": {"name": "pitchouts", "description": "Number of pitches that were thrown as pitchouts. A pitchout is a pitch that is thrown\n    intentionally very far outside in order to make it easier for the catcher to throw out\n    a baserunner who is likely to steal.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "pitcher_pickoff_attempts": {"name": "pitcher_pickoff_attempts", "description": "Number of times the pitcher attempted to pick off a baserunner.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "catcher_pickoff_attempts": {"name": "catcher_pickoff_attempts", "description": "Number of times the catcher attempted to pick off a baserunner.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "pitches_blocked_by_catcher": {"name": "pitches_blocked_by_catcher", "description": "Number of pitches that were blocked by the catcher.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "pitches_with_runners_going": {"name": "pitches_with_runners_going", "description": "Number of pitches that were thrown while a baserunner was on the move\n    (as part of a steal or hit-and-run).", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "passed_balls": {"name": "passed_balls", "description": "(PB) Number of passed balls.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "wild_pitches": {"name": "wild_pitches", "description": "(WP) Number of wild pitches.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "balks": {"name": "balks", "description": "(BK) Number of balks.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "left_on_base": {"name": "left_on_base", "description": "(LOB) At an individual level, the number of baserunners that a batter failed to advance during a plate appearance.\n    At a team level, the number of baserunners remaining on base at the end of an inning. In order to count, baserunners\n    must not have scored or been put out.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "left_on_base_with_two_outs": {"name": "left_on_base_with_two_outs", "description": "(LOB) At an individual level, the number of baserunners that remain on base (unscored and not out) after a plate appearance that ends with the third out recorded. At a team level, this is interchangable with `left_on_base`.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "earned_run_average": {"name": "earned_run_average", "description": "(ERA) Earned runs per nine innings, the analogue of batting average for pitchers in both its\n    fame and its limitations. `earned_runs` are a subset of the total runs allowed by a pitcher:\n    those unaffected by fielding errors. ERA is a strange compromise between the desire to isolate\n    a pitcher's true defense-independent ability and to describe actually happened when they were on the mound.\n    Because fielding errors are a small component of overall luck and defense, it doesn't really remove much\n    noise and might even add more. In general, the idea is right but the execution is wrong.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "run_average": {"name": "run_average", "description": "(RA) Runs allowed by the pitcher per nine innings. Because of the historical importance of ERA,\n    this is often thought of as earned run average plus unearned run average, but this obscures how much simpler\n    it is to calculate than ERA. While it is subject to many factors beyond the pitcher's control, it does arguably\n    the best possible job of describing what actually happened when the pitcher was on the mound. This makes it a popular\n    starting point for some implementations of WAR (such as Baseball Reference's).", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "walks_per_9_innings": {"name": "walks_per_9_innings", "description": "(BB/9) Walks allowed by the pitcher per nine innings. Probably the statistic most \n    frequently used to describe a pitcher's control. One of the three main \"peripheral\"\n    stats that describe a pitcher's performance on outcomes over which they have the most control.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "strikeouts_per_9_innings": {"name": "strikeouts_per_9_innings", "description": "(K/9) Strikeouts recorded by the pitcher per nine innings. One of the three main \"peripheral\"\n    stats that describe a pitcher's performance on outcomes over which they have the most control.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "home_runs_per_9_innings": {"name": "home_runs_per_9_innings", "description": "(HR/9) Home runs allowed by the pitcher per nine innings. One of the three main \"peripheral\"\n    stats that describe a pitcher's performance on outcomes over which they have the most control,\n    although the lower frequency of home runs gives it a much higher relative variance than the other two.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "hits_per_9_innings": {"name": "hits_per_9_innings", "description": "(H/9) Hits allowed by the pitcher per nine innings.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "walks_and_hits_per_innings_pitched": {"name": "walks_and_hits_per_innings_pitched", "description": "", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "strikeout_to_walk_ratio": {"name": "strikeout_to_walk_ratio", "description": "(K/BB) Ratio of strikeouts to walks, almost always appearing as a pitching statistic even though it\n    can also be expressed for hitters. A simple and useful way to describe pitching performance\n    on non-at-bat outcomes. Also a bit more robust when comparing across time periods than most\n    unadjusted strikeout-related statistics. Leaders in this stat tend to be a mix\n    of the most dominant pitchers in the league and contact-oriented control freaks,\n    e.g. Pedro Martinez and Phil Hughes (respectively or not, who's to say).", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "walk_rate": {"name": "walk_rate", "description": "(BB/PA) Walks per plate appearance.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "strikeout_rate": {"name": "strikeout_rate", "description": "(K/PA) Strikeouts per plate appearance.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "home_run_rate": {"name": "home_run_rate", "description": "(HR/PA) Home runs per plate appearance.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "batting_average_against": {"name": "batting_average_against", "description": "(BAA, OAV) Same as batting average, but for pitchers. For the most part,\n    this database doesn't rephrase hitting statistics for pitchers, but this one is\n    so common that it's worth including.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "on_base_percentage_against": {"name": "on_base_percentage_against", "description": "Same as on-base percentage, but for pitchers/defense.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "slugging_percentage_against": {"name": "slugging_percentage_against", "description": "Same as slugging percentage, but for pitchers/defense.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "on_base_plus_slugging_against": {"name": "on_base_plus_slugging_against", "description": "Same as OPS, but for pitchers/defense.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "batting_average_on_balls_in_play": {"name": "batting_average_on_balls_in_play", "description": "(BABIP) A measure of the rate at which fieldable balls go for hits. It is calculated as (H - HR)/(AB - K - HR + SF).\n    Pitchers are generally (but controversially) thought to have little control over balls in play, so a high BABIP\n    is a good sign that that they have been unlucky or have played in front of a poor defense. Most pitchers do have some\n    \"true\" BABIP ability that is different from the league average, but the difference is usually much smaller than the year-to-year\n    variance in their actual BABIP. In rare cases, pitchers can have such a strong influence on balls in play that their\n    contribution is measurable in smaller sample sizes. For pitchers in the dead-ball era and earlier, it makes less sense\n    to treat BABIP as luck because a much higher percentage of at-bats ended in balls in play, and pitchers were more focused\n    on getting outs by inducing weak contact without having to worry about home runs.\n\n    All of the above is also true for hitters, but to a much lesser extent, as hitters face different defenses, control\n    their ability to beat out grounders for infield hits, and generally have more control over the quality of contact they\n    make. BABIP can also be misleading for hitters because it excludes home runs, so Barry Bonds ends up having a lower BABIP\n    even though there were occasional eyewitness reports of his making solid contact.\n\n    BABIP was invented by Voros McCracken around the turn of the millenium, and it remains the most prominent\n    example of a statistic that tracks player luck as opposed to skill or performance.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "event_coverage_rate": {"name": "event_coverage_rate", "description": "", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "known_trajectory_rate_outs": {"name": "known_trajectory_rate_outs", "description": "Rate of outs in play for which we know the detailed trajectory of the batted ball.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "known_trajectory_rate_hits": {"name": "known_trajectory_rate_hits", "description": "Rate of hits for which we know the detailed trajectory of the batted ball.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "known_trajectory_rate": {"name": "known_trajectory_rate", "description": "Overall rate of batted balls for which we know the detailed trajectory.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "known_trajectory_broad_rate_outs": {"name": "known_trajectory_broad_rate_outs", "description": "Overall rate of outs in play for which we know whether\n    the ball was hit in the air or on the ground.\n    This is generally very high even for the oldest play-by-play data.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "known_trajectory_broad_rate_hits": {"name": "known_trajectory_broad_rate_hits", "description": "Overall rate of hits for which we know whether\n    the ball was hit in the air or on the ground.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "known_trajectory_broad_rate": {"name": "known_trajectory_broad_rate", "description": "Overall rate of batted balls for which we know whether\n    the ball was hit in the air or on the ground.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "known_trajectory_out_hit_ratio": {"name": "known_trajectory_out_hit_ratio", "description": "The ratio of `known_trajectory_rate_outs` to `known_trajectory_rate_hits`.\n    This ratio is generally very high for years without complete batted ball data,\n    which makes it useful for estimating quantities that would be affected by\n    the selection bias.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "known_trajectory_broad_out_hit_ratio": {"name": "known_trajectory_broad_out_hit_ratio", "description": "The ratio of `known_trajectory_broad_rate_outs` to `known_trajectory_broad_rate_hits`.\n    This ratio is generally very high for years without complete batted ball data,\n    which makes it useful for estimating quantities that would be affected by\n    the selection bias.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "air_ball_rate_outs": {"name": "air_ball_rate_outs", "description": "The rate of outs in play that were fly balls, pop-ups, or line drives.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "ground_ball_rate_outs": {"name": "ground_ball_rate_outs", "description": "The rate of outs in play that were ground balls.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "ground_air_out_ratio": {"name": "ground_air_out_ratio", "description": "The ratio of `ground_ball_rate_outs` to `air_ball_rate_outs`.\n    This is a useful metric by itself because it is unaffected by\n    the higher percentage of missing data on hits, so it is probably\n    a more accurate measure of overall ground ball rate than `ground_ball_rate`\n    itself for most seasons.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "air_ball_hit_rate": {"name": "air_ball_hit_rate", "description": "The rate of hits in play that were fly balls, pop-ups, or line drives.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "ground_ball_hit_rate": {"name": "ground_ball_hit_rate", "description": "The rate of hits in play that were ground balls.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "ground_air_hit_ratio": {"name": "ground_air_hit_ratio", "description": "The ratio of `ground_ball_hit_rate` to `air_ball_hit_rate`.\n    Difference between this and `ground_air_out_ratio` is potentially interesting,\n    but will be noisy for older years.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "fly_ball_rate": {"name": "fly_ball_rate", "description": "Of all batted_balls for which we know the trajectory,\n    The rate that were fly balls.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "line_drive_rate": {"name": "line_drive_rate", "description": "Of all batted_balls for which we know the trajectory,\n    The rate that were line drives.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "pop_up_rate": {"name": "pop_up_rate", "description": "Of all batted_balls for which we know the trajectory,\n    The rate that were pop-ups.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "ground_ball_rate": {"name": "ground_ball_rate", "description": "Of all batted_balls for which we know the trajectory,\n    The rate that were ground balls.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "coverage_weighted_air_ball_batting_average": {"name": "coverage_weighted_air_ball_batting_average", "description": "The batting average of batted_balls that were fly balls, pop-ups, or line drives,\n    weighted according to the `known_trajectory_broad_out_hit_ratio`. This is an attempt\n    to measure trajectory-specific BABIP even in years where trajectory data is rarely\n    present for hits. While it handles that specific bias, it is still likely to be noisy\n    because of the small sample size of known-trajectory balls.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "coverage_weighted_ground_ball_batting_average": {"name": "coverage_weighted_ground_ball_batting_average", "description": "The batting average of batted_balls that were ground balls,\n    weighted according to the `known_trajectory_broad_out_hit_ratio`. This is an attempt\n    to measure trajectory-specific BABIP even in years where trajectory data is rarely\n    present for hits. While it handles that specific bias, it is still likely to be noisy\n    because of the small sample size of known-trajectory balls.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "coverage_weighted_fly_ball_batting_average": {"name": "coverage_weighted_fly_ball_batting_average", "description": "The batting average of batted_balls that were fly balls,\n    weighted according to the `known_trajectory_out_hit_ratio`. This is an attempt\n    to measure trajectory-specific BABIP even in years where trajectory data is rarely\n    present for hits. It is still vulnerable to the variance and arbitrariness with which\n    historical scorekeepers differentiated fly balls from line drives and pop-ups.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "coverage_weighted_line_drive_batting_average": {"name": "coverage_weighted_line_drive_batting_average", "description": "The batting average of batted_balls that were line drives,\n    weighted according to the `known_trajectory_out_hit_ratio`. This is an attempt\n    to measure trajectory-specific BABIP even in years where trajectory data is rarely\n    present for hits. It is still vulnerable to the variance and arbitrariness with which\n    historical scorekeepers differentiated line drives from other air outs, which was\n    extremely high all the way up to the Statcast era.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "coverage_weighted_pop_up_batting_average": {"name": "coverage_weighted_pop_up_batting_average", "description": "The batting average of batted_balls that were pop-ups,\n    weighted according to the `known_trajectory_out_hit_ratio`. This is an attempt\n    to measure trajectory-specific BABIP even in years where trajectory data is rarely\n    present for hits. It is still vulnerable to the variance and arbitrariness with which\n    historical scorekeepers differentiated pop-ups from other air outs.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "known_angle_rate_outs": {"name": "known_angle_rate_outs", "description": "Rate of batted-ball outs for which we know (or have a good proxy for)\n    whether the ball was hit to the left, right, or middle of the field.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "known_angle_rate_hits": {"name": "known_angle_rate_hits", "description": "Rate of batted-ball hits for which we know (or have a good proxy for)\n    whether the ball was hit to the left, right, or middle of the field.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "known_angle_rate": {"name": "known_angle_rate", "description": "Rate of batted balls for which we know (or have a good proxy for)\n    whether the ball was hit to the left, right, or middle of the field.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "known_angle_out_hit_ratio": {"name": "known_angle_out_hit_ratio", "description": "The ratio of `known_angle_rate_outs` to `known_angle_rate_hits`.\n    This ratio is generally very high for years without complete batted ball data,\n    which makes it useful for estimating quantities that would be affected by\n    the selection bias. Angle is generally better known than location itself, because\n    when a batter gets a hit, we often know which outfielder fielded the ball even\n    though we don't know how it got there.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "angle_left_rate_outs": {"name": "angle_left_rate_outs", "description": "The rate of batted-ball outs that were hit to the left side of the field.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "angle_left_rate_hits": {"name": "angle_left_rate_hits", "description": "The rate of hits that were hit to the left side of the field.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "angle_left_rate": {"name": "angle_left_rate", "description": "The overall rate of batted balls that were hit to the left side of the field.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "coverage_weighted_angle_left_batting_average": {"name": "coverage_weighted_angle_left_batting_average", "description": "The batting average on batted balls that were hit to the left side of the field,\n    weighted according to the `known_angle_out_hit_ratio`. This is an attempt\n    to measure angle-specific BABIP even in years where angle data is rarely\n    present for hits.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "angle_right_rate_outs": {"name": "angle_right_rate_outs", "description": "The rate of batted-ball outs that were hit to the right side of the field.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "angle_right_rate_hits": {"name": "angle_right_rate_hits", "description": "The rate of hits that were hit to the right side of the field.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "angle_right_rate": {"name": "angle_right_rate", "description": "The overall rate of batted balls that were hit to the right side of the field.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "coverage_weighted_angle_right_batting_average": {"name": "coverage_weighted_angle_right_batting_average", "description": "The batting average on batted balls that were hit to the right side of the field,\n    weighted according to the `known_angle_out_hit_ratio`. This is an attempt\n    to measure angle-specific BABIP even in years where angle data is rarely\n    present for hits.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "angle_middle_rate_outs": {"name": "angle_middle_rate_outs", "description": "The rate of batted-ball outs that were hit to the middle of the field.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "angle_middle_rate_hits": {"name": "angle_middle_rate_hits", "description": "The rate of hits that were hit to the middle of the field.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "angle_middle_rate": {"name": "angle_middle_rate", "description": "The overall rate of batted balls that were hit to the middle of the field.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "coverage_weighted_angle_middle_batting_average": {"name": "coverage_weighted_angle_middle_batting_average", "description": "The batting average on batted balls that were hit to the middle of the field,\n    weighted according to the `known_angle_out_hit_ratio`. This is an attempt\n    to measure angle-specific BABIP even in years where angle data is rarely\n    present for hits.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "pulled_rate_outs": {"name": "pulled_rate_outs", "description": "`angle_right_rate_outs` for lefty batters\n    and `angle_left_rate_outs` for righty batters.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "pulled_rate_hits": {"name": "pulled_rate_hits", "description": "`angle_right_rate_hits` for lefty batters\n    and `angle_left_rate_hits` for righty batters.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "pulled_rate": {"name": "pulled_rate", "description": "`angle_right_rate` for lefty batters\n    and `angle_left_rate` for righty batters.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "coverage_weighted_pulled_batting_average": {"name": "coverage_weighted_pulled_batting_average", "description": "`coverage_weighted_angle_right_batting_average` for lefty batters\n    and `coverage_weighted_angle_left_batting_average` for righty batters.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "opposite_field_rate_outs": {"name": "opposite_field_rate_outs", "description": "`angle_left_rate_outs` for lefty batters\n    and `angle_right_rate_outs` for righty batters.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "opposite_field_rate_hits": {"name": "opposite_field_rate_hits", "description": "`angle_left_rate_hits` for lefty batters\n    and `angle_right_rate_hits` for righty batters.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "opposite_field_rate": {"name": "opposite_field_rate", "description": "`angle_left_rate` for lefty batters\n    and `angle_right_rate` for righty batters.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "coverage_weighted_opposite_field_batting_average": {"name": "coverage_weighted_opposite_field_batting_average", "description": "`coverage_weighted_angle_left_batting_average` for lefty batters\n    and `coverage_weighted_angle_right_batting_average` for righty batters.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "stolen_base_attempt_rate_second": {"name": "stolen_base_attempt_rate_second", "description": "The rate of stolen base opportunities taken\n    when the runner was on first base (trying to steal second).\n    See `stolen_base_opportunities` for the definition.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "stolen_base_attempt_rate_third": {"name": "stolen_base_attempt_rate_third", "description": "The rate of stolen base opportunities taken\n    when the runner was on second base (trying to steal third).\n    See `stolen_base_opportunities` for the definition.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "stolen_base_attempt_rate_home": {"name": "stolen_base_attempt_rate_home", "description": "The rate of stolen base opportunities taken\n    when the runner was on third base (trying to steal home).\n    See `stolen_base_opportunities` for the definition.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "unforced_out_rate": {"name": "unforced_out_rate", "description": "The rate of appearances on the basepaths that ended in an unforced out.\n    See `unforced_outs_on_basepaths` for the definition.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "pitch_strike_rate": {"name": "pitch_strike_rate", "description": "The rate of pitches that were strikes.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "pitch_contact_rate": {"name": "pitch_contact_rate", "description": "The rate of pitches where some kind of contact was made.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "pitch_swing_rate": {"name": "pitch_swing_rate", "description": "The rate of pitches where the batter swung (and either made\n    contact or missed).", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "pitch_ball_rate": {"name": "pitch_ball_rate", "description": "The rate of pitches that were balls.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "pitch_swing_and_miss_rate": {"name": "pitch_swing_and_miss_rate", "description": "The rate of pitches where the batter swung and missed.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "pitch_foul_rate": {"name": "pitch_foul_rate", "description": "The rate of pitches that were fouled off.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "pitched_called_strike_rate": {"name": "pitched_called_strike_rate", "description": "The rate of pitches that were called strikes.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "pitch_data_coverage_rate": {"name": "pitch_data_coverage_rate", "description": "The rate of plate appearances for which we have pitch-by-pitch data.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}}, "meta": {"primary_keys": ["player_id", "season", "league"]}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "baseball_computer://models/metrics/metrics_player_season_league_pitching.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "models", "contract": {"enforced": true}, "meta": {"primary_keys": ["player_id", "season", "league"]}}, "created_at": 1702285053.054019, "relation_name": "\"bc\".\"main_models\".\"metrics_player_season_league_pitching\"", "raw_code": "{{  metric_table_generator(\"pitching\", [\"player_id\", \"season\", \"league\"], agg_type=\"player\", regular_season_only=True)  }}", "language": "sql", "refs": [{"name": "event_pitching_stats", "package": null, "version": null}, {"name": "seed_franchises", "package": null, "version": null}, {"name": "player_team_season_pitching_stats", "package": null, "version": null}, {"name": "player_team_season_pitching_stats", "package": null, "version": null}, {"name": "seed_franchises", "package": null, "version": null}, {"name": "team_game_start_info", "package": null, "version": null}, {"name": "player_game_pitching_stats", "package": null, "version": null}, {"name": "event_pitching_stats", "package": null, "version": null}, {"name": "team_game_start_info", "package": null, "version": null}, {"name": "seed_game_types", "package": null, "version": null}, {"name": "game_start_info", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.baseball_computer.metric_table_generator"], "nodes": ["model.baseball_computer.event_pitching_stats", "seed.baseball_computer.seed_franchises", "model.baseball_computer.player_team_season_pitching_stats", "model.baseball_computer.team_game_start_info", "model.baseball_computer.player_game_pitching_stats", "seed.baseball_computer.seed_game_types", "model.baseball_computer.game_start_info"]}, "compiled_path": null, "contract": {"enforced": true, "alias_types": true, "checksum": "ad385fdbfe1b396b87f905c43ff5ad28cd3bb8549d78257f42ffe33916e960c8"}, "access": "protected", "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true, "columns": ["player_id", "season", "league"]}], "version": null, "latest_version": null, "deprecation_date": null}, "model.baseball_computer.metrics_team_season_fielding": {"database": "bc", "schema": "main_models", "name": "metrics_team_season_fielding", "resource_type": "model", "package_name": "baseball_computer", "path": "metrics/metrics_team_season_fielding.sql", "original_file_path": "models/metrics/metrics_team_season_fielding.sql", "unique_id": "model.baseball_computer.metrics_team_season_fielding", "fqn": ["baseball_computer", "metrics", "metrics_team_season_fielding"], "alias": "metrics_team_season_fielding", "checksum": {"name": "sha256", "checksum": "c06c3ebce84f7295dd5c4fdc531f76c125616f50921984a0a5a472842dbdcb1d"}, "config": {"enabled": true, "alias": null, "schema": "models", "database": null, "tags": [], "meta": {"primary_keys": ["team_id", "season"]}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Aggregate fielding statistics and averages for each team-season.\nRegular season only.\n", "columns": {"team_id": {"name": "team_id", "description": "Retrosheet team ID, 3-character string which identifies the team\n    that a franchise was playing as at a given time.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "season": {"name": "season", "description": "Year, 4-digit integer", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "outs_played": {"name": "outs_played", "description": "", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "plate_appearances_in_field": {"name": "plate_appearances_in_field", "description": "", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "plate_appearances_in_field_with_ball_in_play": {"name": "plate_appearances_in_field_with_ball_in_play", "description": "", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "unknown_putouts_while_fielding": {"name": "unknown_putouts_while_fielding", "description": "", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "balls_hit_to": {"name": "balls_hit_to", "description": "", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "putouts": {"name": "putouts", "description": "(PO) Outs credited to fielder based on who physically made the out, either by:\n        - Catching a ball on the fly\n        - Tagging a runner out\n        - Forcing a runner out\n        - Catching a called third strike\n        - Being the nearest fielder to a baserunner who is called out for interference\n\n    Putouts have been an important baseball statistic longer than MLB has been around,\n    so it has excellent historical coverage. Unassisted\n    putouts are very important in determining the location of batted balls.\n    \n    In modern baseball rules, each out in the game is credited as a putout, and at the play/event\n    level this will always be the case. However, in older games for which we only have box score or season-level\n    data, rare plays like baserunner interference may not be assigned to a specific fielder.\n    \n    Every play-by-play out has a putout, but the fielder who gets the putout may be unknown.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "assists": {"name": "assists", "description": "(A) Number of outs in which a fielder touched the ball before anothber fielder recorded a putout.\n    This is almost always a throw to another fielder, but it can also be a deflection.\n\n    Assists have excellent historical data coverage, and they are particularly useful in determining\n    the location of ground balls. The data is present in almost all season-level and game-level accounts.\n    However, individual plays with unknown-fielder putouts are likely to be missing assists entirely.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "errors": {"name": "errors", "description": "(E) Number of errors recorded by a fielder. This is recorded when a fielder either fails to make an out\n    that an average fielder should have made or makes a bad play that allows a baserunner to advance.\n    Errors are awarded at the scorekeeper's discretion, making them more subjective than the other two main\n    fielding stats.\n    \n    Errors used to be a much larger component of evaluating fielder quality.\n    When the stat was invented, routine plays were completed much less frequently than they are today.\n    As baseball evolved, routine plays became truly routine, and a fielder's ability to get to the ball\n    became more relevant than their ability\n    to reliably convert the out once they got there. While plenty of people as early as the 19th century were\n    aware of this, statistics mostly failed to reflect it until the 1980s, when Bill James and others\n    developed Range Factor and other stats that attempted to measure a fielder's ability to create chances.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "fielders_choices": {"name": "fielders_choices", "description": "(FC) Number of times a fielder who fielded the ball attempted to put out a baserunner other than the batter.\n    A fielder's choice can be assigned when the attempt fails, even if there was no error on the play.\n\n    Fielder's choices are only available on play-by-play data and tend to be recorded when the attempt was\n    a tag and not a force. Force plays are explicitly noted and have little overlap with fielder's choices.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "assisted_putouts": {"name": "assisted_putouts", "description": "Number of putouts by the fielder that had at least one recorded, associated assist. For older games, this may be a subset\n    of the true total assisted putouts, as unknown-fielder putouts almost never have recorded assists.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "in_play_putouts": {"name": "in_play_putouts", "description": "", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "in_play_assists": {"name": "in_play_assists", "description": "", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "reaching_errors": {"name": "reaching_errors", "description": "", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "stolen_bases": {"name": "stolen_bases", "description": "(SB) Number of successful stolen bases.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "caught_stealing": {"name": "caught_stealing", "description": "(CS) Number of times a runner was caught stealing.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "pickoffs": {"name": "pickoffs", "description": "", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "passed_balls": {"name": "passed_balls", "description": "(PB) Number of passed balls.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "double_plays": {"name": "double_plays", "description": "(DP) Number of times a play ended in two outs being recorded.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "triple_plays": {"name": "triple_plays", "description": "(TP) Number of times a play ended in three outs being recorded.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "ground_ball_double_plays": {"name": "ground_ball_double_plays", "description": "", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "double_plays_started": {"name": "double_plays_started", "description": "", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "ground_ball_double_plays_started": {"name": "ground_ball_double_plays_started", "description": "", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "fielding_percentage": {"name": "fielding_percentage", "description": "", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "range_factor": {"name": "range_factor", "description": "", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "innings_played": {"name": "innings_played", "description": "", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "event_coverage_rate": {"name": "event_coverage_rate", "description": "", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}}, "meta": {"primary_keys": ["team_id", "season"]}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "baseball_computer://models/metrics/metrics_team_season_fielding.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "models", "contract": {"enforced": true}, "meta": {"primary_keys": ["team_id", "season"]}}, "created_at": 1702285072.7661812, "relation_name": "\"bc\".\"main_models\".\"metrics_team_season_fielding\"", "raw_code": "{{  metric_table_generator(\"fielding\", [\"team_id\", \"season\"], agg_type=\"player\", regular_season_only=True)  }}", "language": "sql", "refs": [{"name": "event_player_fielding_stats", "package": null, "version": null}, {"name": "seed_franchises", "package": null, "version": null}, {"name": "player_position_team_season_fielding_stats", "package": null, "version": null}, {"name": "player_position_team_season_fielding_stats", "package": null, "version": null}, {"name": "seed_franchises", "package": null, "version": null}, {"name": "team_game_start_info", "package": null, "version": null}, {"name": "player_position_game_fielding_stats", "package": null, "version": null}, {"name": "event_player_fielding_stats", "package": null, "version": null}, {"name": "team_game_start_info", "package": null, "version": null}, {"name": "seed_game_types", "package": null, "version": null}, {"name": "game_start_info", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.baseball_computer.metric_table_generator"], "nodes": ["model.baseball_computer.event_player_fielding_stats", "seed.baseball_computer.seed_franchises", "model.baseball_computer.player_position_team_season_fielding_stats", "model.baseball_computer.team_game_start_info", "model.baseball_computer.player_position_game_fielding_stats", "seed.baseball_computer.seed_game_types", "model.baseball_computer.game_start_info"]}, "compiled_path": null, "contract": {"enforced": true, "alias_types": true, "checksum": "864057bd1e0ef6f375bcf6dd93b9c15d673f6b0c23076a18418eeaf45bd5b404"}, "access": "protected", "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true, "columns": ["team_id", "season"]}], "version": null, "latest_version": null, "deprecation_date": null}, "model.baseball_computer.metrics_team_season_offense": {"database": "bc", "schema": "main_models", "name": "metrics_team_season_offense", "resource_type": "model", "package_name": "baseball_computer", "path": "metrics/metrics_team_season_offense.sql", "original_file_path": "models/metrics/metrics_team_season_offense.sql", "unique_id": "model.baseball_computer.metrics_team_season_offense", "fqn": ["baseball_computer", "metrics", "metrics_team_season_offense"], "alias": "metrics_team_season_offense", "checksum": {"name": "sha256", "checksum": "7911a3d23e28e8d404f6c29a69b50a81ef6018ea21975df55aa1384f32e8b38e"}, "config": {"enabled": true, "alias": null, "schema": "models", "database": null, "tags": [], "meta": {"primary_keys": ["team_id", "season"]}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Aggregate offensive statistics and averages for each team-season.\nRegular season only.\n", "columns": {"team_id": {"name": "team_id", "description": "Retrosheet team ID, 3-character string which identifies the team\n    that a franchise was playing as at a given time.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "season": {"name": "season", "description": "Year, 4-digit integer", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "plate_appearances": {"name": "plate_appearances", "description": "(PA) Number of times a batter came to the plate, including walks, hit by pitches, sacrifices, and at-bats.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "at_bats": {"name": "at_bats", "description": "(AB) Number of plate appearances that ended in either a hit or a non-sacrifice out.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "hits": {"name": "hits", "description": "(H) Number of times a batter reached base safely without an error or fielder's choice.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "singles": {"name": "singles", "description": "(1B) Number of hits in which a batter reached first base.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "doubles": {"name": "doubles", "description": "(2B) Number of hits in which a batter reached second base without the help of an error or an attempted\n    play on another runner.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "triples": {"name": "triples", "description": "(3B) Number of hits in which a batter reached third base without the help of an error or an attempted\n    play on another runner.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "home_runs": {"name": "home_runs", "description": "(HR) Number of hits in which a batter reached home plate without the help of an error or an attempted\n    play on another runner (usually by hitting the ball out of the park).", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "total_bases": {"name": "total_bases", "description": "(TB) Number of bases a batter reached safely without the help of an error or an attempted\n    play on another runner. HR * 4 + 3B * 3 + 2B * 2 + (H - HR - 3B - 2B)", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "strikeouts": {"name": "strikeouts", "description": "(K, SO) Number of times a batter struck out. This includes plays in which a batter reached base on\n    a dropped third strike.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "walks": {"name": "walks", "description": "(BB, occasionally W) Number of times a batter reaches base on called balls out of the strike zone\n    (Four balls for all of MLB history after the 1880s).", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "intentional_walks": {"name": "intentional_walks", "description": "(IBB, occasionally IW) Number of times a batter was intentionally walked. This number may be missing or undercounted\n    in earlier years, as intentional walks were not officially tracked until 1955.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "hit_by_pitches": {"name": "hit_by_pitches", "description": "(HBP) Number of times a batter was awarded first base after being hit by a pitch.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "sacrifice_hits": {"name": "sacrifice_hits", "description": "(SH) Number of times a batter performed a sacrifice bunt to advance another runner.\n    A bunt may count as a sacrifice even if the batter reaches base safely.\n    Unsuccessful attempts are not counted, nor are non-sacrifice bunts.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "sacrifice_flies": {"name": "sacrifice_flies", "description": "(SF) Number of times a batter hit a fly ball that resulted in an out (or error),\n    but allowed a runner to score on the throw.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "reached_on_errors": {"name": "reached_on_errors", "description": "(ROE) Number of times a batter reached base safely due to an error.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "reached_on_interferences": {"name": "reached_on_interferences", "description": "Number of times a batter was awarded first base for being illegally hindered\n    by a fielder, usually the catcher.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "inside_the_park_home_runs": {"name": "inside_the_park_home_runs", "description": "Number of times a batter hit a home run without the ball leaving the field of play.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "ground_rule_doubles": {"name": "ground_rule_doubles", "description": "Number of times a batter was awarded a double on a ball that went out of play after\n    bouncing in fair territory.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "infield_hits": {"name": "infield_hits", "description": "Number of times a batter reached base safely on a hit that did not reach the outfield.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "on_base_opportunities": {"name": "on_base_opportunities", "description": "Number of plate appearances in which a batter either did or did not reach base,\n    as defined by the formula for on-base percentage. Note that this is very similar to but different\n    from plate_appearances, as it does not include sacrifice hits or interference.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "on_base_successes": {"name": "on_base_successes", "description": "Number of hits, walks, and hit by pitches that serves as the numerator in the formula\n    for on-base percentage.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "runs_batted_in": {"name": "runs_batted_in", "description": "(RBI) Number of runs that scored as a result of a batter's plate appearance. This is usually\n    the number of runs that scored on the play, but errors and other similar cases may cause\n    some runs not to be credited to the batter. Scorerkeeper discretion occasionally causes differences\n    between the number in the database and the official MLB total.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "grounded_into_double_plays": {"name": "grounded_into_double_plays", "description": "(GIDP) Number of times a batter grounded into a double play. This is the conventional way\n    to record a double play and as such is an important statistic on its own. Games without\n    play-by-play accounts don't have data on the trajectory of the double play, so\n    this number is not populated for those games.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "double_plays": {"name": "double_plays", "description": "(DP) Number of times a play ended in two outs being recorded.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "triple_plays": {"name": "triple_plays", "description": "(TP) Number of times a play ended in three outs being recorded.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batting_outs": {"name": "batting_outs", "description": "Number of outs that \"should\" have been recorded as a result of a batter's plate apperances.\n    A batting out is still counted if no actual out is recorded on an error or a failed fielder's choice.\n    Outs on baserunners (including the batter trying to stretch a hit) do not count here.\n    Grounded-into-double-plays count as two outs, but other types of double plays do not (the \n    idea here is that the baserunner is responsible on other types of double plays).\n    Unofficial stat, but designed here to be generally useful in determining rates of official stats.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "balls_in_play": {"name": "balls_in_play", "description": "Number of plate appearances that resulted in a live\n    ball on the field of play. The difference between this and batted_balls is that\n    balls_in_play does not include out-of-the-park home runs. This distinction is important\n    for calculating batting average on balls in play, a stat designed to isolate at_bats\n    in which the defense was involved.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "balls_batted": {"name": "balls_batted", "description": "Number of plate appearances that ended in a fair ball or a foul flyout. This is equivalent\n    to balls_in_play + home_runs, and may be a more useful denominator for \"in play\" stats depending\n    on the context.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "trajectory_fly_ball": {"name": "trajectory_fly_ball", "description": "(FB) Number of plate appearances that ended in a fly ball. A fly ball is defined here\n    as the subset of balls hit in the air that are neither line drives nor pop flies.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "trajectory_ground_ball": {"name": "trajectory_ground_ball", "description": "(GB) Number of plate appearances that ended in a ground ball, also called a grounder. A ground ball is defined\n    here to only include swings, not bunts, although older data may not have a proper distinction. Ground\n    balls tend to be easy to distinguish between other types of contact, but Statcast-era data defines it\n    as balls with a launch angle under 10 degrees.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "trajectory_line_drive": {"name": "trajectory_line_drive", "description": "(LD) Number of plate appearances that ended in a line drive, also called a liner. Line drives are distiguished\n    from fly balls by some combination of angle and exit velocity. In the Statcast era, line drives\n    are defined purely in terms of launch angle (10-25 degrees), but just about any colloquial definition\n    involves hard-hitness as well. The line-drive-fly-ball distinction is by far the most arbitrary\n    and subjective trajectory categorization. Many scorekeepers never included line drives, while others counted\n    any successful in-play air-hit as a line drive. Nevertheless, the distinction is a crucial one,\n    as line drives are by far the most likely type of batted ball to result in a hit (even when they are not hit very hard).", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "trajectory_pop_up": {"name": "trajectory_pop_up", "description": "(sometimes PU)  Number of plate appearances that ended in a pop-up, also called a pop fly.\n    Pop-ups are distinguished from fly balls in that they are hit at a higher angle, tend to be\n    hit with less exit velocity, and (as a result) end up in the infield or shallow outfield. Before\n    Statcast-era standardization, the distinction between a fly ball and a pop-up was a matter of\n    scorerkeeper judgement, and many unofficial scorekeepers did not distinguish between the two.\n    Statcast determines pop flies exclusively by angle (> 50 degrees).", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "trajectory_unknown": {"name": "trajectory_unknown", "description": "Number of plate appearances ending in a batted ball whose trajectory was not recorded and cannot\n    be reliably deduced from context. This number includes balls that we know were hit in the air,\n    but do not know which kind of air ball (FB/PU/LD) they were (see trajectory_broad_classification_unknown\n    for a number that does not include those balls). The strong majority of batted balls prior to 1988\n    fall into this category, especially hits.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "trajectory_known": {"name": "trajectory_known", "description": "Number of plate appearances ending in a batted ball whose trajectory was recorded or was reliably deduced\n    from the context. An example of reliable deduction is an at-bat with the fielding play 6-3, which\n    almost always is a ground ball fielded by the shortstop and thrown to the first baseman. See\n    `calc_batted_ball_type` for the deduction logic.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "trajectory_broad_air_ball": {"name": "trajectory_broad_air_ball", "description": "Number of plate appearances that ended in an air ball (a fly ball, line drive, or pop-up).\n    Because it is much easier to deduce that a ball was hit in the air than it is to deduce the exact\n    trajectory, this number field is more reliably populated than any of its three consituent parts.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "trajectory_broad_ground_ball": {"name": "trajectory_broad_ground_ball", "description": "Same as `trajectory_ground_ball`.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "trajectory_broad_unknown": {"name": "trajectory_broad_unknown", "description": "Number of plate appearances ending in a batted ball whose trajectory was not recorded and cannot\n    be reliably deduced from context, even to the extent of knowing whether it was a ground ball or an air ball.\n    This will include a disproportionate number of hits, which are more likely to be missing trajectory data\n    and harder to make deductions about.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "trajectory_broad_known": {"name": "trajectory_broad_known", "description": "Number of plate appearances ending in a batted ball whose ground/air status was recorded or\n    reliably deduced from the context. This is the sum of `trajectory_broad_air_ball` and\n    `trajectory_broad_ground_ball`. Outs in play have excellent coverage historically here,\n    even for older games.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "bunts": {"name": "bunts", "description": "Number of plate appearances ending in an in-play bunt.\n    This does not include strikeouts on foul bunts with two strikes.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_distance_plate": {"name": "batted_distance_plate", "description": "Number of plate appearances in which the ball was batted to catcher's area around home plate.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_distance_infield": {"name": "batted_distance_infield", "description": "Number of plate appearances in which the ball was batted to the infield (not including the catcher).\n    All ground balls are included here, regardless of whether they made it through to the outfield.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_distance_outfield": {"name": "batted_distance_outfield", "description": "Number of plate appearances in which the ball was hit on the fly to the outfield.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_distance_unknown": {"name": "batted_distance_unknown", "description": "Number of plate appearances in which the ball was hit, but the distance was not recorded\n    and cannot be reliably deduced from context.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_distance_known": {"name": "batted_distance_known", "description": "Number of plate appearances in which the ball was hit, and the distance was either\n    recorded or reliably deduced from context.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "fielded_by_battery": {"name": "fielded_by_battery", "description": "Number of plate appearances in which the ball was fielded by the pitcher or catcher.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "fielded_by_infielder": {"name": "fielded_by_infielder", "description": "Number of plate appearances in which the ball was fielded by an infielder.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "fielded_by_outfielder": {"name": "fielded_by_outfielder", "description": "Number of plate appearances in which the ball was fielded by an outfielder.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "fielded_by_known": {"name": "fielded_by_known", "description": "Number of plate appearances in which the ball was fielded by a player, and the player was recorded.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "fielded_by_unknown": {"name": "fielded_by_unknown", "description": "Number of plate appearances in which the ball was fielded by a player, but the player was not recorded.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_angle_left": {"name": "batted_angle_left", "description": "Number of plate appearances in which the ball was batted to the left side of the field.\n    This includes balls where the location was not recorded, but the fielder is on the left side\n    (3B, LF). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_angle_right": {"name": "batted_angle_right", "description": "Number of plate appearances in which the ball was batted to the right side of the field.\n    This includes balls where the location was not recorded, but the fielder is on the right side\n    (1B, RF). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_angle_middle": {"name": "batted_angle_middle", "description": "Number of plate appearances in which the ball was batted to the middle of the field.\n    This includes balls where the location was not recorded, but the fielder is up the middle\n    (P, 2B, SS, CF). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_angle_unknown": {"name": "batted_angle_unknown", "description": "Number of plate appearances in which the ball was batted, but we don't have enough location\n    to determine the spray angle.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_angle_known": {"name": "batted_angle_known", "description": "Number of plate appearances in which the ball was hit and we have enough location to determine\n    the spray angle.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_location_plate": {"name": "batted_location_plate", "description": "Number of plate appearances in which the ball was batted to the catcher's area around home plate.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_location_right_infield": {"name": "batted_location_right_infield", "description": "Number of plate appearances in which the ball was batted to the right side of the infield.\n    This includes balls where the location was not recorded, but the fielder is on the right side\n    (1B). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_location_middle_infield": {"name": "batted_location_middle_infield", "description": "Number of plate appearances in which the ball was batted to the middle of the infield.\n    This includes balls where the location was not recorded, but the fielder is up the middle\n    (P, SS, 2B). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_location_left_infield": {"name": "batted_location_left_infield", "description": "Number of plate appearances in which the ball was batted to the left side of the infield.\n    This includes balls where the location was not recorded, but the fielder is on the left side\n    (3B). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_location_left_field": {"name": "batted_location_left_field", "description": "Number of plate appearances in which the ball was batted to the left side of the outfield.\n    This includes balls where the location was not recorded, but the fielder is on the left side\n    (LF). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_location_center_field": {"name": "batted_location_center_field", "description": "Number of plate appearances in which the ball was batted to the center of the outfield.\n    This includes balls where the location was not recorded, but the fielder is up the middle\n    (CF). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_location_right_field": {"name": "batted_location_right_field", "description": "Number of plate appearances in which the ball was batted to the right side of the outfield.\n    This includes balls where the location was not recorded, but the fielder is on the right side\n    (RF, CF). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_location_unknown": {"name": "batted_location_unknown", "description": "Number of plate appearances in which the ball was batted, but we don't have enough location\n    to determine the specific location.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_location_known": {"name": "batted_location_known", "description": "Number of plate appearances in which the ball was batted and we have enough location to determine\n    the specific location.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_balls_pulled": {"name": "batted_balls_pulled", "description": "Number of plate appearances in which the ball was pulled (the left side for right-handed batters, the right side for left-handed batters).", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_balls_opposite_field": {"name": "batted_balls_opposite_field", "description": "Number of plate appearances in which the ball was hit to the opposite field (the right side for right-handed batters, the left side for left-handed batters).", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "runs": {"name": "runs", "description": "(R) Number of runs scored.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "times_reached_base": {"name": "times_reached_base", "description": "Number of times a batter ended a plate appearance on base, even if it was through a fielder's choice, error, etc.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "stolen_bases": {"name": "stolen_bases", "description": "(SB) Number of successful stolen bases.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "caught_stealing": {"name": "caught_stealing", "description": "(CS) Number of times a runner was caught stealing.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "picked_off": {"name": "picked_off", "description": "(PO, at risk of confusion with putouts) Number of times a runner was picked off.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "picked_off_caught_stealing": {"name": "picked_off_caught_stealing", "description": "(POCS) Number of times a runner was picked off, but instead of going back to the bag,\n    tried to run to the next base and was put out.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "outs_on_basepaths": {"name": "outs_on_basepaths", "description": "Number of outs recorded by a baserunner (this is not mutually exclusive with outs recorded by the batter\n    in cases like failed advances or dropped third-strike putouts).", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "unforced_outs_on_basepaths": {"name": "unforced_outs_on_basepaths", "description": "Number of outs recorded by a baserunner that was not the result of a force on the runner.\n    \"Unforced\" is meant to be in both the literal sense of a force not being in play, but also\n    the figurative sense of the runner being responsible for the out. The latter may or may not\n    be the best interpretation of any given play, but it is useful to assign responsibility to the\n    runner by default in those contexts.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "outs_avoided_on_errors": {"name": "outs_avoided_on_errors", "description": "Number of times that a baserunner would have been out, but an error allowed them to remain\n    on the basepaths (either staying put or advancing).", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "advances_on_wild_pitches": {"name": "advances_on_wild_pitches", "description": "(WP) Number of times a baserunner advanced on a wild pitch.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "advances_on_passed_balls": {"name": "advances_on_passed_balls", "description": "(PB) Number of times a baserunner advanced on a passed ball.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "advances_on_balks": {"name": "advances_on_balks", "description": "(sometimes BK) Number of times a baserunner advanced on a balk.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "advances_on_unspecified_plays": {"name": "advances_on_unspecified_plays", "description": "Number of times a baserunner advanced for an unspecified reason.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "advances_on_defensive_indifference": {"name": "advances_on_defensive_indifference", "description": "(DI) Number of times a baserunner advanced on defensive indifference.\n   Defensive indifference is a judgement call by the official scorer that the defense\n   did not try to stop the runner from stealing a base. This usually happens\n   when the defense has a lead late in the game.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "advances_on_errors": {"name": "advances_on_errors", "description": "Number of times a baserunner advanced on an error.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "plate_appearances_while_on_base": {"name": "plate_appearances_while_on_base", "description": "Number of plate appearances in which the baserunner started on 1st, 2nd, or 3rd base.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "balls_in_play_while_running": {"name": "balls_in_play_while_running", "description": "Number of balls in play while either batting or on base.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "balls_in_play_while_on_base": {"name": "balls_in_play_while_on_base", "description": "Number of balls in play in which the baserunner started on 1st, 2nd, or 3rd base.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batter_total_bases_while_running": {"name": "batter_total_bases_while_running", "description": "Number of total bases accumulated by the batter while the baserunner was running, including the batter.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batter_total_bases_while_on_base": {"name": "batter_total_bases_while_on_base", "description": "Number of total bases accumulated by the batter while the baserunner was on base, excluding the batter.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "extra_base_advance_attempts": {"name": "extra_base_advance_attempts", "description": "Number of times a baserunner tried to advance by a greater number of bases than the batter.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "bases_advanced": {"name": "bases_advanced", "description": "Number of bases advanced by a baserunner, including the batter.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "bases_advanced_on_balls_in_play": {"name": "bases_advanced_on_balls_in_play", "description": "Number of bases advanced by a baserunner on a ball in play, including the batter.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "surplus_bases_advanced_on_balls_in_play": {"name": "surplus_bases_advanced_on_balls_in_play", "description": "Number of bases advanced by a baserunner on a ball in play minus the number of total bases\n    accumulated by the batter on the same play. For example, if a runner goes from first to third\n    on a single, this number is 1 (3 - 2). If a runner only goes from second to third on a double,\n    this number is -1 (1 - 2).", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "outs_on_extra_base_advance_attempts": {"name": "outs_on_extra_base_advance_attempts", "description": "Number of times a baserunner was out attempting to advance\n    by a greater number of bases than the batter. This includes\n    batters who were put out trying to stretch a hit to the next base.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "pitches": {"name": "pitches", "description": "Number of pitches thrown.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "swings": {"name": "swings", "description": "Number of pitches that were swung at.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "swings_with_contact": {"name": "swings_with_contact", "description": "Number of pitches that were swung at and made contact.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "strikes": {"name": "strikes", "description": "Number of pitches that were called or swinging strikes.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "strikes_called": {"name": "strikes_called", "description": "Number of pitches that were called strikes.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "strikes_swinging": {"name": "strikes_swinging", "description": "Number of pitches that were swung on and missed (mutually exclusive\n    with `swings_with_contact`, which also count as strikes).", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "strikes_foul": {"name": "strikes_foul", "description": "Number of pitches that were fouled off.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "strikes_foul_tip": {"name": "strikes_foul_tip", "description": "Number of pitches that were fouled off and caught by the catcher for strike three.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "strikes_in_play": {"name": "strikes_in_play", "description": "Number of pitches that were swung on and batted into play.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "strikes_unknown": {"name": "strikes_unknown", "description": "Number of pitches that we know were strikes, but don't know what kind.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "balls": {"name": "balls", "description": "Number of pitches that were called balls.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "balls_called": {"name": "balls_called", "description": "Number of pitches that were called balls (as opposed to automatic balls that were\n    not actually thrown).", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "balls_intentional": {"name": "balls_intentional", "description": "Number of pitches that were called balls as part of an intentional walk.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "balls_automatic": {"name": "balls_automatic", "description": "Number of pitches that were called balls on an automatic walk or a delay penalty.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "unknown_pitches": {"name": "unknown_pitches", "description": "Number of pitches that were thrown without any other information recorded.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "pitchouts": {"name": "pitchouts", "description": "Number of pitches that were thrown as pitchouts. A pitchout is a pitch that is thrown\n    intentionally very far outside in order to make it easier for the catcher to throw out\n    a baserunner who is likely to steal.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "pitcher_pickoff_attempts": {"name": "pitcher_pickoff_attempts", "description": "Number of times the pitcher attempted to pick off a baserunner.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "catcher_pickoff_attempts": {"name": "catcher_pickoff_attempts", "description": "Number of times the catcher attempted to pick off a baserunner.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "pitches_blocked_by_catcher": {"name": "pitches_blocked_by_catcher", "description": "Number of pitches that were blocked by the catcher.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "pitches_with_runners_going": {"name": "pitches_with_runners_going", "description": "Number of pitches that were thrown while a baserunner was on the move\n    (as part of a steal or hit-and-run).", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "passed_balls": {"name": "passed_balls", "description": "(PB) Number of passed balls.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "wild_pitches": {"name": "wild_pitches", "description": "(WP) Number of wild pitches.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "balks": {"name": "balks", "description": "(BK) Number of balks.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "left_on_base": {"name": "left_on_base", "description": "(LOB) At an individual level, the number of baserunners that a batter failed to advance during a plate appearance.\n    At a team level, the number of baserunners remaining on base at the end of an inning. In order to count, baserunners\n    must not have scored or been put out.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "left_on_base_with_two_outs": {"name": "left_on_base_with_two_outs", "description": "(LOB) At an individual level, the number of baserunners that remain on base (unscored and not out) after a plate appearance that ends with the third out recorded. At a team level, this is interchangable with `left_on_base`.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "stolen_bases_second": {"name": "stolen_bases_second", "description": "Number of successful steals of second base.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "stolen_bases_third": {"name": "stolen_bases_third", "description": "Number of successful steals of third base.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "stolen_bases_home": {"name": "stolen_bases_home", "description": "Number of successful steals of home.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "caught_stealing_second": {"name": "caught_stealing_second", "description": "Number of times a runner was caught stealing second base.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "caught_stealing_third": {"name": "caught_stealing_third", "description": "Number of times a runner was caught stealing third base.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "caught_stealing_home": {"name": "caught_stealing_home", "description": "Number of times a runner was caught stealing home.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "stolen_base_opportunities": {"name": "stolen_base_opportunities", "description": "Number of events in which a runner had an opportunity to steal a base as the\n    lead basestealer OR the runner recorded a SB/CS in any situation.\n    \"Opportunity\" is defined as a situation in which the next base\n    was empty at the start of the event (not including the batter).\n    No-play events excluded, but events without plate appearances are included.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "stolen_base_opportunities_second": {"name": "stolen_base_opportunities_second", "description": "Number of opportunities to steal second base (see `stolen_base_opportunities` for detailed criteria).", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "stolen_base_opportunities_third": {"name": "stolen_base_opportunities_third", "description": "Number of opportunities to steal third base (see `stolen_base_opportunities` for detailed criteria).", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "stolen_base_opportunities_home": {"name": "stolen_base_opportunities_home", "description": "Number of opportunities to steal home (see `stolen_base_opportunities` for detailed criteria).", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "picked_off_first": {"name": "picked_off_first", "description": "Number of times a runner was picked off first base.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "picked_off_second": {"name": "picked_off_second", "description": "Number of times a runner was picked off second base.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "picked_off_third": {"name": "picked_off_third", "description": "Number of times a runner was picked off third base.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "times_force_on_runner": {"name": "times_force_on_runner", "description": "Number of events that a force existed on the runner's next base.\n    The batter is counted as having a force on them (at first).\n    No-play events excluded, but events without plate appearances are included.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "times_lead_runner": {"name": "times_lead_runner", "description": "Number of events that a runner was the lead runner on a play\n    (the runner who is furthest along the basepaths).\n    Batter is never counted as the lead runner. No-play events excluded,\n    but events without plate appearances are included.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "times_next_base_empty": {"name": "times_next_base_empty", "description": "Number of events that the runner's next base was empty.\n    The batter is counted on events where first base is empty.\n    No-play events excluded, but events without plate appearances are included.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "extra_base_chances": {"name": "extra_base_chances", "description": "", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "extra_bases_taken": {"name": "extra_bases_taken", "description": "", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batting_average": {"name": "batting_average", "description": "(AVG, BA) Hits divided by at bats. Historically speaking, the single most well-known hitting statistic.\n    It retains much of its popularity and cultural significance today, if not its importance: the\n    \"batting title\" goes to the player with the highest batting average.\n    While batting average is rightly maligned for the limited picture it captures of a player's offensive\n    contribution, it's still a nice object of study when learning about statistical inference.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "on_base_percentage": {"name": "on_base_percentage", "description": "(OBP) Measures a player's ability to get on base. It is calculated as (H + BB + HBP)/(AB + BB + HBP + SF),\n    which is confusingly a bit different from on-base events per plate appearance. We have `on_base_successes`\n    and `on_base_opportunities` to make the OBP calculation simpler. The modern analogue to batting average,\n    both in what it tries to measure and in its cultural significance.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "slugging_percentage": {"name": "slugging_percentage", "description": "(SLG) Total bases per at bat. More of an average than a percentage, but the name has stuck (though\n    you'll also hear \"slugging average\"). The simplest and most well-known measure of the \"advancement factor\"\n    of a player's offensive ability.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "on_base_plus_slugging": {"name": "on_base_plus_slugging", "description": "(OPS) On-base percentage plus slugging percentage. Popularized in the 1980s, OPS is a simple way to\n    combine the two aspects of a player's hitting ability. In terms of its overall precision, it is easily surpassed\n    by other metrics, but it remains hard to beat for its economy of calculation and expression.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "isolated_power": {"name": "isolated_power", "description": "(ISO) Slugging percentage minus batting average, or the average number of extra bases per at bat.\n    An intuitive expression of a player's raw power or ability to push runners around the bases.\n    Less indicative of overall ability than slugging percentage, but more precise in what it tries to measure.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "secondary_average": {"name": "secondary_average", "description": "(SecA) A statistic invented by Bill James that measures a player's ability to gain bases by means independent\n    of batting average. Its formula is (TB - H + BB + SB - CS)/(AB). A good way to answer the question of which players\n    would be most underrated by only looking at their batting averages. Also a good way to show how well you can understand\n    a player's offensive ability without taking their batting average into account.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "batting_average_on_balls_in_play": {"name": "batting_average_on_balls_in_play", "description": "(BABIP) A measure of the rate at which fieldable balls go for hits. It is calculated as (H - HR)/(AB - K - HR + SF).\n    Pitchers are generally (but controversially) thought to have little control over balls in play, so a high BABIP\n    is a good sign that that they have been unlucky or have played in front of a poor defense. Most pitchers do have some\n    \"true\" BABIP ability that is different from the league average, but the difference is usually much smaller than the year-to-year\n    variance in their actual BABIP. In rare cases, pitchers can have such a strong influence on balls in play that their\n    contribution is measurable in smaller sample sizes. For pitchers in the dead-ball era and earlier, it makes less sense\n    to treat BABIP as luck because a much higher percentage of at-bats ended in balls in play, and pitchers were more focused\n    on getting outs by inducing weak contact without having to worry about home runs.\n\n    All of the above is also true for hitters, but to a much lesser extent, as hitters face different defenses, control\n    their ability to beat out grounders for infield hits, and generally have more control over the quality of contact they\n    make. BABIP can also be misleading for hitters because it excludes home runs, so Barry Bonds ends up having a lower BABIP\n    even though there were occasional eyewitness reports of his making solid contact.\n\n    BABIP was invented by Voros McCracken around the turn of the millenium, and it remains the most prominent\n    example of a statistic that tracks player luck as opposed to skill or performance.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "home_run_rate": {"name": "home_run_rate", "description": "(HR/PA) Home runs per plate appearance.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "walk_rate": {"name": "walk_rate", "description": "(BB/PA) Walks per plate appearance.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "strikeout_rate": {"name": "strikeout_rate", "description": "(K/PA) Strikeouts per plate appearance.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "stolen_base_percentage": {"name": "stolen_base_percentage", "description": "(SB%) The rate of stolen base attempts that are successful. Calculated as SB/(SB + CS).", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "event_coverage_rate": {"name": "event_coverage_rate", "description": "", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "known_trajectory_rate_outs": {"name": "known_trajectory_rate_outs", "description": "Rate of outs in play for which we know the detailed trajectory of the batted ball.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "known_trajectory_rate_hits": {"name": "known_trajectory_rate_hits", "description": "Rate of hits for which we know the detailed trajectory of the batted ball.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "known_trajectory_rate": {"name": "known_trajectory_rate", "description": "Overall rate of batted balls for which we know the detailed trajectory.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "known_trajectory_broad_rate_outs": {"name": "known_trajectory_broad_rate_outs", "description": "Overall rate of outs in play for which we know whether\n    the ball was hit in the air or on the ground.\n    This is generally very high even for the oldest play-by-play data.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "known_trajectory_broad_rate_hits": {"name": "known_trajectory_broad_rate_hits", "description": "Overall rate of hits for which we know whether\n    the ball was hit in the air or on the ground.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "known_trajectory_broad_rate": {"name": "known_trajectory_broad_rate", "description": "Overall rate of batted balls for which we know whether\n    the ball was hit in the air or on the ground.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "known_trajectory_out_hit_ratio": {"name": "known_trajectory_out_hit_ratio", "description": "The ratio of `known_trajectory_rate_outs` to `known_trajectory_rate_hits`.\n    This ratio is generally very high for years without complete batted ball data,\n    which makes it useful for estimating quantities that would be affected by\n    the selection bias.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "known_trajectory_broad_out_hit_ratio": {"name": "known_trajectory_broad_out_hit_ratio", "description": "The ratio of `known_trajectory_broad_rate_outs` to `known_trajectory_broad_rate_hits`.\n    This ratio is generally very high for years without complete batted ball data,\n    which makes it useful for estimating quantities that would be affected by\n    the selection bias.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "air_ball_rate_outs": {"name": "air_ball_rate_outs", "description": "The rate of outs in play that were fly balls, pop-ups, or line drives.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "ground_ball_rate_outs": {"name": "ground_ball_rate_outs", "description": "The rate of outs in play that were ground balls.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "ground_air_out_ratio": {"name": "ground_air_out_ratio", "description": "The ratio of `ground_ball_rate_outs` to `air_ball_rate_outs`.\n    This is a useful metric by itself because it is unaffected by\n    the higher percentage of missing data on hits, so it is probably\n    a more accurate measure of overall ground ball rate than `ground_ball_rate`\n    itself for most seasons.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "air_ball_hit_rate": {"name": "air_ball_hit_rate", "description": "The rate of hits in play that were fly balls, pop-ups, or line drives.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "ground_ball_hit_rate": {"name": "ground_ball_hit_rate", "description": "The rate of hits in play that were ground balls.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "ground_air_hit_ratio": {"name": "ground_air_hit_ratio", "description": "The ratio of `ground_ball_hit_rate` to `air_ball_hit_rate`.\n    Difference between this and `ground_air_out_ratio` is potentially interesting,\n    but will be noisy for older years.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "fly_ball_rate": {"name": "fly_ball_rate", "description": "Of all batted_balls for which we know the trajectory,\n    The rate that were fly balls.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "line_drive_rate": {"name": "line_drive_rate", "description": "Of all batted_balls for which we know the trajectory,\n    The rate that were line drives.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "pop_up_rate": {"name": "pop_up_rate", "description": "Of all batted_balls for which we know the trajectory,\n    The rate that were pop-ups.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "ground_ball_rate": {"name": "ground_ball_rate", "description": "Of all batted_balls for which we know the trajectory,\n    The rate that were ground balls.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "coverage_weighted_air_ball_batting_average": {"name": "coverage_weighted_air_ball_batting_average", "description": "The batting average of batted_balls that were fly balls, pop-ups, or line drives,\n    weighted according to the `known_trajectory_broad_out_hit_ratio`. This is an attempt\n    to measure trajectory-specific BABIP even in years where trajectory data is rarely\n    present for hits. While it handles that specific bias, it is still likely to be noisy\n    because of the small sample size of known-trajectory balls.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "coverage_weighted_ground_ball_batting_average": {"name": "coverage_weighted_ground_ball_batting_average", "description": "The batting average of batted_balls that were ground balls,\n    weighted according to the `known_trajectory_broad_out_hit_ratio`. This is an attempt\n    to measure trajectory-specific BABIP even in years where trajectory data is rarely\n    present for hits. While it handles that specific bias, it is still likely to be noisy\n    because of the small sample size of known-trajectory balls.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "coverage_weighted_fly_ball_batting_average": {"name": "coverage_weighted_fly_ball_batting_average", "description": "The batting average of batted_balls that were fly balls,\n    weighted according to the `known_trajectory_out_hit_ratio`. This is an attempt\n    to measure trajectory-specific BABIP even in years where trajectory data is rarely\n    present for hits. It is still vulnerable to the variance and arbitrariness with which\n    historical scorekeepers differentiated fly balls from line drives and pop-ups.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "coverage_weighted_line_drive_batting_average": {"name": "coverage_weighted_line_drive_batting_average", "description": "The batting average of batted_balls that were line drives,\n    weighted according to the `known_trajectory_out_hit_ratio`. This is an attempt\n    to measure trajectory-specific BABIP even in years where trajectory data is rarely\n    present for hits. It is still vulnerable to the variance and arbitrariness with which\n    historical scorekeepers differentiated line drives from other air outs, which was\n    extremely high all the way up to the Statcast era.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "coverage_weighted_pop_up_batting_average": {"name": "coverage_weighted_pop_up_batting_average", "description": "The batting average of batted_balls that were pop-ups,\n    weighted according to the `known_trajectory_out_hit_ratio`. This is an attempt\n    to measure trajectory-specific BABIP even in years where trajectory data is rarely\n    present for hits. It is still vulnerable to the variance and arbitrariness with which\n    historical scorekeepers differentiated pop-ups from other air outs.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "known_angle_rate_outs": {"name": "known_angle_rate_outs", "description": "Rate of batted-ball outs for which we know (or have a good proxy for)\n    whether the ball was hit to the left, right, or middle of the field.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "known_angle_rate_hits": {"name": "known_angle_rate_hits", "description": "Rate of batted-ball hits for which we know (or have a good proxy for)\n    whether the ball was hit to the left, right, or middle of the field.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "known_angle_rate": {"name": "known_angle_rate", "description": "Rate of batted balls for which we know (or have a good proxy for)\n    whether the ball was hit to the left, right, or middle of the field.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "known_angle_out_hit_ratio": {"name": "known_angle_out_hit_ratio", "description": "The ratio of `known_angle_rate_outs` to `known_angle_rate_hits`.\n    This ratio is generally very high for years without complete batted ball data,\n    which makes it useful for estimating quantities that would be affected by\n    the selection bias. Angle is generally better known than location itself, because\n    when a batter gets a hit, we often know which outfielder fielded the ball even\n    though we don't know how it got there.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "angle_left_rate_outs": {"name": "angle_left_rate_outs", "description": "The rate of batted-ball outs that were hit to the left side of the field.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "angle_left_rate_hits": {"name": "angle_left_rate_hits", "description": "The rate of hits that were hit to the left side of the field.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "angle_left_rate": {"name": "angle_left_rate", "description": "The overall rate of batted balls that were hit to the left side of the field.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "coverage_weighted_angle_left_batting_average": {"name": "coverage_weighted_angle_left_batting_average", "description": "The batting average on batted balls that were hit to the left side of the field,\n    weighted according to the `known_angle_out_hit_ratio`. This is an attempt\n    to measure angle-specific BABIP even in years where angle data is rarely\n    present for hits.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "angle_right_rate_outs": {"name": "angle_right_rate_outs", "description": "The rate of batted-ball outs that were hit to the right side of the field.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "angle_right_rate_hits": {"name": "angle_right_rate_hits", "description": "The rate of hits that were hit to the right side of the field.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "angle_right_rate": {"name": "angle_right_rate", "description": "The overall rate of batted balls that were hit to the right side of the field.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "coverage_weighted_angle_right_batting_average": {"name": "coverage_weighted_angle_right_batting_average", "description": "The batting average on batted balls that were hit to the right side of the field,\n    weighted according to the `known_angle_out_hit_ratio`. This is an attempt\n    to measure angle-specific BABIP even in years where angle data is rarely\n    present for hits.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "angle_middle_rate_outs": {"name": "angle_middle_rate_outs", "description": "The rate of batted-ball outs that were hit to the middle of the field.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "angle_middle_rate_hits": {"name": "angle_middle_rate_hits", "description": "The rate of hits that were hit to the middle of the field.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "angle_middle_rate": {"name": "angle_middle_rate", "description": "The overall rate of batted balls that were hit to the middle of the field.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "coverage_weighted_angle_middle_batting_average": {"name": "coverage_weighted_angle_middle_batting_average", "description": "The batting average on batted balls that were hit to the middle of the field,\n    weighted according to the `known_angle_out_hit_ratio`. This is an attempt\n    to measure angle-specific BABIP even in years where angle data is rarely\n    present for hits.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "pulled_rate_outs": {"name": "pulled_rate_outs", "description": "`angle_right_rate_outs` for lefty batters\n    and `angle_left_rate_outs` for righty batters.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "pulled_rate_hits": {"name": "pulled_rate_hits", "description": "`angle_right_rate_hits` for lefty batters\n    and `angle_left_rate_hits` for righty batters.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "pulled_rate": {"name": "pulled_rate", "description": "`angle_right_rate` for lefty batters\n    and `angle_left_rate` for righty batters.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "coverage_weighted_pulled_batting_average": {"name": "coverage_weighted_pulled_batting_average", "description": "`coverage_weighted_angle_right_batting_average` for lefty batters\n    and `coverage_weighted_angle_left_batting_average` for righty batters.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "opposite_field_rate_outs": {"name": "opposite_field_rate_outs", "description": "`angle_left_rate_outs` for lefty batters\n    and `angle_right_rate_outs` for righty batters.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "opposite_field_rate_hits": {"name": "opposite_field_rate_hits", "description": "`angle_left_rate_hits` for lefty batters\n    and `angle_right_rate_hits` for righty batters.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "opposite_field_rate": {"name": "opposite_field_rate", "description": "`angle_left_rate` for lefty batters\n    and `angle_right_rate` for righty batters.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "coverage_weighted_opposite_field_batting_average": {"name": "coverage_weighted_opposite_field_batting_average", "description": "`coverage_weighted_angle_left_batting_average` for lefty batters\n    and `coverage_weighted_angle_right_batting_average` for righty batters.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "stolen_base_attempt_rate_second": {"name": "stolen_base_attempt_rate_second", "description": "The rate of stolen base opportunities taken\n    when the runner was on first base (trying to steal second).\n    See `stolen_base_opportunities` for the definition.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "stolen_base_attempt_rate_third": {"name": "stolen_base_attempt_rate_third", "description": "The rate of stolen base opportunities taken\n    when the runner was on second base (trying to steal third).\n    See `stolen_base_opportunities` for the definition.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "stolen_base_attempt_rate_home": {"name": "stolen_base_attempt_rate_home", "description": "The rate of stolen base opportunities taken\n    when the runner was on third base (trying to steal home).\n    See `stolen_base_opportunities` for the definition.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "unforced_out_rate": {"name": "unforced_out_rate", "description": "The rate of appearances on the basepaths that ended in an unforced out.\n    See `unforced_outs_on_basepaths` for the definition.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "pitch_strike_rate": {"name": "pitch_strike_rate", "description": "The rate of pitches that were strikes.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "pitch_contact_rate": {"name": "pitch_contact_rate", "description": "The rate of pitches where some kind of contact was made.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "pitch_swing_rate": {"name": "pitch_swing_rate", "description": "The rate of pitches where the batter swung (and either made\n    contact or missed).", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "pitch_ball_rate": {"name": "pitch_ball_rate", "description": "The rate of pitches that were balls.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "pitch_swing_and_miss_rate": {"name": "pitch_swing_and_miss_rate", "description": "The rate of pitches where the batter swung and missed.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "pitch_foul_rate": {"name": "pitch_foul_rate", "description": "The rate of pitches that were fouled off.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "pitched_called_strike_rate": {"name": "pitched_called_strike_rate", "description": "The rate of pitches that were called strikes.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "pitch_data_coverage_rate": {"name": "pitch_data_coverage_rate", "description": "The rate of plate appearances for which we have pitch-by-pitch data.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}}, "meta": {"primary_keys": ["team_id", "season"]}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "baseball_computer://models/metrics/metrics_team_season_offense.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "models", "contract": {"enforced": true}, "meta": {"primary_keys": ["team_id", "season"]}}, "created_at": 1702285082.934763, "relation_name": "\"bc\".\"main_models\".\"metrics_team_season_offense\"", "raw_code": "{{  metric_table_generator(\"offense\", [\"team_id\", \"season\"], agg_type=\"player\", regular_season_only=True)  }}", "language": "sql", "refs": [{"name": "event_offense_stats", "package": null, "version": null}, {"name": "seed_franchises", "package": null, "version": null}, {"name": "player_team_season_offense_stats", "package": null, "version": null}, {"name": "player_team_season_offense_stats", "package": null, "version": null}, {"name": "seed_franchises", "package": null, "version": null}, {"name": "team_game_start_info", "package": null, "version": null}, {"name": "player_game_offense_stats", "package": null, "version": null}, {"name": "event_offense_stats", "package": null, "version": null}, {"name": "team_game_start_info", "package": null, "version": null}, {"name": "seed_game_types", "package": null, "version": null}, {"name": "game_start_info", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.baseball_computer.metric_table_generator"], "nodes": ["model.baseball_computer.event_offense_stats", "seed.baseball_computer.seed_franchises", "model.baseball_computer.player_team_season_offense_stats", "model.baseball_computer.team_game_start_info", "model.baseball_computer.player_game_offense_stats", "seed.baseball_computer.seed_game_types", "model.baseball_computer.game_start_info"]}, "compiled_path": null, "contract": {"enforced": true, "alias_types": true, "checksum": "33f323f4ab0693d3fcc540cd8c8618a508e7751db06a293711a1531134ca745c"}, "access": "protected", "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true, "columns": ["team_id", "season"]}], "version": null, "latest_version": null, "deprecation_date": null}, "model.baseball_computer.metrics_team_season_pitching": {"database": "bc", "schema": "main_models", "name": "metrics_team_season_pitching", "resource_type": "model", "package_name": "baseball_computer", "path": "metrics/metrics_team_season_pitching.sql", "original_file_path": "models/metrics/metrics_team_season_pitching.sql", "unique_id": "model.baseball_computer.metrics_team_season_pitching", "fqn": ["baseball_computer", "metrics", "metrics_team_season_pitching"], "alias": "metrics_team_season_pitching", "checksum": {"name": "sha256", "checksum": "7a1cef095ff0d23e8dd164ed1c81901b24be3f804fbf49546d267dad943ba8e7"}, "config": {"enabled": true, "alias": null, "schema": "models", "database": null, "tags": [], "meta": {"primary_keys": ["team_id", "season"]}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {"team_id": {"name": "team_id", "description": "Retrosheet team ID, 3-character string which identifies the team\n    that a franchise was playing as at a given time.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "season": {"name": "season", "description": "Year, 4-digit integer", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "batters_faced": {"name": "batters_faced", "description": "Number of batters faced by a pitcher, generally equivalent to plate appearances (in old box-score-only games, this may not match up perfectly).", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "outs_recorded": {"name": "outs_recorded", "description": "Number of outs recorded by a pitcher.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "inherited_runners_scored": {"name": "inherited_runners_scored", "description": "(IRS) Number of inherited runners that scored while a pitcher was on the mound.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "bequeathed_runners_scored": {"name": "bequeathed_runners_scored", "description": "Number of bequeathed runners that scored after a pitcher left the game.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "team_unearned_runs": {"name": "team_unearned_runs", "description": "Number of runs that are charged as earned to the pitcher, but unearned to the team.\n    This happens when a pitcher enters an inning which should have been over already because\n    of an error and then the pitcher allows a run to score without the help of any additional\n    errors. This is a rare occurrence and it might seem unnecessary to track,\n    but it is absolutely essential that we do so in order to preserve the space-time continuu-\n    T\u0355he\u030a\u0346\u0328\u035c y\u036a\u0363e\u0321\u0303\u0313\u030ea\u0347r\u0350\u0355\u035c\u035d i\u0313\u035a\u0314\u0324\u033a\u033b\u035bs 20\u032e\u033f89\u032a\u030a an\u032b\u032b\u035e\u0326\u0305d\u0331\u033f\u0369 E\u0361\u0354\u0330\u0351\u0320s\u036d\u0366t\u0351\u0359\u035de\u0303\u0352\u0310b\u0301\u036e\u0359a\u0361\u0359\u0310\u0301\u0330\u0330\u0320n\u036f\u0352\u035f Y\u032a\u0318\u0311a\u035c\u0302\u031c\u031a\u036c\u0345\u0360n\u0304\u0301\u0309 h\u035c\u0314\u0306a\u0359\u033e\u031d\u035f\u0361\u0308\u0301\u0351s\u035f\u0338 fu\u0326\u036d\u030f\u032e\u0306\u030dl\u033a\u0347\u0311\u0349\u034c\u0305\u0303l\u0345\u030f\u0308\u036a\u033f\u031dy\u0312\u0313\u034b\u036e\u0332\u0347 m\u0326\u030a\u0363e\u0365\u034a\u0367\u0320\u0325rg\u0347\u0366\u0300e\u0309\u0339\u031c\u031f\u0353\u0331\u0319d\u0331\u0327 wi\u0307\u034eth\u0366\u0361\u031b\u036d\u0358 t\u031d\u0362\u035d\u0328\u035e\u0342h\u0336\u0357\u031e\u032d\u035f\u0319e\u0322\u030a\u0321\u032f w\u0300\u0329\u0309\u032co\u036d\u0349r\u0311\u0367\u0327\u0360\u036a\u0327\u036cm\u034c\u031c.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "plate_appearances": {"name": "plate_appearances", "description": "(PA) Number of times a batter came to the plate, including walks, hit by pitches, sacrifices, and at-bats.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "at_bats": {"name": "at_bats", "description": "(AB) Number of plate appearances that ended in either a hit or a non-sacrifice out.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "hits": {"name": "hits", "description": "(H) Number of times a batter reached base safely without an error or fielder's choice.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "singles": {"name": "singles", "description": "(1B) Number of hits in which a batter reached first base.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "doubles": {"name": "doubles", "description": "(2B) Number of hits in which a batter reached second base without the help of an error or an attempted\n    play on another runner.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "triples": {"name": "triples", "description": "(3B) Number of hits in which a batter reached third base without the help of an error or an attempted\n    play on another runner.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "home_runs": {"name": "home_runs", "description": "(HR) Number of hits in which a batter reached home plate without the help of an error or an attempted\n    play on another runner (usually by hitting the ball out of the park).", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "total_bases": {"name": "total_bases", "description": "(TB) Number of bases a batter reached safely without the help of an error or an attempted\n    play on another runner. HR * 4 + 3B * 3 + 2B * 2 + (H - HR - 3B - 2B)", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "strikeouts": {"name": "strikeouts", "description": "(K, SO) Number of times a batter struck out. This includes plays in which a batter reached base on\n    a dropped third strike.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "walks": {"name": "walks", "description": "(BB, occasionally W) Number of times a batter reaches base on called balls out of the strike zone\n    (Four balls for all of MLB history after the 1880s).", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "intentional_walks": {"name": "intentional_walks", "description": "(IBB, occasionally IW) Number of times a batter was intentionally walked. This number may be missing or undercounted\n    in earlier years, as intentional walks were not officially tracked until 1955.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "hit_by_pitches": {"name": "hit_by_pitches", "description": "(HBP) Number of times a batter was awarded first base after being hit by a pitch.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "sacrifice_hits": {"name": "sacrifice_hits", "description": "(SH) Number of times a batter performed a sacrifice bunt to advance another runner.\n    A bunt may count as a sacrifice even if the batter reaches base safely.\n    Unsuccessful attempts are not counted, nor are non-sacrifice bunts.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "sacrifice_flies": {"name": "sacrifice_flies", "description": "(SF) Number of times a batter hit a fly ball that resulted in an out (or error),\n    but allowed a runner to score on the throw.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "reached_on_errors": {"name": "reached_on_errors", "description": "(ROE) Number of times a batter reached base safely due to an error.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "reached_on_interferences": {"name": "reached_on_interferences", "description": "Number of times a batter was awarded first base for being illegally hindered\n    by a fielder, usually the catcher.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "inside_the_park_home_runs": {"name": "inside_the_park_home_runs", "description": "Number of times a batter hit a home run without the ball leaving the field of play.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "ground_rule_doubles": {"name": "ground_rule_doubles", "description": "Number of times a batter was awarded a double on a ball that went out of play after\n    bouncing in fair territory.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "infield_hits": {"name": "infield_hits", "description": "Number of times a batter reached base safely on a hit that did not reach the outfield.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "on_base_opportunities": {"name": "on_base_opportunities", "description": "Number of plate appearances in which a batter either did or did not reach base,\n    as defined by the formula for on-base percentage. Note that this is very similar to but different\n    from plate_appearances, as it does not include sacrifice hits or interference.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "on_base_successes": {"name": "on_base_successes", "description": "Number of hits, walks, and hit by pitches that serves as the numerator in the formula\n    for on-base percentage.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "grounded_into_double_plays": {"name": "grounded_into_double_plays", "description": "(GIDP) Number of times a batter grounded into a double play. This is the conventional way\n    to record a double play and as such is an important statistic on its own. Games without\n    play-by-play accounts don't have data on the trajectory of the double play, so\n    this number is not populated for those games.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "double_plays": {"name": "double_plays", "description": "(DP) Number of times a play ended in two outs being recorded.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "triple_plays": {"name": "triple_plays", "description": "(TP) Number of times a play ended in three outs being recorded.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batting_outs": {"name": "batting_outs", "description": "Number of outs that \"should\" have been recorded as a result of a batter's plate apperances.\n    A batting out is still counted if no actual out is recorded on an error or a failed fielder's choice.\n    Outs on baserunners (including the batter trying to stretch a hit) do not count here.\n    Grounded-into-double-plays count as two outs, but other types of double plays do not (the \n    idea here is that the baserunner is responsible on other types of double plays).\n    Unofficial stat, but designed here to be generally useful in determining rates of official stats.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "balls_in_play": {"name": "balls_in_play", "description": "Number of plate appearances that resulted in a live\n    ball on the field of play. The difference between this and batted_balls is that\n    balls_in_play does not include out-of-the-park home runs. This distinction is important\n    for calculating batting average on balls in play, a stat designed to isolate at_bats\n    in which the defense was involved.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "balls_batted": {"name": "balls_batted", "description": "Number of plate appearances that ended in a fair ball or a foul flyout. This is equivalent\n    to balls_in_play + home_runs, and may be a more useful denominator for \"in play\" stats depending\n    on the context.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "trajectory_fly_ball": {"name": "trajectory_fly_ball", "description": "(FB) Number of plate appearances that ended in a fly ball. A fly ball is defined here\n    as the subset of balls hit in the air that are neither line drives nor pop flies.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "trajectory_ground_ball": {"name": "trajectory_ground_ball", "description": "(GB) Number of plate appearances that ended in a ground ball, also called a grounder. A ground ball is defined\n    here to only include swings, not bunts, although older data may not have a proper distinction. Ground\n    balls tend to be easy to distinguish between other types of contact, but Statcast-era data defines it\n    as balls with a launch angle under 10 degrees.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "trajectory_line_drive": {"name": "trajectory_line_drive", "description": "(LD) Number of plate appearances that ended in a line drive, also called a liner. Line drives are distiguished\n    from fly balls by some combination of angle and exit velocity. In the Statcast era, line drives\n    are defined purely in terms of launch angle (10-25 degrees), but just about any colloquial definition\n    involves hard-hitness as well. The line-drive-fly-ball distinction is by far the most arbitrary\n    and subjective trajectory categorization. Many scorekeepers never included line drives, while others counted\n    any successful in-play air-hit as a line drive. Nevertheless, the distinction is a crucial one,\n    as line drives are by far the most likely type of batted ball to result in a hit (even when they are not hit very hard).", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "trajectory_pop_up": {"name": "trajectory_pop_up", "description": "(sometimes PU)  Number of plate appearances that ended in a pop-up, also called a pop fly.\n    Pop-ups are distinguished from fly balls in that they are hit at a higher angle, tend to be\n    hit with less exit velocity, and (as a result) end up in the infield or shallow outfield. Before\n    Statcast-era standardization, the distinction between a fly ball and a pop-up was a matter of\n    scorerkeeper judgement, and many unofficial scorekeepers did not distinguish between the two.\n    Statcast determines pop flies exclusively by angle (> 50 degrees).", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "trajectory_unknown": {"name": "trajectory_unknown", "description": "Number of plate appearances ending in a batted ball whose trajectory was not recorded and cannot\n    be reliably deduced from context. This number includes balls that we know were hit in the air,\n    but do not know which kind of air ball (FB/PU/LD) they were (see trajectory_broad_classification_unknown\n    for a number that does not include those balls). The strong majority of batted balls prior to 1988\n    fall into this category, especially hits.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "trajectory_known": {"name": "trajectory_known", "description": "Number of plate appearances ending in a batted ball whose trajectory was recorded or was reliably deduced\n    from the context. An example of reliable deduction is an at-bat with the fielding play 6-3, which\n    almost always is a ground ball fielded by the shortstop and thrown to the first baseman. See\n    `calc_batted_ball_type` for the deduction logic.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "trajectory_broad_air_ball": {"name": "trajectory_broad_air_ball", "description": "Number of plate appearances that ended in an air ball (a fly ball, line drive, or pop-up).\n    Because it is much easier to deduce that a ball was hit in the air than it is to deduce the exact\n    trajectory, this number field is more reliably populated than any of its three consituent parts.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "trajectory_broad_ground_ball": {"name": "trajectory_broad_ground_ball", "description": "Same as `trajectory_ground_ball`.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "trajectory_broad_unknown": {"name": "trajectory_broad_unknown", "description": "Number of plate appearances ending in a batted ball whose trajectory was not recorded and cannot\n    be reliably deduced from context, even to the extent of knowing whether it was a ground ball or an air ball.\n    This will include a disproportionate number of hits, which are more likely to be missing trajectory data\n    and harder to make deductions about.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "trajectory_broad_known": {"name": "trajectory_broad_known", "description": "Number of plate appearances ending in a batted ball whose ground/air status was recorded or\n    reliably deduced from the context. This is the sum of `trajectory_broad_air_ball` and\n    `trajectory_broad_ground_ball`. Outs in play have excellent coverage historically here,\n    even for older games.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "bunts": {"name": "bunts", "description": "Number of plate appearances ending in an in-play bunt.\n    This does not include strikeouts on foul bunts with two strikes.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_distance_plate": {"name": "batted_distance_plate", "description": "Number of plate appearances in which the ball was batted to catcher's area around home plate.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_distance_infield": {"name": "batted_distance_infield", "description": "Number of plate appearances in which the ball was batted to the infield (not including the catcher).\n    All ground balls are included here, regardless of whether they made it through to the outfield.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_distance_outfield": {"name": "batted_distance_outfield", "description": "Number of plate appearances in which the ball was hit on the fly to the outfield.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_distance_unknown": {"name": "batted_distance_unknown", "description": "Number of plate appearances in which the ball was hit, but the distance was not recorded\n    and cannot be reliably deduced from context.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_distance_known": {"name": "batted_distance_known", "description": "Number of plate appearances in which the ball was hit, and the distance was either\n    recorded or reliably deduced from context.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "fielded_by_battery": {"name": "fielded_by_battery", "description": "Number of plate appearances in which the ball was fielded by the pitcher or catcher.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "fielded_by_infielder": {"name": "fielded_by_infielder", "description": "Number of plate appearances in which the ball was fielded by an infielder.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "fielded_by_outfielder": {"name": "fielded_by_outfielder", "description": "Number of plate appearances in which the ball was fielded by an outfielder.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "fielded_by_known": {"name": "fielded_by_known", "description": "Number of plate appearances in which the ball was fielded by a player, and the player was recorded.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "fielded_by_unknown": {"name": "fielded_by_unknown", "description": "Number of plate appearances in which the ball was fielded by a player, but the player was not recorded.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_angle_left": {"name": "batted_angle_left", "description": "Number of plate appearances in which the ball was batted to the left side of the field.\n    This includes balls where the location was not recorded, but the fielder is on the left side\n    (3B, LF). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_angle_right": {"name": "batted_angle_right", "description": "Number of plate appearances in which the ball was batted to the right side of the field.\n    This includes balls where the location was not recorded, but the fielder is on the right side\n    (1B, RF). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_angle_middle": {"name": "batted_angle_middle", "description": "Number of plate appearances in which the ball was batted to the middle of the field.\n    This includes balls where the location was not recorded, but the fielder is up the middle\n    (P, 2B, SS, CF). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_angle_unknown": {"name": "batted_angle_unknown", "description": "Number of plate appearances in which the ball was batted, but we don't have enough location\n    to determine the spray angle.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_angle_known": {"name": "batted_angle_known", "description": "Number of plate appearances in which the ball was hit and we have enough location to determine\n    the spray angle.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_location_plate": {"name": "batted_location_plate", "description": "Number of plate appearances in which the ball was batted to the catcher's area around home plate.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_location_right_infield": {"name": "batted_location_right_infield", "description": "Number of plate appearances in which the ball was batted to the right side of the infield.\n    This includes balls where the location was not recorded, but the fielder is on the right side\n    (1B). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_location_middle_infield": {"name": "batted_location_middle_infield", "description": "Number of plate appearances in which the ball was batted to the middle of the infield.\n    This includes balls where the location was not recorded, but the fielder is up the middle\n    (P, SS, 2B). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_location_left_infield": {"name": "batted_location_left_infield", "description": "Number of plate appearances in which the ball was batted to the left side of the infield.\n    This includes balls where the location was not recorded, but the fielder is on the left side\n    (3B). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_location_left_field": {"name": "batted_location_left_field", "description": "Number of plate appearances in which the ball was batted to the left side of the outfield.\n    This includes balls where the location was not recorded, but the fielder is on the left side\n    (LF). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_location_center_field": {"name": "batted_location_center_field", "description": "Number of plate appearances in which the ball was batted to the center of the outfield.\n    This includes balls where the location was not recorded, but the fielder is up the middle\n    (CF). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_location_right_field": {"name": "batted_location_right_field", "description": "Number of plate appearances in which the ball was batted to the right side of the outfield.\n    This includes balls where the location was not recorded, but the fielder is on the right side\n    (RF, CF). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_location_unknown": {"name": "batted_location_unknown", "description": "Number of plate appearances in which the ball was batted, but we don't have enough location\n    to determine the specific location.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_location_known": {"name": "batted_location_known", "description": "Number of plate appearances in which the ball was batted and we have enough location to determine\n    the specific location.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_balls_pulled": {"name": "batted_balls_pulled", "description": "Number of plate appearances in which the ball was pulled (the left side for right-handed batters, the right side for left-handed batters).", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "batted_balls_opposite_field": {"name": "batted_balls_opposite_field", "description": "Number of plate appearances in which the ball was hit to the opposite field (the right side for right-handed batters, the left side for left-handed batters).", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "runs": {"name": "runs", "description": "(R) Number of runs scored.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "times_reached_base": {"name": "times_reached_base", "description": "Number of times a batter ended a plate appearance on base, even if it was through a fielder's choice, error, etc.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "stolen_base_opportunities": {"name": "stolen_base_opportunities", "description": "Number of events in which a runner had an opportunity to steal a base as the\n    lead basestealer OR the runner recorded a SB/CS in any situation.\n    \"Opportunity\" is defined as a situation in which the next base\n    was empty at the start of the event (not including the batter).\n    No-play events excluded, but events without plate appearances are included.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "stolen_base_opportunities_second": {"name": "stolen_base_opportunities_second", "description": "Number of opportunities to steal second base (see `stolen_base_opportunities` for detailed criteria).", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "stolen_base_opportunities_third": {"name": "stolen_base_opportunities_third", "description": "Number of opportunities to steal third base (see `stolen_base_opportunities` for detailed criteria).", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "stolen_base_opportunities_home": {"name": "stolen_base_opportunities_home", "description": "Number of opportunities to steal home (see `stolen_base_opportunities` for detailed criteria).", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "stolen_bases": {"name": "stolen_bases", "description": "(SB) Number of successful stolen bases.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "stolen_bases_second": {"name": "stolen_bases_second", "description": "Number of successful steals of second base.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "stolen_bases_third": {"name": "stolen_bases_third", "description": "Number of successful steals of third base.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "stolen_bases_home": {"name": "stolen_bases_home", "description": "Number of successful steals of home.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "caught_stealing": {"name": "caught_stealing", "description": "(CS) Number of times a runner was caught stealing.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "caught_stealing_second": {"name": "caught_stealing_second", "description": "Number of times a runner was caught stealing second base.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "caught_stealing_third": {"name": "caught_stealing_third", "description": "Number of times a runner was caught stealing third base.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "caught_stealing_home": {"name": "caught_stealing_home", "description": "Number of times a runner was caught stealing home.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "picked_off": {"name": "picked_off", "description": "(PO, at risk of confusion with putouts) Number of times a runner was picked off.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "picked_off_first": {"name": "picked_off_first", "description": "Number of times a runner was picked off first base.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "picked_off_second": {"name": "picked_off_second", "description": "Number of times a runner was picked off second base.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "picked_off_third": {"name": "picked_off_third", "description": "Number of times a runner was picked off third base.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "picked_off_caught_stealing": {"name": "picked_off_caught_stealing", "description": "(POCS) Number of times a runner was picked off, but instead of going back to the bag,\n    tried to run to the next base and was put out.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "outs_on_basepaths": {"name": "outs_on_basepaths", "description": "Number of outs recorded by a baserunner (this is not mutually exclusive with outs recorded by the batter\n    in cases like failed advances or dropped third-strike putouts).", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "unforced_outs_on_basepaths": {"name": "unforced_outs_on_basepaths", "description": "Number of outs recorded by a baserunner that was not the result of a force on the runner.\n    \"Unforced\" is meant to be in both the literal sense of a force not being in play, but also\n    the figurative sense of the runner being responsible for the out. The latter may or may not\n    be the best interpretation of any given play, but it is useful to assign responsibility to the\n    runner by default in those contexts.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "outs_avoided_on_errors": {"name": "outs_avoided_on_errors", "description": "Number of times that a baserunner would have been out, but an error allowed them to remain\n    on the basepaths (either staying put or advancing).", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "advances_on_wild_pitches": {"name": "advances_on_wild_pitches", "description": "(WP) Number of times a baserunner advanced on a wild pitch.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "advances_on_passed_balls": {"name": "advances_on_passed_balls", "description": "(PB) Number of times a baserunner advanced on a passed ball.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "advances_on_balks": {"name": "advances_on_balks", "description": "(sometimes BK) Number of times a baserunner advanced on a balk.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "advances_on_unspecified_plays": {"name": "advances_on_unspecified_plays", "description": "Number of times a baserunner advanced for an unspecified reason.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "advances_on_defensive_indifference": {"name": "advances_on_defensive_indifference", "description": "(DI) Number of times a baserunner advanced on defensive indifference.\n   Defensive indifference is a judgement call by the official scorer that the defense\n   did not try to stop the runner from stealing a base. This usually happens\n   when the defense has a lead late in the game.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "advances_on_errors": {"name": "advances_on_errors", "description": "Number of times a baserunner advanced on an error.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "extra_base_chances": {"name": "extra_base_chances", "description": "", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "extra_base_advance_attempts": {"name": "extra_base_advance_attempts", "description": "Number of times a baserunner tried to advance by a greater number of bases than the batter.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "extra_bases_taken": {"name": "extra_bases_taken", "description": "", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "bases_advanced": {"name": "bases_advanced", "description": "Number of bases advanced by a baserunner, including the batter.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "bases_advanced_on_balls_in_play": {"name": "bases_advanced_on_balls_in_play", "description": "Number of bases advanced by a baserunner on a ball in play, including the batter.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "surplus_bases_advanced_on_balls_in_play": {"name": "surplus_bases_advanced_on_balls_in_play", "description": "Number of bases advanced by a baserunner on a ball in play minus the number of total bases\n    accumulated by the batter on the same play. For example, if a runner goes from first to third\n    on a single, this number is 1 (3 - 2). If a runner only goes from second to third on a double,\n    this number is -1 (1 - 2).", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "outs_on_extra_base_advance_attempts": {"name": "outs_on_extra_base_advance_attempts", "description": "Number of times a baserunner was out attempting to advance\n    by a greater number of bases than the batter. This includes\n    batters who were put out trying to stretch a hit to the next base.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "pitches": {"name": "pitches", "description": "Number of pitches thrown.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "swings": {"name": "swings", "description": "Number of pitches that were swung at.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "swings_with_contact": {"name": "swings_with_contact", "description": "Number of pitches that were swung at and made contact.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "strikes": {"name": "strikes", "description": "Number of pitches that were called or swinging strikes.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "strikes_called": {"name": "strikes_called", "description": "Number of pitches that were called strikes.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "strikes_swinging": {"name": "strikes_swinging", "description": "Number of pitches that were swung on and missed (mutually exclusive\n    with `swings_with_contact`, which also count as strikes).", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "strikes_foul": {"name": "strikes_foul", "description": "Number of pitches that were fouled off.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "strikes_foul_tip": {"name": "strikes_foul_tip", "description": "Number of pitches that were fouled off and caught by the catcher for strike three.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "strikes_in_play": {"name": "strikes_in_play", "description": "Number of pitches that were swung on and batted into play.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "strikes_unknown": {"name": "strikes_unknown", "description": "Number of pitches that we know were strikes, but don't know what kind.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "balls": {"name": "balls", "description": "Number of pitches that were called balls.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "balls_called": {"name": "balls_called", "description": "Number of pitches that were called balls (as opposed to automatic balls that were\n    not actually thrown).", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "balls_intentional": {"name": "balls_intentional", "description": "Number of pitches that were called balls as part of an intentional walk.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "balls_automatic": {"name": "balls_automatic", "description": "Number of pitches that were called balls on an automatic walk or a delay penalty.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "unknown_pitches": {"name": "unknown_pitches", "description": "Number of pitches that were thrown without any other information recorded.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "pitchouts": {"name": "pitchouts", "description": "Number of pitches that were thrown as pitchouts. A pitchout is a pitch that is thrown\n    intentionally very far outside in order to make it easier for the catcher to throw out\n    a baserunner who is likely to steal.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "pitcher_pickoff_attempts": {"name": "pitcher_pickoff_attempts", "description": "Number of times the pitcher attempted to pick off a baserunner.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "catcher_pickoff_attempts": {"name": "catcher_pickoff_attempts", "description": "Number of times the catcher attempted to pick off a baserunner.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "pitches_blocked_by_catcher": {"name": "pitches_blocked_by_catcher", "description": "Number of pitches that were blocked by the catcher.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "pitches_with_runners_going": {"name": "pitches_with_runners_going", "description": "Number of pitches that were thrown while a baserunner was on the move\n    (as part of a steal or hit-and-run).", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "passed_balls": {"name": "passed_balls", "description": "(PB) Number of passed balls.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "wild_pitches": {"name": "wild_pitches", "description": "(WP) Number of wild pitches.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "balks": {"name": "balks", "description": "(BK) Number of balks.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "left_on_base": {"name": "left_on_base", "description": "(LOB) At an individual level, the number of baserunners that a batter failed to advance during a plate appearance.\n    At a team level, the number of baserunners remaining on base at the end of an inning. In order to count, baserunners\n    must not have scored or been put out.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "left_on_base_with_two_outs": {"name": "left_on_base_with_two_outs", "description": "(LOB) At an individual level, the number of baserunners that remain on base (unscored and not out) after a plate appearance that ends with the third out recorded. At a team level, this is interchangable with `left_on_base`.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "earned_run_average": {"name": "earned_run_average", "description": "(ERA) Earned runs per nine innings, the analogue of batting average for pitchers in both its\n    fame and its limitations. `earned_runs` are a subset of the total runs allowed by a pitcher:\n    those unaffected by fielding errors. ERA is a strange compromise between the desire to isolate\n    a pitcher's true defense-independent ability and to describe actually happened when they were on the mound.\n    Because fielding errors are a small component of overall luck and defense, it doesn't really remove much\n    noise and might even add more. In general, the idea is right but the execution is wrong.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "run_average": {"name": "run_average", "description": "(RA) Runs allowed by the pitcher per nine innings. Because of the historical importance of ERA,\n    this is often thought of as earned run average plus unearned run average, but this obscures how much simpler\n    it is to calculate than ERA. While it is subject to many factors beyond the pitcher's control, it does arguably\n    the best possible job of describing what actually happened when the pitcher was on the mound. This makes it a popular\n    starting point for some implementations of WAR (such as Baseball Reference's).", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "walks_per_9_innings": {"name": "walks_per_9_innings", "description": "(BB/9) Walks allowed by the pitcher per nine innings. Probably the statistic most \n    frequently used to describe a pitcher's control. One of the three main \"peripheral\"\n    stats that describe a pitcher's performance on outcomes over which they have the most control.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "strikeouts_per_9_innings": {"name": "strikeouts_per_9_innings", "description": "(K/9) Strikeouts recorded by the pitcher per nine innings. One of the three main \"peripheral\"\n    stats that describe a pitcher's performance on outcomes over which they have the most control.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "home_runs_per_9_innings": {"name": "home_runs_per_9_innings", "description": "(HR/9) Home runs allowed by the pitcher per nine innings. One of the three main \"peripheral\"\n    stats that describe a pitcher's performance on outcomes over which they have the most control,\n    although the lower frequency of home runs gives it a much higher relative variance than the other two.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "hits_per_9_innings": {"name": "hits_per_9_innings", "description": "(H/9) Hits allowed by the pitcher per nine innings.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "walks_and_hits_per_innings_pitched": {"name": "walks_and_hits_per_innings_pitched", "description": "", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "strikeout_to_walk_ratio": {"name": "strikeout_to_walk_ratio", "description": "(K/BB) Ratio of strikeouts to walks, almost always appearing as a pitching statistic even though it\n    can also be expressed for hitters. A simple and useful way to describe pitching performance\n    on non-at-bat outcomes. Also a bit more robust when comparing across time periods than most\n    unadjusted strikeout-related statistics. Leaders in this stat tend to be a mix\n    of the most dominant pitchers in the league and contact-oriented control freaks,\n    e.g. Pedro Martinez and Phil Hughes (respectively or not, who's to say).", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "walk_rate": {"name": "walk_rate", "description": "(BB/PA) Walks per plate appearance.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "strikeout_rate": {"name": "strikeout_rate", "description": "(K/PA) Strikeouts per plate appearance.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "home_run_rate": {"name": "home_run_rate", "description": "(HR/PA) Home runs per plate appearance.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "batting_average_against": {"name": "batting_average_against", "description": "(BAA, OAV) Same as batting average, but for pitchers. For the most part,\n    this database doesn't rephrase hitting statistics for pitchers, but this one is\n    so common that it's worth including.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "on_base_percentage_against": {"name": "on_base_percentage_against", "description": "Same as on-base percentage, but for pitchers/defense.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "slugging_percentage_against": {"name": "slugging_percentage_against", "description": "Same as slugging percentage, but for pitchers/defense.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "on_base_plus_slugging_against": {"name": "on_base_plus_slugging_against", "description": "Same as OPS, but for pitchers/defense.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "batting_average_on_balls_in_play": {"name": "batting_average_on_balls_in_play", "description": "(BABIP) A measure of the rate at which fieldable balls go for hits. It is calculated as (H - HR)/(AB - K - HR + SF).\n    Pitchers are generally (but controversially) thought to have little control over balls in play, so a high BABIP\n    is a good sign that that they have been unlucky or have played in front of a poor defense. Most pitchers do have some\n    \"true\" BABIP ability that is different from the league average, but the difference is usually much smaller than the year-to-year\n    variance in their actual BABIP. In rare cases, pitchers can have such a strong influence on balls in play that their\n    contribution is measurable in smaller sample sizes. For pitchers in the dead-ball era and earlier, it makes less sense\n    to treat BABIP as luck because a much higher percentage of at-bats ended in balls in play, and pitchers were more focused\n    on getting outs by inducing weak contact without having to worry about home runs.\n\n    All of the above is also true for hitters, but to a much lesser extent, as hitters face different defenses, control\n    their ability to beat out grounders for infield hits, and generally have more control over the quality of contact they\n    make. BABIP can also be misleading for hitters because it excludes home runs, so Barry Bonds ends up having a lower BABIP\n    even though there were occasional eyewitness reports of his making solid contact.\n\n    BABIP was invented by Voros McCracken around the turn of the millenium, and it remains the most prominent\n    example of a statistic that tracks player luck as opposed to skill or performance.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "event_coverage_rate": {"name": "event_coverage_rate", "description": "", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "known_trajectory_rate_outs": {"name": "known_trajectory_rate_outs", "description": "Rate of outs in play for which we know the detailed trajectory of the batted ball.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "known_trajectory_rate_hits": {"name": "known_trajectory_rate_hits", "description": "Rate of hits for which we know the detailed trajectory of the batted ball.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "known_trajectory_rate": {"name": "known_trajectory_rate", "description": "Overall rate of batted balls for which we know the detailed trajectory.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "known_trajectory_broad_rate_outs": {"name": "known_trajectory_broad_rate_outs", "description": "Overall rate of outs in play for which we know whether\n    the ball was hit in the air or on the ground.\n    This is generally very high even for the oldest play-by-play data.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "known_trajectory_broad_rate_hits": {"name": "known_trajectory_broad_rate_hits", "description": "Overall rate of hits for which we know whether\n    the ball was hit in the air or on the ground.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "known_trajectory_broad_rate": {"name": "known_trajectory_broad_rate", "description": "Overall rate of batted balls for which we know whether\n    the ball was hit in the air or on the ground.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "known_trajectory_out_hit_ratio": {"name": "known_trajectory_out_hit_ratio", "description": "The ratio of `known_trajectory_rate_outs` to `known_trajectory_rate_hits`.\n    This ratio is generally very high for years without complete batted ball data,\n    which makes it useful for estimating quantities that would be affected by\n    the selection bias.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "known_trajectory_broad_out_hit_ratio": {"name": "known_trajectory_broad_out_hit_ratio", "description": "The ratio of `known_trajectory_broad_rate_outs` to `known_trajectory_broad_rate_hits`.\n    This ratio is generally very high for years without complete batted ball data,\n    which makes it useful for estimating quantities that would be affected by\n    the selection bias.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "air_ball_rate_outs": {"name": "air_ball_rate_outs", "description": "The rate of outs in play that were fly balls, pop-ups, or line drives.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "ground_ball_rate_outs": {"name": "ground_ball_rate_outs", "description": "The rate of outs in play that were ground balls.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "ground_air_out_ratio": {"name": "ground_air_out_ratio", "description": "The ratio of `ground_ball_rate_outs` to `air_ball_rate_outs`.\n    This is a useful metric by itself because it is unaffected by\n    the higher percentage of missing data on hits, so it is probably\n    a more accurate measure of overall ground ball rate than `ground_ball_rate`\n    itself for most seasons.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "air_ball_hit_rate": {"name": "air_ball_hit_rate", "description": "The rate of hits in play that were fly balls, pop-ups, or line drives.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "ground_ball_hit_rate": {"name": "ground_ball_hit_rate", "description": "The rate of hits in play that were ground balls.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "ground_air_hit_ratio": {"name": "ground_air_hit_ratio", "description": "The ratio of `ground_ball_hit_rate` to `air_ball_hit_rate`.\n    Difference between this and `ground_air_out_ratio` is potentially interesting,\n    but will be noisy for older years.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "fly_ball_rate": {"name": "fly_ball_rate", "description": "Of all batted_balls for which we know the trajectory,\n    The rate that were fly balls.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "line_drive_rate": {"name": "line_drive_rate", "description": "Of all batted_balls for which we know the trajectory,\n    The rate that were line drives.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "pop_up_rate": {"name": "pop_up_rate", "description": "Of all batted_balls for which we know the trajectory,\n    The rate that were pop-ups.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "ground_ball_rate": {"name": "ground_ball_rate", "description": "Of all batted_balls for which we know the trajectory,\n    The rate that were ground balls.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "coverage_weighted_air_ball_batting_average": {"name": "coverage_weighted_air_ball_batting_average", "description": "The batting average of batted_balls that were fly balls, pop-ups, or line drives,\n    weighted according to the `known_trajectory_broad_out_hit_ratio`. This is an attempt\n    to measure trajectory-specific BABIP even in years where trajectory data is rarely\n    present for hits. While it handles that specific bias, it is still likely to be noisy\n    because of the small sample size of known-trajectory balls.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "coverage_weighted_ground_ball_batting_average": {"name": "coverage_weighted_ground_ball_batting_average", "description": "The batting average of batted_balls that were ground balls,\n    weighted according to the `known_trajectory_broad_out_hit_ratio`. This is an attempt\n    to measure trajectory-specific BABIP even in years where trajectory data is rarely\n    present for hits. While it handles that specific bias, it is still likely to be noisy\n    because of the small sample size of known-trajectory balls.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "coverage_weighted_fly_ball_batting_average": {"name": "coverage_weighted_fly_ball_batting_average", "description": "The batting average of batted_balls that were fly balls,\n    weighted according to the `known_trajectory_out_hit_ratio`. This is an attempt\n    to measure trajectory-specific BABIP even in years where trajectory data is rarely\n    present for hits. It is still vulnerable to the variance and arbitrariness with which\n    historical scorekeepers differentiated fly balls from line drives and pop-ups.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "coverage_weighted_line_drive_batting_average": {"name": "coverage_weighted_line_drive_batting_average", "description": "The batting average of batted_balls that were line drives,\n    weighted according to the `known_trajectory_out_hit_ratio`. This is an attempt\n    to measure trajectory-specific BABIP even in years where trajectory data is rarely\n    present for hits. It is still vulnerable to the variance and arbitrariness with which\n    historical scorekeepers differentiated line drives from other air outs, which was\n    extremely high all the way up to the Statcast era.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "coverage_weighted_pop_up_batting_average": {"name": "coverage_weighted_pop_up_batting_average", "description": "The batting average of batted_balls that were pop-ups,\n    weighted according to the `known_trajectory_out_hit_ratio`. This is an attempt\n    to measure trajectory-specific BABIP even in years where trajectory data is rarely\n    present for hits. It is still vulnerable to the variance and arbitrariness with which\n    historical scorekeepers differentiated pop-ups from other air outs.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "known_angle_rate_outs": {"name": "known_angle_rate_outs", "description": "Rate of batted-ball outs for which we know (or have a good proxy for)\n    whether the ball was hit to the left, right, or middle of the field.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "known_angle_rate_hits": {"name": "known_angle_rate_hits", "description": "Rate of batted-ball hits for which we know (or have a good proxy for)\n    whether the ball was hit to the left, right, or middle of the field.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "known_angle_rate": {"name": "known_angle_rate", "description": "Rate of batted balls for which we know (or have a good proxy for)\n    whether the ball was hit to the left, right, or middle of the field.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "known_angle_out_hit_ratio": {"name": "known_angle_out_hit_ratio", "description": "The ratio of `known_angle_rate_outs` to `known_angle_rate_hits`.\n    This ratio is generally very high for years without complete batted ball data,\n    which makes it useful for estimating quantities that would be affected by\n    the selection bias. Angle is generally better known than location itself, because\n    when a batter gets a hit, we often know which outfielder fielded the ball even\n    though we don't know how it got there.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "angle_left_rate_outs": {"name": "angle_left_rate_outs", "description": "The rate of batted-ball outs that were hit to the left side of the field.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "angle_left_rate_hits": {"name": "angle_left_rate_hits", "description": "The rate of hits that were hit to the left side of the field.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "angle_left_rate": {"name": "angle_left_rate", "description": "The overall rate of batted balls that were hit to the left side of the field.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "coverage_weighted_angle_left_batting_average": {"name": "coverage_weighted_angle_left_batting_average", "description": "The batting average on batted balls that were hit to the left side of the field,\n    weighted according to the `known_angle_out_hit_ratio`. This is an attempt\n    to measure angle-specific BABIP even in years where angle data is rarely\n    present for hits.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "angle_right_rate_outs": {"name": "angle_right_rate_outs", "description": "The rate of batted-ball outs that were hit to the right side of the field.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "angle_right_rate_hits": {"name": "angle_right_rate_hits", "description": "The rate of hits that were hit to the right side of the field.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "angle_right_rate": {"name": "angle_right_rate", "description": "The overall rate of batted balls that were hit to the right side of the field.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "coverage_weighted_angle_right_batting_average": {"name": "coverage_weighted_angle_right_batting_average", "description": "The batting average on batted balls that were hit to the right side of the field,\n    weighted according to the `known_angle_out_hit_ratio`. This is an attempt\n    to measure angle-specific BABIP even in years where angle data is rarely\n    present for hits.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "angle_middle_rate_outs": {"name": "angle_middle_rate_outs", "description": "The rate of batted-ball outs that were hit to the middle of the field.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "angle_middle_rate_hits": {"name": "angle_middle_rate_hits", "description": "The rate of hits that were hit to the middle of the field.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "angle_middle_rate": {"name": "angle_middle_rate", "description": "The overall rate of batted balls that were hit to the middle of the field.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "coverage_weighted_angle_middle_batting_average": {"name": "coverage_weighted_angle_middle_batting_average", "description": "The batting average on batted balls that were hit to the middle of the field,\n    weighted according to the `known_angle_out_hit_ratio`. This is an attempt\n    to measure angle-specific BABIP even in years where angle data is rarely\n    present for hits.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "pulled_rate_outs": {"name": "pulled_rate_outs", "description": "`angle_right_rate_outs` for lefty batters\n    and `angle_left_rate_outs` for righty batters.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "pulled_rate_hits": {"name": "pulled_rate_hits", "description": "`angle_right_rate_hits` for lefty batters\n    and `angle_left_rate_hits` for righty batters.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "pulled_rate": {"name": "pulled_rate", "description": "`angle_right_rate` for lefty batters\n    and `angle_left_rate` for righty batters.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "coverage_weighted_pulled_batting_average": {"name": "coverage_weighted_pulled_batting_average", "description": "`coverage_weighted_angle_right_batting_average` for lefty batters\n    and `coverage_weighted_angle_left_batting_average` for righty batters.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "opposite_field_rate_outs": {"name": "opposite_field_rate_outs", "description": "`angle_left_rate_outs` for lefty batters\n    and `angle_right_rate_outs` for righty batters.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "opposite_field_rate_hits": {"name": "opposite_field_rate_hits", "description": "`angle_left_rate_hits` for lefty batters\n    and `angle_right_rate_hits` for righty batters.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "opposite_field_rate": {"name": "opposite_field_rate", "description": "`angle_left_rate` for lefty batters\n    and `angle_right_rate` for righty batters.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "coverage_weighted_opposite_field_batting_average": {"name": "coverage_weighted_opposite_field_batting_average", "description": "`coverage_weighted_angle_left_batting_average` for lefty batters\n    and `coverage_weighted_angle_right_batting_average` for righty batters.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "stolen_base_attempt_rate_second": {"name": "stolen_base_attempt_rate_second", "description": "The rate of stolen base opportunities taken\n    when the runner was on first base (trying to steal second).\n    See `stolen_base_opportunities` for the definition.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "stolen_base_attempt_rate_third": {"name": "stolen_base_attempt_rate_third", "description": "The rate of stolen base opportunities taken\n    when the runner was on second base (trying to steal third).\n    See `stolen_base_opportunities` for the definition.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "stolen_base_attempt_rate_home": {"name": "stolen_base_attempt_rate_home", "description": "The rate of stolen base opportunities taken\n    when the runner was on third base (trying to steal home).\n    See `stolen_base_opportunities` for the definition.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "unforced_out_rate": {"name": "unforced_out_rate", "description": "The rate of appearances on the basepaths that ended in an unforced out.\n    See `unforced_outs_on_basepaths` for the definition.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "pitch_strike_rate": {"name": "pitch_strike_rate", "description": "The rate of pitches that were strikes.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "pitch_contact_rate": {"name": "pitch_contact_rate", "description": "The rate of pitches where some kind of contact was made.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "pitch_swing_rate": {"name": "pitch_swing_rate", "description": "The rate of pitches where the batter swung (and either made\n    contact or missed).", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "pitch_ball_rate": {"name": "pitch_ball_rate", "description": "The rate of pitches that were balls.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "pitch_swing_and_miss_rate": {"name": "pitch_swing_and_miss_rate", "description": "The rate of pitches where the batter swung and missed.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "pitch_foul_rate": {"name": "pitch_foul_rate", "description": "The rate of pitches that were fouled off.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "pitched_called_strike_rate": {"name": "pitched_called_strike_rate", "description": "The rate of pitches that were called strikes.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "pitch_data_coverage_rate": {"name": "pitch_data_coverage_rate", "description": "The rate of plate appearances for which we have pitch-by-pitch data.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}}, "meta": {"primary_keys": ["team_id", "season"]}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "baseball_computer://models/metrics/metrics_team_season_pitching.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "models", "contract": {"enforced": true}, "meta": {"primary_keys": ["team_id", "season"]}}, "created_at": 1702285095.38157, "relation_name": "\"bc\".\"main_models\".\"metrics_team_season_pitching\"", "raw_code": "{{  metric_table_generator(\"pitching\", [\"team_id\", \"season\"], agg_type=\"player\", regular_season_only=True)  }}", "language": "sql", "refs": [{"name": "event_pitching_stats", "package": null, "version": null}, {"name": "seed_franchises", "package": null, "version": null}, {"name": "player_team_season_pitching_stats", "package": null, "version": null}, {"name": "player_team_season_pitching_stats", "package": null, "version": null}, {"name": "seed_franchises", "package": null, "version": null}, {"name": "team_game_start_info", "package": null, "version": null}, {"name": "player_game_pitching_stats", "package": null, "version": null}, {"name": "event_pitching_stats", "package": null, "version": null}, {"name": "team_game_start_info", "package": null, "version": null}, {"name": "seed_game_types", "package": null, "version": null}, {"name": "game_start_info", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.baseball_computer.metric_table_generator"], "nodes": ["model.baseball_computer.event_pitching_stats", "seed.baseball_computer.seed_franchises", "model.baseball_computer.player_team_season_pitching_stats", "model.baseball_computer.team_game_start_info", "model.baseball_computer.player_game_pitching_stats", "seed.baseball_computer.seed_game_types", "model.baseball_computer.game_start_info"]}, "compiled_path": null, "contract": {"enforced": true, "alias_types": true, "checksum": "04f52430f99d60df00cfe7652fd80f639b20e713c14ef539043a2c2000f5f1dd"}, "access": "protected", "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true, "columns": ["team_id", "season"]}], "version": null, "latest_version": null, "deprecation_date": null}, "model.baseball_computer.standings": {"database": "bc", "schema": "main_models", "name": "standings", "resource_type": "model", "package_name": "baseball_computer", "path": "metrics/standings.sql", "original_file_path": "models/metrics/standings.sql", "unique_id": "model.baseball_computer.standings", "fqn": ["baseball_computer", "metrics", "standings"], "alias": "standings", "checksum": {"name": "sha256", "checksum": "35ceb934e1a374093e8ae2240a516fb229c3ed420ef0f323413a3b62922c7412"}, "config": {"enabled": true, "alias": null, "schema": "models", "database": null, "tags": [], "meta": {"primary_keys": ["season", "date", "team_id"]}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Daily snapshots of team standings.\n", "columns": {"season": {"name": "season", "description": "Year, 4-digit integer", "meta": {}, "data_type": "bigint", "constraints": [], "quote": null, "tags": []}, "date": {"name": "date", "description": "Date on which the entity took place.", "meta": {}, "data_type": "date", "constraints": [], "quote": null, "tags": []}, "league": {"name": "league", "description": "Abbreviation for the league associated with this entity. NULL\n    indicates that a team is not part of a league (e.g. all-star games\n    or Negro League barnstorming teams).", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "division": {"name": "division", "description": "The team's division within the league. Null if the team is not associated\n    with a divsion (e.g. any game prior to 1969).", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "team_id": {"name": "team_id", "description": "Retrosheet team ID, 3-character string which identifies the team\n    that a franchise was playing as at a given time.", "meta": {}, "data_type": "team_id", "constraints": [], "quote": null, "tags": []}, "team_name": {"name": "team_name", "description": "Team name, both city and nickname.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "wins": {"name": "wins", "description": "Number of games won by the team to date.", "meta": {}, "data_type": "hugeint", "constraints": [], "quote": null, "tags": []}, "losses": {"name": "losses", "description": "Number of games lost by the team to date.", "meta": {}, "data_type": "hugeint", "constraints": [], "quote": null, "tags": []}, "win_percentage": {"name": "win_percentage", "description": "Percentage of games won by the team to date.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "games_behind": {"name": "games_behind", "description": "Number of games the team is behind the division leader to date.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "pythagorean_win_percentage": {"name": "pythagorean_win_percentage", "description": "Expected winning percentage based on runs scored and runs allowed to date. Invented by Bill James, pythagorean expectation is probably the most fundamental sabermetric concept because of how clearly it connects the process of scoring runs to the outcome of winning games. Ironically, 'pythagorean' ended up applying much better as a descriptor of its centrality to the discipline than it did as a means of describing the formula itself, which has nothing to do with the Pythagorean theorem.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "average_run_differential": {"name": "average_run_differential", "description": "Average per-game difference in runs scored and runs allowed.", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "win_streak_length": {"name": "win_streak_length", "description": "Number of consecutive games won by the team to date.", "meta": {}, "data_type": "bigint", "constraints": [], "quote": null, "tags": []}, "loss_streak_length": {"name": "loss_streak_length", "description": "Number of consecutive games lost by the team to date.", "meta": {}, "data_type": "bigint", "constraints": [], "quote": null, "tags": []}, "runs_scored": {"name": "runs_scored", "description": "Number of runs scored by the team to date.", "meta": {}, "data_type": "hugeint", "constraints": [], "quote": null, "tags": []}, "runs_allowed": {"name": "runs_allowed", "description": "Number of runs allowed by the team to date.", "meta": {}, "data_type": "hugeint", "constraints": [], "quote": null, "tags": []}, "home_wins": {"name": "home_wins", "description": "Number of games won by the team at home to date.", "meta": {}, "data_type": "hugeint", "constraints": [], "quote": null, "tags": []}, "home_losses": {"name": "home_losses", "description": "Number of games lost by the team at home to date.", "meta": {}, "data_type": "hugeint", "constraints": [], "quote": null, "tags": []}, "away_wins": {"name": "away_wins", "description": "Number of games won by the team on the road to date.", "meta": {}, "data_type": "hugeint", "constraints": [], "quote": null, "tags": []}, "away_losses": {"name": "away_losses", "description": "Number of games lost by the team on the road to date.", "meta": {}, "data_type": "hugeint", "constraints": [], "quote": null, "tags": []}, "interleague_wins": {"name": "interleague_wins", "description": "Number of games won by the team in interleague play to date.", "meta": {}, "data_type": "hugeint", "constraints": [], "quote": null, "tags": []}, "interleague_losses": {"name": "interleague_losses", "description": "Number of games lost by the team in interleague play to date.", "meta": {}, "data_type": "hugeint", "constraints": [], "quote": null, "tags": []}, "east_wins": {"name": "east_wins", "description": "Number of games won by the team against eastern division opponents within their league to date.", "meta": {}, "data_type": "hugeint", "constraints": [], "quote": null, "tags": []}, "east_losses": {"name": "east_losses", "description": "Number of games lost by the team against eastern division opponents within their league to date.", "meta": {}, "data_type": "hugeint", "constraints": [], "quote": null, "tags": []}, "central_wins": {"name": "central_wins", "description": "Number of games won by the team against central division opponents within their league to date.", "meta": {}, "data_type": "hugeint", "constraints": [], "quote": null, "tags": []}, "central_losses": {"name": "central_losses", "description": "Number of games lost by the team against central division opponents within their league to date.", "meta": {}, "data_type": "hugeint", "constraints": [], "quote": null, "tags": []}, "west_wins": {"name": "west_wins", "description": "Number of games won by the team against western division opponents within their league to date.", "meta": {}, "data_type": "hugeint", "constraints": [], "quote": null, "tags": []}, "west_losses": {"name": "west_losses", "description": "Number of games lost by the team against western division opponents within their league to date.", "meta": {}, "data_type": "hugeint", "constraints": [], "quote": null, "tags": []}, "one_run_wins": {"name": "one_run_wins", "description": "Number of games won by the team by one run to date.", "meta": {}, "data_type": "hugeint", "constraints": [], "quote": null, "tags": []}, "one_run_losses": {"name": "one_run_losses", "description": "Number of games lost by the team by one run to date.", "meta": {}, "data_type": "hugeint", "constraints": [], "quote": null, "tags": []}, "last_10_wins": {"name": "last_10_wins", "description": "Number of games won by the team in their last 10 games.", "meta": {}, "data_type": "hugeint", "constraints": [], "quote": null, "tags": []}, "last_10_losses": {"name": "last_10_losses", "description": "Number of games lost by the team in their last 10 games.", "meta": {}, "data_type": "hugeint", "constraints": [], "quote": null, "tags": []}}, "meta": {"primary_keys": ["season", "date", "team_id"]}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "baseball_computer://models/metrics/standings.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "models", "contract": {"enforced": true}, "meta": {"primary_keys": ["season", "date", "team_id"]}}, "created_at": 1702285119.342591, "relation_name": "\"bc\".\"main_models\".\"standings\"", "raw_code": "{{\n  config(\n    materialized = 'table',\n    )\n}}\nWITH date_spine AS MATERIALIZED (\n    SELECT UNNEST(GENERATE_SERIES(\n        (SELECT MIN(date) FROM {{ ref('game_start_info') }}),\n        (SELECT MAX(date) FROM {{ ref('game_start_info') }}) + 1,\n        INTERVAL '1 day'\n    ))::DATE AS date,\n    EXTRACT(YEAR FROM date) AS season\n),\n\nseason_date_bounds AS (\n    SELECT\n        season,\n        MIN(game_finish_date) - 1 AS season_start_date,\n        MAX(game_finish_date) + 1 AS season_end_date\n    FROM {{ ref('game_results') }}\n    WHERE game_type = 'RegularSeason'\n    GROUP BY 1\n),\n\nteam_spine AS (\n    SELECT\n        season,\n        team_id,\n        -- TODO: Test one league per team per regular season\n        ANY_VALUE(league) AS league,\n        ANY_VALUE(team_name) AS team_name,\n        ANY_VALUE(division) AS division,\n    FROM {{ ref('team_game_start_info') }}\n    WHERE game_type = 'RegularSeason'\n    GROUP BY 1, 2\n),\n\nstandings_spine AS (\n    SELECT\n        d.season,\n        d.date,\n        t.* EXCLUDE (season)\n    FROM date_spine AS d\n    INNER JOIN season_date_bounds AS b USING (season)\n    LEFT JOIN team_spine AS t USING (season)\n    WHERE d.date BETWEEN b.season_start_date AND b.season_end_date\n),\n\ncrossed AS (\n    SELECT DISTINCT ON (s.date, s.season, s.league, s.team_id)\n        s.date,\n        s.season,\n        s.league,\n        s.division,\n        s.team_id,\n        s.team_name,\n        COALESCE(SUM(r.wins) OVER team_window, 0) AS wins,\n        COALESCE(SUM(r.losses) OVER team_window, 0) AS losses,\n        -- Take the streak count from the last game of the day\n        COALESCE(LAST(r.win_streak_length IGNORE NULLS) OVER team_window, 0) AS win_streak_length,\n        COALESCE(LAST(r.loss_streak_length IGNORE NULLS) OVER team_window, 0) AS loss_streak_length,\n        COALESCE(SUM(r.runs_scored) OVER team_window, 0) AS runs_scored,\n        COALESCE(SUM(r.runs_allowed) OVER team_window, 0) AS runs_allowed,\n        COALESCE(SUM(r.home_wins) OVER team_window, 0) AS home_wins,\n        COALESCE(SUM(r.home_losses) OVER team_window, 0) AS home_losses,\n        COALESCE(SUM(r.away_wins) OVER team_window, 0) AS away_wins,\n        COALESCE(SUM(r.away_losses) OVER team_window, 0) AS away_losses,\n        COALESCE(SUM(r.interleague_wins) OVER team_window, 0) AS interleague_wins,\n        COALESCE(SUM(r.interleague_losses) OVER team_window, 0) AS interleague_losses,\n        COALESCE(SUM(r.east_wins) OVER team_window, 0) AS east_wins,\n        COALESCE(SUM(r.east_losses) OVER team_window, 0) AS east_losses,\n        COALESCE(SUM(r.central_wins) OVER team_window, 0) AS central_wins,\n        COALESCE(SUM(r.central_losses) OVER team_window, 0) AS central_losses,\n        COALESCE(SUM(r.west_wins) OVER team_window, 0) AS west_wins,\n        COALESCE(SUM(r.west_losses) OVER team_window, 0) AS west_losses,\n        COALESCE(SUM(r.one_run_wins) OVER team_window, 0) AS one_run_wins,\n        COALESCE(SUM(r.one_run_losses) OVER team_window, 0) AS one_run_losses,\n        COALESCE(SUM(r.wins) OVER last_10_window, 0) AS last_10_wins,\n        COALESCE(SUM(r.losses) OVER last_10_window, 0) AS last_10_losses,\n    FROM standings_spine AS s\n    LEFT JOIN {{ ref('team_game_results') }} AS r\n        ON r.season = s.season\n            AND r.team_id = s.team_id\n            AND r.game_finish_date = s.date\n            AND r.game_type = 'RegularSeason'\n    WINDOW\n        team_window AS (\n            PARTITION BY s.season, s.team_id\n            ORDER BY s.date, r.season_game_number\n        ),\n        last_10_window AS (\n            PARTITION BY s.season, s.team_id\n            ORDER BY r.season_game_number\n            RANGE BETWEEN 9 PRECEDING AND CURRENT ROW\n        )\n),\n\nfinal AS (\n    SELECT\n        -- Put the calc cols further up\n        season,\n        date,\n        league,\n        division,\n        team_id,\n        team_name,\n        wins,\n        losses,\n        wins / (wins + losses) AS win_percentage,\n        GREATEST(\n            0,\n            (FIRST(wins) OVER division_snapshot - FIRST(losses) OVER division_snapshot - (wins - losses)) / 2\n        ) AS games_behind,\n        runs_scored ^ 1.85 / (runs_scored ^ 1.85 + runs_allowed ^ 1.85) AS pythagorean_win_percentage,\n        (runs_scored - runs_allowed) / (wins + losses) AS average_run_differential,\n        * EXCLUDE (date, season, league, division, team_id, team_name, wins, losses)\n    FROM crossed\n    WINDOW\n        division_snapshot AS (\n            PARTITION BY season, league, division, date\n            ORDER BY wins - losses DESC\n        )\n)\n\nSELECT * FROM final", "language": "sql", "refs": [{"name": "game_start_info", "package": null, "version": null}, {"name": "game_start_info", "package": null, "version": null}, {"name": "game_results", "package": null, "version": null}, {"name": "team_game_start_info", "package": null, "version": null}, {"name": "team_game_results", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.baseball_computer.game_start_info", "model.baseball_computer.game_results", "model.baseball_computer.team_game_start_info", "model.baseball_computer.team_game_results"]}, "compiled_path": null, "contract": {"enforced": true, "alias_types": true, "checksum": "42e720565c00cf0d95684016e6d40cd89d597a9cd3c4df7118e15da4a47430a2"}, "access": "protected", "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true, "columns": ["season", "date", "team_id"]}], "version": null, "latest_version": null, "deprecation_date": null}, "model.baseball_computer.game_start_info": {"database": "bc", "schema": "main_models", "name": "game_start_info", "resource_type": "model", "package_name": "baseball_computer", "path": "intermediate/game_level/game_start_info.sql", "original_file_path": "models/intermediate/game_level/game_start_info.sql", "unique_id": "model.baseball_computer.game_start_info", "fqn": ["baseball_computer", "intermediate", "game_level", "game_start_info"], "alias": "game_start_info", "checksum": {"name": "sha256", "checksum": "c7f4998eb940089233f03d49da833f55d3bd4a323eeaf00d8c797a7a4b5056da"}, "config": {"enabled": true, "alias": null, "schema": "models", "database": null, "tags": [], "meta": {"primary_keys": ["game_id"]}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Key table for information about every game in the database.\nOnly information that is known at the time of the game's start is included.\nFor example, the final score is not included here, but the starting lineups are.\nFor information about the results of the game, see the `game_results` table.\n", "columns": {"game_id": {"name": "game_id", "description": "Retrosheet game ID, A 12-character string structured as follows:\n\n    - Chars 1-3: Home team ID\n    - Chars 4-11: Date (YYYYMMDD)\n    - Char 12: Game number (0 if only one game was played on that day)\n    \n    Example: MLN195607170", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "date": {"name": "date", "description": "Date on which the entity took place.", "meta": {}, "data_type": "date", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "start_time": {"name": "start_time", "description": "The specific date and time when the game started (local time).\n    Data here is generally pretty spotty until the 2000s.", "meta": {}, "data_type": "timestamp", "constraints": [], "quote": null, "tags": []}, "season": {"name": "season", "description": "Year, 4-digit integer", "meta": {}, "data_type": "smallint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "home_team_id": {"name": "home_team_id", "description": "Retrosheet team ID, 3-character string which identifies the team\n    that a franchise was playing as at a given time.", "meta": {}, "data_type": "team_id", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "away_team_id": {"name": "away_team_id", "description": "Retrosheet team ID, 3-character string which identifies the team\n    that a franchise was playing as at a given time.", "meta": {}, "data_type": "team_id", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "doubleheader_status": {"name": "doubleheader_status", "description": "", "meta": {}, "data_type": "doubleheader_status", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "time_of_day": {"name": "time_of_day", "description": "A day game/night game indicator for the entity. This value\n    is close to 100% populated for the pre-night-baseball era and from 1949 on,\n    and is still well-populated for the years in between. By far the most reliably\n    populated data point for game environmental conditions.", "meta": {}, "data_type": "time_of_day", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "game_type": {"name": "game_type", "description": "The context in which a game took place, such as the regular season,\n    a specific playoff round, or an all-star game.", "meta": {}, "data_type": "game_type", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "bat_first_side": {"name": "bat_first_side", "description": "The side that batted in the top of the inning during the game.\n    This is almost always the Away side, but there are a good number of\n    home-team-bats-first games in the 19th century and 2020.\n    See this SABR article for historical context: https://sabr.org/journal/article/the-death-and-rebirth-of-the-home-team-batting-first/", "meta": {}, "data_type": "side", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "sky": {"name": "sky", "description": "Enum describing the sky conditions.", "meta": {}, "data_type": "sky", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "field_condition": {"name": "field_condition", "description": "Enum describing the field conditions,\n    particularly with respect to wetness. This\n    can be different from precipitation if, for\n    example, there was rain before the game.", "meta": {}, "data_type": "field_condition", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "precipitation": {"name": "precipitation", "description": "Enum describing precipitation level.", "meta": {}, "data_type": "precipitation", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "wind_direction": {"name": "wind_direction", "description": "Enum describing wind direction in terms\n    of one part of the field to another.", "meta": {}, "data_type": "wind_direction", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "park_id": {"name": "park_id", "description": "Retrosheet park ID, 3-character string which identifies the ballpark\n    associated with this entity. See `stg_parks` for full park info.", "meta": {}, "data_type": "park_id", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "temperature_fahrenheit": {"name": "temperature_fahrenheit", "description": "Temperature in degrees Fahrenheit.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "attendance": {"name": "attendance", "description": "The number of people in attendance at the game.\n    The source for this number is not consistent over time\n    and may refer to paid attendance or some other way\n    of estimating the number. Attendance data is is very well-populated\n    historically, but there is a zero-or-missing ambiguity in Retrosheet\n    data. At the moment, we NULL out 0 attendance for all years\n    other than 2020, which contains almost all of the true-zero-attendance\n    games in history.", "meta": {}, "data_type": "uinteger", "constraints": [], "quote": null, "tags": []}, "wind_speed_mph": {"name": "wind_speed_mph", "description": "Wind speed in miles per hour.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "use_dh": {"name": "use_dh", "description": "", "meta": {}, "data_type": "boolean", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "scorer": {"name": "scorer", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "scoring_method": {"name": "scoring_method", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "source_type": {"name": "source_type", "description": "Broad categorization of the source of the data.\n    - PlayByPlay: Retrosheet play-by-play files (either from an account or deduced)\n    - BoxScore: Retrosheet box score files\n    - GameLog: Retrosheet game log files", "meta": {}, "data_type": "varchar", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "umpire_home_id": {"name": "umpire_home_id", "description": "Retrosheet person ID of the umpire at home plate.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "umpire_first_id": {"name": "umpire_first_id", "description": "Retrosheet person ID of the umpire at first base.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "umpire_second_id": {"name": "umpire_second_id", "description": "Retrosheet person ID of the umpire at second base.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "umpire_third_id": {"name": "umpire_third_id", "description": "Retrosheet person ID of the umpire at third base.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "umpire_left_id": {"name": "umpire_left_id", "description": "Retrosheet person ID of the umpire in left field.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "umpire_right_id": {"name": "umpire_right_id", "description": "Retrosheet person ID of the umpire in right field.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "filename": {"name": "filename", "description": "Name of the Retrosheet file that this data is derived from.\n    Helpful for debugging.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "home_starting_pitcher_id": {"name": "home_starting_pitcher_id", "description": "The Retrosheet person ID of the starting pitcher for the home team in this game.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "away_starting_pitcher_id": {"name": "away_starting_pitcher_id", "description": "The Retrosheet person ID of the starting pitcher for the away team in this game.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "is_regular_season": {"name": "is_regular_season", "description": "Indicates whether the game is a regular season game.", "meta": {}, "data_type": "boolean", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "is_postseason": {"name": "is_postseason", "description": "Indicates whether the game is a postseason game.", "meta": {}, "data_type": "boolean", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "is_integrated": {"name": "is_integrated", "description": "Whether or not this game took place in a racially integrated league/season.\nThis is defined as all AL/NL games from 1947 onward. Keep in mind that integration\nstatus has nuances that go well beyond the scope of this field: specifically,\nsome teams had no Black players as late as 1958, and Black players were generally\nunderrepresented until the early 70s, especially in the AL. See Mark Armour's research\nfor more detail: https://sabr.org/journal/article/the-effects-of-integration-1947-1986/\n", "meta": {}, "data_type": "boolean", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "is_negro_leagues": {"name": "is_negro_leagues", "description": "Whether or not this was a game with Negro League teams.\nThis includes exhibition/all-star games that featured Black and white teams.\n", "meta": {}, "data_type": "boolean", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "is_segregated_white": {"name": "is_segregated_white", "description": "Whether or not this was a non-Negro-League game before MLB was integrated in 1947.\n", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "away_franchise_id": {"name": "away_franchise_id", "description": "The Retrosheet franchise ID of the away team in this game.\n    Franchise ID connects team_ids that are associated with the same franchise\n    over time. See `seed_franchises` for more info.", "meta": {}, "data_type": "team_id", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "home_franchise_id": {"name": "home_franchise_id", "description": "The Retrosheet franchise ID of the home team in this game.\n    Franchise ID connects team_ids that are associated with the same franchise\n    over time. See `seed_franchises` for more info.", "meta": {}, "data_type": "team_id", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "away_league": {"name": "away_league", "description": "The league of the away team in this game.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "home_league": {"name": "home_league", "description": "The league of the home team in this game.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "away_division": {"name": "away_division", "description": "The division of the away team in this game. Null if the team is not associated\n    with a divsion (e.g. any game prior to 1969).", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "home_division": {"name": "home_division", "description": "The division of the home team in this game. Null if the team is not associated\n    with a divsion (e.g. any game prior to 1969).", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "away_team_name": {"name": "away_team_name", "description": "The name of the away team in this game (location and nickname).", "meta": {}, "data_type": "varchar", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "home_team_name": {"name": "home_team_name", "description": "The name of the home team in this game (location and nickname).", "meta": {}, "data_type": "varchar", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "is_interleague": {"name": "is_interleague", "description": "Indicates whether the game is an interleague game. Defined as\n    a game played in any context between two teams who are defined at the time\n    as being in different leagues (if one of the teams is not in a league, this is false).", "meta": {}, "data_type": "boolean", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "lineup_map_away": {"name": "lineup_map_away", "description": "A dictionary that maps starting lineup positions (1-10) to player IDs for the away team.", "meta": {}, "data_type": "map(utinyint, varchar)", "constraints": [], "quote": null, "tags": []}, "lineup_map_home": {"name": "lineup_map_home", "description": "A dictionary that maps starting lineup positions (1-10) to player IDs for the home team.", "meta": {}, "data_type": "map(utinyint, varchar)", "constraints": [], "quote": null, "tags": []}, "fielding_map_away": {"name": "fielding_map_away", "description": "A dictionary that maps starting fielding positions (1-10) to player IDs for the away team.", "meta": {}, "data_type": "map(utinyint, varchar)", "constraints": [], "quote": null, "tags": []}, "fielding_map_home": {"name": "fielding_map_home", "description": "A dictionary that maps starting fielding positions (1-10) to player IDs for the home team.", "meta": {}, "data_type": "map(utinyint, varchar)", "constraints": [], "quote": null, "tags": []}}, "meta": {"primary_keys": ["game_id"]}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "baseball_computer://models/intermediate/game_level/game_start_info.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "models", "contract": {"enforced": true}, "meta": {"primary_keys": ["game_id"]}}, "created_at": 1702285208.137589, "relation_name": "\"bc\".\"main_models\".\"game_start_info\"", "raw_code": "{{\n  config(\n    materialized = 'table',\n    )\n}}\nWITH games AS (\n    SELECT\n        g.game_id,\n        g.date,\n        g.start_time,\n        g.season,\n        g.home_team_id,\n        g.away_team_id,\n        g.doubleheader_status,\n        g.time_of_day,\n        g.game_type,\n        g.bat_first_side,\n        g.sky,\n        g.field_condition,\n        g.precipitation,\n        g.wind_direction,\n        g.park_id,\n        g.temperature_fahrenheit,\n        g.attendance::UINTEGER AS attendance,\n        g.wind_speed_mph::UTINYINT AS wind_speed_mph,\n        g.use_dh,\n        g.scorer,\n        g.scoring_method,\n        g.source_type,\n        g.umpire_home_id,\n        g.umpire_first_id,\n        g.umpire_second_id,\n        g.umpire_third_id,\n        g.umpire_left_id,\n        g.umpire_right_id,\n        g.filename,\n    FROM {{ ref('stg_games') }} AS g\n),\n\nadd_gamelog AS (\n    SELECT *\n    FROM games\n    UNION ALL BY NAME\n    -- Gamelogs from non-acquired games\n    -- have a small subset of info\n    SELECT\n        game_id,\n        date,\n        season,\n        home_team_id,\n        away_team_id,\n        doubleheader_status,\n        time_of_day,\n        game_type,\n        bat_first_side,\n        park_id,\n        attendance::UINTEGER AS attendance,\n        use_dh,\n        umpire_home_id,\n        umpire_first_id,\n        umpire_second_id,\n        umpire_third_id,\n        source_type,\n        home_starting_pitcher_id,\n        away_starting_pitcher_id,\n        'Unknown'::SKY AS sky,\n        'Unknown'::FIELD_CONDITION AS field_condition,\n        'Unknown'::PRECIPITATION AS precipitation,\n        'Unknown'::WIND_DIRECTION AS wind_direction,\n    FROM {{ ref('stg_gamelog') }}\n    WHERE game_id NOT IN (SELECT game_id FROM games)\n),\n\nadd_rest AS (\n    SELECT\n        add_gamelog.* REPLACE (\n            COALESCE(add_gamelog.away_starting_pitcher_id, lineups.fielding_map_away[1][1])\n            AS away_starting_pitcher_id,\n            COALESCE(add_gamelog.home_starting_pitcher_id, lineups.fielding_map_home[1][1])\n            AS home_starting_pitcher_id,\n            COALESCE(add_gamelog.park_id, missing_parks.park_id) AS park_id,\n        ),\n        game_types.is_regular_season,\n        game_types.is_postseason,\n        COALESCE(\n            add_gamelog.season >= 1947 AND add_gamelog.filename NOT LIKE '%.E%R', FALSE\n        ) AS is_integrated,\n        COALESCE(add_gamelog.filename LIKE '%.E%R', FALSE) AS is_negro_leagues,\n        (NOT is_integrated AND NOT is_negro_leagues) AS is_segregated_white,\n        franchise_a.franchise_id::TEAM_ID AS away_franchise_id,\n        franchise_h.franchise_id::TEAM_ID AS home_franchise_id,\n        franchise_a.league AS away_league,\n        franchise_h.league AS home_league,\n        franchise_a.division AS away_division,\n        franchise_h.division AS home_division,\n        franchise_a.location || ' ' || franchise_a.nickname AS away_team_name,\n        franchise_h.location || ' ' || franchise_h.nickname AS home_team_name,\n        COALESCE(franchise_a.league != franchise_h.league, FALSE) AS is_interleague,\n        lineups.lineup_map_away,\n        lineups.lineup_map_home,\n        lineups.fielding_map_away,\n        lineups.fielding_map_home,\n    FROM add_gamelog\n    -- It's an extra join, but we need to join after denormalizing\n    -- in order to get the gamelog-only games\n    LEFT JOIN {{ ref('seed_franchises') }} AS franchise_a\n        ON add_gamelog.away_team_id = franchise_a.team_id\n            AND add_gamelog.date BETWEEN\n            franchise_a.date_start AND COALESCE(franchise_a.date_end, '9999-12-31')\n    LEFT JOIN {{ ref('seed_franchises') }} AS franchise_h\n        ON add_gamelog.home_team_id = franchise_h.team_id\n            AND add_gamelog.date BETWEEN\n            franchise_h.date_start AND COALESCE(franchise_h.date_end, '9999-12-31')\n    LEFT JOIN {{ ref('game_starting_lineups') }} AS lineups USING (game_id)\n    LEFT JOIN {{ ref('seed_game_types') }} AS game_types USING (game_type)\n    -- Some parks are missing from early box files, so we supplement with the gamelog\n    -- Otherwise, gamelog games are mutually exclusive with box/event games in this data\n    LEFT JOIN {{ ref('stg_gamelog') }} AS missing_parks USING (game_id)\n)\n\nSELECT * FROM add_rest", "language": "sql", "refs": [{"name": "stg_games", "package": null, "version": null}, {"name": "stg_gamelog", "package": null, "version": null}, {"name": "seed_franchises", "package": null, "version": null}, {"name": "seed_franchises", "package": null, "version": null}, {"name": "game_starting_lineups", "package": null, "version": null}, {"name": "seed_game_types", "package": null, "version": null}, {"name": "stg_gamelog", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.baseball_computer.stg_games", "model.baseball_computer.stg_gamelog", "seed.baseball_computer.seed_franchises", "model.baseball_computer.game_starting_lineups", "seed.baseball_computer.seed_game_types"]}, "compiled_path": null, "contract": {"enforced": true, "alias_types": true, "checksum": "cb7d54a6b26935a175f7c6b79fbf7220b165751c7cb9a028f7bb129c9e04bf18"}, "access": "protected", "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true, "columns": ["game_id"]}], "version": null, "latest_version": null, "deprecation_date": null}, "model.baseball_computer.game_results": {"database": "bc", "schema": "main_models", "name": "game_results", "resource_type": "model", "package_name": "baseball_computer", "path": "intermediate/game_level/game_results.sql", "original_file_path": "models/intermediate/game_level/game_results.sql", "unique_id": "model.baseball_computer.game_results", "fqn": ["baseball_computer", "intermediate", "game_level", "game_results"], "alias": "game_results", "checksum": {"name": "sha256", "checksum": "1280542c31c770609adc8b5cadce23529fe584ec4811a6a9a31dd4cf9e94adbf"}, "config": {"enabled": true, "alias": null, "schema": "models", "database": null, "tags": [], "meta": {"primary_keys": ["game_id"]}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Includes the results of every completed, suspended, or forfeited game in the database.\n", "columns": {"game_id": {"name": "game_id", "description": "Retrosheet game ID, A 12-character string structured as follows:\n\n    - Chars 1-3: Home team ID\n    - Chars 4-11: Date (YYYYMMDD)\n    - Char 12: Game number (0 if only one game was played on that day)\n    \n    Example: MLN195607170", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "season": {"name": "season", "description": "Year, 4-digit integer", "meta": {}, "data_type": "smallint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "game_type": {"name": "game_type", "description": "The context in which a game took place, such as the regular season,\n    a specific playoff round, or an all-star game.", "meta": {}, "data_type": "game_type", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "game_finish_date": {"name": "game_finish_date", "description": "This will always be the same as the game's `date` unless the game was suspended and finished on a different day. Games that end after midnight will still have the same value as the `date`.", "meta": {}, "data_type": "date", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "home_team_id": {"name": "home_team_id", "description": "Retrosheet team ID, 3-character string which identifies the team\n    that a franchise was playing as at a given time.", "meta": {}, "data_type": "team_id", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "away_team_id": {"name": "away_team_id", "description": "Retrosheet team ID, 3-character string which identifies the team\n    that a franchise was playing as at a given time.", "meta": {}, "data_type": "team_id", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "winning_team_id": {"name": "winning_team_id", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "losing_team_id": {"name": "losing_team_id", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "winning_team_score": {"name": "winning_team_score", "description": "", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "losing_team_score": {"name": "losing_team_score", "description": "", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "winning_side": {"name": "winning_side", "description": "", "meta": {}, "data_type": "side", "constraints": [], "quote": null, "tags": []}, "losing_side": {"name": "losing_side", "description": "", "meta": {}, "data_type": "side", "constraints": [], "quote": null, "tags": []}, "forfeit_flag": {"name": "forfeit_flag", "description": "", "meta": {}, "data_type": "boolean", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "suspension_flag": {"name": "suspension_flag", "description": "", "meta": {}, "data_type": "boolean", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "tie_flag": {"name": "tie_flag", "description": "", "meta": {}, "data_type": "boolean", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "winning_pitcher_id": {"name": "winning_pitcher_id", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "losing_pitcher_id": {"name": "losing_pitcher_id", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "save_pitcher_id": {"name": "save_pitcher_id", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "game_winning_rbi_player_id": {"name": "game_winning_rbi_player_id", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "home_runs_scored": {"name": "home_runs_scored", "description": "", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "away_runs_scored": {"name": "away_runs_scored", "description": "", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "away_line_score": {"name": "away_line_score", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "home_line_score": {"name": "home_line_score", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "duration_minutes": {"name": "duration_minutes", "description": "", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "duration_outs": {"name": "duration_outs", "description": "", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "is_nine_inning_game": {"name": "is_nine_inning_game", "description": "", "meta": {}, "data_type": "boolean", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "is_extra_inning_game": {"name": "is_extra_inning_game", "description": "", "meta": {}, "data_type": "boolean", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "is_shortened_game": {"name": "is_shortened_game", "description": "", "meta": {}, "data_type": "boolean", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}}, "meta": {"primary_keys": ["game_id"]}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "baseball_computer://models/intermediate/game_level/game_results.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "models", "contract": {"enforced": true}, "meta": {"primary_keys": ["game_id"]}}, "created_at": 1702285324.350044, "relation_name": "\"bc\".\"main_models\".\"game_results\"", "raw_code": "{{\n  config(\n    materialized = 'table',\n    )\n}}\nWITH event_and_box_results AS (\n    SELECT\n        game_id,\n        games.date,\n        games.duration_minutes,\n        games.winning_pitcher_id,\n        games.losing_pitcher_id,\n        games.save_pitcher_id,\n        games.game_winning_rbi_player_id,\n        line_scores.home_runs_scored,\n        line_scores.away_runs_scored,\n        line_scores.home_line_score,\n        line_scores.away_line_score,\n        line_scores.duration_outs,\n    FROM {{ ref('stg_games') }} AS games\n    LEFT JOIN {{ ref('game_line_scores') }} AS line_scores USING (game_id)\n\n),\n\ngamelog_results AS (\n    SELECT\n        game_id,\n        date,\n        duration_minutes,\n        home_runs_scored,\n        away_runs_scored,\n        away_line_score,\n        home_line_score,\n    FROM {{ ref('stg_gamelog') }}\n    WHERE game_id NOT IN (SELECT game_id FROM event_and_box_results)\n),\n\nunioned AS (\n    SELECT *\n    FROM gamelog_results\n    UNION ALL BY NAME\n    SELECT *\n    FROM event_and_box_results\n),\n\nfinal AS (\n    SELECT\n        game_id,\n        start_info.season,\n        start_info.game_type,\n        COALESCE(suspensions.date_resumed, unioned.date) AS game_finish_date,\n        start_info.home_team_id,\n        start_info.away_team_id,\n        CASE\n            WHEN forfeits.winning_side = 'Home'\n                THEN start_info.home_team_id\n            WHEN forfeits.winning_side = 'Away'\n                THEN start_info.away_team_id\n            WHEN unioned.home_runs_scored > unioned.away_runs_scored\n                THEN start_info.home_team_id\n            WHEN unioned.home_runs_scored < unioned.away_runs_scored\n                THEN start_info.away_team_id\n        END AS winning_team_id,\n        CASE\n            WHEN winning_team_id = start_info.home_team_id\n                THEN start_info.away_team_id\n            WHEN winning_team_id = start_info.away_team_id\n                THEN start_info.home_team_id\n        END AS losing_team_id,\n        CASE\n            WHEN winning_team_id = start_info.home_team_id\n                THEN unioned.home_runs_scored\n            WHEN winning_team_id = start_info.away_team_id\n                THEN unioned.away_runs_scored\n        END::UTINYINT AS winning_team_score,\n        CASE\n            WHEN winning_team_id = start_info.home_team_id\n                THEN unioned.away_runs_scored\n            WHEN winning_team_id = start_info.away_team_id\n                THEN unioned.home_runs_scored\n        END::UTINYINT AS losing_team_score,\n        CASE\n            WHEN winning_team_id = start_info.home_team_id\n                THEN 'Home'\n            WHEN winning_team_id = start_info.away_team_id\n                THEN 'Away'\n        END::SIDE AS winning_side,\n        CASE\n            WHEN winning_team_id = start_info.home_team_id\n                THEN 'Away'\n            WHEN winning_team_id = start_info.away_team_id\n                THEN 'Home'\n        END::SIDE AS losing_side,\n        forfeits.game_id IS NOT NULL AS forfeit_flag,\n        suspensions.game_id IS NOT NULL AS suspension_flag,\n        winning_team_id IS NULL AS tie_flag,\n        unioned.winning_pitcher_id,\n        unioned.losing_pitcher_id,\n        unioned.save_pitcher_id,\n        unioned.game_winning_rbi_player_id,\n        unioned.home_runs_scored::UTINYINT AS home_runs_scored,\n        unioned.away_runs_scored::UTINYINT AS away_runs_scored,\n        unioned.away_line_score,\n        unioned.home_line_score,\n        unioned.duration_minutes::USMALLINT AS duration_minutes,\n        unioned.duration_outs,\n        -- We'll assume for now that games without recorded outs are 9 innings by default\n        COALESCE(unioned.duration_outs BETWEEN 51 AND 54, TRUE) AS is_nine_inning_game,\n        COALESCE(unioned.duration_outs > 54, FALSE) AS is_extra_inning_game,\n        COALESCE(unioned.duration_outs < 51, FALSE) AS is_shortened_game,\n    FROM unioned\n    INNER JOIN {{ ref('game_start_info') }} AS start_info USING (game_id)\n    LEFT JOIN {{ ref('game_suspensions') }} AS suspensions USING (game_id)\n    LEFT JOIN {{ ref('game_forfeits') }} AS forfeits USING (game_id)\n)\n\nSELECT * FROM final", "language": "sql", "refs": [{"name": "stg_games", "package": null, "version": null}, {"name": "game_line_scores", "package": null, "version": null}, {"name": "stg_gamelog", "package": null, "version": null}, {"name": "game_start_info", "package": null, "version": null}, {"name": "game_suspensions", "package": null, "version": null}, {"name": "game_forfeits", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.baseball_computer.stg_games", "model.baseball_computer.game_line_scores", "model.baseball_computer.stg_gamelog", "model.baseball_computer.game_start_info", "model.baseball_computer.game_suspensions", "model.baseball_computer.game_forfeits"]}, "compiled_path": null, "contract": {"enforced": true, "alias_types": true, "checksum": "63d69990105dede4a5939a8ae26030fdfea1ff5cf8e2e94508afc68113c88ba7"}, "access": "protected", "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true, "columns": ["game_id"]}], "version": null, "latest_version": null, "deprecation_date": null}, "model.baseball_computer.event_offense_stats": {"database": "bc", "schema": "main_models", "name": "event_offense_stats", "resource_type": "model", "package_name": "baseball_computer", "path": "intermediate/event_level/event_offense_stats.sql", "original_file_path": "models/intermediate/event_level/event_offense_stats.sql", "unique_id": "model.baseball_computer.event_offense_stats", "fqn": ["baseball_computer", "intermediate", "event_level", "event_offense_stats"], "alias": "event_offense_stats", "checksum": {"name": "sha256", "checksum": "e5c16370aca7475b88148f5f02e706b901fd7c7fdd48a92d44ffa7202856dd3e"}, "config": {"enabled": true, "alias": null, "schema": "models", "database": null, "tags": [], "meta": {"primary_keys": ["event_key", "baserunner"]}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Counting stats applicable to each batter/baserunner on each event.\nCombines hitting, baserunning, pitch sequence, and batted ball data.\n", "columns": {"game_id": {"name": "game_id", "description": "Retrosheet game ID, A 12-character string structured as follows:\n\n    - Chars 1-3: Home team ID\n    - Chars 4-11: Date (YYYYMMDD)\n    - Char 12: Game number (0 if only one game was played on that day)\n    \n    Example: MLN195607170", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "event_key": {"name": "event_key", "description": "4-byte integer that uniquely identifies an event across the entire\n    dataset (contrast with event_id, which is game-specific). The key\n    is generated deterministically given the same dataset, but it may\n    change when the data is updated. It is guaranteed to follow the \n    order of events within a single game.", "meta": {}, "data_type": "uinteger", "constraints": [], "quote": null, "tags": []}, "team_id": {"name": "team_id", "description": "Retrosheet team ID, 3-character string which identifies the team\n    that a franchise was playing as at a given time.", "meta": {}, "data_type": "team_id", "constraints": [], "quote": null, "tags": []}, "player_id": {"name": "player_id", "description": "Retrosheet 8-character person ID for a player, which consists of\n    the first four characters of the last name, the first character\n    of the first name, and then three digits to disambiguate between\n    players with the same five characters.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "baserunner": {"name": "baserunner", "description": "Enum indicating the specific baserunner associated with the entity.\n    Baserunner is designated by the state at the start of an event.", "meta": {}, "data_type": "baserunner", "constraints": [], "quote": null, "tags": []}, "plate_appearances": {"name": "plate_appearances", "description": "(PA) Number of times a batter came to the plate, including walks, hit by pitches, sacrifices, and at-bats.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "at_bats": {"name": "at_bats", "description": "(AB) Number of plate appearances that ended in either a hit or a non-sacrifice out.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "hits": {"name": "hits", "description": "(H) Number of times a batter reached base safely without an error or fielder's choice.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "singles": {"name": "singles", "description": "(1B) Number of hits in which a batter reached first base.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "doubles": {"name": "doubles", "description": "(2B) Number of hits in which a batter reached second base without the help of an error or an attempted\n    play on another runner.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "triples": {"name": "triples", "description": "(3B) Number of hits in which a batter reached third base without the help of an error or an attempted\n    play on another runner.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "home_runs": {"name": "home_runs", "description": "(HR) Number of hits in which a batter reached home plate without the help of an error or an attempted\n    play on another runner (usually by hitting the ball out of the park).", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "total_bases": {"name": "total_bases", "description": "(TB) Number of bases a batter reached safely without the help of an error or an attempted\n    play on another runner. HR * 4 + 3B * 3 + 2B * 2 + (H - HR - 3B - 2B)", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "strikeouts": {"name": "strikeouts", "description": "(K, SO) Number of times a batter struck out. This includes plays in which a batter reached base on\n    a dropped third strike.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "walks": {"name": "walks", "description": "(BB, occasionally W) Number of times a batter reaches base on called balls out of the strike zone\n    (Four balls for all of MLB history after the 1880s).", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "intentional_walks": {"name": "intentional_walks", "description": "(IBB, occasionally IW) Number of times a batter was intentionally walked. This number may be missing or undercounted\n    in earlier years, as intentional walks were not officially tracked until 1955.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "hit_by_pitches": {"name": "hit_by_pitches", "description": "(HBP) Number of times a batter was awarded first base after being hit by a pitch.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "sacrifice_hits": {"name": "sacrifice_hits", "description": "(SH) Number of times a batter performed a sacrifice bunt to advance another runner.\n    A bunt may count as a sacrifice even if the batter reaches base safely.\n    Unsuccessful attempts are not counted, nor are non-sacrifice bunts.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "sacrifice_flies": {"name": "sacrifice_flies", "description": "(SF) Number of times a batter hit a fly ball that resulted in an out (or error),\n    but allowed a runner to score on the throw.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "reached_on_errors": {"name": "reached_on_errors", "description": "(ROE) Number of times a batter reached base safely due to an error.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "reached_on_interferences": {"name": "reached_on_interferences", "description": "Number of times a batter was awarded first base for being illegally hindered\n    by a fielder, usually the catcher.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "inside_the_park_home_runs": {"name": "inside_the_park_home_runs", "description": "Number of times a batter hit a home run without the ball leaving the field of play.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "ground_rule_doubles": {"name": "ground_rule_doubles", "description": "Number of times a batter was awarded a double on a ball that went out of play after\n    bouncing in fair territory.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "infield_hits": {"name": "infield_hits", "description": "Number of times a batter reached base safely on a hit that did not reach the outfield.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "on_base_opportunities": {"name": "on_base_opportunities", "description": "Number of plate appearances in which a batter either did or did not reach base,\n    as defined by the formula for on-base percentage. Note that this is very similar to but different\n    from plate_appearances, as it does not include sacrifice hits or interference.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "on_base_successes": {"name": "on_base_successes", "description": "Number of hits, walks, and hit by pitches that serves as the numerator in the formula\n    for on-base percentage.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "runs_batted_in": {"name": "runs_batted_in", "description": "(RBI) Number of runs that scored as a result of a batter's plate appearance. This is usually\n    the number of runs that scored on the play, but errors and other similar cases may cause\n    some runs not to be credited to the batter. Scorerkeeper discretion occasionally causes differences\n    between the number in the database and the official MLB total.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "grounded_into_double_plays": {"name": "grounded_into_double_plays", "description": "(GIDP) Number of times a batter grounded into a double play. This is the conventional way\n    to record a double play and as such is an important statistic on its own. Games without\n    play-by-play accounts don't have data on the trajectory of the double play, so\n    this number is not populated for those games.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "double_plays": {"name": "double_plays", "description": "(DP) Number of times a play ended in two outs being recorded.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "triple_plays": {"name": "triple_plays", "description": "(TP) Number of times a play ended in three outs being recorded.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "batting_outs": {"name": "batting_outs", "description": "Number of outs that \"should\" have been recorded as a result of a batter's plate apperances.\n    A batting out is still counted if no actual out is recorded on an error or a failed fielder's choice.\n    Outs on baserunners (including the batter trying to stretch a hit) do not count here.\n    Grounded-into-double-plays count as two outs, but other types of double plays do not (the \n    idea here is that the baserunner is responsible on other types of double plays).\n    Unofficial stat, but designed here to be generally useful in determining rates of official stats.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "balls_in_play": {"name": "balls_in_play", "description": "Number of plate appearances that resulted in a live\n    ball on the field of play. The difference between this and batted_balls is that\n    balls_in_play does not include out-of-the-park home runs. This distinction is important\n    for calculating batting average on balls in play, a stat designed to isolate at_bats\n    in which the defense was involved.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "balls_batted": {"name": "balls_batted", "description": "Number of plate appearances that ended in a fair ball or a foul flyout. This is equivalent\n    to balls_in_play + home_runs, and may be a more useful denominator for \"in play\" stats depending\n    on the context.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "trajectory_fly_ball": {"name": "trajectory_fly_ball", "description": "(FB) Number of plate appearances that ended in a fly ball. A fly ball is defined here\n    as the subset of balls hit in the air that are neither line drives nor pop flies.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "trajectory_ground_ball": {"name": "trajectory_ground_ball", "description": "(GB) Number of plate appearances that ended in a ground ball, also called a grounder. A ground ball is defined\n    here to only include swings, not bunts, although older data may not have a proper distinction. Ground\n    balls tend to be easy to distinguish between other types of contact, but Statcast-era data defines it\n    as balls with a launch angle under 10 degrees.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "trajectory_line_drive": {"name": "trajectory_line_drive", "description": "(LD) Number of plate appearances that ended in a line drive, also called a liner. Line drives are distiguished\n    from fly balls by some combination of angle and exit velocity. In the Statcast era, line drives\n    are defined purely in terms of launch angle (10-25 degrees), but just about any colloquial definition\n    involves hard-hitness as well. The line-drive-fly-ball distinction is by far the most arbitrary\n    and subjective trajectory categorization. Many scorekeepers never included line drives, while others counted\n    any successful in-play air-hit as a line drive. Nevertheless, the distinction is a crucial one,\n    as line drives are by far the most likely type of batted ball to result in a hit (even when they are not hit very hard).", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "trajectory_pop_up": {"name": "trajectory_pop_up", "description": "(sometimes PU)  Number of plate appearances that ended in a pop-up, also called a pop fly.\n    Pop-ups are distinguished from fly balls in that they are hit at a higher angle, tend to be\n    hit with less exit velocity, and (as a result) end up in the infield or shallow outfield. Before\n    Statcast-era standardization, the distinction between a fly ball and a pop-up was a matter of\n    scorerkeeper judgement, and many unofficial scorekeepers did not distinguish between the two.\n    Statcast determines pop flies exclusively by angle (> 50 degrees).", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "trajectory_unknown": {"name": "trajectory_unknown", "description": "Number of plate appearances ending in a batted ball whose trajectory was not recorded and cannot\n    be reliably deduced from context. This number includes balls that we know were hit in the air,\n    but do not know which kind of air ball (FB/PU/LD) they were (see trajectory_broad_classification_unknown\n    for a number that does not include those balls). The strong majority of batted balls prior to 1988\n    fall into this category, especially hits.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "trajectory_known": {"name": "trajectory_known", "description": "Number of plate appearances ending in a batted ball whose trajectory was recorded or was reliably deduced\n    from the context. An example of reliable deduction is an at-bat with the fielding play 6-3, which\n    almost always is a ground ball fielded by the shortstop and thrown to the first baseman. See\n    `calc_batted_ball_type` for the deduction logic.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "trajectory_broad_air_ball": {"name": "trajectory_broad_air_ball", "description": "Number of plate appearances that ended in an air ball (a fly ball, line drive, or pop-up).\n    Because it is much easier to deduce that a ball was hit in the air than it is to deduce the exact\n    trajectory, this number field is more reliably populated than any of its three consituent parts.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "trajectory_broad_ground_ball": {"name": "trajectory_broad_ground_ball", "description": "Same as `trajectory_ground_ball`.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "trajectory_broad_unknown": {"name": "trajectory_broad_unknown", "description": "Number of plate appearances ending in a batted ball whose trajectory was not recorded and cannot\n    be reliably deduced from context, even to the extent of knowing whether it was a ground ball or an air ball.\n    This will include a disproportionate number of hits, which are more likely to be missing trajectory data\n    and harder to make deductions about.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "trajectory_broad_known": {"name": "trajectory_broad_known", "description": "Number of plate appearances ending in a batted ball whose ground/air status was recorded or\n    reliably deduced from the context. This is the sum of `trajectory_broad_air_ball` and\n    `trajectory_broad_ground_ball`. Outs in play have excellent coverage historically here,\n    even for older games.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "bunts": {"name": "bunts", "description": "Number of plate appearances ending in an in-play bunt.\n    This does not include strikeouts on foul bunts with two strikes.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "batted_distance_plate": {"name": "batted_distance_plate", "description": "Number of plate appearances in which the ball was batted to catcher's area around home plate.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "batted_distance_infield": {"name": "batted_distance_infield", "description": "Number of plate appearances in which the ball was batted to the infield (not including the catcher).\n    All ground balls are included here, regardless of whether they made it through to the outfield.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "batted_distance_outfield": {"name": "batted_distance_outfield", "description": "Number of plate appearances in which the ball was hit on the fly to the outfield.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "batted_distance_unknown": {"name": "batted_distance_unknown", "description": "Number of plate appearances in which the ball was hit, but the distance was not recorded\n    and cannot be reliably deduced from context.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "batted_distance_known": {"name": "batted_distance_known", "description": "Number of plate appearances in which the ball was hit, and the distance was either\n    recorded or reliably deduced from context.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "fielded_by_battery": {"name": "fielded_by_battery", "description": "Number of plate appearances in which the ball was fielded by the pitcher or catcher.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "fielded_by_infielder": {"name": "fielded_by_infielder", "description": "Number of plate appearances in which the ball was fielded by an infielder.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "fielded_by_outfielder": {"name": "fielded_by_outfielder", "description": "Number of plate appearances in which the ball was fielded by an outfielder.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "fielded_by_known": {"name": "fielded_by_known", "description": "Number of plate appearances in which the ball was fielded by a player, and the player was recorded.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "fielded_by_unknown": {"name": "fielded_by_unknown", "description": "Number of plate appearances in which the ball was fielded by a player, but the player was not recorded.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "batted_angle_left": {"name": "batted_angle_left", "description": "Number of plate appearances in which the ball was batted to the left side of the field.\n    This includes balls where the location was not recorded, but the fielder is on the left side\n    (3B, LF). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "batted_angle_right": {"name": "batted_angle_right", "description": "Number of plate appearances in which the ball was batted to the right side of the field.\n    This includes balls where the location was not recorded, but the fielder is on the right side\n    (1B, RF). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "batted_angle_middle": {"name": "batted_angle_middle", "description": "Number of plate appearances in which the ball was batted to the middle of the field.\n    This includes balls where the location was not recorded, but the fielder is up the middle\n    (P, 2B, SS, CF). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "batted_angle_unknown": {"name": "batted_angle_unknown", "description": "Number of plate appearances in which the ball was batted, but we don't have enough location\n    to determine the spray angle.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "batted_angle_known": {"name": "batted_angle_known", "description": "Number of plate appearances in which the ball was hit and we have enough location to determine\n    the spray angle.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "batted_location_plate": {"name": "batted_location_plate", "description": "Number of plate appearances in which the ball was batted to the catcher's area around home plate.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "batted_location_right_infield": {"name": "batted_location_right_infield", "description": "Number of plate appearances in which the ball was batted to the right side of the infield.\n    This includes balls where the location was not recorded, but the fielder is on the right side\n    (1B). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "batted_location_middle_infield": {"name": "batted_location_middle_infield", "description": "Number of plate appearances in which the ball was batted to the middle of the infield.\n    This includes balls where the location was not recorded, but the fielder is up the middle\n    (P, SS, 2B). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "batted_location_left_infield": {"name": "batted_location_left_infield", "description": "Number of plate appearances in which the ball was batted to the left side of the infield.\n    This includes balls where the location was not recorded, but the fielder is on the left side\n    (3B). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "batted_location_left_field": {"name": "batted_location_left_field", "description": "Number of plate appearances in which the ball was batted to the left side of the outfield.\n    This includes balls where the location was not recorded, but the fielder is on the left side\n    (LF). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "batted_location_center_field": {"name": "batted_location_center_field", "description": "Number of plate appearances in which the ball was batted to the center of the outfield.\n    This includes balls where the location was not recorded, but the fielder is up the middle\n    (CF). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "batted_location_right_field": {"name": "batted_location_right_field", "description": "Number of plate appearances in which the ball was batted to the right side of the outfield.\n    This includes balls where the location was not recorded, but the fielder is on the right side\n    (RF, CF). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "batted_location_unknown": {"name": "batted_location_unknown", "description": "Number of plate appearances in which the ball was batted, but we don't have enough location\n    to determine the specific location.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "batted_location_known": {"name": "batted_location_known", "description": "Number of plate appearances in which the ball was batted and we have enough location to determine\n    the specific location.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "batted_balls_pulled": {"name": "batted_balls_pulled", "description": "Number of plate appearances in which the ball was pulled (the left side for right-handed batters, the right side for left-handed batters).", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "batted_balls_opposite_field": {"name": "batted_balls_opposite_field", "description": "Number of plate appearances in which the ball was hit to the opposite field (the right side for right-handed batters, the left side for left-handed batters).", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "runs": {"name": "runs", "description": "(R) Number of runs scored.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "times_reached_base": {"name": "times_reached_base", "description": "Number of times a batter ended a plate appearance on base, even if it was through a fielder's choice, error, etc.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "stolen_bases": {"name": "stolen_bases", "description": "(SB) Number of successful stolen bases.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "caught_stealing": {"name": "caught_stealing", "description": "(CS) Number of times a runner was caught stealing.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "picked_off": {"name": "picked_off", "description": "(PO, at risk of confusion with putouts) Number of times a runner was picked off.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "picked_off_caught_stealing": {"name": "picked_off_caught_stealing", "description": "(POCS) Number of times a runner was picked off, but instead of going back to the bag,\n    tried to run to the next base and was put out.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "outs_on_basepaths": {"name": "outs_on_basepaths", "description": "Number of outs recorded by a baserunner (this is not mutually exclusive with outs recorded by the batter\n    in cases like failed advances or dropped third-strike putouts).", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "unforced_outs_on_basepaths": {"name": "unforced_outs_on_basepaths", "description": "Number of outs recorded by a baserunner that was not the result of a force on the runner.\n    \"Unforced\" is meant to be in both the literal sense of a force not being in play, but also\n    the figurative sense of the runner being responsible for the out. The latter may or may not\n    be the best interpretation of any given play, but it is useful to assign responsibility to the\n    runner by default in those contexts.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "outs_avoided_on_errors": {"name": "outs_avoided_on_errors", "description": "Number of times that a baserunner would have been out, but an error allowed them to remain\n    on the basepaths (either staying put or advancing).", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "advances_on_wild_pitches": {"name": "advances_on_wild_pitches", "description": "(WP) Number of times a baserunner advanced on a wild pitch.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "advances_on_passed_balls": {"name": "advances_on_passed_balls", "description": "(PB) Number of times a baserunner advanced on a passed ball.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "advances_on_balks": {"name": "advances_on_balks", "description": "(sometimes BK) Number of times a baserunner advanced on a balk.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "advances_on_unspecified_plays": {"name": "advances_on_unspecified_plays", "description": "Number of times a baserunner advanced for an unspecified reason.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "advances_on_defensive_indifference": {"name": "advances_on_defensive_indifference", "description": "(DI) Number of times a baserunner advanced on defensive indifference.\n   Defensive indifference is a judgement call by the official scorer that the defense\n   did not try to stop the runner from stealing a base. This usually happens\n   when the defense has a lead late in the game.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "advances_on_errors": {"name": "advances_on_errors", "description": "Number of times a baserunner advanced on an error.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "plate_appearances_while_on_base": {"name": "plate_appearances_while_on_base", "description": "Number of plate appearances in which the baserunner started on 1st, 2nd, or 3rd base.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "balls_in_play_while_running": {"name": "balls_in_play_while_running", "description": "Number of balls in play while either batting or on base.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "balls_in_play_while_on_base": {"name": "balls_in_play_while_on_base", "description": "Number of balls in play in which the baserunner started on 1st, 2nd, or 3rd base.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "batter_total_bases_while_running": {"name": "batter_total_bases_while_running", "description": "Number of total bases accumulated by the batter while the baserunner was running, including the batter.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "batter_total_bases_while_on_base": {"name": "batter_total_bases_while_on_base", "description": "Number of total bases accumulated by the batter while the baserunner was on base, excluding the batter.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "extra_base_advance_attempts": {"name": "extra_base_advance_attempts", "description": "Number of times a baserunner tried to advance by a greater number of bases than the batter.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "bases_advanced": {"name": "bases_advanced", "description": "Number of bases advanced by a baserunner, including the batter.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "bases_advanced_on_balls_in_play": {"name": "bases_advanced_on_balls_in_play", "description": "Number of bases advanced by a baserunner on a ball in play, including the batter.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "surplus_bases_advanced_on_balls_in_play": {"name": "surplus_bases_advanced_on_balls_in_play", "description": "Number of bases advanced by a baserunner on a ball in play minus the number of total bases\n    accumulated by the batter on the same play. For example, if a runner goes from first to third\n    on a single, this number is 1 (3 - 2). If a runner only goes from second to third on a double,\n    this number is -1 (1 - 2).", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "outs_on_extra_base_advance_attempts": {"name": "outs_on_extra_base_advance_attempts", "description": "Number of times a baserunner was out attempting to advance\n    by a greater number of bases than the batter. This includes\n    batters who were put out trying to stretch a hit to the next base.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "pitches": {"name": "pitches", "description": "Number of pitches thrown.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "swings": {"name": "swings", "description": "Number of pitches that were swung at.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "swings_with_contact": {"name": "swings_with_contact", "description": "Number of pitches that were swung at and made contact.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "strikes": {"name": "strikes", "description": "Number of pitches that were called or swinging strikes.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "strikes_called": {"name": "strikes_called", "description": "Number of pitches that were called strikes.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "strikes_swinging": {"name": "strikes_swinging", "description": "Number of pitches that were swung on and missed (mutually exclusive\n    with `swings_with_contact`, which also count as strikes).", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "strikes_foul": {"name": "strikes_foul", "description": "Number of pitches that were fouled off.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "strikes_foul_tip": {"name": "strikes_foul_tip", "description": "Number of pitches that were fouled off and caught by the catcher for strike three.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "strikes_in_play": {"name": "strikes_in_play", "description": "Number of pitches that were swung on and batted into play.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "strikes_unknown": {"name": "strikes_unknown", "description": "Number of pitches that we know were strikes, but don't know what kind.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "balls": {"name": "balls", "description": "Number of pitches that were called balls.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "balls_called": {"name": "balls_called", "description": "Number of pitches that were called balls (as opposed to automatic balls that were\n    not actually thrown).", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "balls_intentional": {"name": "balls_intentional", "description": "Number of pitches that were called balls as part of an intentional walk.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "balls_automatic": {"name": "balls_automatic", "description": "Number of pitches that were called balls on an automatic walk or a delay penalty.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "unknown_pitches": {"name": "unknown_pitches", "description": "Number of pitches that were thrown without any other information recorded.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "pitchouts": {"name": "pitchouts", "description": "Number of pitches that were thrown as pitchouts. A pitchout is a pitch that is thrown\n    intentionally very far outside in order to make it easier for the catcher to throw out\n    a baserunner who is likely to steal.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "pitcher_pickoff_attempts": {"name": "pitcher_pickoff_attempts", "description": "Number of times the pitcher attempted to pick off a baserunner.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "catcher_pickoff_attempts": {"name": "catcher_pickoff_attempts", "description": "Number of times the catcher attempted to pick off a baserunner.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "pitches_blocked_by_catcher": {"name": "pitches_blocked_by_catcher", "description": "Number of pitches that were blocked by the catcher.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "pitches_with_runners_going": {"name": "pitches_with_runners_going", "description": "Number of pitches that were thrown while a baserunner was on the move\n    (as part of a steal or hit-and-run).", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "passed_balls": {"name": "passed_balls", "description": "(PB) Number of passed balls.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "wild_pitches": {"name": "wild_pitches", "description": "(WP) Number of wild pitches.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "balks": {"name": "balks", "description": "(BK) Number of balks.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "left_on_base": {"name": "left_on_base", "description": "(LOB) At an individual level, the number of baserunners that a batter failed to advance during a plate appearance.\n    At a team level, the number of baserunners remaining on base at the end of an inning. In order to count, baserunners\n    must not have scored or been put out.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "left_on_base_with_two_outs": {"name": "left_on_base_with_two_outs", "description": "(LOB) At an individual level, the number of baserunners that remain on base (unscored and not out) after a plate appearance that ends with the third out recorded. At a team level, this is interchangable with `left_on_base`.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "stolen_bases_second": {"name": "stolen_bases_second", "description": "Number of successful steals of second base.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "stolen_bases_third": {"name": "stolen_bases_third", "description": "Number of successful steals of third base.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "stolen_bases_home": {"name": "stolen_bases_home", "description": "Number of successful steals of home.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "caught_stealing_second": {"name": "caught_stealing_second", "description": "Number of times a runner was caught stealing second base.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "caught_stealing_third": {"name": "caught_stealing_third", "description": "Number of times a runner was caught stealing third base.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "caught_stealing_home": {"name": "caught_stealing_home", "description": "Number of times a runner was caught stealing home.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "stolen_base_opportunities": {"name": "stolen_base_opportunities", "description": "Number of events in which a runner had an opportunity to steal a base as the\n    lead basestealer OR the runner recorded a SB/CS in any situation.\n    \"Opportunity\" is defined as a situation in which the next base\n    was empty at the start of the event (not including the batter).\n    No-play events excluded, but events without plate appearances are included.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "stolen_base_opportunities_second": {"name": "stolen_base_opportunities_second", "description": "Number of opportunities to steal second base (see `stolen_base_opportunities` for detailed criteria).", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "stolen_base_opportunities_third": {"name": "stolen_base_opportunities_third", "description": "Number of opportunities to steal third base (see `stolen_base_opportunities` for detailed criteria).", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "stolen_base_opportunities_home": {"name": "stolen_base_opportunities_home", "description": "Number of opportunities to steal home (see `stolen_base_opportunities` for detailed criteria).", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "picked_off_first": {"name": "picked_off_first", "description": "Number of times a runner was picked off first base.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "picked_off_second": {"name": "picked_off_second", "description": "Number of times a runner was picked off second base.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "picked_off_third": {"name": "picked_off_third", "description": "Number of times a runner was picked off third base.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "times_force_on_runner": {"name": "times_force_on_runner", "description": "Number of events that a force existed on the runner's next base.\n    The batter is counted as having a force on them (at first).\n    No-play events excluded, but events without plate appearances are included.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "times_lead_runner": {"name": "times_lead_runner", "description": "Number of events that a runner was the lead runner on a play\n    (the runner who is furthest along the basepaths).\n    Batter is never counted as the lead runner. No-play events excluded,\n    but events without plate appearances are included.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "times_next_base_empty": {"name": "times_next_base_empty", "description": "Number of events that the runner's next base was empty.\n    The batter is counted on events where first base is empty.\n    No-play events excluded, but events without plate appearances are included.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "extra_base_chances": {"name": "extra_base_chances", "description": "", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "extra_bases_taken": {"name": "extra_bases_taken", "description": "", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}}, "meta": {"primary_keys": ["event_key", "baserunner"]}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "baseball_computer://models/intermediate/event_level/event_offense_stats.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "models", "contract": {"enforced": true}, "meta": {"primary_keys": ["event_key", "baserunner"]}}, "created_at": 1702285386.1554391, "relation_name": "\"bc\".\"main_models\".\"event_offense_stats\"", "raw_code": "{{\n  config(\n    materialized = 'table',\n    )\n}}\nWITH batter_baserunning AS (\n    SELECT *\n    FROM {{ ref('event_baserunning_stats') }}\n    WHERE baserunner = 'Batter'\n),\n\nbatter_stats AS (\n    SELECT\n        COALESCE(hit.batter_id, batter_baserunning.runner_id) AS player_id,\n        COALESCE(hit.batting_team_id, batter_baserunning.batting_team_id) AS team_id,\n        event_key,\n        'Batter'::BASERUNNER AS baserunner,\n        hit.* EXCLUDE (event_key),\n        bat.* EXCLUDE (event_key),\n        batter_baserunning.* EXCLUDE (event_key, baserunner),\n        pitch.* EXCLUDE (event_key),\n    FROM {{ ref('event_batting_stats') }} AS hit\n    LEFT JOIN {{ ref('event_batted_ball_stats') }} AS bat USING (event_key)\n    LEFT JOIN {{ ref('event_pitch_sequence_stats') }} AS pitch USING (event_key)\n    FULL OUTER JOIN batter_baserunning USING (event_key)\n),\n\nunioned AS (\n    SELECT * FROM batter_stats\n    UNION ALL BY NAME\n    SELECT * FROM {{ ref('event_baserunning_stats') }}\n    WHERE baserunner != 'Batter'\n),\n\nfinal AS (\n    SELECT\n        game_id::GAME_ID AS game_id,\n        event_key,\n        COALESCE(team_id, batting_team_id)::TEAM_ID AS team_id,\n        COALESCE(player_id, runner_id)::PLAYER_ID AS player_id,\n        baserunner,\n        {% for stat in event_level_offense_stats() -%}\n            COALESCE({{ stat }}, 0)::INT1 AS {{ stat }},\n        {% endfor %}\n    FROM unioned\n)\n\nSELECT * FROM final", "language": "sql", "refs": [{"name": "event_baserunning_stats", "package": null, "version": null}, {"name": "event_batting_stats", "package": null, "version": null}, {"name": "event_batted_ball_stats", "package": null, "version": null}, {"name": "event_pitch_sequence_stats", "package": null, "version": null}, {"name": "event_baserunning_stats", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.baseball_computer.event_level_offense_stats"], "nodes": ["model.baseball_computer.event_baserunning_stats", "model.baseball_computer.event_batting_stats", "model.baseball_computer.event_batted_ball_stats", "model.baseball_computer.event_pitch_sequence_stats"]}, "compiled_path": null, "contract": {"enforced": true, "alias_types": true, "checksum": "103e347d2b6db2126fefd7d1bda60c21735fe181abcc532ef1bf3a968ffea33c"}, "access": "protected", "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true, "columns": ["event_key", "baserunner"]}], "version": null, "latest_version": null, "deprecation_date": null}, "model.baseball_computer.event_pitching_stats": {"database": "bc", "schema": "main_models", "name": "event_pitching_stats", "resource_type": "model", "package_name": "baseball_computer", "path": "intermediate/event_level/event_pitching_stats.sql", "original_file_path": "models/intermediate/event_level/event_pitching_stats.sql", "unique_id": "model.baseball_computer.event_pitching_stats", "fqn": ["baseball_computer", "intermediate", "event_level", "event_pitching_stats"], "alias": "event_pitching_stats", "checksum": {"name": "sha256", "checksum": "db7fbf75b1d628d3e7387989b12f06ec018b3bfa0f40852a44896ce8e35dc555"}, "config": {"enabled": true, "alias": null, "schema": "models", "database": null, "tags": [], "meta": {"primary_keys": ["event_key", "player_id"]}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Event-level counting stats for each pitcher involved in each event.\nThis includes both the pitcher on the mound and, if applicable, the pitcher\nbeing charged with the run(s) on the event.\n", "columns": {"game_id": {"name": "game_id", "description": "Retrosheet game ID, A 12-character string structured as follows:\n\n    - Chars 1-3: Home team ID\n    - Chars 4-11: Date (YYYYMMDD)\n    - Char 12: Game number (0 if only one game was played on that day)\n    \n    Example: MLN195607170", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "event_key": {"name": "event_key", "description": "4-byte integer that uniquely identifies an event across the entire\n    dataset (contrast with event_id, which is game-specific). The key\n    is generated deterministically given the same dataset, but it may\n    change when the data is updated. It is guaranteed to follow the \n    order of events within a single game.", "meta": {}, "data_type": "uinteger", "constraints": [], "quote": null, "tags": []}, "team_id": {"name": "team_id", "description": "Retrosheet team ID, 3-character string which identifies the team\n    that a franchise was playing as at a given time.", "meta": {}, "data_type": "team_id", "constraints": [], "quote": null, "tags": []}, "player_id": {"name": "player_id", "description": "Retrosheet 8-character person ID for a player, which consists of\n    the first four characters of the last name, the first character\n    of the first name, and then three digits to disambiguate between\n    players with the same five characters.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "batters_faced": {"name": "batters_faced", "description": "Number of batters faced by a pitcher, generally equivalent to plate appearances (in old box-score-only games, this may not match up perfectly).", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "outs_recorded": {"name": "outs_recorded", "description": "Number of outs recorded by a pitcher.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "inherited_runners_scored": {"name": "inherited_runners_scored", "description": "(IRS) Number of inherited runners that scored while a pitcher was on the mound.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "bequeathed_runners_scored": {"name": "bequeathed_runners_scored", "description": "Number of bequeathed runners that scored after a pitcher left the game.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "team_unearned_runs": {"name": "team_unearned_runs", "description": "Number of runs that are charged as earned to the pitcher, but unearned to the team.\n    This happens when a pitcher enters an inning which should have been over already because\n    of an error and then the pitcher allows a run to score without the help of any additional\n    errors. This is a rare occurrence and it might seem unnecessary to track,\n    but it is absolutely essential that we do so in order to preserve the space-time continuu-\n    T\u0355he\u030a\u0346\u0328\u035c y\u036a\u0363e\u0321\u0303\u0313\u030ea\u0347r\u0350\u0355\u035c\u035d i\u0313\u035a\u0314\u0324\u033a\u033b\u035bs 20\u032e\u033f89\u032a\u030a an\u032b\u032b\u035e\u0326\u0305d\u0331\u033f\u0369 E\u0361\u0354\u0330\u0351\u0320s\u036d\u0366t\u0351\u0359\u035de\u0303\u0352\u0310b\u0301\u036e\u0359a\u0361\u0359\u0310\u0301\u0330\u0330\u0320n\u036f\u0352\u035f Y\u032a\u0318\u0311a\u035c\u0302\u031c\u031a\u036c\u0345\u0360n\u0304\u0301\u0309 h\u035c\u0314\u0306a\u0359\u033e\u031d\u035f\u0361\u0308\u0301\u0351s\u035f\u0338 fu\u0326\u036d\u030f\u032e\u0306\u030dl\u033a\u0347\u0311\u0349\u034c\u0305\u0303l\u0345\u030f\u0308\u036a\u033f\u031dy\u0312\u0313\u034b\u036e\u0332\u0347 m\u0326\u030a\u0363e\u0365\u034a\u0367\u0320\u0325rg\u0347\u0366\u0300e\u0309\u0339\u031c\u031f\u0353\u0331\u0319d\u0331\u0327 wi\u0307\u034eth\u0366\u0361\u031b\u036d\u0358 t\u031d\u0362\u035d\u0328\u035e\u0342h\u0336\u0357\u031e\u032d\u035f\u0319e\u0322\u030a\u0321\u032f w\u0300\u0329\u0309\u032co\u036d\u0349r\u0311\u0367\u0327\u0360\u036a\u0327\u036cm\u034c\u031c.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "at_bats": {"name": "at_bats", "description": "(AB) Number of plate appearances that ended in either a hit or a non-sacrifice out.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "hits": {"name": "hits", "description": "(H) Number of times a batter reached base safely without an error or fielder's choice.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "singles": {"name": "singles", "description": "(1B) Number of hits in which a batter reached first base.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "doubles": {"name": "doubles", "description": "(2B) Number of hits in which a batter reached second base without the help of an error or an attempted\n    play on another runner.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "triples": {"name": "triples", "description": "(3B) Number of hits in which a batter reached third base without the help of an error or an attempted\n    play on another runner.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "home_runs": {"name": "home_runs", "description": "(HR) Number of hits in which a batter reached home plate without the help of an error or an attempted\n    play on another runner (usually by hitting the ball out of the park).", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "total_bases": {"name": "total_bases", "description": "(TB) Number of bases a batter reached safely without the help of an error or an attempted\n    play on another runner. HR * 4 + 3B * 3 + 2B * 2 + (H - HR - 3B - 2B)", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "strikeouts": {"name": "strikeouts", "description": "(K, SO) Number of times a batter struck out. This includes plays in which a batter reached base on\n    a dropped third strike.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "walks": {"name": "walks", "description": "(BB, occasionally W) Number of times a batter reaches base on called balls out of the strike zone\n    (Four balls for all of MLB history after the 1880s).", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "intentional_walks": {"name": "intentional_walks", "description": "(IBB, occasionally IW) Number of times a batter was intentionally walked. This number may be missing or undercounted\n    in earlier years, as intentional walks were not officially tracked until 1955.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "hit_by_pitches": {"name": "hit_by_pitches", "description": "(HBP) Number of times a batter was awarded first base after being hit by a pitch.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "sacrifice_hits": {"name": "sacrifice_hits", "description": "(SH) Number of times a batter performed a sacrifice bunt to advance another runner.\n    A bunt may count as a sacrifice even if the batter reaches base safely.\n    Unsuccessful attempts are not counted, nor are non-sacrifice bunts.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "sacrifice_flies": {"name": "sacrifice_flies", "description": "(SF) Number of times a batter hit a fly ball that resulted in an out (or error),\n    but allowed a runner to score on the throw.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "reached_on_errors": {"name": "reached_on_errors", "description": "(ROE) Number of times a batter reached base safely due to an error.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "reached_on_interferences": {"name": "reached_on_interferences", "description": "Number of times a batter was awarded first base for being illegally hindered\n    by a fielder, usually the catcher.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "inside_the_park_home_runs": {"name": "inside_the_park_home_runs", "description": "Number of times a batter hit a home run without the ball leaving the field of play.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "ground_rule_doubles": {"name": "ground_rule_doubles", "description": "Number of times a batter was awarded a double on a ball that went out of play after\n    bouncing in fair territory.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "infield_hits": {"name": "infield_hits", "description": "Number of times a batter reached base safely on a hit that did not reach the outfield.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "on_base_opportunities": {"name": "on_base_opportunities", "description": "Number of plate appearances in which a batter either did or did not reach base,\n    as defined by the formula for on-base percentage. Note that this is very similar to but different\n    from plate_appearances, as it does not include sacrifice hits or interference.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "on_base_successes": {"name": "on_base_successes", "description": "Number of hits, walks, and hit by pitches that serves as the numerator in the formula\n    for on-base percentage.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "grounded_into_double_plays": {"name": "grounded_into_double_plays", "description": "(GIDP) Number of times a batter grounded into a double play. This is the conventional way\n    to record a double play and as such is an important statistic on its own. Games without\n    play-by-play accounts don't have data on the trajectory of the double play, so\n    this number is not populated for those games.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "double_plays": {"name": "double_plays", "description": "(DP) Number of times a play ended in two outs being recorded.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "triple_plays": {"name": "triple_plays", "description": "(TP) Number of times a play ended in three outs being recorded.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "batting_outs": {"name": "batting_outs", "description": "Number of outs that \"should\" have been recorded as a result of a batter's plate apperances.\n    A batting out is still counted if no actual out is recorded on an error or a failed fielder's choice.\n    Outs on baserunners (including the batter trying to stretch a hit) do not count here.\n    Grounded-into-double-plays count as two outs, but other types of double plays do not (the \n    idea here is that the baserunner is responsible on other types of double plays).\n    Unofficial stat, but designed here to be generally useful in determining rates of official stats.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "balls_in_play": {"name": "balls_in_play", "description": "Number of plate appearances that resulted in a live\n    ball on the field of play. The difference between this and batted_balls is that\n    balls_in_play does not include out-of-the-park home runs. This distinction is important\n    for calculating batting average on balls in play, a stat designed to isolate at_bats\n    in which the defense was involved.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "balls_batted": {"name": "balls_batted", "description": "Number of plate appearances that ended in a fair ball or a foul flyout. This is equivalent\n    to balls_in_play + home_runs, and may be a more useful denominator for \"in play\" stats depending\n    on the context.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "trajectory_fly_ball": {"name": "trajectory_fly_ball", "description": "(FB) Number of plate appearances that ended in a fly ball. A fly ball is defined here\n    as the subset of balls hit in the air that are neither line drives nor pop flies.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "trajectory_ground_ball": {"name": "trajectory_ground_ball", "description": "(GB) Number of plate appearances that ended in a ground ball, also called a grounder. A ground ball is defined\n    here to only include swings, not bunts, although older data may not have a proper distinction. Ground\n    balls tend to be easy to distinguish between other types of contact, but Statcast-era data defines it\n    as balls with a launch angle under 10 degrees.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "trajectory_line_drive": {"name": "trajectory_line_drive", "description": "(LD) Number of plate appearances that ended in a line drive, also called a liner. Line drives are distiguished\n    from fly balls by some combination of angle and exit velocity. In the Statcast era, line drives\n    are defined purely in terms of launch angle (10-25 degrees), but just about any colloquial definition\n    involves hard-hitness as well. The line-drive-fly-ball distinction is by far the most arbitrary\n    and subjective trajectory categorization. Many scorekeepers never included line drives, while others counted\n    any successful in-play air-hit as a line drive. Nevertheless, the distinction is a crucial one,\n    as line drives are by far the most likely type of batted ball to result in a hit (even when they are not hit very hard).", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "trajectory_pop_up": {"name": "trajectory_pop_up", "description": "(sometimes PU)  Number of plate appearances that ended in a pop-up, also called a pop fly.\n    Pop-ups are distinguished from fly balls in that they are hit at a higher angle, tend to be\n    hit with less exit velocity, and (as a result) end up in the infield or shallow outfield. Before\n    Statcast-era standardization, the distinction between a fly ball and a pop-up was a matter of\n    scorerkeeper judgement, and many unofficial scorekeepers did not distinguish between the two.\n    Statcast determines pop flies exclusively by angle (> 50 degrees).", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "trajectory_unknown": {"name": "trajectory_unknown", "description": "Number of plate appearances ending in a batted ball whose trajectory was not recorded and cannot\n    be reliably deduced from context. This number includes balls that we know were hit in the air,\n    but do not know which kind of air ball (FB/PU/LD) they were (see trajectory_broad_classification_unknown\n    for a number that does not include those balls). The strong majority of batted balls prior to 1988\n    fall into this category, especially hits.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "trajectory_known": {"name": "trajectory_known", "description": "Number of plate appearances ending in a batted ball whose trajectory was recorded or was reliably deduced\n    from the context. An example of reliable deduction is an at-bat with the fielding play 6-3, which\n    almost always is a ground ball fielded by the shortstop and thrown to the first baseman. See\n    `calc_batted_ball_type` for the deduction logic.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "trajectory_broad_air_ball": {"name": "trajectory_broad_air_ball", "description": "Number of plate appearances that ended in an air ball (a fly ball, line drive, or pop-up).\n    Because it is much easier to deduce that a ball was hit in the air than it is to deduce the exact\n    trajectory, this number field is more reliably populated than any of its three consituent parts.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "trajectory_broad_ground_ball": {"name": "trajectory_broad_ground_ball", "description": "Same as `trajectory_ground_ball`.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "trajectory_broad_unknown": {"name": "trajectory_broad_unknown", "description": "Number of plate appearances ending in a batted ball whose trajectory was not recorded and cannot\n    be reliably deduced from context, even to the extent of knowing whether it was a ground ball or an air ball.\n    This will include a disproportionate number of hits, which are more likely to be missing trajectory data\n    and harder to make deductions about.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "trajectory_broad_known": {"name": "trajectory_broad_known", "description": "Number of plate appearances ending in a batted ball whose ground/air status was recorded or\n    reliably deduced from the context. This is the sum of `trajectory_broad_air_ball` and\n    `trajectory_broad_ground_ball`. Outs in play have excellent coverage historically here,\n    even for older games.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "bunts": {"name": "bunts", "description": "Number of plate appearances ending in an in-play bunt.\n    This does not include strikeouts on foul bunts with two strikes.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "batted_distance_plate": {"name": "batted_distance_plate", "description": "Number of plate appearances in which the ball was batted to catcher's area around home plate.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "batted_distance_infield": {"name": "batted_distance_infield", "description": "Number of plate appearances in which the ball was batted to the infield (not including the catcher).\n    All ground balls are included here, regardless of whether they made it through to the outfield.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "batted_distance_outfield": {"name": "batted_distance_outfield", "description": "Number of plate appearances in which the ball was hit on the fly to the outfield.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "batted_distance_unknown": {"name": "batted_distance_unknown", "description": "Number of plate appearances in which the ball was hit, but the distance was not recorded\n    and cannot be reliably deduced from context.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "batted_distance_known": {"name": "batted_distance_known", "description": "Number of plate appearances in which the ball was hit, and the distance was either\n    recorded or reliably deduced from context.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "fielded_by_battery": {"name": "fielded_by_battery", "description": "Number of plate appearances in which the ball was fielded by the pitcher or catcher.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "fielded_by_infielder": {"name": "fielded_by_infielder", "description": "Number of plate appearances in which the ball was fielded by an infielder.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "fielded_by_outfielder": {"name": "fielded_by_outfielder", "description": "Number of plate appearances in which the ball was fielded by an outfielder.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "fielded_by_known": {"name": "fielded_by_known", "description": "Number of plate appearances in which the ball was fielded by a player, and the player was recorded.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "fielded_by_unknown": {"name": "fielded_by_unknown", "description": "Number of plate appearances in which the ball was fielded by a player, but the player was not recorded.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "batted_angle_left": {"name": "batted_angle_left", "description": "Number of plate appearances in which the ball was batted to the left side of the field.\n    This includes balls where the location was not recorded, but the fielder is on the left side\n    (3B, LF). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "batted_angle_right": {"name": "batted_angle_right", "description": "Number of plate appearances in which the ball was batted to the right side of the field.\n    This includes balls where the location was not recorded, but the fielder is on the right side\n    (1B, RF). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "batted_angle_middle": {"name": "batted_angle_middle", "description": "Number of plate appearances in which the ball was batted to the middle of the field.\n    This includes balls where the location was not recorded, but the fielder is up the middle\n    (P, 2B, SS, CF). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "batted_angle_unknown": {"name": "batted_angle_unknown", "description": "Number of plate appearances in which the ball was batted, but we don't have enough location\n    to determine the spray angle.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "batted_angle_known": {"name": "batted_angle_known", "description": "Number of plate appearances in which the ball was hit and we have enough location to determine\n    the spray angle.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "batted_location_plate": {"name": "batted_location_plate", "description": "Number of plate appearances in which the ball was batted to the catcher's area around home plate.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "batted_location_right_infield": {"name": "batted_location_right_infield", "description": "Number of plate appearances in which the ball was batted to the right side of the infield.\n    This includes balls where the location was not recorded, but the fielder is on the right side\n    (1B). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "batted_location_middle_infield": {"name": "batted_location_middle_infield", "description": "Number of plate appearances in which the ball was batted to the middle of the infield.\n    This includes balls where the location was not recorded, but the fielder is up the middle\n    (P, SS, 2B). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "batted_location_left_infield": {"name": "batted_location_left_infield", "description": "Number of plate appearances in which the ball was batted to the left side of the infield.\n    This includes balls where the location was not recorded, but the fielder is on the left side\n    (3B). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "batted_location_left_field": {"name": "batted_location_left_field", "description": "Number of plate appearances in which the ball was batted to the left side of the outfield.\n    This includes balls where the location was not recorded, but the fielder is on the left side\n    (LF). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "batted_location_center_field": {"name": "batted_location_center_field", "description": "Number of plate appearances in which the ball was batted to the center of the outfield.\n    This includes balls where the location was not recorded, but the fielder is up the middle\n    (CF). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "batted_location_right_field": {"name": "batted_location_right_field", "description": "Number of plate appearances in which the ball was batted to the right side of the outfield.\n    This includes balls where the location was not recorded, but the fielder is on the right side\n    (RF, CF). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "batted_location_unknown": {"name": "batted_location_unknown", "description": "Number of plate appearances in which the ball was batted, but we don't have enough location\n    to determine the specific location.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "batted_location_known": {"name": "batted_location_known", "description": "Number of plate appearances in which the ball was batted and we have enough location to determine\n    the specific location.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "batted_balls_pulled": {"name": "batted_balls_pulled", "description": "Number of plate appearances in which the ball was pulled (the left side for right-handed batters, the right side for left-handed batters).", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "batted_balls_opposite_field": {"name": "batted_balls_opposite_field", "description": "Number of plate appearances in which the ball was hit to the opposite field (the right side for right-handed batters, the left side for left-handed batters).", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "runs": {"name": "runs", "description": "(R) Number of runs scored.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "times_reached_base": {"name": "times_reached_base", "description": "Number of times a batter ended a plate appearance on base, even if it was through a fielder's choice, error, etc.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "stolen_bases": {"name": "stolen_bases", "description": "(SB) Number of successful stolen bases.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "caught_stealing": {"name": "caught_stealing", "description": "(CS) Number of times a runner was caught stealing.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "picked_off": {"name": "picked_off", "description": "(PO, at risk of confusion with putouts) Number of times a runner was picked off.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "picked_off_caught_stealing": {"name": "picked_off_caught_stealing", "description": "(POCS) Number of times a runner was picked off, but instead of going back to the bag,\n    tried to run to the next base and was put out.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "outs_on_basepaths": {"name": "outs_on_basepaths", "description": "Number of outs recorded by a baserunner (this is not mutually exclusive with outs recorded by the batter\n    in cases like failed advances or dropped third-strike putouts).", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "unforced_outs_on_basepaths": {"name": "unforced_outs_on_basepaths", "description": "Number of outs recorded by a baserunner that was not the result of a force on the runner.\n    \"Unforced\" is meant to be in both the literal sense of a force not being in play, but also\n    the figurative sense of the runner being responsible for the out. The latter may or may not\n    be the best interpretation of any given play, but it is useful to assign responsibility to the\n    runner by default in those contexts.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "outs_avoided_on_errors": {"name": "outs_avoided_on_errors", "description": "Number of times that a baserunner would have been out, but an error allowed them to remain\n    on the basepaths (either staying put or advancing).", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "advances_on_wild_pitches": {"name": "advances_on_wild_pitches", "description": "(WP) Number of times a baserunner advanced on a wild pitch.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "advances_on_passed_balls": {"name": "advances_on_passed_balls", "description": "(PB) Number of times a baserunner advanced on a passed ball.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "advances_on_balks": {"name": "advances_on_balks", "description": "(sometimes BK) Number of times a baserunner advanced on a balk.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "advances_on_unspecified_plays": {"name": "advances_on_unspecified_plays", "description": "Number of times a baserunner advanced for an unspecified reason.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "advances_on_defensive_indifference": {"name": "advances_on_defensive_indifference", "description": "(DI) Number of times a baserunner advanced on defensive indifference.\n   Defensive indifference is a judgement call by the official scorer that the defense\n   did not try to stop the runner from stealing a base. This usually happens\n   when the defense has a lead late in the game.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "advances_on_errors": {"name": "advances_on_errors", "description": "Number of times a baserunner advanced on an error.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "extra_base_advance_attempts": {"name": "extra_base_advance_attempts", "description": "Number of times a baserunner tried to advance by a greater number of bases than the batter.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "bases_advanced": {"name": "bases_advanced", "description": "Number of bases advanced by a baserunner, including the batter.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "bases_advanced_on_balls_in_play": {"name": "bases_advanced_on_balls_in_play", "description": "Number of bases advanced by a baserunner on a ball in play, including the batter.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "surplus_bases_advanced_on_balls_in_play": {"name": "surplus_bases_advanced_on_balls_in_play", "description": "Number of bases advanced by a baserunner on a ball in play minus the number of total bases\n    accumulated by the batter on the same play. For example, if a runner goes from first to third\n    on a single, this number is 1 (3 - 2). If a runner only goes from second to third on a double,\n    this number is -1 (1 - 2).", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "outs_on_extra_base_advance_attempts": {"name": "outs_on_extra_base_advance_attempts", "description": "Number of times a baserunner was out attempting to advance\n    by a greater number of bases than the batter. This includes\n    batters who were put out trying to stretch a hit to the next base.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "pitches": {"name": "pitches", "description": "Number of pitches thrown.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "swings": {"name": "swings", "description": "Number of pitches that were swung at.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "swings_with_contact": {"name": "swings_with_contact", "description": "Number of pitches that were swung at and made contact.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "strikes": {"name": "strikes", "description": "Number of pitches that were called or swinging strikes.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "strikes_called": {"name": "strikes_called", "description": "Number of pitches that were called strikes.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "strikes_swinging": {"name": "strikes_swinging", "description": "Number of pitches that were swung on and missed (mutually exclusive\n    with `swings_with_contact`, which also count as strikes).", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "strikes_foul": {"name": "strikes_foul", "description": "Number of pitches that were fouled off.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "strikes_foul_tip": {"name": "strikes_foul_tip", "description": "Number of pitches that were fouled off and caught by the catcher for strike three.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "strikes_in_play": {"name": "strikes_in_play", "description": "Number of pitches that were swung on and batted into play.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "strikes_unknown": {"name": "strikes_unknown", "description": "Number of pitches that we know were strikes, but don't know what kind.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "balls": {"name": "balls", "description": "Number of pitches that were called balls.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "balls_called": {"name": "balls_called", "description": "Number of pitches that were called balls (as opposed to automatic balls that were\n    not actually thrown).", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "balls_intentional": {"name": "balls_intentional", "description": "Number of pitches that were called balls as part of an intentional walk.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "balls_automatic": {"name": "balls_automatic", "description": "Number of pitches that were called balls on an automatic walk or a delay penalty.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "unknown_pitches": {"name": "unknown_pitches", "description": "Number of pitches that were thrown without any other information recorded.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "pitchouts": {"name": "pitchouts", "description": "Number of pitches that were thrown as pitchouts. A pitchout is a pitch that is thrown\n    intentionally very far outside in order to make it easier for the catcher to throw out\n    a baserunner who is likely to steal.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "pitcher_pickoff_attempts": {"name": "pitcher_pickoff_attempts", "description": "Number of times the pitcher attempted to pick off a baserunner.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "catcher_pickoff_attempts": {"name": "catcher_pickoff_attempts", "description": "Number of times the catcher attempted to pick off a baserunner.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "pitches_blocked_by_catcher": {"name": "pitches_blocked_by_catcher", "description": "Number of pitches that were blocked by the catcher.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "pitches_with_runners_going": {"name": "pitches_with_runners_going", "description": "Number of pitches that were thrown while a baserunner was on the move\n    (as part of a steal or hit-and-run).", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "passed_balls": {"name": "passed_balls", "description": "(PB) Number of passed balls.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "wild_pitches": {"name": "wild_pitches", "description": "(WP) Number of wild pitches.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "balks": {"name": "balks", "description": "(BK) Number of balks.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "left_on_base": {"name": "left_on_base", "description": "(LOB) At an individual level, the number of baserunners that a batter failed to advance during a plate appearance.\n    At a team level, the number of baserunners remaining on base at the end of an inning. In order to count, baserunners\n    must not have scored or been put out.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "left_on_base_with_two_outs": {"name": "left_on_base_with_two_outs", "description": "(LOB) At an individual level, the number of baserunners that remain on base (unscored and not out) after a plate appearance that ends with the third out recorded. At a team level, this is interchangable with `left_on_base`.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "stolen_bases_second": {"name": "stolen_bases_second", "description": "Number of successful steals of second base.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "stolen_bases_third": {"name": "stolen_bases_third", "description": "Number of successful steals of third base.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "stolen_bases_home": {"name": "stolen_bases_home", "description": "Number of successful steals of home.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "caught_stealing_second": {"name": "caught_stealing_second", "description": "Number of times a runner was caught stealing second base.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "caught_stealing_third": {"name": "caught_stealing_third", "description": "Number of times a runner was caught stealing third base.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "caught_stealing_home": {"name": "caught_stealing_home", "description": "Number of times a runner was caught stealing home.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "stolen_base_opportunities": {"name": "stolen_base_opportunities", "description": "Number of events in which a runner had an opportunity to steal a base as the\n    lead basestealer OR the runner recorded a SB/CS in any situation.\n    \"Opportunity\" is defined as a situation in which the next base\n    was empty at the start of the event (not including the batter).\n    No-play events excluded, but events without plate appearances are included.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "stolen_base_opportunities_second": {"name": "stolen_base_opportunities_second", "description": "Number of opportunities to steal second base (see `stolen_base_opportunities` for detailed criteria).", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "stolen_base_opportunities_third": {"name": "stolen_base_opportunities_third", "description": "Number of opportunities to steal third base (see `stolen_base_opportunities` for detailed criteria).", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "stolen_base_opportunities_home": {"name": "stolen_base_opportunities_home", "description": "Number of opportunities to steal home (see `stolen_base_opportunities` for detailed criteria).", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "picked_off_first": {"name": "picked_off_first", "description": "Number of times a runner was picked off first base.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "picked_off_second": {"name": "picked_off_second", "description": "Number of times a runner was picked off second base.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "picked_off_third": {"name": "picked_off_third", "description": "Number of times a runner was picked off third base.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "extra_base_chances": {"name": "extra_base_chances", "description": "", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "extra_bases_taken": {"name": "extra_bases_taken", "description": "", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "plate_appearances": {"name": "plate_appearances", "description": "(PA) Number of times a batter came to the plate, including walks, hit by pitches, sacrifices, and at-bats.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}}, "meta": {"primary_keys": ["event_key", "player_id"]}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "baseball_computer://models/intermediate/event_level/event_pitching_stats.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "models", "contract": {"enforced": true}, "meta": {"primary_keys": ["event_key", "player_id"]}}, "created_at": 1702285461.950346, "relation_name": "\"bc\".\"main_models\".\"event_pitching_stats\"", "raw_code": "{{\n  config(\n    materialized = 'table',\n    )\n}}\n{% set baserunning_stats_cols = dbt_utils.get_filtered_columns_in_relation(from=ref('event_baserunning_stats')) %}\nWITH baserunning_agg AS (\n    -- Runs are populated separately to charge to the right pitcher\n    SELECT\n        event_key,\n        MIN(game_id) AS game_id,\n        MIN(current_pitcher_id) AS player_id,\n        MIN(fielding_team_id) AS team_id,\n        {% for col in baserunning_stats_cols if col in event_level_pitching_stats() -%}\n            SUM({{ col }})::TINYINT AS {{ col }},\n        {% endfor %}\n    FROM {{ ref('event_baserunning_stats') }}\n    GROUP BY 1\n),\n\njoined_stats AS (\n    SELECT\n        event_key,\n        COALESCE(baserunning_agg.game_id, hit.game_id) AS game_id,\n        COALESCE(baserunning_agg.player_id, hit.pitcher_id) AS player_id,\n        COALESCE(baserunning_agg.team_id, hit.fielding_team_id) AS team_id,\n        hit.* EXCLUDE (event_key),\n        bat.* EXCLUDE (event_key),\n        -- Populate runs with the CTE below\n        baserunning_agg.* EXCLUDE (event_key, runs),\n        pitch.* EXCLUDE (event_key),\n        hit.plate_appearances AS batters_faced,\n        COALESCE(hit.outs_on_play, baserunning_agg.outs_on_basepaths) AS outs_recorded,\n    FROM {{ ref('event_batting_stats') }} AS hit\n    FULL OUTER JOIN baserunning_agg USING (event_key)\n    LEFT JOIN {{ ref('event_batted_ball_stats') }} AS bat USING (event_key)\n    LEFT JOIN {{ ref('event_pitch_sequence_stats') }} AS pitch USING (event_key)\n),\n\nadd_current_pitcher_runs AS (\n    SELECT\n        joined_stats.*,\n        runs.runs,\n        runs.team_unearned_runs,\n        runs.inherited_runners_scored,\n    FROM joined_stats\n    LEFT JOIN {{ ref('event_run_assignment_stats') }} AS runs\n        ON joined_stats.event_key = runs.event_key\n            AND joined_stats.player_id = runs.pitcher_id\n),\n\n-- This gets unioned instead of joined as these rows are supplemental\ninsert_non_current_pitcher_runs AS (\n    SELECT\n        game_id,\n        event_key,\n        team_id,\n        pitcher_id AS player_id,\n        runs,\n        team_unearned_runs,\n        bequeathed_runners_scored,\n    FROM {{ ref('event_run_assignment_stats') }}\n    -- Meaning they are not currently in the game\n    WHERE bequeathed_runners_scored > 0\n),\n\nunioned AS (\n    SELECT * FROM add_current_pitcher_runs\n    UNION ALL BY NAME\n    SELECT * FROM insert_non_current_pitcher_runs\n),\n\nfinal AS (\n    SELECT\n        game_id,\n        event_key,\n        team_id,\n        player_id,\n        {% for stat in event_level_pitching_stats() -%}\n            COALESCE({{ stat }}, 0)::INT1 AS {{ stat }},\n        {% endfor %}\n    FROM unioned\n)\n\nSELECT * FROM final", "language": "sql", "refs": [{"name": "event_baserunning_stats", "package": null, "version": null}, {"name": "event_baserunning_stats", "package": null, "version": null}, {"name": "event_batting_stats", "package": null, "version": null}, {"name": "event_batted_ball_stats", "package": null, "version": null}, {"name": "event_pitch_sequence_stats", "package": null, "version": null}, {"name": "event_run_assignment_stats", "package": null, "version": null}, {"name": "event_run_assignment_stats", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.get_filtered_columns_in_relation", "macro.baseball_computer.event_level_pitching_stats"], "nodes": ["model.baseball_computer.event_baserunning_stats", "model.baseball_computer.event_batting_stats", "model.baseball_computer.event_batted_ball_stats", "model.baseball_computer.event_pitch_sequence_stats", "model.baseball_computer.event_run_assignment_stats"]}, "compiled_path": null, "contract": {"enforced": true, "alias_types": true, "checksum": "b6c0b64e8afed96b23ead84d079b6a8195471d731cef35162b4bf593d7b39c21"}, "access": "protected", "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true, "columns": ["event_key", "player_id"]}], "version": null, "latest_version": null, "deprecation_date": null}, "model.baseball_computer.event_fielding_stats": {"database": "bc", "schema": "main_models", "name": "event_fielding_stats", "resource_type": "model", "package_name": "baseball_computer", "path": "intermediate/event_level/event_fielding_stats.sql", "original_file_path": "models/intermediate/event_level/event_fielding_stats.sql", "unique_id": "model.baseball_computer.event_fielding_stats", "fqn": ["baseball_computer", "intermediate", "event_level", "event_fielding_stats"], "alias": "event_fielding_stats", "checksum": {"name": "sha256", "checksum": "77c101d6640831341a20e7798457924d91812e0f20b12ef1d9e2b24e816b72f0"}, "config": {"enabled": true, "alias": null, "schema": "models", "database": null, "tags": [], "meta": {"primary_keys": ["event_key"]}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Fielding statistics for each event, aggregated at the event level. This allows the inclusion\nof fielding statistics for events where the specific fielder is unknown.\n", "columns": {"event_key": {"name": "event_key", "description": "4-byte integer that uniquely identifies an event across the entire\n    dataset (contrast with event_id, which is game-specific). The key\n    is generated deterministically given the same dataset, but it may\n    change when the data is updated. It is guaranteed to follow the \n    order of events within a single game.", "meta": {}, "data_type": "uinteger", "constraints": [], "quote": null, "tags": []}, "season": {"name": "season", "description": "Year, 4-digit integer", "meta": {}, "data_type": "smallint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "game_id": {"name": "game_id", "description": "Retrosheet game ID, A 12-character string structured as follows:\n\n    - Chars 1-3: Home team ID\n    - Chars 4-11: Date (YYYYMMDD)\n    - Char 12: Game number (0 if only one game was played on that day)\n    \n    Example: MLN195607170", "meta": {}, "data_type": "varchar", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "team_id": {"name": "team_id", "description": "Retrosheet team ID, 3-character string which identifies the team\n    that a franchise was playing as at a given time.", "meta": {}, "data_type": "team_id", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "personnel_fielding_key": {"name": "personnel_fielding_key", "description": "", "meta": {}, "data_type": "integer", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "outs_played": {"name": "outs_played", "description": "", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "plate_appearances_in_field": {"name": "plate_appearances_in_field", "description": "", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "batted_to_fielder": {"name": "batted_to_fielder", "description": "The fielder who fielded the batted ball as a 1-byte integer, if applicable. This field is\n    *always* populated for plate appearances that end with a ball in play,\n    regardless of whether we know the fielder. It is filled with 0\n    in those cases where no fielder was recorded. On in-play outs,\n    this field has excellent historical coverage going back as far as we have data.\n    Hits have much spottier coverage, but there is still a large amount of data across\n    all years. For most of baseball history, this ends up being our best proxy\n    for batted ball location and trajectory.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "putouts": {"name": "putouts", "description": "(PO) Outs credited to fielder based on who physically made the out, either by:\n        - Catching a ball on the fly\n        - Tagging a runner out\n        - Forcing a runner out\n        - Catching a called third strike\n        - Being the nearest fielder to a baserunner who is called out for interference\n\n    Putouts have been an important baseball statistic longer than MLB has been around,\n    so it has excellent historical coverage. Unassisted\n    putouts are very important in determining the location of batted balls.\n    \n    In modern baseball rules, each out in the game is credited as a putout, and at the play/event\n    level this will always be the case. However, in older games for which we only have box score or season-level\n    data, rare plays like baserunner interference may not be assigned to a specific fielder.\n    \n    Every play-by-play out has a putout, but the fielder who gets the putout may be unknown.", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "assists": {"name": "assists", "description": "(A) Number of outs in which a fielder touched the ball before anothber fielder recorded a putout.\n    This is almost always a throw to another fielder, but it can also be a deflection.\n\n    Assists have excellent historical data coverage, and they are particularly useful in determining\n    the location of ground balls. The data is present in almost all season-level and game-level accounts.\n    However, individual plays with unknown-fielder putouts are likely to be missing assists entirely.", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "errors": {"name": "errors", "description": "(E) Number of errors recorded by a fielder. This is recorded when a fielder either fails to make an out\n    that an average fielder should have made or makes a bad play that allows a baserunner to advance.\n    Errors are awarded at the scorekeeper's discretion, making them more subjective than the other two main\n    fielding stats.\n    \n    Errors used to be a much larger component of evaluating fielder quality.\n    When the stat was invented, routine plays were completed much less frequently than they are today.\n    As baseball evolved, routine plays became truly routine, and a fielder's ability to get to the ball\n    became more relevant than their ability\n    to reliably convert the out once they got there. While plenty of people as early as the 19th century were\n    aware of this, statistics mostly failed to reflect it until the 1980s, when Bill James and others\n    developed Range Factor and other stats that attempted to measure a fielder's ability to create chances.", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "fielders_choices": {"name": "fielders_choices", "description": "(FC) Number of times a fielder who fielded the ball attempted to put out a baserunner other than the batter.\n    A fielder's choice can be assigned when the attempt fails, even if there was no error on the play.\n\n    Fielder's choices are only available on play-by-play data and tend to be recorded when the attempt was\n    a tag and not a force. Force plays are explicitly noted and have little overlap with fielder's choices.", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "assisted_putouts": {"name": "assisted_putouts", "description": "Number of putouts by the fielder that had at least one recorded, associated assist. For older games, this may be a subset\n    of the true total assisted putouts, as unknown-fielder putouts almost never have recorded assists.", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "double_plays": {"name": "double_plays", "description": "(DP) Number of times a play ended in two outs being recorded.", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "triple_plays": {"name": "triple_plays", "description": "(TP) Number of times a play ended in three outs being recorded.", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "ground_ball_double_plays": {"name": "ground_ball_double_plays", "description": "", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "stolen_bases": {"name": "stolen_bases", "description": "(SB) Number of successful stolen bases.", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "caught_stealing": {"name": "caught_stealing", "description": "(CS) Number of times a runner was caught stealing.", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "pickoffs": {"name": "pickoffs", "description": "", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "passed_balls": {"name": "passed_balls", "description": "(PB) Number of passed balls.", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "plate_appearances_in_field_with_ball_in_play": {"name": "plate_appearances_in_field_with_ball_in_play", "description": "", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "in_play_putouts": {"name": "in_play_putouts", "description": "", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "in_play_assists": {"name": "in_play_assists", "description": "", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "reaching_errors": {"name": "reaching_errors", "description": "", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "unknown_putouts": {"name": "unknown_putouts", "description": "Number of putouts that were recorded, but without a specified fielder.", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "incomplete_events": {"name": "incomplete_events", "description": "Number of events in which at least one known fielding play was made by an unknown fielder.", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}}, "meta": {"primary_keys": ["event_key"]}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "baseball_computer://models/intermediate/event_level/event_fielding_stats.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "models", "contract": {"enforced": true}, "meta": {"primary_keys": ["event_key"]}}, "created_at": 1702285532.7852821, "relation_name": "\"bc\".\"main_models\".\"event_fielding_stats\"", "raw_code": "{{\n  config(\n    materialized = 'table',\n    )\n}}\nWITH fielding_plays_agg AS (\n    SELECT\n        event_key,\n        SUM(putouts) AS putouts,\n        SUM(assists) AS assists,\n        SUM(errors) AS errors,\n        SUM(fielders_choices) AS fielders_choices,\n        SUM(assisted_putouts) AS assisted_putouts,\n        SUM(unknown_putouts) AS unknown_putouts,\n        SUM(incomplete_events) AS incomplete_events,\n    FROM {{ ref('calc_fielding_play_agg') }}\n    GROUP BY 1\n),\n\nbaserunning AS (\n    SELECT\n        event_key,\n        COUNT(*) FILTER (WHERE baserunning_play_type = 'StolenBase') AS stolen_bases,\n        COUNT(*) FILTER (WHERE baserunning_play_type LIKE 'CaughtStealing') AS caught_stealing,\n        COUNT(*) FILTER (WHERE baserunning_play_type LIKE 'PickedOff%') AS pickoffs,\n        BOOL_OR(baserunning_play_type = 'PassedBall')::UTINYINT AS passed_balls,\n    FROM {{ ref('stg_event_baserunners') }}\n    WHERE baserunning_play_type IS NOT NULL\n    GROUP BY 1\n),\n\nfinal AS (\n    SELECT\n        event_key,\n        events.season,\n        events.game_id,\n        events.fielding_team_id AS team_id,\n        lookup.personnel_fielding_key,\n        events.outs_on_play AS outs_played,\n        (events.plate_appearance_result IS NOT NULL)::UTINYINT AS plate_appearances_in_field,\n        events.batted_to_fielder,\n        COALESCE(fp.putouts, 0)::UTINYINT AS putouts,\n        COALESCE(fp.assists, 0)::UTINYINT AS assists,\n        COALESCE(fp.errors, 0)::UTINYINT AS errors,\n        COALESCE(fp.fielders_choices, 0)::UTINYINT AS fielders_choices,\n        COALESCE(fp.assisted_putouts, 0)::UTINYINT AS assisted_putouts,\n        COALESCE(dp.is_double_play, FALSE)::UTINYINT AS double_plays,\n        COALESCE(dp.is_triple_play, FALSE)::UTINYINT AS triple_plays,\n        COALESCE(dp.is_ground_ball_double_play, FALSE)::UTINYINT AS ground_ball_double_plays,\n        COALESCE(baserunning.stolen_bases, 0)::UTINYINT AS stolen_bases,\n        COALESCE(baserunning.caught_stealing, 0)::UTINYINT AS caught_stealing,\n        COALESCE(baserunning.pickoffs, 0)::UTINYINT AS pickoffs,\n        COALESCE(baserunning.passed_balls, 0)::UTINYINT AS passed_balls,\n        CASE WHEN prt.is_in_play THEN 1 ELSE 0 END::UTINYINT AS plate_appearances_in_field_with_ball_in_play,\n        CASE WHEN prt.is_in_play THEN COALESCE(fp.putouts, 0) ELSE 0 END::UTINYINT AS in_play_putouts,\n        CASE WHEN prt.is_in_play THEN COALESCE(fp.assists, 0) ELSE 0 END::UTINYINT AS in_play_assists,\n        CASE WHEN events.plate_appearance_result = 'ReachedOnError' THEN 1 ELSE 0 END::UTINYINT AS reaching_errors,\n        COALESCE(fp.unknown_putouts, 0)::UTINYINT AS unknown_putouts,\n        COALESCE(fp.incomplete_events, 0)::UTINYINT AS incomplete_events,\n    FROM {{ ref('stg_events') }} AS events\n    LEFT JOIN baserunning USING (event_key)\n    LEFT JOIN {{ ref('seed_plate_appearance_result_types') }} AS prt USING (plate_appearance_result)\n    LEFT JOIN {{ ref('event_double_plays') }} AS dp USING (event_key)\n    LEFT JOIN {{ ref('event_personnel_lookup') }} AS lookup USING (event_key)\n    LEFT JOIN fielding_plays_agg AS fp USING (event_key)\n    WHERE NOT events.no_play_flag\n)\n\nSELECT * FROM final", "language": "sql", "refs": [{"name": "calc_fielding_play_agg", "package": null, "version": null}, {"name": "stg_event_baserunners", "package": null, "version": null}, {"name": "stg_events", "package": null, "version": null}, {"name": "seed_plate_appearance_result_types", "package": null, "version": null}, {"name": "event_double_plays", "package": null, "version": null}, {"name": "event_personnel_lookup", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.baseball_computer.calc_fielding_play_agg", "model.baseball_computer.stg_event_baserunners", "model.baseball_computer.stg_events", "seed.baseball_computer.seed_plate_appearance_result_types", "model.baseball_computer.event_double_plays", "model.baseball_computer.event_personnel_lookup"]}, "compiled_path": null, "contract": {"enforced": true, "alias_types": true, "checksum": "300c036210869956f6a2957cfcf94eb6a475a007f4d5bfa9b254eafdd89129d4"}, "access": "protected", "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true, "columns": ["event_key"]}], "version": null, "latest_version": null, "deprecation_date": null}, "model.baseball_computer.event_player_fielding_stats": {"database": "bc", "schema": "main_models", "name": "event_player_fielding_stats", "resource_type": "model", "package_name": "baseball_computer", "path": "intermediate/event_level/event_player_fielding_stats.sql", "original_file_path": "models/intermediate/event_level/event_player_fielding_stats.sql", "unique_id": "model.baseball_computer.event_player_fielding_stats", "fqn": ["baseball_computer", "intermediate", "event_level", "event_player_fielding_stats"], "alias": "event_player_fielding_stats", "checksum": {"name": "sha256", "checksum": "9bffbca7d6557d9aadb1d5680bed772515d506929c5533b401b2a0436c9cacee"}, "config": {"enabled": true, "alias": null, "schema": "models", "database": null, "tags": [], "meta": {"primary_keys": ["event_key", "fielding_position"]}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Fielding statistics for each player in each event, regardless of whether\nthe fielder was involved in the play. This is the largest table in the database\nby number of rows, so exercise caution when querying it.\n", "columns": {"event_key": {"name": "event_key", "description": "4-byte integer that uniquely identifies an event across the entire\n    dataset (contrast with event_id, which is game-specific). The key\n    is generated deterministically given the same dataset, but it may\n    change when the data is updated. It is guaranteed to follow the \n    order of events within a single game.", "meta": {}, "data_type": "uinteger", "constraints": [], "quote": null, "tags": []}, "fielding_position": {"name": "fielding_position", "description": "A 1-byte integer for the traditional 1-9 fielder identification, along with additional\n    values for unknown fielders and batting-specific positions. Depending on the\n    context, this value may be NULL for batting positions.\n    ```\n    0 - Unknown\n    1 - Pitcher\n    2 - Catcher\n    3 - First baseman\n    4 - Second baseman\n    5 - Third baseman\n    6 - Shortstop\n    7 - Left fielder\n    8 - Center fielder\n    9 - Right fielder\n    10 - Designated Hitter\n    11 - Pinch Hitter\n    12 - Pinch Runner\n    ```", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "game_id": {"name": "game_id", "description": "Retrosheet game ID, A 12-character string structured as follows:\n\n    - Chars 1-3: Home team ID\n    - Chars 4-11: Date (YYYYMMDD)\n    - Char 12: Game number (0 if only one game was played on that day)\n    \n    Example: MLN195607170", "meta": {}, "data_type": "varchar", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "player_id": {"name": "player_id", "description": "Retrosheet 8-character person ID for a player, which consists of\n    the first four characters of the last name, the first character\n    of the first name, and then three digits to disambiguate between\n    players with the same five characters.", "meta": {}, "data_type": "varchar", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "team_id": {"name": "team_id", "description": "Retrosheet team ID, 3-character string which identifies the team\n    that a franchise was playing as at a given time.", "meta": {}, "data_type": "team_id", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "outs_played": {"name": "outs_played", "description": "", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "plate_appearances_in_field": {"name": "plate_appearances_in_field", "description": "", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "plate_appearances_in_field_with_ball_in_play": {"name": "plate_appearances_in_field_with_ball_in_play", "description": "", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "unknown_putouts_while_fielding": {"name": "unknown_putouts_while_fielding", "description": "", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "balls_hit_to": {"name": "balls_hit_to", "description": "", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "putouts": {"name": "putouts", "description": "(PO) Outs credited to fielder based on who physically made the out, either by:\n        - Catching a ball on the fly\n        - Tagging a runner out\n        - Forcing a runner out\n        - Catching a called third strike\n        - Being the nearest fielder to a baserunner who is called out for interference\n\n    Putouts have been an important baseball statistic longer than MLB has been around,\n    so it has excellent historical coverage. Unassisted\n    putouts are very important in determining the location of batted balls.\n    \n    In modern baseball rules, each out in the game is credited as a putout, and at the play/event\n    level this will always be the case. However, in older games for which we only have box score or season-level\n    data, rare plays like baserunner interference may not be assigned to a specific fielder.\n    \n    Every play-by-play out has a putout, but the fielder who gets the putout may be unknown.", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "assists": {"name": "assists", "description": "(A) Number of outs in which a fielder touched the ball before anothber fielder recorded a putout.\n    This is almost always a throw to another fielder, but it can also be a deflection.\n\n    Assists have excellent historical data coverage, and they are particularly useful in determining\n    the location of ground balls. The data is present in almost all season-level and game-level accounts.\n    However, individual plays with unknown-fielder putouts are likely to be missing assists entirely.", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "errors": {"name": "errors", "description": "(E) Number of errors recorded by a fielder. This is recorded when a fielder either fails to make an out\n    that an average fielder should have made or makes a bad play that allows a baserunner to advance.\n    Errors are awarded at the scorekeeper's discretion, making them more subjective than the other two main\n    fielding stats.\n    \n    Errors used to be a much larger component of evaluating fielder quality.\n    When the stat was invented, routine plays were completed much less frequently than they are today.\n    As baseball evolved, routine plays became truly routine, and a fielder's ability to get to the ball\n    became more relevant than their ability\n    to reliably convert the out once they got there. While plenty of people as early as the 19th century were\n    aware of this, statistics mostly failed to reflect it until the 1980s, when Bill James and others\n    developed Range Factor and other stats that attempted to measure a fielder's ability to create chances.", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "fielders_choices": {"name": "fielders_choices", "description": "(FC) Number of times a fielder who fielded the ball attempted to put out a baserunner other than the batter.\n    A fielder's choice can be assigned when the attempt fails, even if there was no error on the play.\n\n    Fielder's choices are only available on play-by-play data and tend to be recorded when the attempt was\n    a tag and not a force. Force plays are explicitly noted and have little overlap with fielder's choices.", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "assisted_putouts": {"name": "assisted_putouts", "description": "Number of putouts by the fielder that had at least one recorded, associated assist. For older games, this may be a subset\n    of the true total assisted putouts, as unknown-fielder putouts almost never have recorded assists.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "in_play_putouts": {"name": "in_play_putouts", "description": "", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "in_play_assists": {"name": "in_play_assists", "description": "", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "reaching_errors": {"name": "reaching_errors", "description": "", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "stolen_bases": {"name": "stolen_bases", "description": "(SB) Number of successful stolen bases.", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "caught_stealing": {"name": "caught_stealing", "description": "(CS) Number of times a runner was caught stealing.", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "pickoffs": {"name": "pickoffs", "description": "", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "passed_balls": {"name": "passed_balls", "description": "(PB) Number of passed balls.", "meta": {}, "data_type": "integer", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "double_plays": {"name": "double_plays", "description": "(DP) Number of times a play ended in two outs being recorded.", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "triple_plays": {"name": "triple_plays", "description": "(TP) Number of times a play ended in three outs being recorded.", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "ground_ball_double_plays": {"name": "ground_ball_double_plays", "description": "", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "double_plays_started": {"name": "double_plays_started", "description": "", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "ground_ball_double_plays_started": {"name": "ground_ball_double_plays_started", "description": "", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}}, "meta": {"primary_keys": ["event_key", "fielding_position"]}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "baseball_computer://models/intermediate/event_level/event_player_fielding_stats.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "models", "contract": {"enforced": true}, "meta": {"primary_keys": ["event_key", "fielding_position"]}}, "created_at": 1702285579.650841, "relation_name": "\"bc\".\"main_models\".\"event_player_fielding_stats\"", "raw_code": "-- TODO: Unclear whether this should exist as such.\n-- Per-event-fielding stats for positions not involved in the play\n-- are only there for innings/PA played, which can be tabulated\n-- in more efficient ways.\n{{\n  config(\n    materialized = 'table',\n    )\n}}\nWITH final AS (\n    SELECT\n        e.event_key,\n        p.fielding_position,\n        p.game_id,\n        p.player_id,\n        p.fielding_team_id AS team_id,\n        -- DHs are in this table, which makes the nomenclature for the 3 cols below\n        -- a little ambigious, but keeping for now because it's useful to keep track of\n        -- for them.\n        e.outs_played,\n        e.plate_appearances_in_field,\n        e.plate_appearances_in_field_with_ball_in_play,\n        e.unknown_putouts AS unknown_putouts_while_fielding,\n        CASE WHEN e.batted_to_fielder = p.fielding_position THEN 1 ELSE 0 END::UTINYINT AS balls_hit_to,\n        COALESCE(fp.putouts, 0)::UTINYINT AS putouts,\n        COALESCE(fp.assists, 0)::UTINYINT AS assists,\n        COALESCE(fp.errors, 0)::UTINYINT AS errors,\n        COALESCE(fp.fielders_choices, 0)::UTINYINT AS fielders_choices,\n        COALESCE(fp.assisted_putouts)::UTINYINT AS assisted_putouts,\n        CASE WHEN e.plate_appearances_in_field_with_ball_in_play > 0\n                THEN COALESCE(fp.putouts, 0)\n            ELSE 0\n        END::UTINYINT AS in_play_putouts,\n        CASE WHEN e.plate_appearances_in_field_with_ball_in_play > 0\n                THEN COALESCE(fp.assists, 0)\n            ELSE 0\n        END::UTINYINT AS in_play_assists,\n        CASE WHEN fp.first_errors = 1 THEN e.reaching_errors ELSE 0 END::UTINYINT AS reaching_errors,\n        CASE WHEN p.fielding_position IN (1, 2) THEN e.stolen_bases ELSE 0 END::UTINYINT AS stolen_bases,\n        CASE WHEN p.fielding_position IN (1, 2) THEN e.caught_stealing ELSE 0 END::UTINYINT AS caught_stealing,\n        CASE WHEN p.fielding_position IN (1, 2) AND fp.assists > 0 THEN e.pickoffs ELSE 0 END::UTINYINT AS pickoffs,\n        CASE WHEN p.fielding_position = 2 THEN e.passed_balls ELSE 0 END AS passed_balls,\n        -- Only count double plays for the fielder who made a putout\n        -- or assist on the play\n        CASE WHEN fp.putouts + fp.assists > 0\n                THEN e.double_plays\n            ELSE 0\n        END::UTINYINT AS double_plays,\n        CASE WHEN fp.putouts + fp.assists > 0\n                THEN e.triple_plays\n            ELSE 0\n        END::UTINYINT AS triple_plays,\n        CASE WHEN fp.putouts + fp.assists > 0\n                THEN e.ground_ball_double_plays\n            ELSE 0\n        END::UTINYINT AS ground_ball_double_plays,\n        CASE WHEN fp.plays_started > 0\n                THEN e.double_plays\n            ELSE 0\n        END::UTINYINT AS double_plays_started,\n        CASE WHEN fp.plays_started > 0\n                THEN e.ground_ball_double_plays\n            ELSE 0\n        END::UTINYINT AS ground_ball_double_plays_started,\n    FROM {{ ref('event_fielding_stats') }} AS e\n    INNER JOIN {{ ref('personnel_fielding_states') }} AS p USING (personnel_fielding_key)\n    LEFT JOIN {{ ref('calc_fielding_play_agg') }} AS fp USING (event_key, fielding_position)\n)\n\nSELECT * FROM final", "language": "sql", "refs": [{"name": "event_fielding_stats", "package": null, "version": null}, {"name": "personnel_fielding_states", "package": null, "version": null}, {"name": "calc_fielding_play_agg", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.baseball_computer.event_fielding_stats", "model.baseball_computer.personnel_fielding_states", "model.baseball_computer.calc_fielding_play_agg"]}, "compiled_path": null, "contract": {"enforced": true, "alias_types": true, "checksum": "c234e5c50bc1b363f6aef4b6f1144428a1ff7d015d3e26d051867b5725a299c8"}, "access": "protected", "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true, "columns": ["event_key", "fielding_position"]}], "version": null, "latest_version": null, "deprecation_date": null}, "model.baseball_computer.event_states_full": {"database": "bc", "schema": "main_models", "name": "event_states_full", "resource_type": "model", "package_name": "baseball_computer", "path": "intermediate/states/event_states_full.sql", "original_file_path": "models/intermediate/states/event_states_full.sql", "unique_id": "model.baseball_computer.event_states_full", "fqn": ["baseball_computer", "intermediate", "states", "event_states_full"], "alias": "event_states_full", "checksum": {"name": "sha256", "checksum": "19478d50c79733e748d1a8a0da05c882292beeb56f345fe72ea5561b637c6379"}, "config": {"enabled": true, "alias": null, "schema": "models", "database": null, "tags": [], "meta": {"primary_keys": ["event_key"]}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "access": "protected"}, "tags": [], "description": "A catch-all table for information describing the state of the event both before and after it occurred. Includes information about the score, the base-out state, and the players involved in the event.", "columns": {"game_id": {"name": "game_id", "description": "Retrosheet game ID, A 12-character string structured as follows:\n\n    - Chars 1-3: Home team ID\n    - Chars 4-11: Date (YYYYMMDD)\n    - Char 12: Game number (0 if only one game was played on that day)\n    \n    Example: MLN195607170", "meta": {}, "data_type": "varchar", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "event_id": {"name": "event_id", "description": "1-byte integer that uniquely identifies, in order, an event within a single game.\n    This value will remain the same across multiple versions as long as events\n    are not added or removed from that specific game, and should align exactly\n    with the event_id produced by Retrosheet's BEVENT software.", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "event_key": {"name": "event_key", "description": "4-byte integer that uniquely identifies an event across the entire\n    dataset (contrast with event_id, which is game-specific). The key\n    is generated deterministically given the same dataset, but it may\n    change when the data is updated. It is guaranteed to follow the \n    order of events within a single game.", "meta": {}, "data_type": "uinteger", "constraints": [], "quote": null, "tags": []}, "season": {"name": "season", "description": "Year, 4-digit integer", "meta": {}, "data_type": "smallint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "league": {"name": "league", "description": "Abbreviation for the league associated with this entity. NULL\n    indicates that a team is not part of a league (e.g. all-star games\n    or Negro League barnstorming teams).", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "is_interleague": {"name": "is_interleague", "description": "Indicates whether the game is an interleague game. Defined as\n    a game played in any context between two teams who are defined at the time\n    as being in different leagues (if one of the teams is not in a league, this is false).", "meta": {}, "data_type": "boolean", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "game_type": {"name": "game_type", "description": "The context in which a game took place, such as the regular season,\n    a specific playoff round, or an all-star game.", "meta": {}, "data_type": "game_type", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "date": {"name": "date", "description": "Date on which the entity took place.", "meta": {}, "data_type": "date", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "park_id": {"name": "park_id", "description": "Retrosheet park ID, 3-character string which identifies the ballpark\n    associated with this entity. See `stg_parks` for full park info.", "meta": {}, "data_type": "park_id", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "bat_first_side": {"name": "bat_first_side", "description": "The side that batted in the top of the inning during the game.\n    This is almost always the Away side, but there are a good number of\n    home-team-bats-first games in the 19th century and 2020.\n    See this SABR article for historical context: https://sabr.org/journal/article/the-death-and-rebirth-of-the-home-team-batting-first/", "meta": {}, "data_type": "side", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "time_of_day": {"name": "time_of_day", "description": "A day game/night game indicator for the entity. This value\n    is close to 100% populated for the pre-night-baseball era and from 1949 on,\n    and is still well-populated for the years in between. By far the most reliably\n    populated data point for game environmental conditions.", "meta": {}, "data_type": "time_of_day", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "pitching_team_starting_pitcher_id": {"name": "pitching_team_starting_pitcher_id", "description": "", "meta": {}, "data_type": "varchar", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "inning_start": {"name": "inning_start", "description": "The inning at the start of the event.", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "frame_start": {"name": "frame_start", "description": "Top or bottom of the inning at the start of the play.", "meta": {}, "data_type": "frame", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "outs_start": {"name": "outs_start", "description": "The number of outs at the start of the event.", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "inning_in_outs_start": {"name": "inning_in_outs_start", "description": "The inning at the start of the event, expressed in outs.\n    ((Inning * 3 - 1) + outs in current innning)\n    For example, 2 outs in the second inning would be 5.", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "is_gidp_eligible": {"name": "is_gidp_eligible", "description": "Whether or not the event started with a runner on first and less than two outs.", "meta": {}, "data_type": "boolean", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "batting_side": {"name": "batting_side", "description": "The side that was batting when the entity took place.", "meta": {}, "data_type": "side", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "fielding_side": {"name": "fielding_side", "description": "", "meta": {}, "data_type": "side", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "score_home_start": {"name": "score_home_start", "description": "The home team's score at the start of the event.", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "score_away_start": {"name": "score_away_start", "description": "The away team's score at the start of the event.", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "home_margin_start": {"name": "home_margin_start", "description": "", "meta": {}, "data_type": "tinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "batting_team_margin_start": {"name": "batting_team_margin_start", "description": "", "meta": {}, "data_type": "tinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "batter_lineup_position": {"name": "batter_lineup_position", "description": "", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "batter_fielding_position": {"name": "batter_fielding_position", "description": "", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "batter_hand": {"name": "batter_hand", "description": "", "meta": {}, "data_type": "hand", "constraints": [], "quote": null, "tags": []}, "pitcher_hand": {"name": "pitcher_hand", "description": "", "meta": {}, "data_type": "hand", "constraints": [], "quote": null, "tags": []}, "away_team_id": {"name": "away_team_id", "description": "Retrosheet team ID, 3-character string which identifies the team\n    that a franchise was playing as at a given time.", "meta": {}, "data_type": "team_id", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "home_team_id": {"name": "home_team_id", "description": "Retrosheet team ID, 3-character string which identifies the team\n    that a franchise was playing as at a given time.", "meta": {}, "data_type": "team_id", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "batting_team_id": {"name": "batting_team_id", "description": "", "meta": {}, "data_type": "team_id", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "fielding_team_id": {"name": "fielding_team_id", "description": "", "meta": {}, "data_type": "team_id", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "batter_id": {"name": "batter_id", "description": "Retrosheet 8-character person ID for the batter associated with the\n    entity.", "meta": {}, "data_type": "varchar", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "pitcher_id": {"name": "pitcher_id", "description": "Retrosheet 8-character person ID for the pitcher associated with the\n    entity.", "meta": {}, "data_type": "varchar", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "base_state_start": {"name": "base_state_start", "description": "The base state at the start of the event, a base-10 representation of a binary number. See `base_state` for more info.", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "runners_count_start": {"name": "runners_count_start", "description": "The number of runners on base at the start of the event.", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "frame_start_flag": {"name": "frame_start_flag", "description": "Whether the event was the first event of the half-inning.", "meta": {}, "data_type": "boolean", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "runner_first_id_start": {"name": "runner_first_id_start", "description": "The Retrosheet person ID of the runner on first base at the start of the event.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "runner_second_id_start": {"name": "runner_second_id_start", "description": "The Retrosheet person ID of the runner on second base at the start of the event.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "runner_third_id_start": {"name": "runner_third_id_start", "description": "The Retrosheet person ID of the runner on third base at the start of the event.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "count_balls": {"name": "count_balls", "description": "", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "count_strikes": {"name": "count_strikes", "description": "", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "inning_end": {"name": "inning_end", "description": "The inning at the end of the event.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "frame_end": {"name": "frame_end", "description": "Top or bottom of the inning at the end of the play.", "meta": {}, "data_type": "frame", "constraints": [], "quote": null, "tags": []}, "outs_on_play": {"name": "outs_on_play", "description": "The total number of outs that were recorded during the event.\n    Mutually exclusive with all other events.", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "outs_end": {"name": "outs_end", "description": "The number of outs at the end of the event.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "base_state_end": {"name": "base_state_end", "description": "The base state at the end of the event, a base-10 representation of a binary number. See `base_state` for more info.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "runs_on_play": {"name": "runs_on_play", "description": "The total number of runs that scored during the event.\n    Mutually exclusive with all other events.", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "score_home_end": {"name": "score_home_end", "description": "The home team's score at the end of the event.", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "score_away_end": {"name": "score_away_end", "description": "The away team's score at the end of the event.", "meta": {}, "data_type": "utinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "home_margin_end": {"name": "home_margin_end", "description": "", "meta": {}, "data_type": "tinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "batting_team_margin_end": {"name": "batting_team_margin_end", "description": "", "meta": {}, "data_type": "tinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "frame_end_flag": {"name": "frame_end_flag", "description": "Whether the event was the last event of the half-inning.", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "truncated_frame_flag": {"name": "truncated_frame_flag", "description": "Whether the event was the last of the half-inning, but there were fewer\n    than three outs recorded, e.g. a walk-off home run or a rain-shortened-game.", "meta": {}, "data_type": "boolean", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "game_end_flag": {"name": "game_end_flag", "description": "Whether the event was the last event of the game.", "meta": {}, "data_type": "boolean", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "league_group": {"name": "league_group", "description": "", "meta": {}, "data_type": "varchar", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "season_group": {"name": "season_group", "description": "", "meta": {}, "data_type": "bigint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "inning_group_start": {"name": "inning_group_start", "description": "", "meta": {}, "data_type": "varchar", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "inning_group_end": {"name": "inning_group_end", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "truncated_home_margin_start": {"name": "truncated_home_margin_start", "description": "", "meta": {}, "data_type": "tinyint", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "truncated_home_margin_end": {"name": "truncated_home_margin_end", "description": "", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "run_expectancy_start_key": {"name": "run_expectancy_start_key", "description": "", "meta": {}, "data_type": "varchar", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "run_expectancy_end_key": {"name": "run_expectancy_end_key", "description": "", "meta": {}, "data_type": "varchar", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "win_expectancy_start_key": {"name": "win_expectancy_start_key", "description": "", "meta": {}, "data_type": "varchar", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "win_expectancy_end_key": {"name": "win_expectancy_end_key", "description": "", "meta": {}, "data_type": "varchar", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}}, "meta": {"primary_keys": ["event_key"]}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "baseball_computer://models/intermediate/states/event_states_full.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "models", "contract": {"enforced": true}, "meta": {"primary_keys": ["event_key"]}}, "created_at": 1702285725.074259, "relation_name": "\"bc\".\"main_models\".\"event_states_full\"", "raw_code": "{{\n  config(\n    materialized = 'table',\n    )\n}}\nWITH final AS (\n    SELECT\n        -- IDs\n        game_id,\n        e.event_id,\n        e.event_key,\n        -- Basic state\n        g.season::SMALLINT AS season,\n        g.home_league AS league,\n        g.is_interleague,\n        g.game_type,\n        g.date,\n        g.park_id,\n        g.bat_first_side,\n        g.time_of_day,\n        -- Useful for determining save situations\n        CASE WHEN e.batting_side = 'Home'::SIDE\n                THEN g.away_starting_pitcher_id\n            ELSE g.home_starting_pitcher_id\n        END AS pitching_team_starting_pitcher_id,\n        base_out.inning_start,\n        base_out.frame_start,\n        base_out.outs_start,\n        base_out.inning_in_outs_start,\n        base_out.is_gidp_eligible,\n        players.batting_side,\n        players.fielding_side,\n        base_out.score_home_start,\n        base_out.score_away_start,\n        (base_out.score_home_start::INT - base_out.score_away_start)::INT1 AS home_margin_start,\n        CASE WHEN e.batting_side = 'Home'\n                THEN home_margin_start\n            ELSE -home_margin_start\n        END::INT1 AS batting_team_margin_start,\n        players.batter_lineup_position,\n        players.batter_fielding_position,\n        -- Player/Team IDs and info\n        players.batter_hand,\n        players.pitcher_hand,\n        g.away_team_id,\n        g.home_team_id,\n        players.batting_team_id,\n        players.fielding_team_id,\n        players.batter_id,\n        players.pitcher_id,\n        -- These are too memory-intensive to include\n        -- at the moment - can put them back in later\n        {# players.catcher_id, \n        players.first_base_id,\n        players.second_base_id,\n        players.third_base_id,\n        players.shortstop_id,\n        players.left_field_id,\n        players.center_field_id,\n        players.right_field_id, #}\n        base_out.base_state_start,\n        base_out.runners_count_start,\n        base_out.frame_start_flag,\n        base_out.runner_first_id_start,\n        base_out.runner_second_id_start,\n        base_out.runner_third_id_start,\n        -- Future state\n        -- TODO: Enforce clearer separation\n        e.count_balls,\n        e.count_strikes,\n        base_out.inning_end,\n        base_out.frame_end,\n        base_out.outs_on_play,\n        base_out.outs_end,\n        base_out.base_state_end,\n        base_out.runs_on_play,\n        base_out.score_home_end,\n        base_out.score_away_end,\n        (base_out.score_home_end::INT1 - base_out.score_away_end)::INT1 AS home_margin_end,\n        CASE WHEN e.batting_side = 'Home'::SIDE\n                THEN home_margin_end\n            ELSE -home_margin_end\n        END::INT1 AS batting_team_margin_end,\n        base_out.frame_end_flag,\n        base_out.truncated_frame_flag,\n        base_out.game_end_flag,\n        -- IDs for calculating expectancy_values\n        CASE WHEN g.home_league NOT IN ('AL', 'NL', 'FL') OR g.home_league IS NULL\n                THEN 'Other'\n            ELSE g.home_league\n        END AS league_group,\n        GREATEST(g.season, 1914) AS season_group,\n        CASE WHEN base_out.inning_start < 10\n                THEN base_out.inning_start::VARCHAR\n            WHEN g.season >= 2020 AND g.game_type = 'RegularSeason'\n                THEN 11\n            ELSE 10\n        END AS inning_group_start,\n        CASE WHEN base_out.inning_start < 10\n                THEN base_out.inning_end::VARCHAR\n            WHEN g.season >= 2020 AND g.game_type = 'RegularSeason'\n                THEN 11\n            ELSE 10\n        END AS inning_group_end,\n        GREATEST(LEAST(home_margin_start, 10), -10)::INT1 AS truncated_home_margin_start,\n        GREATEST(LEAST(home_margin_end, 10), -10)::INT1 AS truncated_home_margin_end,\n        CONCAT_WS(\n            '_', season_group, league_group,\n            base_out.outs_start, base_out.base_state_start\n        ) AS run_expectancy_start_key,\n        CONCAT_WS(\n            '_', season_group, league_group,\n            base_out.outs_end, COALESCE(base_out.base_state_end, 0)\n        ) AS run_expectancy_end_key,\n        CONCAT_WS(\n            '_', inning_group_start, base_out.frame_start, truncated_home_margin_start,\n            base_out.outs_start, base_out.base_state_start\n        ) AS win_expectancy_start_key,\n        CONCAT_WS(\n            '_', inning_group_end, base_out.frame_end, truncated_home_margin_end,\n            base_out.outs_end % 3, COALESCE(base_out.base_state_end, 0)\n        ) AS win_expectancy_end_key,\n    FROM {{ ref('stg_events') }} AS e\n    INNER JOIN {{ ref('game_start_info') }} AS g USING (game_id)\n    INNER JOIN {{ ref('event_states_batter_pitcher') }} AS players USING (event_key)\n    INNER JOIN {{ ref('event_base_out_states') }} AS base_out USING (event_key)\n\n)\n\nSELECT * FROM final", "language": "sql", "refs": [{"name": "stg_events", "package": null, "version": null}, {"name": "game_start_info", "package": null, "version": null}, {"name": "event_states_batter_pitcher", "package": null, "version": null}, {"name": "event_base_out_states", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.baseball_computer.stg_events", "model.baseball_computer.game_start_info", "model.baseball_computer.event_states_batter_pitcher", "model.baseball_computer.event_base_out_states"]}, "compiled_path": null, "contract": {"enforced": true, "alias_types": true, "checksum": "de8b4d7f3b0edddbd1c852664285692fe142e8b0decd91cb51e8119b166817ad"}, "access": "protected", "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true, "columns": ["event_key"]}], "version": null, "latest_version": null, "deprecation_date": null}, "model.baseball_computer.people": {"database": "bc", "schema": "main_models", "name": "people", "resource_type": "model", "package_name": "baseball_computer", "path": "intermediate/bio/people.sql", "original_file_path": "models/intermediate/bio/people.sql", "unique_id": "model.baseball_computer.people", "fqn": ["baseball_computer", "intermediate", "bio", "people"], "alias": "people", "checksum": {"name": "sha256", "checksum": "cefae83bb1300b0556f2b4e3a569991d1885195a91327dc446984a591b5d7095"}, "config": {"enabled": true, "alias": null, "schema": "models", "database": null, "tags": [], "meta": {"primary_keys": ["person_id"]}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Table containing biographical data on each player, coach, umpire, or manager\nfor whom we have data.\n", "columns": {"person_id": {"name": "person_id", "description": "Retrosheet 8-character person ID which consists of\n    the first four characters of the last name, the first character\n    of the first name, and then three digits to disambiguate between\n    players with the same five characters. The first of the three digits\n    designates the type of person (in their main role in MLB):\n    - 0 and 1: player\n    - 7: scorekeeper (not present in file but used in `scorer` field for newer games)\n    - 8: coach\n    - 9: umpire", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "player_id": {"name": "player_id", "description": "Retrosheet 8-character person ID for a player, which consists of\n    the first four characters of the last name, the first character\n    of the first name, and then three digits to disambiguate between\n    players with the same five characters.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "baseball_reference_player_id": {"name": "baseball_reference_player_id", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "first_name": {"name": "first_name", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "last_name": {"name": "last_name", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "bats": {"name": "bats", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "throws": {"name": "throws", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "birth_year": {"name": "birth_year", "description": "", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "official_name": {"name": "official_name", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "birth_date": {"name": "birth_date", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "birth_city": {"name": "birth_city", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "birth_state": {"name": "birth_state", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "birth_country": {"name": "birth_country", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "height_inches": {"name": "height_inches", "description": "", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "weight_pounds": {"name": "weight_pounds", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}}, "meta": {"primary_keys": ["person_id"]}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "baseball_computer://models/intermediate/bio/people.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "models", "contract": {"enforced": true}, "meta": {"primary_keys": ["person_id"]}}, "created_at": 1702285806.4711921, "relation_name": "\"bc\".\"main_models\".\"people\"", "raw_code": "WITH roster_files AS (\n    SELECT\n        player_id,\n        MODE(bats) AS bats,\n        MODE(throws) AS throws,\n    FROM {{ ref('stg_rosters') }}\n    GROUP BY 1\n),\n\nbox_files AS (\n      SELECT DISTINCT batter_id AS player_id FROM {{ ref('stg_box_score_batting_lines') }}\n      UNION\n      SELECT DISTINCT fielder_id AS player_id FROM {{ ref('stg_box_score_fielding_lines') }}\n),\n\njoined AS (\n    SELECT\n        COALESCE(\n            retro.player_id,\n            databank.retrosheet_player_id,\n            roster_files.player_id,\n            box_files.player_id\n        ) AS person_id,\n        databank.baseball_reference_player_id,\n        COALESCE(retro.first_name, databank.first_name) AS first_name,\n        COALESCE(retro.last_name, databank.last_name) AS last_name,\n        COALESCE(retro.bats, databank.bats, roster_files.bats) AS bats,\n        COALESCE(retro.throws, databank.throws, roster_files.throws) AS throws,\n        databank.birth_year,\n        retro.official_name,\n        retro.birth_date,\n        retro.birth_city,\n        retro.birth_state,\n        retro.birth_country,\n        COALESCE(retro.height_inches, databank.height_inches) AS height_inches,\n        COALESCE(retro.weight_pounds, databank.weight_pounds) AS weight_pounds\n    FROM {{ ref('stg_bio') }} AS retro\n    FULL OUTER JOIN roster_files USING (player_id)\n    FULL OUTER JOIN box_files USING (player_id)\n    FULL OUTER JOIN {{ ref('stg_people') }} AS databank\n        ON databank.retrosheet_player_id = COALESCE(retro.player_id, roster_files.player_id, box_files.player_id)\n    WHERE COALESCE(\n            retro.player_id,\n            databank.retrosheet_player_id,\n            roster_files.player_id,\n            box_files.player_id\n        ) IS NOT NULL\n),\n\nfinal AS (\n    SELECT\n        CASE WHEN person_id SIMILAR TO '[a-z]{5}[01][0-9]{2}' THEN person_id ELSE NULL END AS player_id,\n        *\n    FROM joined\n)\n\nSELECT * FROM final", "language": "sql", "refs": [{"name": "stg_rosters", "package": null, "version": null}, {"name": "stg_box_score_batting_lines", "package": null, "version": null}, {"name": "stg_box_score_fielding_lines", "package": null, "version": null}, {"name": "stg_bio", "package": null, "version": null}, {"name": "stg_people", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.baseball_computer.stg_rosters", "model.baseball_computer.stg_box_score_batting_lines", "model.baseball_computer.stg_box_score_fielding_lines", "model.baseball_computer.stg_bio", "model.baseball_computer.stg_people"]}, "compiled_path": null, "contract": {"enforced": true, "alias_types": true, "checksum": "95c361a47bde22d872acd010f46bf0b878c74a1c61aa8e7231168e8dc16b9199"}, "access": "protected", "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true, "columns": ["person_id"]}], "version": null, "latest_version": null, "deprecation_date": null}, "model.baseball_computer.team_game_start_info": {"database": "bc", "schema": "main_models", "name": "team_game_start_info", "resource_type": "model", "package_name": "baseball_computer", "path": "intermediate/game_level/team_game_start_info.sql", "original_file_path": "models/intermediate/game_level/team_game_start_info.sql", "unique_id": "model.baseball_computer.team_game_start_info", "fqn": ["baseball_computer", "intermediate", "game_level", "team_game_start_info"], "alias": "team_game_start_info", "checksum": {"name": "sha256", "checksum": "1441f102b7424838b67f3b82df6ef52f8b637903d37102d92485dc47cb0f5299"}, "config": {"enabled": true, "alias": null, "schema": "models", "database": null, "tags": [], "meta": {"primary_keys": ["game_id", "team_id"]}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "access": "protected"}, "tags": [], "description": "A version of `game_start_info` that includes one row for each team in each game.\n", "columns": {"team_id": {"name": "team_id", "description": "Retrosheet team ID, 3-character string which identifies the team\n    that a franchise was playing as at a given time.", "meta": {}, "data_type": "team_id", "constraints": [], "quote": null, "tags": []}, "opponent_id": {"name": "opponent_id", "description": "", "meta": {}, "data_type": "team_id", "constraints": [], "quote": null, "tags": []}, "league": {"name": "league", "description": "Abbreviation for the league associated with this entity. NULL\n    indicates that a team is not part of a league (e.g. all-star games\n    or Negro League barnstorming teams).", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "opponent_league": {"name": "opponent_league", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "division": {"name": "division", "description": "The team's division within the league. Null if the team is not associated\n    with a divsion (e.g. any game prior to 1969).", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "opponent_division": {"name": "opponent_division", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "team_name": {"name": "team_name", "description": "Team name, both city and nickname.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "opponent_name": {"name": "opponent_name", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "starting_pitcher_id": {"name": "starting_pitcher_id", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "opponent_starting_pitcher_id": {"name": "opponent_starting_pitcher_id", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "team_side": {"name": "team_side", "description": "", "meta": {}, "data_type": "side", "constraints": [], "quote": null, "tags": []}, "game_id": {"name": "game_id", "description": "Retrosheet game ID, A 12-character string structured as follows:\n\n    - Chars 1-3: Home team ID\n    - Chars 4-11: Date (YYYYMMDD)\n    - Char 12: Game number (0 if only one game was played on that day)\n    \n    Example: MLN195607170", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "date": {"name": "date", "description": "Date on which the entity took place.", "meta": {}, "data_type": "date", "constraints": [], "quote": null, "tags": []}, "start_time": {"name": "start_time", "description": "The specific date and time when the game started (local time).\n    Data here is generally pretty spotty until the 2000s.", "meta": {}, "data_type": "timestamp", "constraints": [], "quote": null, "tags": []}, "season": {"name": "season", "description": "Year, 4-digit integer", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "doubleheader_status": {"name": "doubleheader_status", "description": "", "meta": {}, "data_type": "doubleheader_status", "constraints": [], "quote": null, "tags": []}, "time_of_day": {"name": "time_of_day", "description": "A day game/night game indicator for the entity. This value\n    is close to 100% populated for the pre-night-baseball era and from 1949 on,\n    and is still well-populated for the years in between. By far the most reliably\n    populated data point for game environmental conditions.", "meta": {}, "data_type": "time_of_day", "constraints": [], "quote": null, "tags": []}, "game_type": {"name": "game_type", "description": "The context in which a game took place, such as the regular season,\n    a specific playoff round, or an all-star game.", "meta": {}, "data_type": "game_type", "constraints": [], "quote": null, "tags": []}, "bat_first_side": {"name": "bat_first_side", "description": "The side that batted in the top of the inning during the game.\n    This is almost always the Away side, but there are a good number of\n    home-team-bats-first games in the 19th century and 2020.\n    See this SABR article for historical context: https://sabr.org/journal/article/the-death-and-rebirth-of-the-home-team-batting-first/", "meta": {}, "data_type": "side", "constraints": [], "quote": null, "tags": []}, "sky": {"name": "sky", "description": "Enum describing the sky conditions.", "meta": {}, "data_type": "sky", "constraints": [], "quote": null, "tags": []}, "field_condition": {"name": "field_condition", "description": "Enum describing the field conditions,\n    particularly with respect to wetness. This\n    can be different from precipitation if, for\n    example, there was rain before the game.", "meta": {}, "data_type": "field_condition", "constraints": [], "quote": null, "tags": []}, "precipitation": {"name": "precipitation", "description": "Enum describing precipitation level.", "meta": {}, "data_type": "precipitation", "constraints": [], "quote": null, "tags": []}, "wind_direction": {"name": "wind_direction", "description": "Enum describing wind direction in terms\n    of one part of the field to another.", "meta": {}, "data_type": "wind_direction", "constraints": [], "quote": null, "tags": []}, "park_id": {"name": "park_id", "description": "Retrosheet park ID, 3-character string which identifies the ballpark\n    associated with this entity. See `stg_parks` for full park info.", "meta": {}, "data_type": "park_id", "constraints": [], "quote": null, "tags": []}, "temperature_fahrenheit": {"name": "temperature_fahrenheit", "description": "Temperature in degrees Fahrenheit.", "meta": {}, "data_type": "tinyint", "constraints": [], "quote": null, "tags": []}, "attendance": {"name": "attendance", "description": "The number of people in attendance at the game.\n    The source for this number is not consistent over time\n    and may refer to paid attendance or some other way\n    of estimating the number. Attendance data is is very well-populated\n    historically, but there is a zero-or-missing ambiguity in Retrosheet\n    data. At the moment, we NULL out 0 attendance for all years\n    other than 2020, which contains almost all of the true-zero-attendance\n    games in history.", "meta": {}, "data_type": "uinteger", "constraints": [], "quote": null, "tags": []}, "wind_speed_mph": {"name": "wind_speed_mph", "description": "Wind speed in miles per hour.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "use_dh": {"name": "use_dh", "description": "", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "scorer": {"name": "scorer", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "scoring_method": {"name": "scoring_method", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "source_type": {"name": "source_type", "description": "Broad categorization of the source of the data.\n    - PlayByPlay: Retrosheet play-by-play files (either from an account or deduced)\n    - BoxScore: Retrosheet box score files\n    - GameLog: Retrosheet game log files", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "umpire_home_id": {"name": "umpire_home_id", "description": "Retrosheet person ID of the umpire at home plate.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "umpire_first_id": {"name": "umpire_first_id", "description": "Retrosheet person ID of the umpire at first base.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "umpire_second_id": {"name": "umpire_second_id", "description": "Retrosheet person ID of the umpire at second base.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "umpire_third_id": {"name": "umpire_third_id", "description": "Retrosheet person ID of the umpire at third base.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "umpire_left_id": {"name": "umpire_left_id", "description": "Retrosheet person ID of the umpire in left field.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "umpire_right_id": {"name": "umpire_right_id", "description": "Retrosheet person ID of the umpire in right field.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "filename": {"name": "filename", "description": "Name of the Retrosheet file that this data is derived from.\n    Helpful for debugging.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "is_regular_season": {"name": "is_regular_season", "description": "Indicates whether the game is a regular season game.", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "is_postseason": {"name": "is_postseason", "description": "Indicates whether the game is a postseason game.", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "is_integrated": {"name": "is_integrated", "description": "", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "is_negro_leagues": {"name": "is_negro_leagues", "description": "", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "is_segregated_white": {"name": "is_segregated_white", "description": "", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "away_franchise_id": {"name": "away_franchise_id", "description": "The Retrosheet franchise ID of the away team in this game.\n    Franchise ID connects team_ids that are associated with the same franchise\n    over time. See `seed_franchises` for more info.", "meta": {}, "data_type": "team_id", "constraints": [], "quote": null, "tags": []}, "home_franchise_id": {"name": "home_franchise_id", "description": "The Retrosheet franchise ID of the home team in this game.\n    Franchise ID connects team_ids that are associated with the same franchise\n    over time. See `seed_franchises` for more info.", "meta": {}, "data_type": "team_id", "constraints": [], "quote": null, "tags": []}, "is_interleague": {"name": "is_interleague", "description": "Indicates whether the game is an interleague game. Defined as\n    a game played in any context between two teams who are defined at the time\n    as being in different leagues (if one of the teams is not in a league, this is false).", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "lineup_map_away": {"name": "lineup_map_away", "description": "A dictionary that maps starting lineup positions (1-10) to player IDs for the away team.", "meta": {}, "data_type": "map(utinyint, varchar)", "constraints": [], "quote": null, "tags": []}, "lineup_map_home": {"name": "lineup_map_home", "description": "A dictionary that maps starting lineup positions (1-10) to player IDs for the home team.", "meta": {}, "data_type": "map(utinyint, varchar)", "constraints": [], "quote": null, "tags": []}, "fielding_map_away": {"name": "fielding_map_away", "description": "A dictionary that maps starting fielding positions (1-10) to player IDs for the away team.", "meta": {}, "data_type": "map(utinyint, varchar)", "constraints": [], "quote": null, "tags": []}, "fielding_map_home": {"name": "fielding_map_home", "description": "A dictionary that maps starting fielding positions (1-10) to player IDs for the home team.", "meta": {}, "data_type": "map(utinyint, varchar)", "constraints": [], "quote": null, "tags": []}, "series_id": {"name": "series_id", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "season_game_number": {"name": "season_game_number", "description": "", "meta": {}, "data_type": "bigint", "constraints": [], "quote": null, "tags": []}, "series_game_number": {"name": "series_game_number", "description": "", "meta": {}, "data_type": "bigint", "constraints": [], "quote": null, "tags": []}, "days_since_last_game": {"name": "days_since_last_game", "description": "", "meta": {}, "data_type": "bigint", "constraints": [], "quote": null, "tags": []}}, "meta": {"primary_keys": ["game_id", "team_id"]}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "baseball_computer://models/intermediate/game_level/team_game_start_info.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "models", "contract": {"enforced": true}, "meta": {"primary_keys": ["game_id", "team_id"]}}, "created_at": 1702286052.327343, "relation_name": "\"bc\".\"main_models\".\"team_game_start_info\"", "raw_code": "WITH base AS (\n    SELECT\n        home_team_id AS team_id,\n        away_team_id AS opponent_id,\n        home_league AS league,\n        away_league AS opponent_league,\n        home_division AS division,\n        away_division AS opponent_division,\n        home_team_name AS team_name,\n        away_team_name AS opponent_name,\n        home_starting_pitcher_id AS starting_pitcher_id,\n        away_starting_pitcher_id AS opponent_starting_pitcher_id,\n        'Home'::SIDE AS team_side,\n        *\n    FROM {{ ref('game_start_info') }}\n    UNION ALL BY NAME\n    SELECT\n        away_team_id AS team_id,\n        home_team_id AS opponent_id,\n        away_league AS league,\n        home_league AS opponent_league,\n        away_division AS division,\n        home_division AS opponent_division,\n        away_team_name AS team_name,\n        home_team_name AS opponent_name,\n        away_starting_pitcher_id AS starting_pitcher_id,\n        home_starting_pitcher_id AS opponent_starting_pitcher_id,\n        'Away'::SIDE AS team_side,\n        *\n    FROM {{ ref('game_start_info') }}\n),\n\nadd_series_start_flag AS (\n    SELECT\n        * EXCLUDE (\n            away_team_id,\n            home_team_id,\n            away_league,\n            home_league,\n            away_division,\n            home_division,\n            away_team_name,\n            home_team_name,\n            away_starting_pitcher_id,\n            home_starting_pitcher_id\n        ),\n        CASE\n            WHEN LAG(opponent_id::VARCHAR, 1, 'N/A') OVER season_series != opponent_id\n                THEN game_id\n        END AS series_id\n    FROM base\n    WINDOW season_series AS (\n        PARTITION BY season, team_id, game_type, opponent_id\n        ORDER BY date, doubleheader_status\n    )\n),\n\nassign_series_id AS (\n    SELECT -- noqa: AM04\n        * REPLACE (\n            -- The closest non-null value to the current row (inclusive) is the proper series_id.\n            COALESCE(LAG(series_id IGNORE NULLS) OVER season_series, series_id) AS series_id\n        )\n    FROM add_series_start_flag\n    WINDOW season_series AS (\n        PARTITION BY season, team_id, game_type, opponent_id\n        ORDER BY date, doubleheader_status\n    )\n),\n\nfinal AS (\n    SELECT\n        *,\n        COUNT(*) OVER season AS season_game_number,\n        COUNT(*) OVER series AS series_game_number,\n        DATEDIFF('day', LAG(date) OVER season, date) AS days_since_last_game,\n    FROM assign_series_id\n    WINDOW\n        season AS (\n            PARTITION BY season, team_id, game_type\n            ORDER BY date, doubleheader_status\n        ),\n        series AS (\n            PARTITION BY team_id, series_id\n            ORDER BY date, doubleheader_status\n        )\n)\n\nSELECT * FROM final", "language": "sql", "refs": [{"name": "game_start_info", "package": null, "version": null}, {"name": "game_start_info", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.baseball_computer.game_start_info"]}, "compiled_path": null, "contract": {"enforced": true, "alias_types": true, "checksum": "d8ef90c334f70dc15bd55e742b661efc1d3f58bc8ef94cea19e56fd16ace9aba"}, "access": "protected", "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true, "columns": ["game_id", "team_id"]}], "version": null, "latest_version": null, "deprecation_date": null}, "model.baseball_computer.team_game_results": {"database": "bc", "schema": "main_models", "name": "team_game_results", "resource_type": "model", "package_name": "baseball_computer", "path": "intermediate/game_level/team_game_results.sql", "original_file_path": "models/intermediate/game_level/team_game_results.sql", "unique_id": "model.baseball_computer.team_game_results", "fqn": ["baseball_computer", "intermediate", "game_level", "team_game_results"], "alias": "team_game_results", "checksum": {"name": "sha256", "checksum": "421a4ded4a7e47271e245b534b5e3765e1783ffc279e3faf801dd389406129d9"}, "config": {"enabled": true, "alias": null, "schema": "models", "database": null, "tags": [], "meta": {"primary_keys": ["game_id", "team_id"]}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "access": "protected"}, "tags": [], "description": "A version of `game_results` that includes one row for each team in each game.\nAlso includes additional statistics (traditional box score stats) for games\nthat have that information available.\n", "columns": {"season": {"name": "season", "description": "Year, 4-digit integer", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "game_id": {"name": "game_id", "description": "Retrosheet game ID, A 12-character string structured as follows:\n\n    - Chars 1-3: Home team ID\n    - Chars 4-11: Date (YYYYMMDD)\n    - Char 12: Game number (0 if only one game was played on that day)\n    \n    Example: MLN195607170", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "game_finish_date": {"name": "game_finish_date", "description": "", "meta": {}, "data_type": "date", "constraints": [], "quote": null, "tags": []}, "team_id": {"name": "team_id", "description": "Retrosheet team ID, 3-character string which identifies the team\n    that a franchise was playing as at a given time.", "meta": {}, "data_type": "team_id", "constraints": [], "quote": null, "tags": []}, "game_type": {"name": "game_type", "description": "The context in which a game took place, such as the regular season,\n    a specific playoff round, or an all-star game.", "meta": {}, "data_type": "game_type", "constraints": [], "quote": null, "tags": []}, "team_side": {"name": "team_side", "description": "", "meta": {}, "data_type": "side", "constraints": [], "quote": null, "tags": []}, "league": {"name": "league", "description": "Abbreviation for the league associated with this entity. NULL\n    indicates that a team is not part of a league (e.g. all-star games\n    or Negro League barnstorming teams).", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "division": {"name": "division", "description": "The team's division within the league. Null if the team is not associated\n    with a divsion (e.g. any game prior to 1969).", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "opponent_league": {"name": "opponent_league", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "opponent_division": {"name": "opponent_division", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "season_game_number": {"name": "season_game_number", "description": "", "meta": {}, "data_type": "bigint", "constraints": [], "quote": null, "tags": []}, "is_interleague": {"name": "is_interleague", "description": "Indicates whether the game is an interleague game. Defined as\n    a game played in any context between two teams who are defined at the time\n    as being in different leagues (if one of the teams is not in a league, this is false).", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "wins": {"name": "wins", "description": "(W) Number of games in which a pitcher was credited with the win.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "losses": {"name": "losses", "description": "(L) Number of games in which a pitcher was debited with the loss.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "runs_scored": {"name": "runs_scored", "description": "", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "runs_allowed": {"name": "runs_allowed", "description": "", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "hits": {"name": "hits", "description": "(H) Number of times a batter reached base safely without an error or fielder's choice.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "errors": {"name": "errors", "description": "(E) Number of errors recorded by a fielder. This is recorded when a fielder either fails to make an out\n    that an average fielder should have made or makes a bad play that allows a baserunner to advance.\n    Errors are awarded at the scorekeeper's discretion, making them more subjective than the other two main\n    fielding stats.\n    \n    Errors used to be a much larger component of evaluating fielder quality.\n    When the stat was invented, routine plays were completed much less frequently than they are today.\n    As baseball evolved, routine plays became truly routine, and a fielder's ability to get to the ball\n    became more relevant than their ability\n    to reliably convert the out once they got there. While plenty of people as early as the 19th century were\n    aware of this, statistics mostly failed to reflect it until the 1980s, when Bill James and others\n    developed Range Factor and other stats that attempted to measure a fielder's ability to create chances.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "left_on_base": {"name": "left_on_base", "description": "(LOB) At an individual level, the number of baserunners that a batter failed to advance during a plate appearance.\n    At a team level, the number of baserunners remaining on base at the end of an inning. In order to count, baserunners\n    must not have scored or been put out.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "at_bats": {"name": "at_bats", "description": "(AB) Number of plate appearances that ended in either a hit or a non-sacrifice out.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "doubles": {"name": "doubles", "description": "(2B) Number of hits in which a batter reached second base without the help of an error or an attempted\n    play on another runner.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "triples": {"name": "triples", "description": "(3B) Number of hits in which a batter reached third base without the help of an error or an attempted\n    play on another runner.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "home_runs": {"name": "home_runs", "description": "(HR) Number of hits in which a batter reached home plate without the help of an error or an attempted\n    play on another runner (usually by hitting the ball out of the park).", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "runs_batted_in": {"name": "runs_batted_in", "description": "(RBI) Number of runs that scored as a result of a batter's plate appearance. This is usually\n    the number of runs that scored on the play, but errors and other similar cases may cause\n    some runs not to be credited to the batter. Scorerkeeper discretion occasionally causes differences\n    between the number in the database and the official MLB total.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "sacrifice_hits": {"name": "sacrifice_hits", "description": "(SH) Number of times a batter performed a sacrifice bunt to advance another runner.\n    A bunt may count as a sacrifice even if the batter reaches base safely.\n    Unsuccessful attempts are not counted, nor are non-sacrifice bunts.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "sacrifice_flies": {"name": "sacrifice_flies", "description": "(SF) Number of times a batter hit a fly ball that resulted in an out (or error),\n    but allowed a runner to score on the throw.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "hit_by_pitches": {"name": "hit_by_pitches", "description": "(HBP) Number of times a batter was awarded first base after being hit by a pitch.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "walks": {"name": "walks", "description": "(BB, occasionally W) Number of times a batter reaches base on called balls out of the strike zone\n    (Four balls for all of MLB history after the 1880s).", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "intentional_walks": {"name": "intentional_walks", "description": "(IBB, occasionally IW) Number of times a batter was intentionally walked. This number may be missing or undercounted\n    in earlier years, as intentional walks were not officially tracked until 1955.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "strikeouts": {"name": "strikeouts", "description": "(K, SO) Number of times a batter struck out. This includes plays in which a batter reached base on\n    a dropped third strike.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "stolen_bases": {"name": "stolen_bases", "description": "(SB) Number of successful stolen bases.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "caught_stealing": {"name": "caught_stealing", "description": "(CS) Number of times a runner was caught stealing.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "grounded_into_double_plays": {"name": "grounded_into_double_plays", "description": "(GIDP) Number of times a batter grounded into a double play. This is the conventional way\n    to record a double play and as such is an important statistic on its own. Games without\n    play-by-play accounts don't have data on the trajectory of the double play, so\n    this number is not populated for those games.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "reached_on_interferences": {"name": "reached_on_interferences", "description": "Number of times a batter was awarded first base for being illegally hindered\n    by a fielder, usually the catcher.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "innings_pitched": {"name": "innings_pitched", "description": "(IP) Number of innings pitched by a pitcher. Fractional innings are given by .33 and .67 here,\n    but they are often formatted as .1 and .2 elsewhere.", "meta": {}, "data_type": "decimal(6,4)", "constraints": [], "quote": null, "tags": []}, "individual_earned_runs_allowed": {"name": "individual_earned_runs_allowed", "description": "", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "earned_runs_allowed": {"name": "earned_runs_allowed", "description": "", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "wild_pitches": {"name": "wild_pitches", "description": "(WP) Number of wild pitches.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "balks": {"name": "balks", "description": "(BK) Number of balks.", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "putouts": {"name": "putouts", "description": "(PO) Outs credited to fielder based on who physically made the out, either by:\n        - Catching a ball on the fly\n        - Tagging a runner out\n        - Forcing a runner out\n        - Catching a called third strike\n        - Being the nearest fielder to a baserunner who is called out for interference\n\n    Putouts have been an important baseball statistic longer than MLB has been around,\n    so it has excellent historical coverage. Unassisted\n    putouts are very important in determining the location of batted balls.\n    \n    In modern baseball rules, each out in the game is credited as a putout, and at the play/event\n    level this will always be the case. However, in older games for which we only have box score or season-level\n    data, rare plays like baserunner interference may not be assigned to a specific fielder.\n    \n    Every play-by-play out has a putout, but the fielder who gets the putout may be unknown.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "assists": {"name": "assists", "description": "(A) Number of outs in which a fielder touched the ball before anothber fielder recorded a putout.\n    This is almost always a throw to another fielder, but it can also be a deflection.\n\n    Assists have excellent historical data coverage, and they are particularly useful in determining\n    the location of ground balls. The data is present in almost all season-level and game-level accounts.\n    However, individual plays with unknown-fielder putouts are likely to be missing assists entirely.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "passed_balls": {"name": "passed_balls", "description": "(PB) Number of passed balls.", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "double_plays_turned": {"name": "double_plays_turned", "description": "", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "triple_plays_turned": {"name": "triple_plays_turned", "description": "", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "opponent_team_id": {"name": "opponent_team_id", "description": "", "meta": {}, "data_type": "team_id", "constraints": [], "quote": null, "tags": []}, "opponent_runs": {"name": "opponent_runs", "description": "", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "opponent_hits": {"name": "opponent_hits", "description": "", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "opponent_errors": {"name": "opponent_errors", "description": "", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "opponent_left_on_base": {"name": "opponent_left_on_base", "description": "", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "opponent_at_bats": {"name": "opponent_at_bats", "description": "", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "opponent_doubles": {"name": "opponent_doubles", "description": "", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "opponent_triples": {"name": "opponent_triples", "description": "", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "opponent_home_runs": {"name": "opponent_home_runs", "description": "", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "opponent_runs_batted_in": {"name": "opponent_runs_batted_in", "description": "", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "opponent_sacrifice_hits": {"name": "opponent_sacrifice_hits", "description": "", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "opponent_sacrifice_flies": {"name": "opponent_sacrifice_flies", "description": "", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "opponent_hit_by_pitches": {"name": "opponent_hit_by_pitches", "description": "", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "opponent_walks": {"name": "opponent_walks", "description": "", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "opponent_intentional_walks": {"name": "opponent_intentional_walks", "description": "", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "opponent_strikeouts": {"name": "opponent_strikeouts", "description": "", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "opponent_stolen_bases": {"name": "opponent_stolen_bases", "description": "", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "opponent_caught_stealing": {"name": "opponent_caught_stealing", "description": "", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "opponent_grounded_into_double_plays": {"name": "opponent_grounded_into_double_plays", "description": "", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "opponent_reached_on_interferences": {"name": "opponent_reached_on_interferences", "description": "", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "opponent_innings_pitched": {"name": "opponent_innings_pitched", "description": "", "meta": {}, "data_type": "decimal(6,4)", "constraints": [], "quote": null, "tags": []}, "opponent_individual_earned_runs_allowed": {"name": "opponent_individual_earned_runs_allowed", "description": "", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "opponent_earned_runs_allowed": {"name": "opponent_earned_runs_allowed", "description": "", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "opponent_wild_pitches": {"name": "opponent_wild_pitches", "description": "", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "opponent_balks": {"name": "opponent_balks", "description": "", "meta": {}, "data_type": "usmallint", "constraints": [], "quote": null, "tags": []}, "opponent_putouts": {"name": "opponent_putouts", "description": "", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "opponent_assists": {"name": "opponent_assists", "description": "", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "opponent_passed_balls": {"name": "opponent_passed_balls", "description": "", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "opponent_double_plays": {"name": "opponent_double_plays", "description": "", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "opponent_triple_plays": {"name": "opponent_triple_plays", "description": "", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "home_wins": {"name": "home_wins", "description": "", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "home_losses": {"name": "home_losses", "description": "", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "away_wins": {"name": "away_wins", "description": "", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "away_losses": {"name": "away_losses", "description": "", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "interleague_wins": {"name": "interleague_wins", "description": "", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "interleague_losses": {"name": "interleague_losses", "description": "", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "east_wins": {"name": "east_wins", "description": "", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "east_losses": {"name": "east_losses", "description": "", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "central_wins": {"name": "central_wins", "description": "", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "central_losses": {"name": "central_losses", "description": "", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "west_wins": {"name": "west_wins", "description": "", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "west_losses": {"name": "west_losses", "description": "", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "one_run_wins": {"name": "one_run_wins", "description": "", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "one_run_losses": {"name": "one_run_losses", "description": "", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "win_streak_id": {"name": "win_streak_id", "description": "", "meta": {}, "data_type": "bigint", "constraints": [], "quote": null, "tags": []}, "loss_streak_id": {"name": "loss_streak_id", "description": "", "meta": {}, "data_type": "bigint", "constraints": [], "quote": null, "tags": []}, "win_streak_length": {"name": "win_streak_length", "description": "", "meta": {}, "data_type": "bigint", "constraints": [], "quote": null, "tags": []}, "loss_streak_length": {"name": "loss_streak_length", "description": "", "meta": {}, "data_type": "bigint", "constraints": [], "quote": null, "tags": []}}, "meta": {"primary_keys": ["game_id", "team_id"]}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "baseball_computer://models/intermediate/game_level/team_game_results.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "models", "contract": {"enforced": true}, "meta": {"primary_keys": ["game_id", "team_id"]}}, "created_at": 1702286121.127615, "relation_name": "\"bc\".\"main_models\".\"team_game_results\"", "raw_code": "{{\n  config(\n    materialized = 'table',\n    )\n}}\nWITH joined AS (\n    SELECT\n        s.season,\n        s.game_id,\n        r.game_finish_date,\n        s.team_id,\n        s.game_type,\n        s.team_side,\n        s.league,\n        s.division,\n        s.opponent_league,\n        s.opponent_division,\n        s.season_game_number,\n        s.is_interleague,\n        -- Traditional top-level stats\n        CASE WHEN s.team_id = r.winning_team_id THEN 1 ELSE 0 END AS wins,\n        CASE WHEN s.team_id = r.losing_team_id THEN 1 ELSE 0 END AS losses,\n        CASE WHEN s.team_side = 'Home' THEN r.home_runs_scored ELSE r.away_runs_scored END AS runs_scored,\n        CASE WHEN s.team_side = 'Home' THEN r.away_runs_scored ELSE r.home_runs_scored END AS runs_allowed,\n        o.hits,\n        f.errors,\n        o.left_on_base,\n        -- Traditional box score stats\n        o.at_bats,\n        o.doubles,\n        o.triples,\n        o.home_runs,\n        o.runs_batted_in,\n        o.sacrifice_hits,\n        o.sacrifice_flies,\n        o.hit_by_pitches,\n        o.walks,\n        o.intentional_walks,\n        o.strikeouts,\n        o.stolen_bases,\n        o.caught_stealing,\n        o.grounded_into_double_plays,\n        o.reached_on_interferences,\n        p.innings_pitched,\n        p.individual_earned_runs AS individual_earned_runs_allowed,\n        p.earned_runs AS earned_runs_allowed,\n        p.wild_pitches,\n        p.balks,\n        f.putouts,\n        f.assists,\n        f.passed_balls,\n        f.double_plays AS double_plays_turned,\n        f.triple_plays AS triple_plays_turned,\n        -- Same for opponent\n        o_opp.team_id AS opponent_team_id,\n        o_opp.runs AS opponent_runs,\n        o_opp.hits AS opponent_hits,\n        f_opp.errors AS opponent_errors,\n        o_opp.left_on_base AS opponent_left_on_base,\n        o_opp.at_bats AS opponent_at_bats,\n        o_opp.doubles AS opponent_doubles,\n        o_opp.triples AS opponent_triples,\n        o_opp.home_runs AS opponent_home_runs,\n        o_opp.runs_batted_in AS opponent_runs_batted_in,\n        o_opp.sacrifice_hits AS opponent_sacrifice_hits,\n        o_opp.sacrifice_flies AS opponent_sacrifice_flies,\n        o_opp.hit_by_pitches AS opponent_hit_by_pitches,\n        o_opp.walks AS opponent_walks,\n        o_opp.intentional_walks AS opponent_intentional_walks,\n        o_opp.strikeouts AS opponent_strikeouts,\n        o_opp.stolen_bases AS opponent_stolen_bases,\n        o_opp.caught_stealing AS opponent_caught_stealing,\n        o_opp.grounded_into_double_plays AS opponent_grounded_into_double_plays,\n        o_opp.reached_on_interferences AS opponent_reached_on_interferences,\n        p_opp.innings_pitched AS opponent_innings_pitched,\n        p_opp.individual_earned_runs AS opponent_individual_earned_runs_allowed,\n        p_opp.earned_runs AS opponent_earned_runs_allowed,\n        p_opp.wild_pitches AS opponent_wild_pitches,\n        p_opp.balks AS opponent_balks,\n        f_opp.putouts AS opponent_putouts,\n        f_opp.assists AS opponent_assists,\n        f_opp.passed_balls AS opponent_passed_balls,\n        f_opp.double_plays AS opponent_double_plays,\n        f_opp.triple_plays AS opponent_triple_plays,\n    FROM {{ ref('team_game_start_info') }} AS s\n    INNER JOIN {{ ref('game_results') }} AS r USING (game_id)\n    LEFT JOIN {{ ref('team_game_offense_stats') }} AS o USING (game_id, team_id)\n    LEFT JOIN {{ ref('team_game_fielding_stats') }} AS f USING (game_id, team_id)\n    LEFT JOIN {{ ref('team_game_pitching_stats') }} AS p USING (game_id, team_id)\n    LEFT JOIN {{ ref('team_game_offense_stats') }} AS o_opp\n        ON o_opp.game_id = o.game_id AND o_opp.team_id != o.team_id\n    LEFT JOIN {{ ref('team_game_fielding_stats') }} AS f_opp\n        ON f_opp.game_id = f.game_id AND f_opp.team_id != f.team_id\n    LEFT JOIN {{ ref('team_game_pitching_stats') }} AS p_opp\n        ON p_opp.game_id = p.game_id AND p_opp.team_id != p.team_id\n),\n\nenriched AS (\n    SELECT\n        *,\n        CASE WHEN team_side = 'Home' THEN wins ELSE 0 END AS home_wins,\n        CASE WHEN team_side = 'Home' THEN losses ELSE 0 END AS home_losses,\n        CASE WHEN team_side = 'Away' THEN wins ELSE 0 END AS away_wins,\n        CASE WHEN team_side = 'Away' THEN losses ELSE 0 END AS away_losses,\n        CASE WHEN is_interleague THEN wins ELSE 0 END AS interleague_wins,\n        CASE WHEN is_interleague THEN losses ELSE 0 END AS interleague_losses,\n        CASE WHEN NOT is_interleague AND opponent_division = 'E' THEN wins ELSE 0 END AS east_wins,\n        CASE WHEN NOT is_interleague AND opponent_division = 'E' THEN losses ELSE 0 END AS east_losses,\n        CASE WHEN NOT is_interleague AND opponent_division = 'C' THEN wins ELSE 0 END AS central_wins,\n        CASE WHEN NOT is_interleague AND opponent_division = 'C' THEN losses ELSE 0 END AS central_losses,\n        CASE WHEN NOT is_interleague AND opponent_division = 'W' THEN wins ELSE 0 END AS west_wins,\n        CASE WHEN NOT is_interleague AND opponent_division = 'W' THEN losses ELSE 0 END AS west_losses,\n        CASE WHEN ABS(runs_scored::INT - runs_allowed) = 1 THEN wins ELSE 0 END AS one_run_wins,\n        CASE WHEN ABS(runs_scored::INT - runs_allowed) = 1 THEN losses ELSE 0 END AS one_run_losses,\n        CASE WHEN wins = 1 AND NOT LAG(wins = 1, 1, FALSE) OVER streak_window\n                THEN season_game_number\n        END AS win_streak_id,\n        CASE WHEN losses = 1 AND NOT LAG(losses = 1, 1, FALSE) OVER streak_window\n                THEN season_game_number\n        END AS loss_streak_id,\n    FROM joined\n    WINDOW streak_window AS (\n        PARTITION BY season, team_id, game_type\n        ORDER BY game_finish_date, season_game_number\n    )\n),\n\nstreak_calc_continued AS (\n    SELECT\n        * REPLACE (\n            CASE WHEN wins = 1 AND win_streak_id IS NULL\n                    THEN LAG(win_streak_id IGNORE NULLS) OVER streak_window\n                ELSE win_streak_id\n            END AS win_streak_id,\n            CASE WHEN losses = 1 AND loss_streak_id IS NULL\n                    THEN LAG(loss_streak_id IGNORE NULLS) OVER streak_window\n                ELSE loss_streak_id\n            END AS loss_streak_id\n        )\n    FROM enriched\n    WINDOW streak_window AS (\n        PARTITION BY season, team_id, game_type\n        ORDER BY game_finish_date, season_game_number\n        ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\n    )\n),\n\nfinal AS (\n    SELECT\n        *,\n        CASE WHEN wins = 1 THEN COUNT(*) OVER win_streak_window ELSE 0 END AS win_streak_length,\n        CASE WHEN losses = 1 THEN COUNT(*) OVER loss_streak_window ELSE 0 END AS loss_streak_length,\n    FROM streak_calc_continued\n    WINDOW\n        win_streak_window AS (\n            PARTITION BY season, team_id, game_type, win_streak_id\n            ORDER BY game_finish_date, season_game_number\n        ),\n        loss_streak_window AS (\n            PARTITION BY season, team_id, game_type, loss_streak_id\n            ORDER BY game_finish_date, season_game_number\n        )\n)\n\nSELECT * FROM final", "language": "sql", "refs": [{"name": "team_game_start_info", "package": null, "version": null}, {"name": "game_results", "package": null, "version": null}, {"name": "team_game_offense_stats", "package": null, "version": null}, {"name": "team_game_fielding_stats", "package": null, "version": null}, {"name": "team_game_pitching_stats", "package": null, "version": null}, {"name": "team_game_offense_stats", "package": null, "version": null}, {"name": "team_game_fielding_stats", "package": null, "version": null}, {"name": "team_game_pitching_stats", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.baseball_computer.team_game_start_info", "model.baseball_computer.game_results", "model.baseball_computer.team_game_offense_stats", "model.baseball_computer.team_game_fielding_stats", "model.baseball_computer.team_game_pitching_stats"]}, "compiled_path": null, "contract": {"enforced": true, "alias_types": true, "checksum": "00fdb6c7f7e1fdcb46d415f1ea5427e1e0c522c7fc34d480b8f919693be4b8cb"}, "access": "protected", "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true, "columns": ["game_id", "team_id"]}], "version": null, "latest_version": null, "deprecation_date": null}, "model.baseball_computer.season_team_coverage": {"database": "bc", "schema": "main_models", "name": "season_team_coverage", "resource_type": "model", "package_name": "baseball_computer", "path": "intermediate/meta/season_team_coverage.sql", "original_file_path": "models/intermediate/meta/season_team_coverage.sql", "unique_id": "model.baseball_computer.season_team_coverage", "fqn": ["baseball_computer", "intermediate", "meta", "season_team_coverage"], "alias": "season_team_coverage", "checksum": {"name": "sha256", "checksum": "fac270fc2138e648d97bfe4082e0fb738528c4b9ab2f3ee30262507766e30d46"}, "config": {"enabled": true, "alias": null, "schema": "models", "database": null, "tags": [], "meta": {"primary_keys": ["season", "team_id", "league"]}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {"season": {"name": "season", "description": "Year, 4-digit integer", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "team_id": {"name": "team_id", "description": "Retrosheet team ID, 3-character string which identifies the team\n    that a franchise was playing as at a given time.", "meta": {}, "data_type": "team_id", "constraints": [], "quote": null, "tags": []}, "league": {"name": "league", "description": "Abbreviation for the league associated with this entity. NULL\n    indicates that a team is not part of a league (e.g. all-star games\n    or Negro League barnstorming teams).", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "least_granular_source_type": {"name": "least_granular_source_type", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}}, "meta": {"primary_keys": ["season", "team_id", "league"]}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "baseball_computer://models/intermediate/meta/season_team_coverage.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "models", "contract": {"enforced": true}, "meta": {"primary_keys": ["season", "team_id", "league"]}}, "created_at": 1702286160.0351958, "relation_name": "\"bc\".\"main_models\".\"season_team_coverage\"", "raw_code": "WITH final AS (\n    SELECT\n        season,\n        team_id,\n        ANY_VALUE(league) AS league,\n        CASE WHEN BOOL_AND(source_type = 'PlayByPlay')\n                THEN 'PlayByPlay'\n            WHEN BOOL_AND(source_type = 'PlayByPlay' OR source_type = 'BoxScore')\n                THEN 'BoxScore'\n            ELSE 'GameLog'\n        END AS least_granular_source_type\n    FROM {{ ref('team_game_start_info') }}\n    WHERE game_id NOT IN (SELECT game_id FROM {{ ref('game_forfeits') }})\n        AND (game_type != 'Exhibition' OR league IS NULL)\n    GROUP BY 1, 2\n)\n\nSELECT * FROM final", "language": "sql", "refs": [{"name": "team_game_start_info", "package": null, "version": null}, {"name": "game_forfeits", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.baseball_computer.team_game_start_info", "model.baseball_computer.game_forfeits"]}, "compiled_path": null, "contract": {"enforced": true, "alias_types": true, "checksum": "494567d97ea96bfcced18c6767f284e391895ea1b1d4fb3ebcf8fb35a5f392cc"}, "access": "protected", "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true, "columns": ["season", "team_id", "league"]}], "version": null, "latest_version": null, "deprecation_date": null}, "model.baseball_computer.player_team_season_offense_stats": {"database": "bc", "schema": "main_models", "name": "player_team_season_offense_stats", "resource_type": "model", "package_name": "baseball_computer", "path": "intermediate/player_season_level/player_team_season_offense_stats.sql", "original_file_path": "models/intermediate/player_season_level/player_team_season_offense_stats.sql", "unique_id": "model.baseball_computer.player_team_season_offense_stats", "fqn": ["baseball_computer", "intermediate", "player_season_level", "player_team_season_offense_stats"], "alias": "player_team_season_offense_stats", "checksum": {"name": "sha256", "checksum": "00e7c14f36a08cd82d1221eb2995e58798ad11845598075687b3807d15999167"}, "config": {"enabled": true, "alias": null, "schema": "models", "database": null, "tags": [], "meta": {"primary_keys": ["season", "team_id", "player_id", "game_type"]}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {"season": {"name": "season", "description": "Year, 4-digit integer", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "team_id": {"name": "team_id", "description": "Retrosheet team ID, 3-character string which identifies the team\n    that a franchise was playing as at a given time.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "player_id": {"name": "player_id", "description": "Retrosheet 8-character person ID for a player, which consists of\n    the first four characters of the last name, the first character\n    of the first name, and then three digits to disambiguate between\n    players with the same five characters.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "game_type": {"name": "game_type", "description": "The context in which a game took place, such as the regular season,\n    a specific playoff round, or an all-star game.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "games": {"name": "games", "description": "Games played", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "plate_appearances": {"name": "plate_appearances", "description": "(PA) Number of times a batter came to the plate, including walks, hit by pitches, sacrifices, and at-bats.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "at_bats": {"name": "at_bats", "description": "(AB) Number of plate appearances that ended in either a hit or a non-sacrifice out.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "hits": {"name": "hits", "description": "(H) Number of times a batter reached base safely without an error or fielder's choice.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "singles": {"name": "singles", "description": "(1B) Number of hits in which a batter reached first base.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "doubles": {"name": "doubles", "description": "(2B) Number of hits in which a batter reached second base without the help of an error or an attempted\n    play on another runner.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "triples": {"name": "triples", "description": "(3B) Number of hits in which a batter reached third base without the help of an error or an attempted\n    play on another runner.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "home_runs": {"name": "home_runs", "description": "(HR) Number of hits in which a batter reached home plate without the help of an error or an attempted\n    play on another runner (usually by hitting the ball out of the park).", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "total_bases": {"name": "total_bases", "description": "(TB) Number of bases a batter reached safely without the help of an error or an attempted\n    play on another runner. HR * 4 + 3B * 3 + 2B * 2 + (H - HR - 3B - 2B)", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "strikeouts": {"name": "strikeouts", "description": "(K, SO) Number of times a batter struck out. This includes plays in which a batter reached base on\n    a dropped third strike.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "walks": {"name": "walks", "description": "(BB, occasionally W) Number of times a batter reaches base on called balls out of the strike zone\n    (Four balls for all of MLB history after the 1880s).", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "intentional_walks": {"name": "intentional_walks", "description": "(IBB, occasionally IW) Number of times a batter was intentionally walked. This number may be missing or undercounted\n    in earlier years, as intentional walks were not officially tracked until 1955.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "hit_by_pitches": {"name": "hit_by_pitches", "description": "(HBP) Number of times a batter was awarded first base after being hit by a pitch.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "sacrifice_hits": {"name": "sacrifice_hits", "description": "(SH) Number of times a batter performed a sacrifice bunt to advance another runner.\n    A bunt may count as a sacrifice even if the batter reaches base safely.\n    Unsuccessful attempts are not counted, nor are non-sacrifice bunts.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "sacrifice_flies": {"name": "sacrifice_flies", "description": "(SF) Number of times a batter hit a fly ball that resulted in an out (or error),\n    but allowed a runner to score on the throw.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "reached_on_errors": {"name": "reached_on_errors", "description": "(ROE) Number of times a batter reached base safely due to an error.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "reached_on_interferences": {"name": "reached_on_interferences", "description": "Number of times a batter was awarded first base for being illegally hindered\n    by a fielder, usually the catcher.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "inside_the_park_home_runs": {"name": "inside_the_park_home_runs", "description": "Number of times a batter hit a home run without the ball leaving the field of play.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "ground_rule_doubles": {"name": "ground_rule_doubles", "description": "Number of times a batter was awarded a double on a ball that went out of play after\n    bouncing in fair territory.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "infield_hits": {"name": "infield_hits", "description": "Number of times a batter reached base safely on a hit that did not reach the outfield.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "on_base_opportunities": {"name": "on_base_opportunities", "description": "Number of plate appearances in which a batter either did or did not reach base,\n    as defined by the formula for on-base percentage. Note that this is very similar to but different\n    from plate_appearances, as it does not include sacrifice hits or interference.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "on_base_successes": {"name": "on_base_successes", "description": "Number of hits, walks, and hit by pitches that serves as the numerator in the formula\n    for on-base percentage.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "runs_batted_in": {"name": "runs_batted_in", "description": "(RBI) Number of runs that scored as a result of a batter's plate appearance. This is usually\n    the number of runs that scored on the play, but errors and other similar cases may cause\n    some runs not to be credited to the batter. Scorerkeeper discretion occasionally causes differences\n    between the number in the database and the official MLB total.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "grounded_into_double_plays": {"name": "grounded_into_double_plays", "description": "(GIDP) Number of times a batter grounded into a double play. This is the conventional way\n    to record a double play and as such is an important statistic on its own. Games without\n    play-by-play accounts don't have data on the trajectory of the double play, so\n    this number is not populated for those games.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "double_plays": {"name": "double_plays", "description": "(DP) Number of times a play ended in two outs being recorded.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "triple_plays": {"name": "triple_plays", "description": "(TP) Number of times a play ended in three outs being recorded.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "batting_outs": {"name": "batting_outs", "description": "Number of outs that \"should\" have been recorded as a result of a batter's plate apperances.\n    A batting out is still counted if no actual out is recorded on an error or a failed fielder's choice.\n    Outs on baserunners (including the batter trying to stretch a hit) do not count here.\n    Grounded-into-double-plays count as two outs, but other types of double plays do not (the \n    idea here is that the baserunner is responsible on other types of double plays).\n    Unofficial stat, but designed here to be generally useful in determining rates of official stats.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "balls_in_play": {"name": "balls_in_play", "description": "Number of plate appearances that resulted in a live\n    ball on the field of play. The difference between this and batted_balls is that\n    balls_in_play does not include out-of-the-park home runs. This distinction is important\n    for calculating batting average on balls in play, a stat designed to isolate at_bats\n    in which the defense was involved.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "balls_batted": {"name": "balls_batted", "description": "Number of plate appearances that ended in a fair ball or a foul flyout. This is equivalent\n    to balls_in_play + home_runs, and may be a more useful denominator for \"in play\" stats depending\n    on the context.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "trajectory_fly_ball": {"name": "trajectory_fly_ball", "description": "(FB) Number of plate appearances that ended in a fly ball. A fly ball is defined here\n    as the subset of balls hit in the air that are neither line drives nor pop flies.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "trajectory_ground_ball": {"name": "trajectory_ground_ball", "description": "(GB) Number of plate appearances that ended in a ground ball, also called a grounder. A ground ball is defined\n    here to only include swings, not bunts, although older data may not have a proper distinction. Ground\n    balls tend to be easy to distinguish between other types of contact, but Statcast-era data defines it\n    as balls with a launch angle under 10 degrees.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "trajectory_line_drive": {"name": "trajectory_line_drive", "description": "(LD) Number of plate appearances that ended in a line drive, also called a liner. Line drives are distiguished\n    from fly balls by some combination of angle and exit velocity. In the Statcast era, line drives\n    are defined purely in terms of launch angle (10-25 degrees), but just about any colloquial definition\n    involves hard-hitness as well. The line-drive-fly-ball distinction is by far the most arbitrary\n    and subjective trajectory categorization. Many scorekeepers never included line drives, while others counted\n    any successful in-play air-hit as a line drive. Nevertheless, the distinction is a crucial one,\n    as line drives are by far the most likely type of batted ball to result in a hit (even when they are not hit very hard).", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "trajectory_pop_up": {"name": "trajectory_pop_up", "description": "(sometimes PU)  Number of plate appearances that ended in a pop-up, also called a pop fly.\n    Pop-ups are distinguished from fly balls in that they are hit at a higher angle, tend to be\n    hit with less exit velocity, and (as a result) end up in the infield or shallow outfield. Before\n    Statcast-era standardization, the distinction between a fly ball and a pop-up was a matter of\n    scorerkeeper judgement, and many unofficial scorekeepers did not distinguish between the two.\n    Statcast determines pop flies exclusively by angle (> 50 degrees).", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "trajectory_unknown": {"name": "trajectory_unknown", "description": "Number of plate appearances ending in a batted ball whose trajectory was not recorded and cannot\n    be reliably deduced from context. This number includes balls that we know were hit in the air,\n    but do not know which kind of air ball (FB/PU/LD) they were (see trajectory_broad_classification_unknown\n    for a number that does not include those balls). The strong majority of batted balls prior to 1988\n    fall into this category, especially hits.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "trajectory_known": {"name": "trajectory_known", "description": "Number of plate appearances ending in a batted ball whose trajectory was recorded or was reliably deduced\n    from the context. An example of reliable deduction is an at-bat with the fielding play 6-3, which\n    almost always is a ground ball fielded by the shortstop and thrown to the first baseman. See\n    `calc_batted_ball_type` for the deduction logic.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "trajectory_broad_air_ball": {"name": "trajectory_broad_air_ball", "description": "Number of plate appearances that ended in an air ball (a fly ball, line drive, or pop-up).\n    Because it is much easier to deduce that a ball was hit in the air than it is to deduce the exact\n    trajectory, this number field is more reliably populated than any of its three consituent parts.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "trajectory_broad_ground_ball": {"name": "trajectory_broad_ground_ball", "description": "Same as `trajectory_ground_ball`.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "trajectory_broad_unknown": {"name": "trajectory_broad_unknown", "description": "Number of plate appearances ending in a batted ball whose trajectory was not recorded and cannot\n    be reliably deduced from context, even to the extent of knowing whether it was a ground ball or an air ball.\n    This will include a disproportionate number of hits, which are more likely to be missing trajectory data\n    and harder to make deductions about.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "trajectory_broad_known": {"name": "trajectory_broad_known", "description": "Number of plate appearances ending in a batted ball whose ground/air status was recorded or\n    reliably deduced from the context. This is the sum of `trajectory_broad_air_ball` and\n    `trajectory_broad_ground_ball`. Outs in play have excellent coverage historically here,\n    even for older games.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "bunts": {"name": "bunts", "description": "Number of plate appearances ending in an in-play bunt.\n    This does not include strikeouts on foul bunts with two strikes.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "batted_distance_plate": {"name": "batted_distance_plate", "description": "Number of plate appearances in which the ball was batted to catcher's area around home plate.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "batted_distance_infield": {"name": "batted_distance_infield", "description": "Number of plate appearances in which the ball was batted to the infield (not including the catcher).\n    All ground balls are included here, regardless of whether they made it through to the outfield.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "batted_distance_outfield": {"name": "batted_distance_outfield", "description": "Number of plate appearances in which the ball was hit on the fly to the outfield.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "batted_distance_unknown": {"name": "batted_distance_unknown", "description": "Number of plate appearances in which the ball was hit, but the distance was not recorded\n    and cannot be reliably deduced from context.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "batted_distance_known": {"name": "batted_distance_known", "description": "Number of plate appearances in which the ball was hit, and the distance was either\n    recorded or reliably deduced from context.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "fielded_by_battery": {"name": "fielded_by_battery", "description": "Number of plate appearances in which the ball was fielded by the pitcher or catcher.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "fielded_by_infielder": {"name": "fielded_by_infielder", "description": "Number of plate appearances in which the ball was fielded by an infielder.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "fielded_by_outfielder": {"name": "fielded_by_outfielder", "description": "Number of plate appearances in which the ball was fielded by an outfielder.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "fielded_by_known": {"name": "fielded_by_known", "description": "Number of plate appearances in which the ball was fielded by a player, and the player was recorded.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "fielded_by_unknown": {"name": "fielded_by_unknown", "description": "Number of plate appearances in which the ball was fielded by a player, but the player was not recorded.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "batted_angle_left": {"name": "batted_angle_left", "description": "Number of plate appearances in which the ball was batted to the left side of the field.\n    This includes balls where the location was not recorded, but the fielder is on the left side\n    (3B, LF). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "batted_angle_right": {"name": "batted_angle_right", "description": "Number of plate appearances in which the ball was batted to the right side of the field.\n    This includes balls where the location was not recorded, but the fielder is on the right side\n    (1B, RF). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "batted_angle_middle": {"name": "batted_angle_middle", "description": "Number of plate appearances in which the ball was batted to the middle of the field.\n    This includes balls where the location was not recorded, but the fielder is up the middle\n    (P, 2B, SS, CF). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "batted_angle_unknown": {"name": "batted_angle_unknown", "description": "Number of plate appearances in which the ball was batted, but we don't have enough location\n    to determine the spray angle.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "batted_angle_known": {"name": "batted_angle_known", "description": "Number of plate appearances in which the ball was hit and we have enough location to determine\n    the spray angle.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "batted_location_plate": {"name": "batted_location_plate", "description": "Number of plate appearances in which the ball was batted to the catcher's area around home plate.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "batted_location_right_infield": {"name": "batted_location_right_infield", "description": "Number of plate appearances in which the ball was batted to the right side of the infield.\n    This includes balls where the location was not recorded, but the fielder is on the right side\n    (1B). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "batted_location_middle_infield": {"name": "batted_location_middle_infield", "description": "Number of plate appearances in which the ball was batted to the middle of the infield.\n    This includes balls where the location was not recorded, but the fielder is up the middle\n    (P, SS, 2B). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "batted_location_left_infield": {"name": "batted_location_left_infield", "description": "Number of plate appearances in which the ball was batted to the left side of the infield.\n    This includes balls where the location was not recorded, but the fielder is on the left side\n    (3B). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "batted_location_left_field": {"name": "batted_location_left_field", "description": "Number of plate appearances in which the ball was batted to the left side of the outfield.\n    This includes balls where the location was not recorded, but the fielder is on the left side\n    (LF). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "batted_location_center_field": {"name": "batted_location_center_field", "description": "Number of plate appearances in which the ball was batted to the center of the outfield.\n    This includes balls where the location was not recorded, but the fielder is up the middle\n    (CF). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "batted_location_right_field": {"name": "batted_location_right_field", "description": "Number of plate appearances in which the ball was batted to the right side of the outfield.\n    This includes balls where the location was not recorded, but the fielder is on the right side\n    (RF, CF). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "batted_location_unknown": {"name": "batted_location_unknown", "description": "Number of plate appearances in which the ball was batted, but we don't have enough location\n    to determine the specific location.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "batted_location_known": {"name": "batted_location_known", "description": "Number of plate appearances in which the ball was batted and we have enough location to determine\n    the specific location.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "batted_balls_pulled": {"name": "batted_balls_pulled", "description": "Number of plate appearances in which the ball was pulled (the left side for right-handed batters, the right side for left-handed batters).", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "batted_balls_opposite_field": {"name": "batted_balls_opposite_field", "description": "Number of plate appearances in which the ball was hit to the opposite field (the right side for right-handed batters, the left side for left-handed batters).", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "runs": {"name": "runs", "description": "(R) Number of runs scored.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "times_reached_base": {"name": "times_reached_base", "description": "Number of times a batter ended a plate appearance on base, even if it was through a fielder's choice, error, etc.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "stolen_bases": {"name": "stolen_bases", "description": "(SB) Number of successful stolen bases.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "caught_stealing": {"name": "caught_stealing", "description": "(CS) Number of times a runner was caught stealing.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "picked_off": {"name": "picked_off", "description": "(PO, at risk of confusion with putouts) Number of times a runner was picked off.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "picked_off_caught_stealing": {"name": "picked_off_caught_stealing", "description": "(POCS) Number of times a runner was picked off, but instead of going back to the bag,\n    tried to run to the next base and was put out.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "outs_on_basepaths": {"name": "outs_on_basepaths", "description": "Number of outs recorded by a baserunner (this is not mutually exclusive with outs recorded by the batter\n    in cases like failed advances or dropped third-strike putouts).", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "unforced_outs_on_basepaths": {"name": "unforced_outs_on_basepaths", "description": "Number of outs recorded by a baserunner that was not the result of a force on the runner.\n    \"Unforced\" is meant to be in both the literal sense of a force not being in play, but also\n    the figurative sense of the runner being responsible for the out. The latter may or may not\n    be the best interpretation of any given play, but it is useful to assign responsibility to the\n    runner by default in those contexts.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "outs_avoided_on_errors": {"name": "outs_avoided_on_errors", "description": "Number of times that a baserunner would have been out, but an error allowed them to remain\n    on the basepaths (either staying put or advancing).", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "advances_on_wild_pitches": {"name": "advances_on_wild_pitches", "description": "(WP) Number of times a baserunner advanced on a wild pitch.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "advances_on_passed_balls": {"name": "advances_on_passed_balls", "description": "(PB) Number of times a baserunner advanced on a passed ball.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "advances_on_balks": {"name": "advances_on_balks", "description": "(sometimes BK) Number of times a baserunner advanced on a balk.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "advances_on_unspecified_plays": {"name": "advances_on_unspecified_plays", "description": "Number of times a baserunner advanced for an unspecified reason.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "advances_on_defensive_indifference": {"name": "advances_on_defensive_indifference", "description": "(DI) Number of times a baserunner advanced on defensive indifference.\n   Defensive indifference is a judgement call by the official scorer that the defense\n   did not try to stop the runner from stealing a base. This usually happens\n   when the defense has a lead late in the game.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "advances_on_errors": {"name": "advances_on_errors", "description": "Number of times a baserunner advanced on an error.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "plate_appearances_while_on_base": {"name": "plate_appearances_while_on_base", "description": "Number of plate appearances in which the baserunner started on 1st, 2nd, or 3rd base.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "balls_in_play_while_running": {"name": "balls_in_play_while_running", "description": "Number of balls in play while either batting or on base.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "balls_in_play_while_on_base": {"name": "balls_in_play_while_on_base", "description": "Number of balls in play in which the baserunner started on 1st, 2nd, or 3rd base.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "batter_total_bases_while_running": {"name": "batter_total_bases_while_running", "description": "Number of total bases accumulated by the batter while the baserunner was running, including the batter.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "batter_total_bases_while_on_base": {"name": "batter_total_bases_while_on_base", "description": "Number of total bases accumulated by the batter while the baserunner was on base, excluding the batter.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "extra_base_advance_attempts": {"name": "extra_base_advance_attempts", "description": "Number of times a baserunner tried to advance by a greater number of bases than the batter.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "bases_advanced": {"name": "bases_advanced", "description": "Number of bases advanced by a baserunner, including the batter.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "bases_advanced_on_balls_in_play": {"name": "bases_advanced_on_balls_in_play", "description": "Number of bases advanced by a baserunner on a ball in play, including the batter.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "surplus_bases_advanced_on_balls_in_play": {"name": "surplus_bases_advanced_on_balls_in_play", "description": "Number of bases advanced by a baserunner on a ball in play minus the number of total bases\n    accumulated by the batter on the same play. For example, if a runner goes from first to third\n    on a single, this number is 1 (3 - 2). If a runner only goes from second to third on a double,\n    this number is -1 (1 - 2).", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "outs_on_extra_base_advance_attempts": {"name": "outs_on_extra_base_advance_attempts", "description": "Number of times a baserunner was out attempting to advance\n    by a greater number of bases than the batter. This includes\n    batters who were put out trying to stretch a hit to the next base.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "pitches": {"name": "pitches", "description": "Number of pitches thrown.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "swings": {"name": "swings", "description": "Number of pitches that were swung at.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "swings_with_contact": {"name": "swings_with_contact", "description": "Number of pitches that were swung at and made contact.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "strikes": {"name": "strikes", "description": "Number of pitches that were called or swinging strikes.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "strikes_called": {"name": "strikes_called", "description": "Number of pitches that were called strikes.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "strikes_swinging": {"name": "strikes_swinging", "description": "Number of pitches that were swung on and missed (mutually exclusive\n    with `swings_with_contact`, which also count as strikes).", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "strikes_foul": {"name": "strikes_foul", "description": "Number of pitches that were fouled off.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "strikes_foul_tip": {"name": "strikes_foul_tip", "description": "Number of pitches that were fouled off and caught by the catcher for strike three.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "strikes_in_play": {"name": "strikes_in_play", "description": "Number of pitches that were swung on and batted into play.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "strikes_unknown": {"name": "strikes_unknown", "description": "Number of pitches that we know were strikes, but don't know what kind.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "balls": {"name": "balls", "description": "Number of pitches that were called balls.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "balls_called": {"name": "balls_called", "description": "Number of pitches that were called balls (as opposed to automatic balls that were\n    not actually thrown).", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "balls_intentional": {"name": "balls_intentional", "description": "Number of pitches that were called balls as part of an intentional walk.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "balls_automatic": {"name": "balls_automatic", "description": "Number of pitches that were called balls on an automatic walk or a delay penalty.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "unknown_pitches": {"name": "unknown_pitches", "description": "Number of pitches that were thrown without any other information recorded.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "pitchouts": {"name": "pitchouts", "description": "Number of pitches that were thrown as pitchouts. A pitchout is a pitch that is thrown\n    intentionally very far outside in order to make it easier for the catcher to throw out\n    a baserunner who is likely to steal.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "pitcher_pickoff_attempts": {"name": "pitcher_pickoff_attempts", "description": "Number of times the pitcher attempted to pick off a baserunner.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "catcher_pickoff_attempts": {"name": "catcher_pickoff_attempts", "description": "Number of times the catcher attempted to pick off a baserunner.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "pitches_blocked_by_catcher": {"name": "pitches_blocked_by_catcher", "description": "Number of pitches that were blocked by the catcher.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "pitches_with_runners_going": {"name": "pitches_with_runners_going", "description": "Number of pitches that were thrown while a baserunner was on the move\n    (as part of a steal or hit-and-run).", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "passed_balls": {"name": "passed_balls", "description": "(PB) Number of passed balls.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "wild_pitches": {"name": "wild_pitches", "description": "(WP) Number of wild pitches.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "balks": {"name": "balks", "description": "(BK) Number of balks.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "left_on_base": {"name": "left_on_base", "description": "(LOB) At an individual level, the number of baserunners that a batter failed to advance during a plate appearance.\n    At a team level, the number of baserunners remaining on base at the end of an inning. In order to count, baserunners\n    must not have scored or been put out.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "left_on_base_with_two_outs": {"name": "left_on_base_with_two_outs", "description": "(LOB) At an individual level, the number of baserunners that remain on base (unscored and not out) after a plate appearance that ends with the third out recorded. At a team level, this is interchangable with `left_on_base`.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "times_lead_runner": {"name": "times_lead_runner", "description": "Number of events that a runner was the lead runner on a play\n    (the runner who is furthest along the basepaths).\n    Batter is never counted as the lead runner. No-play events excluded,\n    but events without plate appearances are included.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "times_force_on_runner": {"name": "times_force_on_runner", "description": "Number of events that a force existed on the runner's next base.\n    The batter is counted as having a force on them (at first).\n    No-play events excluded, but events without plate appearances are included.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "times_next_base_empty": {"name": "times_next_base_empty", "description": "Number of events that the runner's next base was empty.\n    The batter is counted on events where first base is empty.\n    No-play events excluded, but events without plate appearances are included.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "stolen_base_opportunities": {"name": "stolen_base_opportunities", "description": "Number of events in which a runner had an opportunity to steal a base as the\n    lead basestealer OR the runner recorded a SB/CS in any situation.\n    \"Opportunity\" is defined as a situation in which the next base\n    was empty at the start of the event (not including the batter).\n    No-play events excluded, but events without plate appearances are included.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "stolen_base_opportunities_second": {"name": "stolen_base_opportunities_second", "description": "Number of opportunities to steal second base (see `stolen_base_opportunities` for detailed criteria).", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "stolen_base_opportunities_third": {"name": "stolen_base_opportunities_third", "description": "Number of opportunities to steal third base (see `stolen_base_opportunities` for detailed criteria).", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "stolen_base_opportunities_home": {"name": "stolen_base_opportunities_home", "description": "Number of opportunities to steal home (see `stolen_base_opportunities` for detailed criteria).", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "stolen_bases_second": {"name": "stolen_bases_second", "description": "Number of successful steals of second base.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "stolen_bases_third": {"name": "stolen_bases_third", "description": "Number of successful steals of third base.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "stolen_bases_home": {"name": "stolen_bases_home", "description": "Number of successful steals of home.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "caught_stealing_second": {"name": "caught_stealing_second", "description": "Number of times a runner was caught stealing second base.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "caught_stealing_third": {"name": "caught_stealing_third", "description": "Number of times a runner was caught stealing third base.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "caught_stealing_home": {"name": "caught_stealing_home", "description": "Number of times a runner was caught stealing home.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "picked_off_first": {"name": "picked_off_first", "description": "Number of times a runner was picked off first base.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "picked_off_second": {"name": "picked_off_second", "description": "Number of times a runner was picked off second base.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "picked_off_third": {"name": "picked_off_third", "description": "Number of times a runner was picked off third base.", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "extra_base_chances": {"name": "extra_base_chances", "description": "", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}, "extra_bases_taken": {"name": "extra_bases_taken", "description": "", "meta": {}, "data_type": "smallint", "constraints": [], "quote": null, "tags": []}}, "meta": {"primary_keys": ["season", "team_id", "player_id", "game_type"]}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "baseball_computer://models/intermediate/player_season_level/player_team_season_offense_stats.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "models", "contract": {"enforced": true}, "meta": {"primary_keys": ["season", "team_id", "player_id", "game_type"]}}, "created_at": 1702286178.484908, "relation_name": "\"bc\".\"main_models\".\"player_team_season_offense_stats\"", "raw_code": "{{\n  config(\n    materialized = 'table',\n    )\n}}\nWITH databank AS (\n    SELECT\n        bat.season,\n        bat.team_id,\n        people.retrosheet_player_id AS player_id,\n        'RegularSeason' AS game_type,\n        SUM(bat.games)::SMALLINT AS games,\n        SUM(bat.at_bats)::SMALLINT AS at_bats,\n        SUM(bat.runs)::SMALLINT AS runs,\n        SUM(bat.hits)::SMALLINT AS hits,\n        SUM(bat.doubles)::SMALLINT AS doubles,\n        SUM(bat.triples)::SMALLINT AS triples,\n        SUM(bat.home_runs)::SMALLINT AS home_runs,\n        SUM(bat.runs_batted_in)::SMALLINT AS runs_batted_in,\n        SUM(bat.stolen_bases)::SMALLINT AS stolen_bases,\n        SUM(bat.caught_stealing)::SMALLINT AS caught_stealing,\n        SUM(bat.walks)::SMALLINT AS walks,\n        SUM(bat.strikeouts)::SMALLINT AS strikeouts,\n        SUM(bat.intentional_walks)::SMALLINT AS intentional_walks,\n        SUM(bat.hit_by_pitches)::SMALLINT AS hit_by_pitches,\n        SUM(bat.sacrifice_hits)::SMALLINT AS sacrifice_hits,\n        SUM(bat.sacrifice_flies)::SMALLINT AS sacrifice_flies,\n        SUM(bat.grounded_into_double_plays)::SMALLINT AS grounded_into_double_plays,\n        SUM(bat.singles)::SMALLINT AS singles,\n        SUM(bat.total_bases)::SMALLINT AS total_bases,\n        SUM(bat.plate_appearances)::SMALLINT AS plate_appearances,\n        SUM(bat.on_base_opportunities)::SMALLINT AS on_base_opportunities,\n        SUM(bat.on_base_successes)::SMALLINT AS on_base_successes,\n    FROM {{ ref('stg_databank_batting') }} AS bat\n    INNER JOIN {{ ref('stg_people') }} AS people USING (databank_player_id)\n    WHERE bat.season NOT IN (SELECT DISTINCT season FROM {{ ref('stg_games') }})\n    GROUP BY 1, 2, 3\n),\n\ndatabank_running AS (\n    SELECT\n        season,\n        player_id,\n        team_id,\n        SUM(stolen_bases)::SMALLINT AS stolen_bases,\n        SUM(caught_stealing)::SMALLINT AS caught_stealing,\n    FROM {{ ref('stg_databank_batting') }}\n    -- TODO: Add var to indicate final databank override year\n    WHERE season < 1920\n    GROUP BY 1, 2, 3\n),\n\nretrosheet AS (\n    SELECT\n        games.season,\n        stats.team_id,\n        stats.player_id,\n        games.game_type,\n        COUNT(*) AS games,\n        {% for stat in event_level_offense_stats() -%}\n            SUM({{ stat }})::SMALLINT AS {{ stat }},\n        {% endfor %}\n    FROM {{ ref('stg_games') }} AS games\n    INNER JOIN {{ ref('player_game_offense_stats') }} AS stats USING (game_id)\n    GROUP BY 1, 2, 3, 4\n),\n\nunioned AS (\n    SELECT * FROM retrosheet\n    UNION ALL BY NAME\n    SELECT * FROM databank\n),\n\nfinal AS (\n    SELECT\n        u.* REPLACE (\n            CASE WHEN u.game_type = 'RegularSeason'\n                    THEN COALESCE(d.stolen_bases, u.stolen_bases)\n                ELSE u.stolen_bases\n            END AS stolen_bases,\n            CASE WHEN u.game_type = 'RegularSeason'\n                    THEN COALESCE(d.caught_stealing, u.caught_stealing)\n                ELSE u.caught_stealing\n            END AS caught_stealing\n        )\n    FROM unioned AS u\n    LEFT JOIN databank_running AS d USING (season, player_id, team_id)\n)\n\nSELECT * FROM final", "language": "sql", "refs": [{"name": "stg_databank_batting", "package": null, "version": null}, {"name": "stg_people", "package": null, "version": null}, {"name": "stg_games", "package": null, "version": null}, {"name": "stg_databank_batting", "package": null, "version": null}, {"name": "stg_games", "package": null, "version": null}, {"name": "player_game_offense_stats", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.baseball_computer.event_level_offense_stats"], "nodes": ["model.baseball_computer.stg_databank_batting", "model.baseball_computer.stg_people", "model.baseball_computer.stg_games", "model.baseball_computer.player_game_offense_stats"]}, "compiled_path": null, "contract": {"enforced": true, "alias_types": true, "checksum": "08645765d87971cc67af265b0f78b155996ce8e826fde19d6a480de4bfd33265"}, "access": "protected", "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true, "columns": ["season", "team_id", "player_id", "game_type"]}], "version": null, "latest_version": null, "deprecation_date": null}}, "sources": {"source.baseball_computer.misc.gamelog": {"database": "bc", "schema": "misc", "name": "gamelog", "resource_type": "source", "package_name": "baseball_computer", "path": "models/staging/misc/source.yml", "original_file_path": "models/staging/misc/source.yml", "unique_id": "source.baseball_computer.misc.gamelog", "fqn": ["baseball_computer", "staging", "misc", "misc", "gamelog"], "source_name": "misc", "source_description": "Datasets from a hodgepodge of sources. To maintain a single source of truth,\nall data is sourced from Retrosheet play-by-play as much as possible.\n", "loader": "", "identifier": "gamelog", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A truncated version of Retrosheet's gamelog file. It includes only\ngames prior to 1901 (for which box sores are generally not available).\nThis is our only source of info for those games, so it does not conflict\nwith any of the later data in the play-by-play.\n", "columns": {"date": {"name": "date", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "double_header": {"name": "double_header", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "day_of_week": {"name": "day_of_week", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "visiting_team": {"name": "visiting_team", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "visiting_team_league": {"name": "visiting_team_league", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "visiting_team_game_number": {"name": "visiting_team_game_number", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_team": {"name": "home_team", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_team_league": {"name": "home_team_league", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_team_game_number": {"name": "home_team_game_number", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "visitor_runs_scored": {"name": "visitor_runs_scored", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_runs_score": {"name": "home_runs_score", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "length_in_outs": {"name": "length_in_outs", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "day_night": {"name": "day_night", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "completion_info": {"name": "completion_info", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "forfeit_info": {"name": "forfeit_info", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "protest_info": {"name": "protest_info", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "park_id": {"name": "park_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "attendance": {"name": "attendance", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "duration": {"name": "duration", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "vistor_line_score": {"name": "vistor_line_score", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_line_score": {"name": "home_line_score", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "visitor_ab": {"name": "visitor_ab", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "visitor_h": {"name": "visitor_h", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "visitor_d": {"name": "visitor_d", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "visitor_t": {"name": "visitor_t", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "visitor_hr": {"name": "visitor_hr", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "visitor_rbi": {"name": "visitor_rbi", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "visitor_sh": {"name": "visitor_sh", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "visitor_sf": {"name": "visitor_sf", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "visitor_hbp": {"name": "visitor_hbp", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "visitor_bb": {"name": "visitor_bb", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "visitor_ibb": {"name": "visitor_ibb", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "visitor_k": {"name": "visitor_k", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "visitor_sb": {"name": "visitor_sb", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "visitor_cs": {"name": "visitor_cs", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "visitor_gdp": {"name": "visitor_gdp", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "visitor_ci": {"name": "visitor_ci", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "visitor_lob": {"name": "visitor_lob", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "visitor_pitchers": {"name": "visitor_pitchers", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "visitor_er": {"name": "visitor_er", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "visitor_ter": {"name": "visitor_ter", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "visitor_wp": {"name": "visitor_wp", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "visitor_balks": {"name": "visitor_balks", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "visitor_po": {"name": "visitor_po", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "visitor_a": {"name": "visitor_a", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "visitor_e": {"name": "visitor_e", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "visitor_passed": {"name": "visitor_passed", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "visitor_db": {"name": "visitor_db", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "visitor_tp": {"name": "visitor_tp", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_ab": {"name": "home_ab", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_h": {"name": "home_h", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_d": {"name": "home_d", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_t": {"name": "home_t", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_hr": {"name": "home_hr", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_rbi": {"name": "home_rbi", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_sh": {"name": "home_sh", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_sf": {"name": "home_sf", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_hbp": {"name": "home_hbp", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_bb": {"name": "home_bb", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_ibb": {"name": "home_ibb", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_k": {"name": "home_k", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_sb": {"name": "home_sb", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_cs": {"name": "home_cs", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_gdp": {"name": "home_gdp", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_ci": {"name": "home_ci", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_lob": {"name": "home_lob", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_pitchers": {"name": "home_pitchers", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_er": {"name": "home_er", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_ter": {"name": "home_ter", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_wp": {"name": "home_wp", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_balks": {"name": "home_balks", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_po": {"name": "home_po", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_a": {"name": "home_a", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_e": {"name": "home_e", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_passed": {"name": "home_passed", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_db": {"name": "home_db", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_tp": {"name": "home_tp", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "umpire_h_id": {"name": "umpire_h_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "umpire_h_name": {"name": "umpire_h_name", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "umpire_1b_id": {"name": "umpire_1b_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "umpire_1b_name": {"name": "umpire_1b_name", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "umpire_2b_id": {"name": "umpire_2b_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "umpire_2b_name": {"name": "umpire_2b_name", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "umpire_3b_id": {"name": "umpire_3b_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "umpire_3b_name": {"name": "umpire_3b_name", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "umpire_lf_id": {"name": "umpire_lf_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "umpire_lf_name": {"name": "umpire_lf_name", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "umpire_rf_id": {"name": "umpire_rf_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "umpire_rf_name": {"name": "umpire_rf_name", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "visitor_manager_id": {"name": "visitor_manager_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "visitor_manager_name": {"name": "visitor_manager_name", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_manager_id": {"name": "home_manager_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_manager_name": {"name": "home_manager_name", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "winning_pitcher_id": {"name": "winning_pitcher_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "winning_pitcher_name": {"name": "winning_pitcher_name", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "losing_pitcher_id": {"name": "losing_pitcher_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "losing_pitcher_name": {"name": "losing_pitcher_name", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "saving_pitcher_id": {"name": "saving_pitcher_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "saving_pitcher_name": {"name": "saving_pitcher_name", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "game_winning_rbi_id": {"name": "game_winning_rbi_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "game_winning_rbi_name": {"name": "game_winning_rbi_name", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "visitor_starting_pitcher_id": {"name": "visitor_starting_pitcher_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "visitor_starting_pitcher_name": {"name": "visitor_starting_pitcher_name", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_starting_pitcher_id": {"name": "home_starting_pitcher_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_starting_pitcher_name": {"name": "home_starting_pitcher_name", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "visitor_batting_1_player_id": {"name": "visitor_batting_1_player_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "visitor_batting_1_name": {"name": "visitor_batting_1_name", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "visitor_batting_1_position": {"name": "visitor_batting_1_position", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "visitor_batting_2_player_id": {"name": "visitor_batting_2_player_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "visitor_batting_2_name": {"name": "visitor_batting_2_name", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "visitor_batting_2_position": {"name": "visitor_batting_2_position", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "visitor_batting_3_player_id": {"name": "visitor_batting_3_player_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "visitor_batting_3_name": {"name": "visitor_batting_3_name", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "visitor_batting_3_position": {"name": "visitor_batting_3_position", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "visitor_batting_4_player_id": {"name": "visitor_batting_4_player_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "visitor_batting_4_name": {"name": "visitor_batting_4_name", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "visitor_batting_4_position": {"name": "visitor_batting_4_position", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "visitor_batting_5_player_id": {"name": "visitor_batting_5_player_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "visitor_batting_5_name": {"name": "visitor_batting_5_name", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "visitor_batting_5_position": {"name": "visitor_batting_5_position", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "visitor_batting_6_player_id": {"name": "visitor_batting_6_player_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "visitor_batting_6_name": {"name": "visitor_batting_6_name", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "visitor_batting_6_position": {"name": "visitor_batting_6_position", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "visitor_batting_7_player_id": {"name": "visitor_batting_7_player_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "visitor_batting_7_name": {"name": "visitor_batting_7_name", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "visitor_batting_7_position": {"name": "visitor_batting_7_position", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "visitor_batting_8_player_id": {"name": "visitor_batting_8_player_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "visitor_batting_8_name": {"name": "visitor_batting_8_name", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "visitor_batting_8_position": {"name": "visitor_batting_8_position", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "visitor_batting_9_player_id": {"name": "visitor_batting_9_player_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "visitor_batting_9_name": {"name": "visitor_batting_9_name", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "visitor_batting_9_position": {"name": "visitor_batting_9_position", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_batting_1_player_id": {"name": "home_batting_1_player_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_batting_1_name": {"name": "home_batting_1_name", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_batting_1_position": {"name": "home_batting_1_position", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_batting_2_player_id": {"name": "home_batting_2_player_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_batting_2_name": {"name": "home_batting_2_name", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_batting_2_position": {"name": "home_batting_2_position", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_batting_3_player_id": {"name": "home_batting_3_player_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_batting_3_name": {"name": "home_batting_3_name", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_batting_3_position": {"name": "home_batting_3_position", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_batting_4_player_id": {"name": "home_batting_4_player_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_batting_4_name": {"name": "home_batting_4_name", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_batting_4_position": {"name": "home_batting_4_position", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_batting_5_player_id": {"name": "home_batting_5_player_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_batting_5_name": {"name": "home_batting_5_name", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_batting_5_position": {"name": "home_batting_5_position", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_batting_6_player_id": {"name": "home_batting_6_player_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_batting_6_name": {"name": "home_batting_6_name", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_batting_6_position": {"name": "home_batting_6_position", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_batting_7_player_id": {"name": "home_batting_7_player_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_batting_7_name": {"name": "home_batting_7_name", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_batting_7_position": {"name": "home_batting_7_position", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_batting_8_player_id": {"name": "home_batting_8_player_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_batting_8_name": {"name": "home_batting_8_name", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_batting_8_position": {"name": "home_batting_8_position", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_batting_9_player_id": {"name": "home_batting_9_player_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_batting_9_name": {"name": "home_batting_9_name", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_batting_9_position": {"name": "home_batting_9_position", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "additional_info": {"name": "additional_info", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "acquisition_info": {"name": "acquisition_info", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {"id_expression": "strftime(date, '%Y%m%d') || home_team || double_header"}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"bc\".\"misc\".\"gamelog\"", "created_at": 1702281449.559402}, "source.baseball_computer.misc.park": {"database": "bc", "schema": "misc", "name": "park", "resource_type": "source", "package_name": "baseball_computer", "path": "models/staging/misc/source.yml", "original_file_path": "models/staging/misc/source.yml", "unique_id": "source.baseball_computer.misc.park", "fqn": ["baseball_computer", "staging", "misc", "misc", "park"], "source_name": "misc", "source_description": "Datasets from a hodgepodge of sources. To maintain a single source of truth,\nall data is sourced from Retrosheet play-by-play as much as possible.\n", "loader": "", "identifier": "park", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Information about each ballpark.\n", "columns": {"park_id": {"name": "park_id", "description": "", "meta": {}, "data_type": "PARK_ID", "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "aka": {"name": "aka", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "city": {"name": "city", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "state": {"name": "state", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "start_date": {"name": "start_date", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "end_date": {"name": "end_date", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "league": {"name": "league", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "notes": {"name": "notes", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {"primary_keys": ["park_id"]}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"bc\".\"misc\".\"park\"", "created_at": 1702281449.5701241}, "source.baseball_computer.misc.roster": {"database": "bc", "schema": "misc", "name": "roster", "resource_type": "source", "package_name": "baseball_computer", "path": "models/staging/misc/source.yml", "original_file_path": "models/staging/misc/source.yml", "unique_id": "source.baseball_computer.misc.roster", "fqn": ["baseball_computer", "staging", "misc", "misc", "roster"], "source_name": "misc", "source_description": "Datasets from a hodgepodge of sources. To maintain a single source of truth,\nall data is sourced from Retrosheet play-by-play as much as possible.\n", "loader": "", "identifier": "roster", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Contains one entry for any valid combination of year/team/player.\nThe biographical information may conflict with the info in the `people`\ntable, as handedness/names are not necessarily the same from year to year.\n", "columns": {"year": {"name": "year", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "player_id": {"name": "player_id", "description": "", "meta": {}, "data_type": "PLAYER_ID", "constraints": [], "quote": null, "tags": []}, "last_name": {"name": "last_name", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "first_name": {"name": "first_name", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bats": {"name": "bats", "description": "", "meta": {}, "data_type": "HAND", "constraints": [], "quote": null, "tags": []}, "throws": {"name": "throws", "description": "", "meta": {}, "data_type": "HAND", "constraints": [], "quote": null, "tags": []}, "team_id": {"name": "team_id", "description": "", "meta": {}, "data_type": "TEAM_ID", "constraints": [], "quote": null, "tags": []}, "position": {"name": "position", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {"primary_keys": ["year", "player_id", "team_id"]}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"bc\".\"misc\".\"roster\"", "created_at": 1702281449.576511}, "source.baseball_computer.misc.schedule": {"database": "bc", "schema": "misc", "name": "schedule", "resource_type": "source", "package_name": "baseball_computer", "path": "models/staging/misc/source.yml", "original_file_path": "models/staging/misc/source.yml", "unique_id": "source.baseball_computer.misc.schedule", "fqn": ["baseball_computer", "staging", "misc", "misc", "schedule"], "source_name": "misc", "source_description": "Datasets from a hodgepodge of sources. To maintain a single source of truth,\nall data is sourced from Retrosheet play-by-play as much as possible.\n", "loader": "", "identifier": "schedule", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Information about the original scheduled slate of games. Each row\nrepresents an originally scheduled game. This will\ndiffer from the `game` table in cases of postponements.\n", "columns": {"date": {"name": "date", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "double_header": {"name": "double_header", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "day_of_week": {"name": "day_of_week", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "visiting_team": {"name": "visiting_team", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "visiting_team_league": {"name": "visiting_team_league", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "visiting_team_game_number": {"name": "visiting_team_game_number", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_team": {"name": "home_team", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_team_league": {"name": "home_team_league", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_team_game_number": {"name": "home_team_game_number", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "day_night": {"name": "day_night", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "postponement_indicator": {"name": "postponement_indicator", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "makeup_dates": {"name": "makeup_dates", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {"id_expression": "strftime(date, '%Y%m%d') || home_team || double_header"}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"bc\".\"misc\".\"schedule\"", "created_at": 1702281449.576649}, "source.baseball_computer.misc.bio": {"database": "bc", "schema": "misc", "name": "bio", "resource_type": "source", "package_name": "baseball_computer", "path": "models/staging/misc/source.yml", "original_file_path": "models/staging/misc/source.yml", "unique_id": "source.baseball_computer.misc.bio", "fqn": ["baseball_computer", "staging", "misc", "misc", "bio"], "source_name": "misc", "source_description": "Datasets from a hodgepodge of sources. To maintain a single source of truth,\nall data is sourced from Retrosheet play-by-play as much as possible.\n", "loader": "", "identifier": "bio", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"bc\".\"misc\".\"bio\"", "created_at": 1702281449.576753}, "source.baseball_computer.baseballdatabank.appearances": {"database": "bc", "schema": "baseballdatabank", "name": "appearances", "resource_type": "source", "package_name": "baseball_computer", "path": "models/staging/baseballdatabank/source.yml", "original_file_path": "models/staging/baseballdatabank/source.yml", "unique_id": "source.baseball_computer.baseballdatabank.appearances", "fqn": ["baseball_computer", "staging", "baseballdatabank", "baseballdatabank", "appearances"], "source_name": "baseballdatabank", "source_description": "", "loader": "", "identifier": "appearances", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"yearid": {"name": "yearid", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "teamid": {"name": "teamid", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "lgid": {"name": "lgid", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "playerid": {"name": "playerid", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "g_all": {"name": "g_all", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "gs": {"name": "gs", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "g_batting": {"name": "g_batting", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "g_defense": {"name": "g_defense", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "g_p": {"name": "g_p", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "g_c": {"name": "g_c", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "g_1b": {"name": "g_1b", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "g_2b": {"name": "g_2b", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "g_3b": {"name": "g_3b", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "g_ss": {"name": "g_ss", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "g_lf": {"name": "g_lf", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "g_cf": {"name": "g_cf", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "g_rf": {"name": "g_rf", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "g_of": {"name": "g_of", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "g_dh": {"name": "g_dh", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "g_ph": {"name": "g_ph", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "g_pr": {"name": "g_pr", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"bc\".\"baseballdatabank\".\"appearances\"", "created_at": 1702281449.5768871}, "source.baseball_computer.baseballdatabank.batting": {"database": "bc", "schema": "baseballdatabank", "name": "batting", "resource_type": "source", "package_name": "baseball_computer", "path": "models/staging/baseballdatabank/source.yml", "original_file_path": "models/staging/baseballdatabank/source.yml", "unique_id": "source.baseball_computer.baseballdatabank.batting", "fqn": ["baseball_computer", "staging", "baseballdatabank", "baseballdatabank", "batting"], "source_name": "baseballdatabank", "source_description": "", "loader": "", "identifier": "batting", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"playerid": {"name": "playerid", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "yearid": {"name": "yearid", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "stint": {"name": "stint", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "teamid": {"name": "teamid", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "lgid": {"name": "lgid", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "g": {"name": "g", "description": "", "meta": {}, "data_type": "USMALLINT", "constraints": [], "quote": null, "tags": []}, "ab": {"name": "ab", "description": "", "meta": {}, "data_type": "USMALLINT", "constraints": [], "quote": null, "tags": []}, "r": {"name": "r", "description": "", "meta": {}, "data_type": "USMALLINT", "constraints": [], "quote": null, "tags": []}, "h": {"name": "h", "description": "", "meta": {}, "data_type": "USMALLINT", "constraints": [], "quote": null, "tags": []}, "_2b": {"name": "_2b", "description": "", "meta": {}, "data_type": "USMALLINT", "constraints": [], "quote": null, "tags": []}, "_3b": {"name": "_3b", "description": "", "meta": {}, "data_type": "USMALLINT", "constraints": [], "quote": null, "tags": []}, "hr": {"name": "hr", "description": "", "meta": {}, "data_type": "USMALLINT", "constraints": [], "quote": null, "tags": []}, "rbi": {"name": "rbi", "description": "", "meta": {}, "data_type": "USMALLINT", "constraints": [], "quote": null, "tags": []}, "sb": {"name": "sb", "description": "", "meta": {}, "data_type": "USMALLINT", "constraints": [], "quote": null, "tags": []}, "cs": {"name": "cs", "description": "", "meta": {}, "data_type": "USMALLINT", "constraints": [], "quote": null, "tags": []}, "bb": {"name": "bb", "description": "", "meta": {}, "data_type": "USMALLINT", "constraints": [], "quote": null, "tags": []}, "so": {"name": "so", "description": "", "meta": {}, "data_type": "USMALLINT", "constraints": [], "quote": null, "tags": []}, "ibb": {"name": "ibb", "description": "", "meta": {}, "data_type": "USMALLINT", "constraints": [], "quote": null, "tags": []}, "hbp": {"name": "hbp", "description": "", "meta": {}, "data_type": "USMALLINT", "constraints": [], "quote": null, "tags": []}, "sh": {"name": "sh", "description": "", "meta": {}, "data_type": "USMALLINT", "constraints": [], "quote": null, "tags": []}, "sf": {"name": "sf", "description": "", "meta": {}, "data_type": "USMALLINT", "constraints": [], "quote": null, "tags": []}, "gidp": {"name": "gidp", "description": "", "meta": {}, "data_type": "USMALLINT", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"bc\".\"baseballdatabank\".\"batting\"", "created_at": 1702281449.577021}, "source.baseball_computer.baseballdatabank.fielding": {"database": "bc", "schema": "baseballdatabank", "name": "fielding", "resource_type": "source", "package_name": "baseball_computer", "path": "models/staging/baseballdatabank/source.yml", "original_file_path": "models/staging/baseballdatabank/source.yml", "unique_id": "source.baseball_computer.baseballdatabank.fielding", "fqn": ["baseball_computer", "staging", "baseballdatabank", "baseballdatabank", "fielding"], "source_name": "baseballdatabank", "source_description": "", "loader": "", "identifier": "fielding", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"playerid": {"name": "playerid", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "yearid": {"name": "yearid", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "stint": {"name": "stint", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "teamid": {"name": "teamid", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "lgid": {"name": "lgid", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pos": {"name": "pos", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "g": {"name": "g", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "gs": {"name": "gs", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "innouts": {"name": "innouts", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "po": {"name": "po", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "a": {"name": "a", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "e": {"name": "e", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dp": {"name": "dp", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pb": {"name": "pb", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "wp": {"name": "wp", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sb": {"name": "sb", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cs": {"name": "cs", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "zr": {"name": "zr", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"bc\".\"baseballdatabank\".\"fielding\"", "created_at": 1702281449.577156}, "source.baseball_computer.baseballdatabank.pitching": {"database": "bc", "schema": "baseballdatabank", "name": "pitching", "resource_type": "source", "package_name": "baseball_computer", "path": "models/staging/baseballdatabank/source.yml", "original_file_path": "models/staging/baseballdatabank/source.yml", "unique_id": "source.baseball_computer.baseballdatabank.pitching", "fqn": ["baseball_computer", "staging", "baseballdatabank", "baseballdatabank", "pitching"], "source_name": "baseballdatabank", "source_description": "", "loader": "", "identifier": "pitching", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"playerid": {"name": "playerid", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "yearid": {"name": "yearid", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "stint": {"name": "stint", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "teamid": {"name": "teamid", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "lgid": {"name": "lgid", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "w": {"name": "w", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "l": {"name": "l", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "g": {"name": "g", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "gs": {"name": "gs", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cg": {"name": "cg", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sho": {"name": "sho", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sv": {"name": "sv", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ipouts": {"name": "ipouts", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "h": {"name": "h", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "er": {"name": "er", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hr": {"name": "hr", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bb": {"name": "bb", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "so": {"name": "so", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "baopp": {"name": "baopp", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "era": {"name": "era", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ibb": {"name": "ibb", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "wp": {"name": "wp", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hbp": {"name": "hbp", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bk": {"name": "bk", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bfp": {"name": "bfp", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "gf": {"name": "gf", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "r": {"name": "r", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sh": {"name": "sh", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sf": {"name": "sf", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "gidp": {"name": "gidp", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"bc\".\"baseballdatabank\".\"pitching\"", "created_at": 1702281449.577298}, "source.baseball_computer.baseballdatabank.people": {"database": "bc", "schema": "baseballdatabank", "name": "people", "resource_type": "source", "package_name": "baseball_computer", "path": "models/staging/baseballdatabank/source.yml", "original_file_path": "models/staging/baseballdatabank/source.yml", "unique_id": "source.baseball_computer.baseballdatabank.people", "fqn": ["baseball_computer", "staging", "baseballdatabank", "baseballdatabank", "people"], "source_name": "baseballdatabank", "source_description": "", "loader": "", "identifier": "people", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Biographical information on each player/umpire/manager.\n", "columns": {"playerid": {"name": "playerid", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "birthyear": {"name": "birthyear", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "birthmonth": {"name": "birthmonth", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "birthday": {"name": "birthday", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "birthcountry": {"name": "birthcountry", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "birthstate": {"name": "birthstate", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "birthcity": {"name": "birthcity", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "deathyear": {"name": "deathyear", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "deathmonth": {"name": "deathmonth", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "deathday": {"name": "deathday", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "deathcountry": {"name": "deathcountry", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "deathstate": {"name": "deathstate", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "deathcity": {"name": "deathcity", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "namefirst": {"name": "namefirst", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "namelast": {"name": "namelast", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "namegiven": {"name": "namegiven", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "weight": {"name": "weight", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "height": {"name": "height", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bats": {"name": "bats", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "throws": {"name": "throws", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "debut": {"name": "debut", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "finalgame": {"name": "finalgame", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "retro_id": {"name": "retro_id", "description": "", "meta": {}, "data_type": "PLAYER_ID", "constraints": [], "quote": null, "tags": []}, "bbrefid": {"name": "bbrefid", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {"primary_keys": ["player_id"]}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"bc\".\"baseballdatabank\".\"people\"", "created_at": 1702281449.582356}, "source.baseball_computer.baseballdatabank.fielding_of": {"database": "bc", "schema": "baseballdatabank", "name": "fielding_of", "resource_type": "source", "package_name": "baseball_computer", "path": "models/staging/baseballdatabank/source.yml", "original_file_path": "models/staging/baseballdatabank/source.yml", "unique_id": "source.baseball_computer.baseballdatabank.fielding_of", "fqn": ["baseball_computer", "staging", "baseballdatabank", "baseballdatabank", "fielding_of"], "source_name": "baseballdatabank", "source_description": "", "loader": "", "identifier": "fielding_of", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "LF-CF-RF game splits\n", "columns": {"playerid": {"name": "playerid", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "yearid": {"name": "yearid", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "stint": {"name": "stint", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "glf": {"name": "glf", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "gcf": {"name": "gcf", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "grf": {"name": "grf", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {"primary_keys": ["player_id"]}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"bc\".\"baseballdatabank\".\"fielding_of\"", "created_at": 1702281449.582473}, "source.baseball_computer.box_score.box_score_batting_lines": {"database": "bc", "schema": "box_score", "name": "box_score_batting_lines", "resource_type": "source", "package_name": "baseball_computer", "path": "models/staging/box_score/source.yml", "original_file_path": "models/staging/box_score/source.yml", "unique_id": "source.baseball_computer.box_score.box_score_batting_lines", "fqn": ["baseball_computer", "staging", "box_score", "box_score", "box_score_batting_lines"], "source_name": "box_score", "source_description": "These datasets are directly pulled from Retrosheet's box score files.\nOnly games without original play-by-play accounts will have box score data;\ngames with derived play-by-play accounts will have both box score and\nplay-by-play data. In those dual-account games, box score data can still\nbe useful for compiling fielding stats that cannot be directly attributed\nto a play.\n\nUnlike the play-by-play data, which is heavily parsed\nduring data extraction, box score data is largely passed through\nwithout any enrichment or modification. Game-level metadata has the same shape\nas the game-level data from play-by-play games. Other tables come directly\nfrom a specific type of row in the box score file. These types\ncan be divided into two groups:\n\"lines\", which roll up statistics to a player or team, and \"events\",\nwhich give more detailed information on notable plays.\n", "loader": "", "identifier": "box_score_batting_lines", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"game_id": {"name": "game_id", "description": "", "meta": {}, "data_type": "GAME_ID", "constraints": [], "quote": null, "tags": []}, "batter_id": {"name": "batter_id", "description": "", "meta": {}, "data_type": "PLAYER_ID", "constraints": [], "quote": null, "tags": []}, "side": {"name": "side", "description": "", "meta": {}, "data_type": "SIDE", "constraints": [], "quote": null, "tags": []}, "lineup_position": {"name": "lineup_position", "description": "", "meta": {}, "data_type": "UTINYINT", "constraints": [], "quote": null, "tags": []}, "nth_player_at_position": {"name": "nth_player_at_position", "description": "", "meta": {}, "data_type": "UTINYINT", "constraints": [], "quote": null, "tags": []}, "at_bats": {"name": "at_bats", "description": "", "meta": {}, "data_type": "UTINYINT", "constraints": [], "quote": null, "tags": []}, "runs": {"name": "runs", "description": "", "meta": {}, "data_type": "UTINYINT", "constraints": [], "quote": null, "tags": []}, "hits": {"name": "hits", "description": "", "meta": {}, "data_type": "UTINYINT", "constraints": [], "quote": null, "tags": []}, "doubles": {"name": "doubles", "description": "", "meta": {}, "data_type": "UTINYINT", "constraints": [], "quote": null, "tags": []}, "triples": {"name": "triples", "description": "", "meta": {}, "data_type": "UTINYINT", "constraints": [], "quote": null, "tags": []}, "home_runs": {"name": "home_runs", "description": "", "meta": {}, "data_type": "UTINYINT", "constraints": [], "quote": null, "tags": []}, "rbi": {"name": "rbi", "description": "", "meta": {}, "data_type": "UTINYINT", "constraints": [], "quote": null, "tags": []}, "sacrifice_hits": {"name": "sacrifice_hits", "description": "", "meta": {}, "data_type": "UTINYINT", "constraints": [], "quote": null, "tags": []}, "sacrifice_flies": {"name": "sacrifice_flies", "description": "", "meta": {}, "data_type": "UTINYINT", "constraints": [], "quote": null, "tags": []}, "hit_by_pitch": {"name": "hit_by_pitch", "description": "", "meta": {}, "data_type": "UTINYINT", "constraints": [], "quote": null, "tags": []}, "walks": {"name": "walks", "description": "", "meta": {}, "data_type": "UTINYINT", "constraints": [], "quote": null, "tags": []}, "intentional_walks": {"name": "intentional_walks", "description": "", "meta": {}, "data_type": "UTINYINT", "constraints": [], "quote": null, "tags": []}, "strikeouts": {"name": "strikeouts", "description": "", "meta": {}, "data_type": "UTINYINT", "constraints": [], "quote": null, "tags": []}, "stolen_bases": {"name": "stolen_bases", "description": "", "meta": {}, "data_type": "UTINYINT", "constraints": [], "quote": null, "tags": []}, "caught_stealing": {"name": "caught_stealing", "description": "", "meta": {}, "data_type": "UTINYINT", "constraints": [], "quote": null, "tags": []}, "grounded_into_double_plays": {"name": "grounded_into_double_plays", "description": "", "meta": {}, "data_type": "UTINYINT", "constraints": [], "quote": null, "tags": []}, "reached_on_interference": {"name": "reached_on_interference", "description": "", "meta": {}, "data_type": "UTINYINT", "constraints": [], "quote": null, "tags": []}}, "meta": {"primary_keys": ["game_id", "batter_id", "lineup_position"]}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"bc\".\"box_score\".\"box_score_batting_lines\"", "created_at": 1702281449.590046}, "source.baseball_computer.box_score.box_score_caught_stealing": {"database": "bc", "schema": "box_score", "name": "box_score_caught_stealing", "resource_type": "source", "package_name": "baseball_computer", "path": "models/staging/box_score/source.yml", "original_file_path": "models/staging/box_score/source.yml", "unique_id": "source.baseball_computer.box_score.box_score_caught_stealing", "fqn": ["baseball_computer", "staging", "box_score", "box_score", "box_score_caught_stealing"], "source_name": "box_score", "source_description": "These datasets are directly pulled from Retrosheet's box score files.\nOnly games without original play-by-play accounts will have box score data;\ngames with derived play-by-play accounts will have both box score and\nplay-by-play data. In those dual-account games, box score data can still\nbe useful for compiling fielding stats that cannot be directly attributed\nto a play.\n\nUnlike the play-by-play data, which is heavily parsed\nduring data extraction, box score data is largely passed through\nwithout any enrichment or modification. Game-level metadata has the same shape\nas the game-level data from play-by-play games. Other tables come directly\nfrom a specific type of row in the box score file. These types\ncan be divided into two groups:\n\"lines\", which roll up statistics to a player or team, and \"events\",\nwhich give more detailed information on notable plays.\n", "loader": "", "identifier": "box_score_caught_stealing", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"game_id": {"name": "game_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "running_side": {"name": "running_side", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "runner_id": {"name": "runner_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pitcher_id": {"name": "pitcher_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "catcher_id": {"name": "catcher_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "inning": {"name": "inning", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"bc\".\"box_score\".\"box_score_caught_stealing\"", "created_at": 1702281449.5940008}, "source.baseball_computer.box_score.box_score_double_plays": {"database": "bc", "schema": "box_score", "name": "box_score_double_plays", "resource_type": "source", "package_name": "baseball_computer", "path": "models/staging/box_score/source.yml", "original_file_path": "models/staging/box_score/source.yml", "unique_id": "source.baseball_computer.box_score.box_score_double_plays", "fqn": ["baseball_computer", "staging", "box_score", "box_score", "box_score_double_plays"], "source_name": "box_score", "source_description": "These datasets are directly pulled from Retrosheet's box score files.\nOnly games without original play-by-play accounts will have box score data;\ngames with derived play-by-play accounts will have both box score and\nplay-by-play data. In those dual-account games, box score data can still\nbe useful for compiling fielding stats that cannot be directly attributed\nto a play.\n\nUnlike the play-by-play data, which is heavily parsed\nduring data extraction, box score data is largely passed through\nwithout any enrichment or modification. Game-level metadata has the same shape\nas the game-level data from play-by-play games. Other tables come directly\nfrom a specific type of row in the box score file. These types\ncan be divided into two groups:\n\"lines\", which roll up statistics to a player or team, and \"events\",\nwhich give more detailed information on notable plays.\n", "loader": "", "identifier": "box_score_double_plays", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"game_id": {"name": "game_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "defense_side": {"name": "defense_side", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "fielders": {"name": "fielders", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"bc\".\"box_score\".\"box_score_double_plays\"", "created_at": 1702281449.596509}, "source.baseball_computer.box_score.box_score_fielding_lines": {"database": "bc", "schema": "box_score", "name": "box_score_fielding_lines", "resource_type": "source", "package_name": "baseball_computer", "path": "models/staging/box_score/source.yml", "original_file_path": "models/staging/box_score/source.yml", "unique_id": "source.baseball_computer.box_score.box_score_fielding_lines", "fqn": ["baseball_computer", "staging", "box_score", "box_score", "box_score_fielding_lines"], "source_name": "box_score", "source_description": "These datasets are directly pulled from Retrosheet's box score files.\nOnly games without original play-by-play accounts will have box score data;\ngames with derived play-by-play accounts will have both box score and\nplay-by-play data. In those dual-account games, box score data can still\nbe useful for compiling fielding stats that cannot be directly attributed\nto a play.\n\nUnlike the play-by-play data, which is heavily parsed\nduring data extraction, box score data is largely passed through\nwithout any enrichment or modification. Game-level metadata has the same shape\nas the game-level data from play-by-play games. Other tables come directly\nfrom a specific type of row in the box score file. These types\ncan be divided into two groups:\n\"lines\", which roll up statistics to a player or team, and \"events\",\nwhich give more detailed information on notable plays.\n", "loader": "", "identifier": "box_score_fielding_lines", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"game_id": {"name": "game_id", "description": "", "meta": {}, "data_type": "GAME_ID", "constraints": [], "quote": null, "tags": []}, "fielder_id": {"name": "fielder_id", "description": "", "meta": {}, "data_type": "PLAYER_ID", "constraints": [], "quote": null, "tags": []}, "side": {"name": "side", "description": "", "meta": {}, "data_type": "SIDE", "constraints": [], "quote": null, "tags": []}, "fielding_position": {"name": "fielding_position", "description": "", "meta": {}, "data_type": "UTINYINT", "constraints": [], "quote": null, "tags": []}, "nth_position_played_by_player": {"name": "nth_position_played_by_player", "description": "", "meta": {}, "data_type": "UTINYINT", "constraints": [], "quote": null, "tags": []}, "outs_played": {"name": "outs_played", "description": "", "meta": {}, "data_type": "UTINYINT", "constraints": [], "quote": null, "tags": []}, "putouts": {"name": "putouts", "description": "", "meta": {}, "data_type": "UTINYINT", "constraints": [], "quote": null, "tags": []}, "assists": {"name": "assists", "description": "", "meta": {}, "data_type": "UTINYINT", "constraints": [], "quote": null, "tags": []}, "errors": {"name": "errors", "description": "", "meta": {}, "data_type": "UTINYINT", "constraints": [], "quote": null, "tags": []}, "double_plays": {"name": "double_plays", "description": "", "meta": {}, "data_type": "UTINYINT", "constraints": [], "quote": null, "tags": []}, "triple_plays": {"name": "triple_plays", "description": "", "meta": {}, "data_type": "UTINYINT", "constraints": [], "quote": null, "tags": []}, "passed_balls": {"name": "passed_balls", "description": "", "meta": {}, "data_type": "UTINYINT", "constraints": [], "quote": null, "tags": []}}, "meta": {"primary_keys": ["game_id", "fielder_id", "fielding_position"]}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"bc\".\"box_score\".\"box_score_fielding_lines\"", "created_at": 1702281449.602755}, "source.baseball_computer.box_score.box_score_games": {"database": "bc", "schema": "box_score", "name": "box_score_games", "resource_type": "source", "package_name": "baseball_computer", "path": "models/staging/box_score/source.yml", "original_file_path": "models/staging/box_score/source.yml", "unique_id": "source.baseball_computer.box_score.box_score_games", "fqn": ["baseball_computer", "staging", "box_score", "box_score", "box_score_games"], "source_name": "box_score", "source_description": "These datasets are directly pulled from Retrosheet's box score files.\nOnly games without original play-by-play accounts will have box score data;\ngames with derived play-by-play accounts will have both box score and\nplay-by-play data. In those dual-account games, box score data can still\nbe useful for compiling fielding stats that cannot be directly attributed\nto a play.\n\nUnlike the play-by-play data, which is heavily parsed\nduring data extraction, box score data is largely passed through\nwithout any enrichment or modification. Game-level metadata has the same shape\nas the game-level data from play-by-play games. Other tables come directly\nfrom a specific type of row in the box score file. These types\ncan be divided into two groups:\n\"lines\", which roll up statistics to a player or team, and \"events\",\nwhich give more detailed information on notable plays.\n", "loader": "", "identifier": "box_score_games", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"game_id": {"name": "game_id", "description": "", "meta": {}, "data_type": "GAME_ID", "constraints": [], "quote": null, "tags": []}, "game_key": {"name": "game_key", "description": "", "meta": {}, "data_type": "UINTEGER", "constraints": [], "quote": null, "tags": []}, "date": {"name": "date", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "start_time": {"name": "start_time", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "doubleheader_status": {"name": "doubleheader_status", "description": "", "meta": {}, "data_type": "DOUBLEHEADER_STATUS", "constraints": [], "quote": null, "tags": []}, "time_of_day": {"name": "time_of_day", "description": "", "meta": {}, "data_type": "TIME_OF_DAY", "constraints": [], "quote": null, "tags": []}, "game_type": {"name": "game_type", "description": "", "meta": {}, "data_type": "GAME_TYPE", "constraints": [], "quote": null, "tags": []}, "bat_first_side": {"name": "bat_first_side", "description": "", "meta": {}, "data_type": "SIDE", "constraints": [], "quote": null, "tags": []}, "sky": {"name": "sky", "description": "", "meta": {}, "data_type": "SKY", "constraints": [], "quote": null, "tags": []}, "field_condition": {"name": "field_condition", "description": "", "meta": {}, "data_type": "FIELD_CONDITION", "constraints": [], "quote": null, "tags": []}, "precipitation": {"name": "precipitation", "description": "", "meta": {}, "data_type": "PRECIPITATION", "constraints": [], "quote": null, "tags": []}, "wind_direction": {"name": "wind_direction", "description": "", "meta": {}, "data_type": "WIND_DIRECTION", "constraints": [], "quote": null, "tags": []}, "park_id": {"name": "park_id", "description": "", "meta": {}, "data_type": "PARK_ID", "constraints": [], "quote": null, "tags": []}, "temperature_fahrenheit": {"name": "temperature_fahrenheit", "description": "", "meta": {}, "data_type": "INT1", "constraints": [], "quote": null, "tags": []}, "attendance": {"name": "attendance", "description": "", "meta": {}, "data_type": "INT", "constraints": [], "quote": null, "tags": []}, "wind_speed_mph": {"name": "wind_speed_mph", "description": "", "meta": {}, "data_type": "utinyint", "constraints": [], "quote": null, "tags": []}, "use_dh": {"name": "use_dh", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "winning_pitcher": {"name": "winning_pitcher", "description": "", "meta": {}, "data_type": "PLAYER_ID", "constraints": [], "quote": null, "tags": []}, "losing_pitcher": {"name": "losing_pitcher", "description": "", "meta": {}, "data_type": "PLAYER_ID", "constraints": [], "quote": null, "tags": []}, "save_pitcher": {"name": "save_pitcher", "description": "", "meta": {}, "data_type": "PLAYER_ID", "constraints": [], "quote": null, "tags": []}, "game_winning_rbi": {"name": "game_winning_rbi", "description": "", "meta": {}, "data_type": "PLAYER_ID", "constraints": [], "quote": null, "tags": []}, "time_of_game_minutes": {"name": "time_of_game_minutes", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "protest_info": {"name": "protest_info", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "completion_info": {"name": "completion_info", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "scorer": {"name": "scorer", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "scoring_method": {"name": "scoring_method", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "inputter": {"name": "inputter", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "translator": {"name": "translator", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "date_inputted": {"name": "date_inputted", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "date_edited": {"name": "date_edited", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_type": {"name": "account_type", "description": "", "meta": {}, "data_type": "ACCOUNT_TYPE", "constraints": [], "quote": null, "tags": []}, "away_team_id": {"name": "away_team_id", "description": "", "meta": {}, "data_type": "TEAM_ID", "constraints": [], "quote": null, "tags": []}, "home_team_id": {"name": "home_team_id", "description": "", "meta": {}, "data_type": "TEAM_ID", "constraints": [], "quote": null, "tags": []}, "umpire_home_id": {"name": "umpire_home_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "umpire_first_id": {"name": "umpire_first_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "umpire_second_id": {"name": "umpire_second_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "umpire_third_id": {"name": "umpire_third_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "umpire_left_id": {"name": "umpire_left_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "umpire_right_id": {"name": "umpire_right_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {"primary_keys": ["game_id"]}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"bc\".\"box_score\".\"box_score_games\"", "created_at": 1702281449.626854}, "source.baseball_computer.box_score.box_score_hit_by_pitches": {"database": "bc", "schema": "box_score", "name": "box_score_hit_by_pitches", "resource_type": "source", "package_name": "baseball_computer", "path": "models/staging/box_score/source.yml", "original_file_path": "models/staging/box_score/source.yml", "unique_id": "source.baseball_computer.box_score.box_score_hit_by_pitches", "fqn": ["baseball_computer", "staging", "box_score", "box_score", "box_score_hit_by_pitches"], "source_name": "box_score", "source_description": "These datasets are directly pulled from Retrosheet's box score files.\nOnly games without original play-by-play accounts will have box score data;\ngames with derived play-by-play accounts will have both box score and\nplay-by-play data. In those dual-account games, box score data can still\nbe useful for compiling fielding stats that cannot be directly attributed\nto a play.\n\nUnlike the play-by-play data, which is heavily parsed\nduring data extraction, box score data is largely passed through\nwithout any enrichment or modification. Game-level metadata has the same shape\nas the game-level data from play-by-play games. Other tables come directly\nfrom a specific type of row in the box score file. These types\ncan be divided into two groups:\n\"lines\", which roll up statistics to a player or team, and \"events\",\nwhich give more detailed information on notable plays.\n", "loader": "", "identifier": "box_score_hit_by_pitches", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"game_id": {"name": "game_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pitching_side": {"name": "pitching_side", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pitcher_id": {"name": "pitcher_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "batter_id": {"name": "batter_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"bc\".\"box_score\".\"box_score_hit_by_pitches\"", "created_at": 1702281449.626963}, "source.baseball_computer.box_score.box_score_home_runs": {"database": "bc", "schema": "box_score", "name": "box_score_home_runs", "resource_type": "source", "package_name": "baseball_computer", "path": "models/staging/box_score/source.yml", "original_file_path": "models/staging/box_score/source.yml", "unique_id": "source.baseball_computer.box_score.box_score_home_runs", "fqn": ["baseball_computer", "staging", "box_score", "box_score", "box_score_home_runs"], "source_name": "box_score", "source_description": "These datasets are directly pulled from Retrosheet's box score files.\nOnly games without original play-by-play accounts will have box score data;\ngames with derived play-by-play accounts will have both box score and\nplay-by-play data. In those dual-account games, box score data can still\nbe useful for compiling fielding stats that cannot be directly attributed\nto a play.\n\nUnlike the play-by-play data, which is heavily parsed\nduring data extraction, box score data is largely passed through\nwithout any enrichment or modification. Game-level metadata has the same shape\nas the game-level data from play-by-play games. Other tables come directly\nfrom a specific type of row in the box score file. These types\ncan be divided into two groups:\n\"lines\", which roll up statistics to a player or team, and \"events\",\nwhich give more detailed information on notable plays.\n", "loader": "", "identifier": "box_score_home_runs", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"game_id": {"name": "game_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "batting_side": {"name": "batting_side", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "batter_id": {"name": "batter_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pitcher_id": {"name": "pitcher_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "inning": {"name": "inning", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "runners_on": {"name": "runners_on", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "outs": {"name": "outs", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"bc\".\"box_score\".\"box_score_home_runs\"", "created_at": 1702281449.6320279}, "source.baseball_computer.box_score.box_score_pinch_hitting_lines": {"database": "bc", "schema": "box_score", "name": "box_score_pinch_hitting_lines", "resource_type": "source", "package_name": "baseball_computer", "path": "models/staging/box_score/source.yml", "original_file_path": "models/staging/box_score/source.yml", "unique_id": "source.baseball_computer.box_score.box_score_pinch_hitting_lines", "fqn": ["baseball_computer", "staging", "box_score", "box_score", "box_score_pinch_hitting_lines"], "source_name": "box_score", "source_description": "These datasets are directly pulled from Retrosheet's box score files.\nOnly games without original play-by-play accounts will have box score data;\ngames with derived play-by-play accounts will have both box score and\nplay-by-play data. In those dual-account games, box score data can still\nbe useful for compiling fielding stats that cannot be directly attributed\nto a play.\n\nUnlike the play-by-play data, which is heavily parsed\nduring data extraction, box score data is largely passed through\nwithout any enrichment or modification. Game-level metadata has the same shape\nas the game-level data from play-by-play games. Other tables come directly\nfrom a specific type of row in the box score file. These types\ncan be divided into two groups:\n\"lines\", which roll up statistics to a player or team, and \"events\",\nwhich give more detailed information on notable plays.\n", "loader": "", "identifier": "box_score_pinch_hitting_lines", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"game_id": {"name": "game_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pinch_hitter_id": {"name": "pinch_hitter_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "inning": {"name": "inning", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "side": {"name": "side", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "at_bats": {"name": "at_bats", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "runs": {"name": "runs", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hits": {"name": "hits", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "doubles": {"name": "doubles", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "triples": {"name": "triples", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_runs": {"name": "home_runs", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rbi": {"name": "rbi", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sacrifice_hits": {"name": "sacrifice_hits", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sacrifice_flies": {"name": "sacrifice_flies", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hit_by_pitch": {"name": "hit_by_pitch", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "walks": {"name": "walks", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "intentional_walks": {"name": "intentional_walks", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "strikeouts": {"name": "strikeouts", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "stolen_bases": {"name": "stolen_bases", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "caught_stealing": {"name": "caught_stealing", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "grounded_into_double_plays": {"name": "grounded_into_double_plays", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "reached_on_interference": {"name": "reached_on_interference", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {"primary_keys": ["game_id", "pinch_hitter_id"]}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"bc\".\"box_score\".\"box_score_pinch_hitting_lines\"", "created_at": 1702281449.635946}, "source.baseball_computer.box_score.box_score_pinch_running_lines": {"database": "bc", "schema": "box_score", "name": "box_score_pinch_running_lines", "resource_type": "source", "package_name": "baseball_computer", "path": "models/staging/box_score/source.yml", "original_file_path": "models/staging/box_score/source.yml", "unique_id": "source.baseball_computer.box_score.box_score_pinch_running_lines", "fqn": ["baseball_computer", "staging", "box_score", "box_score", "box_score_pinch_running_lines"], "source_name": "box_score", "source_description": "These datasets are directly pulled from Retrosheet's box score files.\nOnly games without original play-by-play accounts will have box score data;\ngames with derived play-by-play accounts will have both box score and\nplay-by-play data. In those dual-account games, box score data can still\nbe useful for compiling fielding stats that cannot be directly attributed\nto a play.\n\nUnlike the play-by-play data, which is heavily parsed\nduring data extraction, box score data is largely passed through\nwithout any enrichment or modification. Game-level metadata has the same shape\nas the game-level data from play-by-play games. Other tables come directly\nfrom a specific type of row in the box score file. These types\ncan be divided into two groups:\n\"lines\", which roll up statistics to a player or team, and \"events\",\nwhich give more detailed information on notable plays.\n", "loader": "", "identifier": "box_score_pinch_running_lines", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"game_id": {"name": "game_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pinch_runner_id": {"name": "pinch_runner_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "inning": {"name": "inning", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "side": {"name": "side", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "runs": {"name": "runs", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "stolen_bases": {"name": "stolen_bases", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "caught_stealing": {"name": "caught_stealing", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {"primary_keys": ["game_id", "pinch_runner_id"]}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"bc\".\"box_score\".\"box_score_pinch_running_lines\"", "created_at": 1702281449.638398}, "source.baseball_computer.box_score.box_score_pitching_lines": {"database": "bc", "schema": "box_score", "name": "box_score_pitching_lines", "resource_type": "source", "package_name": "baseball_computer", "path": "models/staging/box_score/source.yml", "original_file_path": "models/staging/box_score/source.yml", "unique_id": "source.baseball_computer.box_score.box_score_pitching_lines", "fqn": ["baseball_computer", "staging", "box_score", "box_score", "box_score_pitching_lines"], "source_name": "box_score", "source_description": "These datasets are directly pulled from Retrosheet's box score files.\nOnly games without original play-by-play accounts will have box score data;\ngames with derived play-by-play accounts will have both box score and\nplay-by-play data. In those dual-account games, box score data can still\nbe useful for compiling fielding stats that cannot be directly attributed\nto a play.\n\nUnlike the play-by-play data, which is heavily parsed\nduring data extraction, box score data is largely passed through\nwithout any enrichment or modification. Game-level metadata has the same shape\nas the game-level data from play-by-play games. Other tables come directly\nfrom a specific type of row in the box score file. These types\ncan be divided into two groups:\n\"lines\", which roll up statistics to a player or team, and \"events\",\nwhich give more detailed information on notable plays.\n", "loader": "", "identifier": "box_score_pitching_lines", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"game_id": {"name": "game_id", "description": "", "meta": {}, "data_type": "GAME_ID", "constraints": [], "quote": null, "tags": []}, "pitcher_id": {"name": "pitcher_id", "description": "", "meta": {}, "data_type": "PLAYER_ID", "constraints": [], "quote": null, "tags": []}, "side": {"name": "side", "description": "", "meta": {}, "data_type": "SIDE", "constraints": [], "quote": null, "tags": []}, "nth_pitcher": {"name": "nth_pitcher", "description": "", "meta": {}, "data_type": "UTINYINT", "constraints": [], "quote": null, "tags": []}, "outs_recorded": {"name": "outs_recorded", "description": "", "meta": {}, "data_type": "UTINYINT", "constraints": [], "quote": null, "tags": []}, "no_out_batters": {"name": "no_out_batters", "description": "", "meta": {}, "data_type": "UTINYINT", "constraints": [], "quote": null, "tags": []}, "batters_faced": {"name": "batters_faced", "description": "", "meta": {}, "data_type": "UTINYINT", "constraints": [], "quote": null, "tags": []}, "hits": {"name": "hits", "description": "", "meta": {}, "data_type": "UTINYINT", "constraints": [], "quote": null, "tags": []}, "doubles": {"name": "doubles", "description": "", "meta": {}, "data_type": "UTINYINT", "constraints": [], "quote": null, "tags": []}, "triples": {"name": "triples", "description": "", "meta": {}, "data_type": "UTINYINT", "constraints": [], "quote": null, "tags": []}, "home_runs": {"name": "home_runs", "description": "", "meta": {}, "data_type": "UTINYINT", "constraints": [], "quote": null, "tags": []}, "runs": {"name": "runs", "description": "", "meta": {}, "data_type": "UTINYINT", "constraints": [], "quote": null, "tags": []}, "earned_runs": {"name": "earned_runs", "description": "", "meta": {}, "data_type": "UTINYINT", "constraints": [], "quote": null, "tags": []}, "walks": {"name": "walks", "description": "", "meta": {}, "data_type": "UTINYINT", "constraints": [], "quote": null, "tags": []}, "intentional_walks": {"name": "intentional_walks", "description": "", "meta": {}, "data_type": "UTINYINT", "constraints": [], "quote": null, "tags": []}, "strikeouts": {"name": "strikeouts", "description": "", "meta": {}, "data_type": "UTINYINT", "constraints": [], "quote": null, "tags": []}, "hit_batsmen": {"name": "hit_batsmen", "description": "", "meta": {}, "data_type": "UTINYINT", "constraints": [], "quote": null, "tags": []}, "wild_pitches": {"name": "wild_pitches", "description": "", "meta": {}, "data_type": "UTINYINT", "constraints": [], "quote": null, "tags": []}, "balks": {"name": "balks", "description": "", "meta": {}, "data_type": "UTINYINT", "constraints": [], "quote": null, "tags": []}, "sacrifice_hits": {"name": "sacrifice_hits", "description": "", "meta": {}, "data_type": "UTINYINT", "constraints": [], "quote": null, "tags": []}, "sacrifice_flies": {"name": "sacrifice_flies", "description": "", "meta": {}, "data_type": "UTINYINT", "constraints": [], "quote": null, "tags": []}}, "meta": {"primary_keys": ["game_id", "pitcher_id", "nth_pitcher"]}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"bc\".\"box_score\".\"box_score_pitching_lines\"", "created_at": 1702281449.6385548}, "source.baseball_computer.box_score.box_score_stolen_bases": {"database": "bc", "schema": "box_score", "name": "box_score_stolen_bases", "resource_type": "source", "package_name": "baseball_computer", "path": "models/staging/box_score/source.yml", "original_file_path": "models/staging/box_score/source.yml", "unique_id": "source.baseball_computer.box_score.box_score_stolen_bases", "fqn": ["baseball_computer", "staging", "box_score", "box_score", "box_score_stolen_bases"], "source_name": "box_score", "source_description": "These datasets are directly pulled from Retrosheet's box score files.\nOnly games without original play-by-play accounts will have box score data;\ngames with derived play-by-play accounts will have both box score and\nplay-by-play data. In those dual-account games, box score data can still\nbe useful for compiling fielding stats that cannot be directly attributed\nto a play.\n\nUnlike the play-by-play data, which is heavily parsed\nduring data extraction, box score data is largely passed through\nwithout any enrichment or modification. Game-level metadata has the same shape\nas the game-level data from play-by-play games. Other tables come directly\nfrom a specific type of row in the box score file. These types\ncan be divided into two groups:\n\"lines\", which roll up statistics to a player or team, and \"events\",\nwhich give more detailed information on notable plays.\n", "loader": "", "identifier": "box_score_stolen_bases", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"game_id": {"name": "game_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "running_side": {"name": "running_side", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "runner_id": {"name": "runner_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pitcher_id": {"name": "pitcher_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "catcher_id": {"name": "catcher_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "inning": {"name": "inning", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"bc\".\"box_score\".\"box_score_stolen_bases\"", "created_at": 1702281449.642375}, "source.baseball_computer.box_score.box_score_team_batting_lines": {"database": "bc", "schema": "box_score", "name": "box_score_team_batting_lines", "resource_type": "source", "package_name": "baseball_computer", "path": "models/staging/box_score/source.yml", "original_file_path": "models/staging/box_score/source.yml", "unique_id": "source.baseball_computer.box_score.box_score_team_batting_lines", "fqn": ["baseball_computer", "staging", "box_score", "box_score", "box_score_team_batting_lines"], "source_name": "box_score", "source_description": "These datasets are directly pulled from Retrosheet's box score files.\nOnly games without original play-by-play accounts will have box score data;\ngames with derived play-by-play accounts will have both box score and\nplay-by-play data. In those dual-account games, box score data can still\nbe useful for compiling fielding stats that cannot be directly attributed\nto a play.\n\nUnlike the play-by-play data, which is heavily parsed\nduring data extraction, box score data is largely passed through\nwithout any enrichment or modification. Game-level metadata has the same shape\nas the game-level data from play-by-play games. Other tables come directly\nfrom a specific type of row in the box score file. These types\ncan be divided into two groups:\n\"lines\", which roll up statistics to a player or team, and \"events\",\nwhich give more detailed information on notable plays.\n", "loader": "", "identifier": "box_score_team_batting_lines", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"game_id": {"name": "game_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "side": {"name": "side", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "at_bats": {"name": "at_bats", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "runs": {"name": "runs", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hits": {"name": "hits", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "doubles": {"name": "doubles", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "triples": {"name": "triples", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_runs": {"name": "home_runs", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rbi": {"name": "rbi", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sacrifice_hits": {"name": "sacrifice_hits", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sacrifice_flies": {"name": "sacrifice_flies", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hit_by_pitch": {"name": "hit_by_pitch", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "walks": {"name": "walks", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "intentional_walks": {"name": "intentional_walks", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "strikeouts": {"name": "strikeouts", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "stolen_bases": {"name": "stolen_bases", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "caught_stealing": {"name": "caught_stealing", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "grounded_into_double_plays": {"name": "grounded_into_double_plays", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "reached_on_interference": {"name": "reached_on_interference", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {"primary_keys": ["game_id", "side"]}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"bc\".\"box_score\".\"box_score_team_batting_lines\"", "created_at": 1702281449.648575}, "source.baseball_computer.box_score.box_score_team_fielding_lines": {"database": "bc", "schema": "box_score", "name": "box_score_team_fielding_lines", "resource_type": "source", "package_name": "baseball_computer", "path": "models/staging/box_score/source.yml", "original_file_path": "models/staging/box_score/source.yml", "unique_id": "source.baseball_computer.box_score.box_score_team_fielding_lines", "fqn": ["baseball_computer", "staging", "box_score", "box_score", "box_score_team_fielding_lines"], "source_name": "box_score", "source_description": "These datasets are directly pulled from Retrosheet's box score files.\nOnly games without original play-by-play accounts will have box score data;\ngames with derived play-by-play accounts will have both box score and\nplay-by-play data. In those dual-account games, box score data can still\nbe useful for compiling fielding stats that cannot be directly attributed\nto a play.\n\nUnlike the play-by-play data, which is heavily parsed\nduring data extraction, box score data is largely passed through\nwithout any enrichment or modification. Game-level metadata has the same shape\nas the game-level data from play-by-play games. Other tables come directly\nfrom a specific type of row in the box score file. These types\ncan be divided into two groups:\n\"lines\", which roll up statistics to a player or team, and \"events\",\nwhich give more detailed information on notable plays.\n", "loader": "", "identifier": "box_score_team_fielding_lines", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"game_id": {"name": "game_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "side": {"name": "side", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "outs_played": {"name": "outs_played", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "putouts": {"name": "putouts", "description": "", "meta": {}, "data_type": "UTINYINT", "constraints": [], "quote": null, "tags": []}, "assists": {"name": "assists", "description": "", "meta": {}, "data_type": "UTINYINT", "constraints": [], "quote": null, "tags": []}, "errors": {"name": "errors", "description": "", "meta": {}, "data_type": "UTINYINT", "constraints": [], "quote": null, "tags": []}, "double_plays": {"name": "double_plays", "description": "", "meta": {}, "data_type": "UTINYINT", "constraints": [], "quote": null, "tags": []}, "triple_plays": {"name": "triple_plays", "description": "", "meta": {}, "data_type": "UTINYINT", "constraints": [], "quote": null, "tags": []}, "passed_balls": {"name": "passed_balls", "description": "", "meta": {}, "data_type": "UTINYINT", "constraints": [], "quote": null, "tags": []}}, "meta": {"primary_keys": ["game_id", "side"]}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"bc\".\"box_score\".\"box_score_team_fielding_lines\"", "created_at": 1702281449.652203}, "source.baseball_computer.box_score.box_score_team_miscellaneous_lines": {"database": "bc", "schema": "box_score", "name": "box_score_team_miscellaneous_lines", "resource_type": "source", "package_name": "baseball_computer", "path": "models/staging/box_score/source.yml", "original_file_path": "models/staging/box_score/source.yml", "unique_id": "source.baseball_computer.box_score.box_score_team_miscellaneous_lines", "fqn": ["baseball_computer", "staging", "box_score", "box_score", "box_score_team_miscellaneous_lines"], "source_name": "box_score", "source_description": "These datasets are directly pulled from Retrosheet's box score files.\nOnly games without original play-by-play accounts will have box score data;\ngames with derived play-by-play accounts will have both box score and\nplay-by-play data. In those dual-account games, box score data can still\nbe useful for compiling fielding stats that cannot be directly attributed\nto a play.\n\nUnlike the play-by-play data, which is heavily parsed\nduring data extraction, box score data is largely passed through\nwithout any enrichment or modification. Game-level metadata has the same shape\nas the game-level data from play-by-play games. Other tables come directly\nfrom a specific type of row in the box score file. These types\ncan be divided into two groups:\n\"lines\", which roll up statistics to a player or team, and \"events\",\nwhich give more detailed information on notable plays.\n", "loader": "", "identifier": "box_score_team_miscellaneous_lines", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"game_id": {"name": "game_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "side": {"name": "side", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "left_on_base": {"name": "left_on_base", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "team_earned_runs": {"name": "team_earned_runs", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "double_plays_turned": {"name": "double_plays_turned", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "triple_plays_turned": {"name": "triple_plays_turned", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {"primary_keys": ["game_id", "side"]}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"bc\".\"box_score\".\"box_score_team_miscellaneous_lines\"", "created_at": 1702281449.6548731}, "source.baseball_computer.box_score.box_score_triple_plays": {"database": "bc", "schema": "box_score", "name": "box_score_triple_plays", "resource_type": "source", "package_name": "baseball_computer", "path": "models/staging/box_score/source.yml", "original_file_path": "models/staging/box_score/source.yml", "unique_id": "source.baseball_computer.box_score.box_score_triple_plays", "fqn": ["baseball_computer", "staging", "box_score", "box_score", "box_score_triple_plays"], "source_name": "box_score", "source_description": "These datasets are directly pulled from Retrosheet's box score files.\nOnly games without original play-by-play accounts will have box score data;\ngames with derived play-by-play accounts will have both box score and\nplay-by-play data. In those dual-account games, box score data can still\nbe useful for compiling fielding stats that cannot be directly attributed\nto a play.\n\nUnlike the play-by-play data, which is heavily parsed\nduring data extraction, box score data is largely passed through\nwithout any enrichment or modification. Game-level metadata has the same shape\nas the game-level data from play-by-play games. Other tables come directly\nfrom a specific type of row in the box score file. These types\ncan be divided into two groups:\n\"lines\", which roll up statistics to a player or team, and \"events\",\nwhich give more detailed information on notable plays.\n", "loader": "", "identifier": "box_score_triple_plays", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"game_id": {"name": "game_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "defense_side": {"name": "defense_side", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "fielders": {"name": "fielders", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"bc\".\"box_score\".\"box_score_triple_plays\"", "created_at": 1702281449.657297}, "source.baseball_computer.box_score.box_score_comments": {"database": "bc", "schema": "box_score", "name": "box_score_comments", "resource_type": "source", "package_name": "baseball_computer", "path": "models/staging/box_score/source.yml", "original_file_path": "models/staging/box_score/source.yml", "unique_id": "source.baseball_computer.box_score.box_score_comments", "fqn": ["baseball_computer", "staging", "box_score", "box_score", "box_score_comments"], "source_name": "box_score", "source_description": "These datasets are directly pulled from Retrosheet's box score files.\nOnly games without original play-by-play accounts will have box score data;\ngames with derived play-by-play accounts will have both box score and\nplay-by-play data. In those dual-account games, box score data can still\nbe useful for compiling fielding stats that cannot be directly attributed\nto a play.\n\nUnlike the play-by-play data, which is heavily parsed\nduring data extraction, box score data is largely passed through\nwithout any enrichment or modification. Game-level metadata has the same shape\nas the game-level data from play-by-play games. Other tables come directly\nfrom a specific type of row in the box score file. These types\ncan be divided into two groups:\n\"lines\", which roll up statistics to a player or team, and \"events\",\nwhich give more detailed information on notable plays.\n", "loader": "", "identifier": "box_score_comments", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"game_id": {"name": "game_id", "description": "", "meta": {}, "data_type": "GAME_ID", "constraints": [], "quote": null, "tags": []}, "sequence_id": {"name": "sequence_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "comment": {"name": "comment", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {"primary_keys": ["game_id", "sequence_id"]}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"bc\".\"box_score\".\"box_score_comments\"", "created_at": 1702281449.6611462}, "source.baseball_computer.box_score.box_score_line_scores": {"database": "bc", "schema": "box_score", "name": "box_score_line_scores", "resource_type": "source", "package_name": "baseball_computer", "path": "models/staging/box_score/source.yml", "original_file_path": "models/staging/box_score/source.yml", "unique_id": "source.baseball_computer.box_score.box_score_line_scores", "fqn": ["baseball_computer", "staging", "box_score", "box_score", "box_score_line_scores"], "source_name": "box_score", "source_description": "These datasets are directly pulled from Retrosheet's box score files.\nOnly games without original play-by-play accounts will have box score data;\ngames with derived play-by-play accounts will have both box score and\nplay-by-play data. In those dual-account games, box score data can still\nbe useful for compiling fielding stats that cannot be directly attributed\nto a play.\n\nUnlike the play-by-play data, which is heavily parsed\nduring data extraction, box score data is largely passed through\nwithout any enrichment or modification. Game-level metadata has the same shape\nas the game-level data from play-by-play games. Other tables come directly\nfrom a specific type of row in the box score file. These types\ncan be divided into two groups:\n\"lines\", which roll up statistics to a player or team, and \"events\",\nwhich give more detailed information on notable plays.\n", "loader": "", "identifier": "box_score_line_scores", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"bc\".\"box_score\".\"box_score_line_scores\"", "created_at": 1702281449.66125}, "source.baseball_computer.game.games": {"database": "bc", "schema": "game", "name": "games", "resource_type": "source", "package_name": "baseball_computer", "path": "models/staging/game/source.yml", "original_file_path": "models/staging/game/source.yml", "unique_id": "source.baseball_computer.game.games", "fqn": ["baseball_computer", "staging", "game", "game", "games"], "source_name": "game", "source_description": "", "loader": "", "identifier": "games", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"game_id": {"name": "game_id", "description": "", "meta": {}, "data_type": "GAME_ID", "constraints": [], "quote": null, "tags": []}, "game_key": {"name": "game_key", "description": "", "meta": {}, "data_type": "UINTEGER", "constraints": [], "quote": null, "tags": []}, "date": {"name": "date", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "start_time": {"name": "start_time", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "doubleheader_status": {"name": "doubleheader_status", "description": "", "meta": {}, "data_type": "DOUBLEHEADER_STATUS", "constraints": [], "quote": null, "tags": []}, "time_of_day": {"name": "time_of_day", "description": "", "meta": {}, "data_type": "TIME_OF_DAY", "constraints": [], "quote": null, "tags": []}, "game_type": {"name": "game_type", "description": "", "meta": {}, "data_type": "GAME_TYPE", "constraints": [], "quote": null, "tags": []}, "bat_first_side": {"name": "bat_first_side", "description": "", "meta": {}, "data_type": "SIDE", "constraints": [], "quote": null, "tags": []}, "sky": {"name": "sky", "description": "", "meta": {}, "data_type": "SKY", "constraints": [], "quote": null, "tags": []}, "field_condition": {"name": "field_condition", "description": "", "meta": {}, "data_type": "FIELD_CONDITION", "constraints": [], "quote": null, "tags": []}, "precipitation": {"name": "precipitation", "description": "", "meta": {}, "data_type": "PRECIPITATION", "constraints": [], "quote": null, "tags": []}, "wind_direction": {"name": "wind_direction", "description": "", "meta": {}, "data_type": "WIND_DIRECTION", "constraints": [], "quote": null, "tags": []}, "park_id": {"name": "park_id", "description": "", "meta": {}, "data_type": "PARK_ID", "constraints": [], "quote": null, "tags": []}, "temperature_fahrenheit": {"name": "temperature_fahrenheit", "description": "", "meta": {}, "data_type": "INT1", "constraints": [], "quote": null, "tags": []}, "attendance": {"name": "attendance", "description": "", "meta": {}, "data_type": "UINTEGER", "constraints": [], "quote": null, "tags": []}, "wind_speed_mph": {"name": "wind_speed_mph", "description": "", "meta": {}, "data_type": "UTINYINT", "constraints": [], "quote": null, "tags": []}, "use_dh": {"name": "use_dh", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "winning_pitcher": {"name": "winning_pitcher", "description": "", "meta": {}, "data_type": "PLAYER_ID", "constraints": [], "quote": null, "tags": []}, "losing_pitcher": {"name": "losing_pitcher", "description": "", "meta": {}, "data_type": "PLAYER_ID", "constraints": [], "quote": null, "tags": []}, "save_pitcher": {"name": "save_pitcher", "description": "", "meta": {}, "data_type": "PLAYER_ID", "constraints": [], "quote": null, "tags": []}, "game_winning_rbi": {"name": "game_winning_rbi", "description": "", "meta": {}, "data_type": "PLAYER_ID", "constraints": [], "quote": null, "tags": []}, "time_of_game_minutes": {"name": "time_of_game_minutes", "description": "", "meta": {}, "data_type": "USMALLINT", "constraints": [], "quote": null, "tags": []}, "protest_info": {"name": "protest_info", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "completion_info": {"name": "completion_info", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "scorer": {"name": "scorer", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "scoring_method": {"name": "scoring_method", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "inputter": {"name": "inputter", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "translator": {"name": "translator", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "date_inputted": {"name": "date_inputted", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "date_edited": {"name": "date_edited", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_type": {"name": "account_type", "description": "", "meta": {}, "data_type": "ACCOUNT_TYPE", "constraints": [], "quote": null, "tags": []}, "filename": {"name": "filename", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "away_team_id": {"name": "away_team_id", "description": "", "meta": {}, "data_type": "TEAM_ID", "constraints": [], "quote": null, "tags": []}, "home_team_id": {"name": "home_team_id", "description": "", "meta": {}, "data_type": "TEAM_ID", "constraints": [], "quote": null, "tags": []}, "umpire_home_id": {"name": "umpire_home_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "umpire_first_id": {"name": "umpire_first_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "umpire_second_id": {"name": "umpire_second_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "umpire_third_id": {"name": "umpire_third_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "umpire_left_id": {"name": "umpire_left_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "umpire_right_id": {"name": "umpire_right_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {"primary_keys": ["game_id"]}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"bc\".\"game\".\"games\"", "created_at": 1702281449.685801}, "source.baseball_computer.game.game_earned_runs": {"database": "bc", "schema": "game", "name": "game_earned_runs", "resource_type": "source", "package_name": "baseball_computer", "path": "models/staging/game/source.yml", "original_file_path": "models/staging/game/source.yml", "unique_id": "source.baseball_computer.game.game_earned_runs", "fqn": ["baseball_computer", "staging", "game", "game", "game_earned_runs"], "source_name": "game", "source_description": "", "loader": "", "identifier": "game_earned_runs", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"game_id": {"name": "game_id", "description": "", "meta": {}, "data_type": "GAME_ID", "constraints": [], "quote": null, "tags": []}, "player_id": {"name": "player_id", "description": "", "meta": {}, "data_type": "PLAYER_ID", "constraints": [], "quote": null, "tags": []}, "earned_runs": {"name": "earned_runs", "description": "", "meta": {}, "data_type": "UTINYINT", "constraints": [], "quote": null, "tags": []}}, "meta": {"primary_keys": ["game_id", "player_id"]}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"bc\".\"game\".\"game_earned_runs\"", "created_at": 1702281449.689368}, "source.baseball_computer.game.game_fielding_appearances": {"database": "bc", "schema": "game", "name": "game_fielding_appearances", "resource_type": "source", "package_name": "baseball_computer", "path": "models/staging/game/source.yml", "original_file_path": "models/staging/game/source.yml", "unique_id": "source.baseball_computer.game.game_fielding_appearances", "fqn": ["baseball_computer", "staging", "game", "game", "game_fielding_appearances"], "source_name": "game", "source_description": "", "loader": "", "identifier": "game_fielding_appearances", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"game_id": {"name": "game_id", "description": "", "meta": {}, "data_type": "GAME_ID", "constraints": [], "quote": null, "tags": []}, "player_id": {"name": "player_id", "description": "", "meta": {}, "data_type": "PLAYER_ID", "constraints": [], "quote": null, "tags": []}, "side": {"name": "side", "description": "", "meta": {}, "data_type": "SIDE", "constraints": [], "quote": null, "tags": []}, "fielding_position": {"name": "fielding_position", "description": "", "meta": {}, "data_type": "UTINYINT", "constraints": [], "quote": null, "tags": []}, "start_event_id": {"name": "start_event_id", "description": "", "meta": {}, "data_type": "UTINYINT", "constraints": [], "quote": null, "tags": []}, "end_event_id": {"name": "end_event_id", "description": "", "meta": {}, "data_type": "UTINYINT", "constraints": [], "quote": null, "tags": []}}, "meta": {"primary_keys": ["game_id", "player_id", "fielding_position", "start_event_id"]}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"bc\".\"game\".\"game_fielding_appearances\"", "created_at": 1702281449.696905}, "source.baseball_computer.game.game_lineup_appearances": {"database": "bc", "schema": "game", "name": "game_lineup_appearances", "resource_type": "source", "package_name": "baseball_computer", "path": "models/staging/game/source.yml", "original_file_path": "models/staging/game/source.yml", "unique_id": "source.baseball_computer.game.game_lineup_appearances", "fqn": ["baseball_computer", "staging", "game", "game", "game_lineup_appearances"], "source_name": "game", "source_description": "", "loader": "", "identifier": "game_lineup_appearances", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"game_id": {"name": "game_id", "description": "", "meta": {}, "data_type": "GAME_ID", "constraints": [], "quote": null, "tags": []}, "player_id": {"name": "player_id", "description": "", "meta": {}, "data_type": "PLAYER_ID", "constraints": [], "quote": null, "tags": []}, "side": {"name": "side", "description": "", "meta": {}, "data_type": "SIDE", "constraints": [], "quote": null, "tags": []}, "lineup_position": {"name": "lineup_position", "description": "", "meta": {}, "data_type": "UTINYINT", "constraints": [], "quote": null, "tags": []}, "entered_game_as": {"name": "entered_game_as", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "start_event_id": {"name": "start_event_id", "description": "", "meta": {}, "data_type": "UTINYINT", "constraints": [], "quote": null, "tags": []}, "end_event_id": {"name": "end_event_id", "description": "", "meta": {}, "data_type": "UTINYINT", "constraints": [], "quote": null, "tags": []}}, "meta": {"primary_keys": ["game_id", "player_id", "lineup_position"]}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"bc\".\"game\".\"game_lineup_appearances\"", "created_at": 1702281449.705653}, "source.baseball_computer.event.event_audit": {"database": "bc", "schema": "event", "name": "event_audit", "resource_type": "source", "package_name": "baseball_computer", "path": "models/staging/event/source.yml", "original_file_path": "models/staging/event/source.yml", "unique_id": "source.baseball_computer.event.event_audit", "fqn": ["baseball_computer", "staging", "event", "event", "event_audit"], "source_name": "event", "source_description": "", "loader": "", "identifier": "event_audit", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"game_id": {"name": "game_id", "description": "", "meta": {}, "data_type": "GAME_ID", "constraints": [], "quote": null, "tags": []}, "event_id": {"name": "event_id", "description": "", "meta": {}, "data_type": "UTINYINT", "constraints": [], "quote": null, "tags": []}, "event_key": {"name": "event_key", "description": "", "meta": {}, "data_type": "UINTEGER", "constraints": [], "quote": null, "tags": []}, "filename": {"name": "filename", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "line_number": {"name": "line_number", "description": "", "meta": {}, "data_type": "UINTEGER", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"bc\".\"event\".\"event_audit\"", "created_at": 1702281449.705761}, "source.baseball_computer.event.event_baserunners": {"database": "bc", "schema": "event", "name": "event_baserunners", "resource_type": "source", "package_name": "baseball_computer", "path": "models/staging/event/source.yml", "original_file_path": "models/staging/event/source.yml", "unique_id": "source.baseball_computer.event.event_baserunners", "fqn": ["baseball_computer", "staging", "event", "event", "event_baserunners"], "source_name": "event", "source_description": "", "loader": "", "identifier": "event_baserunners", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"game_id": {"name": "game_id", "description": "", "meta": {}, "data_type": "GAME_ID", "constraints": [], "quote": null, "tags": []}, "event_id": {"name": "event_id", "description": "", "meta": {}, "data_type": "UTINYINT", "constraints": [], "quote": null, "tags": []}, "event_key": {"name": "event_key", "description": "", "meta": {}, "data_type": "UINTEGER", "constraints": [], "quote": null, "tags": []}, "baserunner": {"name": "baserunner", "description": "", "meta": {}, "data_type": "BASERUNNER", "constraints": [], "quote": null, "tags": []}, "runner_lineup_position": {"name": "runner_lineup_position", "description": "", "meta": {}, "data_type": "UTINYINT", "constraints": [], "quote": null, "tags": []}, "runner_id": {"name": "runner_id", "description": "", "meta": {}, "data_type": "PLAYER_ID", "constraints": [], "quote": null, "tags": []}, "charge_event_id": {"name": "charge_event_id", "description": "", "meta": {}, "data_type": "UINTEGER", "constraints": [], "quote": null, "tags": []}, "reached_on_event_id": {"name": "reached_on_event_id", "description": "", "meta": {}, "data_type": "UINTEGER", "constraints": [], "quote": null, "tags": []}, "explicit_charged_pitcher_id": {"name": "explicit_charged_pitcher_id", "description": "", "meta": {}, "data_type": "PLAYER_ID", "constraints": [], "quote": null, "tags": []}, "attempted_advance_to_base": {"name": "attempted_advance_to_base", "description": "", "meta": {}, "data_type": "BASE", "constraints": [], "quote": null, "tags": []}, "baserunning_play_type": {"name": "baserunning_play_type", "description": "", "meta": {}, "data_type": "BASERUNNING_PLAY", "constraints": [], "quote": null, "tags": []}, "is_out": {"name": "is_out", "description": "", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "base_end": {"name": "base_end", "description": "", "meta": {}, "data_type": "BASE", "constraints": [], "quote": null, "tags": []}, "advanced_on_error_flag": {"name": "advanced_on_error_flag", "description": "", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "explicit_out_flag": {"name": "explicit_out_flag", "description": "", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "run_scored_flag": {"name": "run_scored_flag", "description": "", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "rbi_flag": {"name": "rbi_flag", "description": "", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"bc\".\"event\".\"event_baserunners\"", "created_at": 1702281449.705879}, "source.baseball_computer.event.event_comments": {"database": "bc", "schema": "event", "name": "event_comments", "resource_type": "source", "package_name": "baseball_computer", "path": "models/staging/event/source.yml", "original_file_path": "models/staging/event/source.yml", "unique_id": "source.baseball_computer.event.event_comments", "fqn": ["baseball_computer", "staging", "event", "event", "event_comments"], "source_name": "event", "source_description": "", "loader": "", "identifier": "event_comments", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"game_id": {"name": "game_id", "description": "", "meta": {}, "data_type": "GAME_ID", "constraints": [], "quote": null, "tags": []}, "event_id": {"name": "event_id", "description": "", "meta": {}, "data_type": "UTINYINT", "constraints": [], "quote": null, "tags": []}, "event_key": {"name": "event_key", "description": "", "meta": {}, "data_type": "UINTEGER", "constraints": [], "quote": null, "tags": []}, "sequence_id": {"name": "sequence_id", "description": "", "meta": {}, "data_type": "UTINYINT", "constraints": [], "quote": null, "tags": []}, "comment": {"name": "comment", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"bc\".\"event\".\"event_comments\"", "created_at": 1702281449.705984}, "source.baseball_computer.event.event_fielding_play": {"database": "bc", "schema": "event", "name": "event_fielding_play", "resource_type": "source", "package_name": "baseball_computer", "path": "models/staging/event/source.yml", "original_file_path": "models/staging/event/source.yml", "unique_id": "source.baseball_computer.event.event_fielding_play", "fqn": ["baseball_computer", "staging", "event", "event", "event_fielding_play"], "source_name": "event", "source_description": "", "loader": "", "identifier": "event_fielding_play", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"game_id": {"name": "game_id", "description": "", "meta": {}, "data_type": "GAME_ID", "constraints": [], "quote": null, "tags": []}, "event_id": {"name": "event_id", "description": "", "meta": {}, "data_type": "UTINYINT", "constraints": [], "quote": null, "tags": []}, "event_key": {"name": "event_key", "description": "", "meta": {}, "data_type": "UINTEGER", "constraints": [], "quote": null, "tags": []}, "sequence_id": {"name": "sequence_id", "description": "", "meta": {}, "data_type": "UTINYINT", "constraints": [], "quote": null, "tags": []}, "fielding_position": {"name": "fielding_position", "description": "", "meta": {}, "data_type": "UTINYINT", "constraints": [], "quote": null, "tags": []}, "fielding_play": {"name": "fielding_play", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"bc\".\"event\".\"event_fielding_play\"", "created_at": 1702281449.706083}, "source.baseball_computer.event.event_flags": {"database": "bc", "schema": "event", "name": "event_flags", "resource_type": "source", "package_name": "baseball_computer", "path": "models/staging/event/source.yml", "original_file_path": "models/staging/event/source.yml", "unique_id": "source.baseball_computer.event.event_flags", "fqn": ["baseball_computer", "staging", "event", "event", "event_flags"], "source_name": "event", "source_description": "", "loader": "", "identifier": "event_flags", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"event_key": {"name": "event_key", "description": "", "meta": {}, "data_type": "UINTEGER", "constraints": [], "quote": null, "tags": []}, "sequence_id": {"name": "sequence_id", "description": "", "meta": {}, "data_type": "UTINYINT", "constraints": [], "quote": null, "tags": []}, "flag": {"name": "flag", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"bc\".\"event\".\"event_flags\"", "created_at": 1702281449.706184}, "source.baseball_computer.event.event_pitch_sequences": {"database": "bc", "schema": "event", "name": "event_pitch_sequences", "resource_type": "source", "package_name": "baseball_computer", "path": "models/staging/event/source.yml", "original_file_path": "models/staging/event/source.yml", "unique_id": "source.baseball_computer.event.event_pitch_sequences", "fqn": ["baseball_computer", "staging", "event", "event", "event_pitch_sequences"], "source_name": "event", "source_description": "", "loader": "", "identifier": "event_pitch_sequences", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"game_id": {"name": "game_id", "description": "", "meta": {}, "data_type": "GAME_ID", "constraints": [], "quote": null, "tags": []}, "event_id": {"name": "event_id", "description": "", "meta": {}, "data_type": "UTINYINT", "constraints": [], "quote": null, "tags": []}, "event_key": {"name": "event_key", "description": "", "meta": {}, "data_type": "UINTEGER", "constraints": [], "quote": null, "tags": []}, "sequence_id": {"name": "sequence_id", "description": "", "meta": {}, "data_type": "UTINYINT", "constraints": [], "quote": null, "tags": []}, "sequence_item": {"name": "sequence_item", "description": "", "meta": {}, "data_type": "PITCH_SEQUENCE_ITEM", "constraints": [], "quote": null, "tags": []}, "runners_going_flag": {"name": "runners_going_flag", "description": "", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "blocked_by_catcher_flag": {"name": "blocked_by_catcher_flag", "description": "", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "catcher_pickoff_attempt_at_base": {"name": "catcher_pickoff_attempt_at_base", "description": "", "meta": {}, "data_type": "BASE", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"bc\".\"event\".\"event_pitch_sequences\"", "created_at": 1702281449.70629}, "source.baseball_computer.event.events": {"database": "bc", "schema": "event", "name": "events", "resource_type": "source", "package_name": "baseball_computer", "path": "models/staging/event/source.yml", "original_file_path": "models/staging/event/source.yml", "unique_id": "source.baseball_computer.event.events", "fqn": ["baseball_computer", "staging", "event", "event", "events"], "source_name": "event", "source_description": "", "loader": "", "identifier": "events", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"game_id": {"name": "game_id", "description": "", "meta": {}, "data_type": "GAME_ID", "constraints": [], "quote": null, "tags": []}, "event_id": {"name": "event_id", "description": "", "meta": {}, "data_type": "UTINYINT", "constraints": [], "quote": null, "tags": []}, "event_key": {"name": "event_key", "description": "", "meta": {}, "data_type": "UINTEGER", "constraints": [], "quote": null, "tags": []}, "batting_side": {"name": "batting_side", "description": "", "meta": {}, "data_type": "SIDE", "constraints": [], "quote": null, "tags": []}, "inning": {"name": "inning", "description": "", "meta": {}, "data_type": "UTINYINT", "constraints": [], "quote": null, "tags": []}, "frame": {"name": "frame", "description": "", "meta": {}, "data_type": "FRAME", "constraints": [], "quote": null, "tags": []}, "batter_lineup_position": {"name": "batter_lineup_position", "description": "", "meta": {}, "data_type": "UTINYINT", "constraints": [], "quote": null, "tags": []}, "batter_id": {"name": "batter_id", "description": "", "meta": {}, "data_type": "PLAYER_ID", "constraints": [], "quote": null, "tags": []}, "pitcher_id": {"name": "pitcher_id", "description": "", "meta": {}, "data_type": "PLAYER_ID", "constraints": [], "quote": null, "tags": []}, "batting_team_id": {"name": "batting_team_id", "description": "", "meta": {}, "data_type": "TEAM_ID", "constraints": [], "quote": null, "tags": []}, "fielding_team_id": {"name": "fielding_team_id", "description": "", "meta": {}, "data_type": "TEAM_ID", "constraints": [], "quote": null, "tags": []}, "outs": {"name": "outs", "description": "", "meta": {}, "data_type": "UTINYINT", "constraints": [], "quote": null, "tags": []}, "base_state": {"name": "base_state", "description": "", "meta": {}, "data_type": "UTINYINT", "constraints": [], "quote": null, "tags": []}, "count_balls": {"name": "count_balls", "description": "", "meta": {}, "data_type": "UTINYINT", "constraints": [], "quote": null, "tags": []}, "count_strikes": {"name": "count_strikes", "description": "", "meta": {}, "data_type": "UTINYINT", "constraints": [], "quote": null, "tags": []}, "specified_batter_hand": {"name": "specified_batter_hand", "description": "", "meta": {}, "data_type": "HAND", "constraints": [], "quote": null, "tags": []}, "specified_pitcher_hand": {"name": "specified_pitcher_hand", "description": "", "meta": {}, "data_type": "HAND", "constraints": [], "quote": null, "tags": []}, "strikeout_responsible_batter_id": {"name": "strikeout_responsible_batter_id", "description": "", "meta": {}, "data_type": "PLAYER_ID", "constraints": [], "quote": null, "tags": []}, "walk_responsible_pitcher_id": {"name": "walk_responsible_pitcher_id", "description": "", "meta": {}, "data_type": "PLAYER_ID", "constraints": [], "quote": null, "tags": []}, "plate_appearance_result": {"name": "plate_appearance_result", "description": "", "meta": {}, "data_type": "PLATE_APPEARANCE_RESULT", "constraints": [], "quote": null, "tags": []}, "batted_trajectory": {"name": "batted_trajectory", "description": "", "meta": {}, "data_type": "trajectory", "constraints": [], "quote": null, "tags": []}, "batted_to_fielder": {"name": "batted_to_fielder", "description": "", "meta": {}, "data_type": "UTINYINT", "constraints": [], "quote": null, "tags": []}, "batted_location_general": {"name": "batted_location_general", "description": "", "meta": {}, "data_type": "LOCATION_GENERAL", "constraints": [], "quote": null, "tags": []}, "batted_location_depth": {"name": "batted_location_depth", "description": "", "meta": {}, "data_type": "LOCATION_DEPTH", "constraints": [], "quote": null, "tags": []}, "batted_location_angle": {"name": "batted_location_angle", "description": "", "meta": {}, "data_type": "LOCATION_ANGLE", "constraints": [], "quote": null, "tags": []}, "batted_contact_strength": {"name": "batted_contact_strength", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "outs_on_play": {"name": "outs_on_play", "description": "", "meta": {}, "data_type": "UTINYINT", "constraints": [], "quote": null, "tags": []}, "runs_on_play": {"name": "runs_on_play", "description": "", "meta": {}, "data_type": "UTINYINT", "constraints": [], "quote": null, "tags": []}, "runs_batted_in": {"name": "runs_batted_in", "description": "", "meta": {}, "data_type": "UTINYINT", "constraints": [], "quote": null, "tags": []}, "team_unearned_runs": {"name": "team_unearned_runs", "description": "", "meta": {}, "data_type": "UTINYINT", "constraints": [], "quote": null, "tags": []}, "no_play_flag": {"name": "no_play_flag", "description": "", "meta": {}, "data_type": "BOOLEAN", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"bc\".\"event\".\"events\"", "created_at": 1702281449.706439}}, "macros": {"macro.baseball_computer.init_db": {"name": "init_db", "resource_type": "macro", "package_name": "baseball_computer", "path": "macros/init_db.sql", "original_file_path": "macros/init_db.sql", "unique_id": "macro.baseball_computer.init_db", "macro_sql": "{% macro init_db(sample_factor=1, seed=0) %}\n  {% set base_url = \"https://data.baseball.computer\" %}\n\n    {% for node in graph.sources.values() %}\n      {% set prefix = node.schema if node.schema in (\"misc\", \"baseballdatabank\") else \"event\" %}\n      {% set sql %}\n      CREATE SCHEMA IF NOT EXISTS {{ node.schema }};\n      SET SCHEMA = '{{ node.schema }}';\n      CREATE OR REPLACE TABLE {{ node.schema }}.{{ node.name }} AS (\n        SELECT * FROM '{{ base_url }}/{{ prefix }}/{{ node.identifier }}.parquet'\n        {% if node.schema == \"event\" and sample_factor > 1 %}\n          WHERE HASH(event_key // 255) % {{ sample_factor }} = {{ seed }}\n        {% endif %}\n      );\n      {% endset %}\n      {% do log(sql, info=True)%}\n      {% do run_query(sql) %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.687413, "supported_languages": null}, "macro.baseball_computer.create_enums": {"name": "create_enums", "resource_type": "macro", "package_name": "baseball_computer", "path": "macros/init_db.sql", "original_file_path": "macros/init_db.sql", "unique_id": "macro.baseball_computer.create_enums", "macro_sql": "{% macro create_enums() %}\n  {% set sql %}\n    DROP TYPE IF EXISTS base;\n    DROP TYPE IF EXISTS baserunner;\n    DROP TYPE IF EXISTS frame;\n    DROP TYPE IF EXISTS side;\n    DROP TYPE IF EXISTS hand;\n    DROP TYPE IF EXISTS game_type;\n    DROP TYPE IF EXISTS account_type;\n    DROP TYPE IF EXISTS doubleheader_status;\n    DROP TYPE IF EXISTS time_of_day;\n    DROP TYPE IF EXISTS sky;\n    DROP TYPE IF EXISTS field_condition;\n    DROP TYPE IF EXISTS precipitation;\n    DROP TYPE IF EXISTS wind_direction;\n    DROP TYPE IF EXISTS plate_appearance_result;\n    DROP TYPE IF EXISTS pitch_sequence_item;\n    DROP TYPE IF EXISTS park_id;\n    DROP TYPE IF EXISTS team_id;\n    DROP TYPE IF EXISTS game_id;\n    DROP TYPE IF EXISTS player_id;\n    DROP TYPE IF EXISTS trajectory;\n    DROP TYPE IF EXISTS location_general;\n    DROP TYPE IF EXISTS location_depth;\n    DROP TYPE IF EXISTS location_angle;\n    DROP TYPE IF EXISTS baserunning_play;\n    DROP TYPE IF EXISTS fielding_play;\n    \n  \n    CREATE TYPE base AS ENUM ('Home', 'First', 'Second', 'Third');\n    CREATE TYPE baserunner AS ENUM ('Batter', 'First', 'Second', 'Third');\n    CREATE TYPE frame AS ENUM ('Top', 'Bottom');\n    CREATE TYPE side AS ENUM ('Home', 'Away');\n    -- TODO: Standardize\n    CREATE TYPE hand AS ENUM ('L', 'R', 'B', '?', 'Left', 'Right');\n\n    CREATE TYPE game_type AS ENUM (SELECT DISTINCT game_type FROM game.games ORDER BY 1);\n    CREATE TYPE doubleheader_status AS ENUM (SELECT DISTINCT doubleheader_status FROM game.games ORDER BY 1);\n    CREATE TYPE time_of_day AS ENUM (SELECT DISTINCT time_of_day FROM game.games ORDER BY 1);\n    CREATE TYPE sky AS ENUM (SELECT DISTINCT sky FROM game.games ORDER BY 1);\n    CREATE TYPE field_condition AS ENUM (SELECT DISTINCT field_condition FROM game.games ORDER BY 1);\n    CREATE TYPE precipitation AS ENUM (SELECT DISTINCT precipitation FROM game.games ORDER BY 1);\n    CREATE TYPE wind_direction AS ENUM (SELECT DISTINCT wind_direction FROM game.games ORDER BY 1);\n    CREATE TYPE plate_appearance_result AS ENUM (SELECT DISTINCT plate_appearance_result FROM event.events WHERE plate_appearance_result IS NOT NULL ORDER BY 1);\n    CREATE TYPE pitch_sequence_item AS ENUM (SELECT DISTINCT sequence_item FROM event.event_pitch_sequences ORDER BY 1);\n    CREATE TYPE trajectory AS ENUM (SELECT DISTINCT batted_trajectory FROM event.events WHERE batted_trajectory IS NOT NULL ORDER BY 1);\n    CREATE TYPE location_general AS ENUM (SELECT DISTINCT batted_location_general FROM event.events WHERE batted_location_general IS NOT NULL ORDER BY 1);\n    CREATE TYPE location_depth AS ENUM (SELECT DISTINCT batted_location_depth FROM event.events WHERE batted_location_depth IS NOT NULL ORDER BY 1);\n    CREATE TYPE location_angle AS ENUM (SELECT DISTINCT batted_location_angle FROM event.events WHERE batted_location_angle IS NOT NULL ORDER BY 1);\n    CREATE TYPE baserunning_play AS ENUM (SELECT DISTINCT baserunning_play_type FROM event.event_baserunners WHERE baserunning_play_type IS NOT NULL ORDER BY 1);\n    CREATE TYPE fielding_play AS ENUM (SELECT DISTINCT fielding_play FROM event.event_fielding_play ORDER BY 1);\n    \n    CREATE TYPE account_type AS ENUM (\n      SELECT DISTINCT account_type FROM game.games\n      UNION\n      SELECT DISTINCT account_type FROM box_score.box_score_games\n    );\n\n    CREATE TYPE park_id AS ENUM (\n      SELECT DISTINCT park_id FROM misc.park\n      UNION\n      -- TODO: Add missing NLB parks\n      SELECT DISTINCT park_id FROM box_score.box_score_games WHERE park_id IS NOT NULL\n      UNION\n      SELECT DISTINCT park_id FROM game.games WHERE park_id IS NOT NULL\n    );\n    \n    CREATE TYPE team_id AS ENUM (\n      SELECT DISTINCT team_id FROM misc.roster\n      UNION\n      SELECT DISTINCT visiting_team FROM misc.gamelog\n      UNION\n      SELECT DISTINCT home_team FROM misc.gamelog\n      UNION\n      SELECT DISTINCT away_team_id FROM box_score.box_score_games\n      UNION\n      SELECT DISTINCT home_team_id FROM box_score.box_score_games\n    );\n    \n    {# CREATE TYPE player_id AS ENUM (\n      SELECT retro_id FROM baseballdatabank.people WHERE retro_id IS NOT NULL\n      UNION\n      SELECT DISTINCT player_id FROM misc.roster\n      UNION\n      SELECT DISTINCT batter_id FROM box_score.box_score_batting_lines\n      UNION\n      SELECT DISTINCT fielder_id FROM box_score.box_score_fielding_lines\n    ); #}\n    CREATE TYPE player_id AS VARCHAR;\n\n    {# CREATE TYPE game_id AS ENUM (\n      SELECT game_id FROM game.games\n      UNION\n      SELECT game_id FROM box_score.box_score_games\n      UNION\n      SELECT home_team || STRFTIME(date, '%Y%m%d') || double_header FROM misc.gamelog\n    ); #}\n    CREATE TYPE game_id AS VARCHAR;\n\n  {% endset %}\n  {% do log(sql, info=True)%}\n  {% do run_query(sql) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.68817, "supported_languages": null}, "macro.baseball_computer.alter_types": {"name": "alter_types", "resource_type": "macro", "package_name": "baseball_computer", "path": "macros/init_db.sql", "original_file_path": "macros/init_db.sql", "unique_id": "macro.baseball_computer.alter_types", "macro_sql": "{% macro alter_types() %}\n    {% for node in graph.sources.values() -%}\n        {% set sql %}\n      {% for col_name, col_data in node.columns.items() if col_data.get(\"data_type\") -%}\n          ALTER TABLE {{ node.schema }}.{{ node.name }} ALTER COLUMN \"{{ col_name }}\" TYPE {{ col_data.data_type }};\n      {% endfor %}\n        {% endset %}\n        {% do log(sql, info=True)%}\n        {% do run_query(sql) %}\n    {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.68895, "supported_languages": null}, "macro.baseball_computer.event_id_to_key": {"name": "event_id_to_key", "resource_type": "macro", "package_name": "baseball_computer", "path": "macros/event_id_to_key.sql", "original_file_path": "macros/event_id_to_key.sql", "unique_id": "macro.baseball_computer.event_id_to_key", "macro_sql": "{%- macro event_id_to_key(event_id, game_event_key) -%}\n  ({{ game_event_key }} // 255 * 255 + {{ event_id }})::UINTEGER\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.689266, "supported_languages": null}, "macro.baseball_computer.event_key_to_id": {"name": "event_key_to_id", "resource_type": "macro", "package_name": "baseball_computer", "path": "macros/event_id_to_key.sql", "original_file_path": "macros/event_id_to_key.sql", "unique_id": "macro.baseball_computer.event_key_to_id", "macro_sql": "{%- macro event_key_to_id(event_key) -%}\n  ({{ event_key }} - ({{ event_key }} // 255))::UTINYINT\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.689439, "supported_languages": null}, "macro.baseball_computer.batter_pitcher_park_factor": {"name": "batter_pitcher_park_factor", "resource_type": "macro", "package_name": "baseball_computer", "path": "macros/park_factors.sql", "original_file_path": "macros/park_factors.sql", "unique_id": "macro.baseball_computer.batter_pitcher_park_factor", "macro_sql": "{% macro batter_pitcher_park_factor(\n    rate_stats,\n    denominator_stat,\n    prior_sample_size=1000,\n    prev_years=2,\n    filter_exp=\"1=1\",\n    batter_hand_split=False,\n    use_odds=True\n) %}\n{% set stats = [denominator_stat] + rate_stats %}\n{% set hand_partition = \", batter_hand\" if batter_hand_split else \"\" %}\n{% set hand_select = \"batter_hand,\" if batter_hand_split else \"\" %}\n    WITH unique_park_seasons AS (\n        SELECT\n            park_id,\n            season,\n            home_league AS league\n        FROM {{ ref('game_start_info') }}\n        WHERE game_type = 'RegularSeason'\n        GROUP BY 1, 2, 3\n        HAVING COUNT(*) > 25\n    ),\n\n    lines AS (\n        SELECT *\n        FROM {{ ref('event_offense_stats') }}\n        WHERE {{ filter_exp }}\n    ),\n\n    lines_agg AS (\n        SELECT\n            states.park_id,\n            states.season,\n            states.league,\n            states.batter_id,\n            states.pitcher_id,\n            ANY_VALUE(states.batter_hand) AS batter_hand,\n            {%- for stat in stats %}\n                SUM(lines.{{ stat }})::INT AS {{ stat }},\n            {%- endfor %}\n        FROM {{ ref('event_states_full') }} AS states\n        INNER JOIN lines USING (event_key)\n        -- Restrict to parks with decent sample\n        INNER JOIN unique_park_seasons USING (season, league, park_id)\n        WHERE states.game_type = 'RegularSeason'\n            AND NOT states.is_interleague\n            {% if batter_hand_split %}\n                AND states.batter_hand IN ('L', 'R')\n            {% endif %}\n        GROUP BY 1, 2, 3, 4, 5\n    ),\n\n    multi_year_range AS MATERIALIZED (\n        SELECT\n            la.park_id,\n            ups.season,\n            la.league,\n            la.batter_id,\n            la.pitcher_id,\n            {{ hand_select }}\n            {%- for stat in stats %}\n                SUM(la.{{ stat }})::INT AS {{ stat }},\n            {%- endfor %}\n        FROM lines_agg AS la\n        INNER JOIN unique_park_seasons AS ups\n            ON la.park_id = ups.park_id\n                AND la.league = ups.league\n                AND la.season BETWEEN ups.season - {{ prev_years }} AND ups.season\n        GROUP BY 1, 2, 3, 4, 5{{ \", 6\" if batter_hand_split else \"\" }}\n    ),\n\n    averages AS MATERIALIZED (\n        SELECT\n            season,\n            league,\n            {{ hand_select }}\n            {%- for stat in rate_stats %}\n                SUM({{ stat }}) / SUM({{ denominator_stat }}) AS {{ stat }}_rate,\n            {%- endfor %}\n        FROM multi_year_range\n        GROUP BY 1, 2{{ \", 3\" if batter_hand_split else \"\" }}\n    ),\n\n    -- Give each park pair a batter-pitcher matchup at the league average\n    -- with {{ prior_sample_size }} PA per park\n    with_priors AS (\n        SELECT *\n        FROM multi_year_range\n        UNION ALL BY NAME\n        SELECT\n            unique_park_seasons.park_id,\n            season,\n            league,\n            'MARK' AS batter_id,\n            'PRIOR' AS pitcher_id,\n            {{ hand_select }}\n            {{ prior_sample_size }} AS {{ denominator_stat }},\n            {%- for stat in rate_stats %}\n                averages.{{ stat }}_rate * {{ prior_sample_size }} AS {{ stat }},\n            {%- endfor %}\n        FROM averages\n        INNER JOIN unique_park_seasons USING (season, league)\n    ),\n\n    self_joined AS (\n        SELECT\n            this.park_id AS this_park_id,\n            other.park_id AS other_park_id,\n            this.season,\n            this.league,  \n            this.batter_id,\n            this.pitcher_id,\n            {{ \"this.batter_hand,\" if batter_hand_split else \"\" }}\n            {%- for stat in stats %}\n                this.{{ stat }} AS this_{{ stat }},\n                other.{{ stat }} AS other_{{ stat }},\n            {%- endfor %}\n            SQRT(LEAST(this_{{ denominator_stat }}, other_{{ denominator_stat }})) AS sample_size,\n            SUM(sample_size) OVER (PARTITION BY this.park_id, other.park_id, this.season, this.league) AS sum_sample_size,\n        FROM with_priors AS this\n        INNER JOIN with_priors AS other\n            ON this.park_id != other.park_id\n                AND this.season = other.season\n                AND this.batter_id = other.batter_id\n                AND this.pitcher_id = other.pitcher_id\n                {% if batter_hand_split %}\n                    AND this.batter_hand = other.batter_hand\n                {% endif %}\n    ),\n\n    rate_calculation AS (\n        SELECT\n            *,\n            {%- for stat in rate_stats %}\n                this_{{ stat }} / this_{{ denominator_stat }} AS this_{{ stat }}_rate,\n                other_{{ stat }} / other_{{ denominator_stat }} AS other_{{ stat }}_rate,\n            {%- endfor %}\n            -- Find the park pair with the highest sample size, and upweight all other pairs to match\n            MAX(sum_sample_size) OVER (PARTITION BY this_park_id, season, league) AS scaling_factor,\n            sample_size * (scaling_factor / sum_sample_size) AS sample_weight\n        FROM self_joined\n    ),\n\n    weighted_average AS (\n        SELECT\n            this_park_id AS park_id,\n            season,\n            league,\n            {{ hand_select }}\n            SUM(sample_size) AS sqrt_sample_size,\n            {%- for stat in rate_stats %}\n                SUM(this_{{ stat }}_rate * sample_weight)\n                / SUM(sample_weight) AS avg_this_{{ stat }}_rate,\n                SUM(other_{{ stat }}_rate * sample_weight)\n                / SUM(sample_weight) AS avg_other_{{ stat }}_rate,\n                avg_this_{{ stat }}_rate\n                / (1 - avg_this_{{ stat }}_rate) AS this_{{ stat }}_odds,\n                avg_other_{{ stat }}_rate\n                / (1 - avg_other_{{ stat }}_rate) AS other_{{ stat }}_odds,\n                this_{{ stat }}_odds\n                / other_{{ stat }}_odds AS {{ stat }}_odds_park_factor,\n                avg_this_{{ stat }}_rate / avg_other_{{ stat }}_rate AS {{ stat }}_rate_park_factor,\n            {%- endfor %}\n        FROM rate_calculation\n        GROUP BY 1, 2, 3{{ \", 4\" if batter_hand_split else \"\" }}\n    ),\n\n    final AS (\n        SELECT\n            park_id,\n            season,\n            league,\n            {{ hand_select }}\n            ROUND(sqrt_sample_size, 0) AS sqrt_sample_size,\n            {%- for stat in rate_stats %}\n                {% if use_odds %}\n                    ROUND({{ stat }}_odds_park_factor, 2) AS {{ stat }}_park_factor,\n                {% else %}\n                    ROUND({{ stat }}_rate_park_factor, 2) AS {{ stat }}_park_factor,\n                {% endif %}\n            {%- endfor %}\n        FROM weighted_average\n    )\n\n    SELECT * FROM final\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.7066529, "supported_languages": null}, "macro.baseball_computer.basic_rate_stats_offense": {"name": "basic_rate_stats_offense", "resource_type": "macro", "package_name": "baseball_computer", "path": "macros/metric_calcs.sql", "original_file_path": "macros/metric_calcs.sql", "unique_id": "macro.baseball_computer.basic_rate_stats_offense", "macro_sql": "{% macro basic_rate_stats_offense() %}\n    {{ return({\n        \"batting_average\": \"SUM(hits) / SUM(at_bats)\",\n        \"on_base_percentage\": \"SUM(on_base_successes) / SUM(on_base_opportunities)\",\n        \"slugging_percentage\": \"SUM(total_bases) / SUM(at_bats)\",\n        \"on_base_plus_slugging\": \"SUM(on_base_successes) / SUM(on_base_opportunities) + SUM(total_bases) / SUM(at_bats)\",\n        \"isolated_power\": \"SUM(total_bases) / SUM(at_bats) - SUM(hits) / SUM(at_bats)\",\n        \"secondary_average\": \"SUM(total_bases - hits + walks + stolen_bases - caught_stealing) / SUM(at_bats)\",\n        \"batting_average_on_balls_in_play\": \"SUM(hits - home_runs) / (SUM(at_bats) - SUM(home_runs) - SUM(strikeouts) + SUM(COALESCE(sacrifice_flies, 0)))\",\n        \"home_run_rate\": \"SUM(home_runs) / SUM(plate_appearances)\",\n        \"walk_rate\": \"SUM(walks) / SUM(plate_appearances)\",\n        \"strikeout_rate\": \"SUM(strikeouts) / SUM(plate_appearances)\",\n        \"stolen_base_percentage\": \"SUM(stolen_bases) / SUM(stolen_bases + caught_stealing)\",\n    })}}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.715013, "supported_languages": null}, "macro.baseball_computer.basic_rate_stats_pitching": {"name": "basic_rate_stats_pitching", "resource_type": "macro", "package_name": "baseball_computer", "path": "macros/metric_calcs.sql", "original_file_path": "macros/metric_calcs.sql", "unique_id": "macro.baseball_computer.basic_rate_stats_pitching", "macro_sql": "{% macro basic_rate_stats_pitching() %}\n    {{ return ({\n        \"earned_run_average\": \"SUM(earned_runs) * 9 / SUM(outs_recorded * 3)\",\n        \"run_average\": \"SUM(runs) * 9 / SUM(outs_recorded * 3)\",\n        \"walks_per_9_innings\": \"SUM(walks) * 9 / SUM(outs_recorded * 3)\",\n        \"strikeouts_per_9_innings\": \"SUM(strikeouts) * 9 / SUM(outs_recorded * 3)\",\n        \"home_runs_per_9_innings\": \"SUM(home_runs) * 9 / SUM(outs_recorded * 3)\",\n        \"hits_per_9_innings\": \"SUM(hits) * 9 / SUM(outs_recorded * 3)\",\n        \"walks_and_hits_per_innings_pitched\": \"(SUM(walks) + SUM(hits)) / SUM(outs_recorded * 3)\",\n        \"strikeout_to_walk_ratio\": \"SUM(strikeouts) / SUM(walks)\",\n        \"walk_rate\": \"SUM(walks) / SUM(batters_faced)\",\n        \"strikeout_rate\": \"SUM(strikeouts) / SUM(batters_faced)\",\n        \"home_run_rate\": \"SUM(home_runs) / SUM(batters_faced)\",\n        \"batting_average_against\": \"SUM(hits) / SUM(at_bats)\",\n        \"on_base_percentage_against\": \"SUM(on_base_successes) / SUM(on_base_opportunities)\",\n        \"slugging_percentage_against\": \"SUM(total_bases) / SUM(at_bats)\",\n        \"on_base_plus_slugging_against\": \"SUM(on_base_successes) / SUM(on_base_opportunities) + SUM(total_bases) / SUM(at_bats)\",\n        \"batting_average_on_balls_in_play\": \"SUM(hits - home_runs) / (SUM(at_bats) - SUM(home_runs) - SUM(strikeouts) + SUM(COALESCE(sacrifice_flies, 0)))\",\n    }) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.715765, "supported_languages": null}, "macro.baseball_computer.basic_rate_stats_fielding": {"name": "basic_rate_stats_fielding", "resource_type": "macro", "package_name": "baseball_computer", "path": "macros/metric_calcs.sql", "original_file_path": "macros/metric_calcs.sql", "unique_id": "macro.baseball_computer.basic_rate_stats_fielding", "macro_sql": "{% macro basic_rate_stats_fielding() %}\n    {{ return ({\n        \"fielding_percentage\": \"SUM(putouts + assists) / SUM(putouts + assists + errors)\",\n        \"range_factor\": \"(SUM(putouts) + SUM(assists)) * 9 / SUM(outs_played * 3)\",\n        \"innings_played\": \"ROUND(SUM(outs_played) / 3, 2)\",\n    }) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.716044, "supported_languages": null}, "macro.baseball_computer.batted_ball_stats": {"name": "batted_ball_stats", "resource_type": "macro", "package_name": "baseball_computer", "path": "macros/metric_calcs.sql", "original_file_path": "macros/metric_calcs.sql", "unique_id": "macro.baseball_computer.batted_ball_stats", "macro_sql": "{% macro batted_ball_stats() %}\n    {% set trajectory_stats = {\n        \"known_trajectory_rate_outs\": \"SUM(trajectory_known * balls_batted * (at_bats - hits)) / SUM(balls_batted * (at_bats - hits))\",\n        \"known_trajectory_rate_hits\": \"SUM(trajectory_known * balls_batted * hits) / SUM(balls_batted * hits)\",\n        \"known_trajectory_rate\": \"SUM(trajectory_known * balls_batted) / SUM(balls_batted)\",\n        \"known_trajectory_broad_rate_outs\": \"SUM(trajectory_broad_known * balls_batted * (at_bats - hits)) / SUM(balls_batted * (at_bats - hits))\",\n        \"known_trajectory_broad_rate_hits\": \"SUM(trajectory_broad_known * balls_batted * hits) / SUM(balls_batted * hits)\",\n        \"known_trajectory_broad_rate\": \"SUM(trajectory_broad_known * balls_batted) / SUM(balls_batted)\",\n        \"known_trajectory_out_hit_ratio\": \"known_trajectory_rate_outs / known_trajectory_rate_hits\",\n        \"known_trajectory_broad_out_hit_ratio\": \"known_trajectory_broad_rate_outs / known_trajectory_broad_rate_hits\",\n\n        \"air_ball_rate_outs\": \"SUM(trajectory_broad_air_ball * (at_bats - hits)) / SUM(trajectory_broad_known * (at_bats - hits))\",\n        \"ground_ball_rate_outs\": \"SUM(trajectory_broad_ground_ball * (at_bats - hits)) / SUM(trajectory_broad_known * (at_bats - hits))\",\n        \"ground_air_out_ratio\": \"ground_ball_rate_outs / air_ball_rate_outs\",\n        \"air_ball_hit_rate\": \"SUM(trajectory_broad_air_ball * hits) / SUM(trajectory_broad_known * hits)\",\n        \"ground_ball_hit_rate\": \"SUM(trajectory_broad_ground_ball * hits) / SUM(trajectory_broad_known * hits)\",\n        \"ground_air_hit_ratio\": \"ground_ball_hit_rate / air_ball_hit_rate\",\n        \"fly_ball_rate\": \"SUM(trajectory_fly_ball) / SUM(trajectory_known)\",\n        \"line_drive_rate\": \"SUM(trajectory_line_drive) / SUM(trajectory_known)\",\n        \"pop_up_rate\": \"SUM(trajectory_pop_up) / SUM(trajectory_known)\",\n        \"ground_ball_rate\": \"SUM(trajectory_ground_ball) / SUM(trajectory_broad_known)\",\n        \n        \"coverage_weighted_air_ball_batting_average\": \"SUM(trajectory_broad_air_ball * hits) * known_trajectory_broad_out_hit_ratio / (SUM(trajectory_broad_air_ball * hits) * known_trajectory_broad_out_hit_ratio + SUM(trajectory_broad_air_ball * (at_bats - hits)))\",\n        \"coverage_weighted_ground_ball_batting_average\": \"SUM(trajectory_ground_ball * hits) * known_trajectory_broad_out_hit_ratio / (SUM(trajectory_ground_ball * hits) * known_trajectory_broad_out_hit_ratio + SUM(trajectory_ground_ball * (at_bats - hits)))\",\n        \"coverage_weighted_fly_ball_batting_average\": \"SUM(trajectory_fly_ball * hits) * known_trajectory_out_hit_ratio / (SUM(trajectory_fly_ball * hits) * known_trajectory_out_hit_ratio + SUM(trajectory_fly_ball * (at_bats - hits)))\",\n        \"coverage_weighted_line_drive_batting_average\": \"SUM(trajectory_line_drive * hits) * known_trajectory_out_hit_ratio / (SUM(trajectory_line_drive * hits) * known_trajectory_out_hit_ratio + SUM(trajectory_line_drive * (at_bats - hits)))\",\n        \"coverage_weighted_pop_up_batting_average\": \"SUM(trajectory_pop_up * hits) * known_trajectory_out_hit_ratio / (SUM(trajectory_pop_up * hits) * known_trajectory_out_hit_ratio + SUM(trajectory_pop_up * (at_bats - hits)))\",\n    } %}\n\n\n    {% set angles = [\"left\", \"right\", \"middle\"] %}\n    {% set directions = [\"pulled\", \"opposite_field\"] %}\n\n    {% set angle_stats = {\n        \"known_angle_rate_outs\": \"SUM(batted_angle_known * (at_bats - hits)) / SUM(balls_batted * (at_bats - hits))\",\n        \"known_angle_rate_hits\": \"SUM(batted_angle_known * hits) / SUM(hits)\",\n        \"known_angle_rate\": \"SUM(batted_angle_known) / SUM(balls_batted)\",\n        \"known_angle_out_hit_ratio\": \"known_angle_rate_outs / known_angle_rate_hits\"\n    } %}\n\n    {% for a in angles %}\n        {{ angle_stats.update({\n            \"angle_\" ~ a ~ \"_rate_outs\": \"SUM(batted_angle_\" ~ a ~ \" * (at_bats - hits)) / SUM(batted_angle_known * (at_bats - hits))\",\n            \"angle_\" ~ a ~ \"_rate_hits\": \"SUM(batted_angle_\" ~ a ~ \" * hits) / SUM(batted_angle_known * hits)\",\n            \"angle_\" ~ a ~ \"_rate\": \"SUM(batted_angle_\" ~ a ~ \") / SUM(batted_angle_known)\",\n            \"coverage_weighted_angle_\" ~ a ~ \"_batting_average\": \"SUM(batted_angle_\" ~ a ~ \" * hits) * known_angle_out_hit_ratio / (SUM(batted_angle_\" ~ a ~ \" * hits) * known_angle_out_hit_ratio + SUM(batted_angle_\" ~ a ~ \" * (at_bats - hits)))\",\n        }) }}\n    {% endfor %}\n\n    {% set direction_stats = {} %}\n    {% for direction in directions %}\n        {{ direction_stats.update({\n            direction ~ \"_rate_outs\": \"SUM(batted_balls_\" ~ direction ~ \" * (at_bats - hits)) / SUM(batted_angle_known * (at_bats - hits))\",\n            direction ~ \"_rate_hits\": \"SUM(batted_balls_\" ~ direction ~ \" * hits) / SUM(batted_angle_known * hits)\",\n            direction ~ \"_rate\": \"SUM(batted_balls_\" ~ direction ~ \") / SUM(batted_angle_known)\",\n            \"coverage_weighted_\" ~ direction ~ \"_batting_average\": \"SUM(batted_balls_\" ~ direction ~ \" * hits) * known_angle_out_hit_ratio / (SUM(batted_balls_\" ~ direction ~ \" * hits) * known_angle_out_hit_ratio + SUM(batted_balls_\" ~ direction ~ \" * (at_bats - hits)))\",\n        }) }}\n    {% endfor %}\n\n    {% set combined_stats = {} %}\n    {% for d in [trajectory_stats, angle_stats, direction_stats] %}\n        {{ combined_stats.update(d) }}\n    {% endfor %}\n    \n    {{ return(combined_stats) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.718892, "supported_languages": null}, "macro.baseball_computer.baserunning_stats": {"name": "baserunning_stats", "resource_type": "macro", "package_name": "baseball_computer", "path": "macros/metric_calcs.sql", "original_file_path": "macros/metric_calcs.sql", "unique_id": "macro.baseball_computer.baserunning_stats", "macro_sql": "{% macro baserunning_stats() %}\n    {{ return({\n        \"stolen_base_attempt_rate_second\": \"SUM(stolen_bases_second + caught_stealing_second) / SUM(stolen_base_opportunities_second)\",\n        \"stolen_base_attempt_rate_third\": \"SUM(stolen_bases_third + caught_stealing_third) / SUM(stolen_base_opportunities_third)\",\n        \"stolen_base_attempt_rate_home\": \"SUM(stolen_bases_home + caught_stealing_home) / SUM(stolen_base_opportunities_home)\",\n        \"unforced_out_rate\": \"SUM(unforced_outs_on_basepaths) / SUM(times_reached_base)\",\n\n    }) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.719231, "supported_languages": null}, "macro.baseball_computer.pitch_sequence_stats": {"name": "pitch_sequence_stats", "resource_type": "macro", "package_name": "baseball_computer", "path": "macros/metric_calcs.sql", "original_file_path": "macros/metric_calcs.sql", "unique_id": "macro.baseball_computer.pitch_sequence_stats", "macro_sql": "{% macro pitch_sequence_stats() %}\n    {{ return({\n        \"pitch_strike_rate\": \"SUM(strikes) / SUM(pitches)\",\n        \"pitch_contact_rate\": \"SUM(swings_with_contact) / SUM(pitches)\",\n        \"pitch_swing_rate\": \"SUM(swings_with_contact + strikes_swinging) / SUM(pitches)\",\n        \"pitch_ball_rate\": \"SUM(balls) / SUM(pitches)\",\n        \"pitch_swing_and_miss_rate\": \"SUM(strikes_swinging) / SUM(pitches)\",\n        \"pitch_foul_rate\": \"SUM(strikes_foul) / SUM(pitches)\",\n        \"pitched_called_strike_rate\": \"SUM(strikes_called) / SUM(pitches)\",\n        \"pitch_data_coverage_rate\": \"COUNT_IF(pitches > 0) / SUM(plate_appearances)\",\n    }) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.719678, "supported_languages": null}, "macro.baseball_computer.full_metric_list": {"name": "full_metric_list", "resource_type": "macro", "package_name": "baseball_computer", "path": "macros/metric_calcs.sql", "original_file_path": "macros/metric_calcs.sql", "unique_id": "macro.baseball_computer.full_metric_list", "macro_sql": "{% macro full_metric_list() %}\n    {% set all_keys = [] %}\n    {% for d in [basic_rate_stats_offense(), basic_rate_stats_pitching(), batted_ball_stats(), baserunning_stats(), pitch_sequence_stats()] %}\n        {{ all_keys.extend(d) }}\n    {% endfor %}\n    {{ log('var: ' ~ all_keys, info=True) }}\n    {{ return(all_keys) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.baseball_computer.basic_rate_stats_offense", "macro.baseball_computer.basic_rate_stats_pitching", "macro.baseball_computer.batted_ball_stats", "macro.baseball_computer.baserunning_stats", "macro.baseball_computer.pitch_sequence_stats"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.720267, "supported_languages": null}, "macro.baseball_computer.metric_table_generator": {"name": "metric_table_generator", "resource_type": "macro", "package_name": "baseball_computer", "path": "macros/metrics_table_generator.sql", "original_file_path": "macros/metrics_table_generator.sql", "unique_id": "macro.baseball_computer.metric_table_generator", "macro_sql": "{% macro metric_table_generator(kind, grouping_keys, agg_type, regular_season_only=True) %}\n    {%- if agg_type not in (\"player\", \"team\", \"league\") -%}\n        {{ exceptions.raise_compiler_error(\"Invalid agg_type - must be one of player, team, league. Got \" ~ agg_type ) }}\n    {%- endif -%}\n    {%- set player_agg = agg_type == \"player\" -%}\n\n    {%- if kind == \"offense\" -%}\n        {%- set event_model = \"event_offense_stats\" -%}\n        {%- set game_model = \"player_game_offense_stats\" if player_agg else \"team_game_offense_stats\" -%}\n        {%- set season_model = \"player_team_season_offense_stats\" if player_agg else \"team_season_offense_stats\" -%}\n        {%- set basic_metric_dict = basic_rate_stats_offense() -%}\n    {%- elif kind == \"pitching\" -%}\n        {%- set event_model = \"event_pitching_stats\" -%}\n        {%- set game_model = \"player_game_pitching_stats\" if player_agg else \"team_game_pitching_stats\" -%}\n        {%- set season_model = \"player_team_season_pitching_stats\" if player_agg else \"team_season_pitching_stats\" -%}\n        {%- set basic_metric_dict = basic_rate_stats_pitching() -%}\n    {%- elif kind == \"fielding\" -%}\n        {%- set event_model = \"event_player_fielding_stats\" if player_agg else \"event_fielding_stats\"  -%}\n        {%- set game_model = \"player_position_game_fielding_stats\" if player_agg else \"team_game_fielding_stats\" -%}\n        {%- set season_model = \"player_position_team_season_fielding_stats\" if player_agg else \"team_season_fielding_stats\" -%}\n        {%- set basic_metric_dict = basic_rate_stats_fielding() -%}\n    {%- else -%}\n        {{ exceptions.raise_compiler_error(\"Invalid kind - must be one of offense, pitching, fielding. Got \" ~ kind ) }}\n    {%- endif -%}\n\n    {%- set event_based_metrics = {} -%}\n    {%- if kind != \"fielding\"  -%}\n        {%- do event_based_metrics.update(batted_ball_stats()) -%}\n        {%- do event_based_metrics.update(baserunning_stats()) -%}\n        {%- do event_based_metrics.update(pitch_sequence_stats()) -%}\n    {%- endif -%}\n\n    {%- set cols = adapter.get_columns_in_relation(ref(event_model)) -%}\n    {%- set filtered_cols = [] -%}\n    {%- for col in cols if 'INT' in col.data_type \n            and not (col.name.endswith('_id') or col.name.endswith('_key') or col.name.endswith('_position')) \n            and col.name != \"season\" -%}\n        {%- do filtered_cols.append(col) -%}\n    {%- endfor -%}\n\n    -- Add extra context columns to get potential grouiping keys\n    WITH season AS (\n        {%- set franchise_cols = dbt_utils.get_filtered_columns_in_relation(ref('seed_franchises'),\n            except=dbt_utils.get_filtered_columns_in_relation(ref(season_model))) -%}\n        SELECT \n            s.*,\n            {%- for f_col in franchise_cols %}\n                f.{{ f_col }},\n            {%- endfor %}\n        FROM {{ ref(season_model) }} AS s\n        LEFT JOIN {{ ref('seed_franchises') }} AS f\n            ON s.team_id = f.team_id\n            AND s.season BETWEEN EXTRACT(YEAR FROM f.date_start) AND COALESCE(EXTRACT(YEAR FROM f.date_end), 9999)\n    ),\n    event AS (\n        {%- set game_cols = dbt_utils.get_filtered_columns_in_relation(ref('team_game_start_info'),\n            except=dbt_utils.get_filtered_columns_in_relation(ref(game_model))) -%}\n        SELECT \n            e.*,\n            {%- for g_col in game_cols %}\n                g.{{ g_col }},\n            {%- endfor %}\n        FROM {{ ref(event_model) }} AS e\n        LEFT JOIN {{ ref('team_game_start_info') }} AS g USING (team_id, game_id)\n    ),\n    -- Need to use the season table for basic stats/metrics to ensure full coverage...\n    basic_stats AS (\n        SELECT\n        {%- for key in grouping_keys %}\n            {{ key }},\n        {%- endfor %}\n            SUM(games) AS games,\n        {%- for col in filtered_cols %}\n            SUM({{ col.name }}) AS {{ col.name }},\n        {%- endfor -%}\n        {%- for col_name, formula in basic_metric_dict.items() %}\n            {{ formula }} AS {{ col_name }},\n        {%- endfor -%}\n        FROM season\n        {% if regular_season_only %}\n        WHERE game_type IN (SELECT game_type FROM {{ ref('seed_game_types') }} WHERE is_regular_season)\n        {% endif %}\n        GROUP BY {{ grouping_keys|join(', ') }}\n    ),\n\n    --- ...but we need to use the event table for event-based metrics,\n    event_agg AS (\n        SELECT\n        {%- for key in grouping_keys %}\n            {{ key }},\n        {%- endfor %}\n            COUNT(DISTINCT game_id) AS games,\n        {%- for col_name, formula in event_based_metrics.items() %}\n            {{ formula }} AS {{ col_name }},\n        {%- endfor -%}\n        FROM event\n        {% if regular_season_only %}\n        WHERE game_id IN (SELECT game_id FROM {{ ref('game_start_info') }} WHERE is_regular_season)\n        {% endif %}\n        GROUP BY {{ grouping_keys|join(', ') }}\n    ),\n\n    final AS (\n        SELECT\n        {%- for key in grouping_keys %}\n            {{ key }},\n        {%- endfor -%}\n        {%- for col in filtered_cols %}\n            basic_stats.{{ col.name }}::INT AS {{ col.name }},\n        {%- endfor -%}\n        {%- for col in basic_metric_dict %}\n            basic_stats.{{ col }},\n        {%- endfor -%}\n            COALESCE(event_agg.games / basic_stats.games, 0) AS event_coverage_rate,\n        {%- for col in event_based_metrics %}\n            event_agg.{{ col }},\n        {%- endfor -%}\n        FROM basic_stats\n        LEFT JOIN event_agg USING ({{ grouping_keys|join(', ') }})\n    )\n    \n    SELECT * FROM final\n{% endmacro %}", "depends_on": {"macros": ["macro.baseball_computer.basic_rate_stats_offense", "macro.baseball_computer.basic_rate_stats_pitching", "macro.baseball_computer.basic_rate_stats_fielding", "macro.baseball_computer.batted_ball_stats", "macro.baseball_computer.baserunning_stats", "macro.baseball_computer.pitch_sequence_stats", "macro.dbt_utils.get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.735212, "supported_languages": null}, "macro.baseball_computer.event_level_offense_stats": {"name": "event_level_offense_stats", "resource_type": "macro", "package_name": "baseball_computer", "path": "macros/stat_lists.sql", "original_file_path": "macros/stat_lists.sql", "unique_id": "macro.baseball_computer.event_level_offense_stats", "macro_sql": "{% macro event_level_offense_stats() %}\n    {{ return([\n        \"plate_appearances\",\n        \"at_bats\",\n        \"hits\",\n        \"singles\",\n        \"doubles\",\n        \"triples\",\n        \"home_runs\",\n        \"total_bases\",\n        \"strikeouts\",\n        \"walks\",\n        \"intentional_walks\",\n        \"hit_by_pitches\",\n        \"sacrifice_hits\",\n        \"sacrifice_flies\",\n        \"reached_on_errors\",\n        \"reached_on_interferences\",\n        \"inside_the_park_home_runs\",\n        \"ground_rule_doubles\",\n        \"infield_hits\",\n        \"on_base_opportunities\",\n        \"on_base_successes\",\n        \"runs_batted_in\",\n        \"grounded_into_double_plays\",\n        \"double_plays\",\n        \"triple_plays\",\n        \"batting_outs\",\n        \"balls_in_play\",\n        \"balls_batted\",\n        \"trajectory_fly_ball\",\n        \"trajectory_ground_ball\",\n        \"trajectory_line_drive\",\n        \"trajectory_pop_up\",\n        \"trajectory_unknown\",\n        \"trajectory_known\",\n        \"trajectory_broad_air_ball\",\n        \"trajectory_broad_ground_ball\",\n        \"trajectory_broad_unknown\",\n        \"trajectory_broad_known\",\n        \"bunts\",\n        \"batted_distance_plate\",\n        \"batted_distance_infield\",\n        \"batted_distance_outfield\",\n        \"batted_distance_unknown\",\n        \"batted_distance_known\",\n        \"fielded_by_battery\",\n        \"fielded_by_infielder\",\n        \"fielded_by_outfielder\",\n        \"fielded_by_known\",\n        \"fielded_by_unknown\",\n        \"batted_angle_left\",\n        \"batted_angle_right\",\n        \"batted_angle_middle\",\n        \"batted_angle_unknown\",\n        \"batted_angle_known\",\n        \"batted_location_plate\",\n        \"batted_location_right_infield\",\n        \"batted_location_middle_infield\",\n        \"batted_location_left_infield\",\n        \"batted_location_left_field\",\n        \"batted_location_center_field\",\n        \"batted_location_right_field\",\n        \"batted_location_unknown\",\n        \"batted_location_known\",\n        \"batted_balls_pulled\",\n        \"batted_balls_opposite_field\",\n        \"runs\",\n        \"times_reached_base\",\n        \"times_lead_runner\",\n        \"times_force_on_runner\",\n        \"times_next_base_empty\",\n        \"stolen_base_opportunities\",\n        \"stolen_base_opportunities_second\",\n        \"stolen_base_opportunities_third\",\n        \"stolen_base_opportunities_home\",\n        \"stolen_bases\",\n        \"stolen_bases_second\",\n        \"stolen_bases_third\",\n        \"stolen_bases_home\",\n        \"caught_stealing\",\n        \"caught_stealing_second\",\n        \"caught_stealing_third\",\n        \"caught_stealing_home\",\n        \"picked_off\",\n        \"picked_off_first\",\n        \"picked_off_second\",\n        \"picked_off_third\",\n        \"picked_off_caught_stealing\",\n        \"outs_on_basepaths\",\n        \"unforced_outs_on_basepaths\",\n        \"outs_avoided_on_errors\",\n        \"advances_on_wild_pitches\",\n        \"advances_on_passed_balls\",\n        \"advances_on_balks\",\n        \"advances_on_unspecified_plays\",\n        \"advances_on_defensive_indifference\",\n        \"advances_on_errors\",\n        \"plate_appearances_while_on_base\",\n        \"balls_in_play_while_running\",\n        \"balls_in_play_while_on_base\",\n        \"batter_total_bases_while_running\",\n        \"batter_total_bases_while_on_base\",\n        \"extra_base_chances\",\n        \"extra_base_advance_attempts\",\n        \"extra_bases_taken\",\n        \"bases_advanced\",\n        \"bases_advanced_on_balls_in_play\",\n        \"surplus_bases_advanced_on_balls_in_play\",\n        \"outs_on_extra_base_advance_attempts\",\n        \"pitches\",\n        \"swings\",\n        \"swings_with_contact\",\n        \"strikes\",\n        \"strikes_called\",\n        \"strikes_swinging\",\n        \"strikes_foul\",\n        \"strikes_foul_tip\",\n        \"strikes_in_play\",\n        \"strikes_unknown\",\n        \"balls\",\n        \"balls_called\",\n        \"balls_intentional\",\n        \"balls_automatic\",\n        \"unknown_pitches\",\n        \"pitchouts\",\n        \"pitcher_pickoff_attempts\",\n        \"catcher_pickoff_attempts\",\n        \"pitches_blocked_by_catcher\",\n        \"pitches_with_runners_going\",\n        \"passed_balls\",\n        \"wild_pitches\",\n        \"balks\",\n        \"left_on_base\",\n        \"left_on_base_with_two_outs\"\n    ]) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.750783, "supported_languages": null}, "macro.baseball_computer.event_level_pitching_stats": {"name": "event_level_pitching_stats", "resource_type": "macro", "package_name": "baseball_computer", "path": "macros/stat_lists.sql", "original_file_path": "macros/stat_lists.sql", "unique_id": "macro.baseball_computer.event_level_pitching_stats", "macro_sql": "{% macro event_level_pitching_stats() %}\n    {% set non_pitching_stats = [\n        \"runs_batted_in\",\n        \"plate_appearances_while_on_base\",\n        \"balls_in_play_while_running\",\n        \"balls_in_play_while_on_base\",\n        \"batter_total_bases_while_running\",\n        \"batter_total_bases_while_on_base\",\n        \"times_lead_runner\",\n        \"times_force_on_runner\",\n        \"times_next_base_empty\",\n    ] %}\n    {% set extra_pitching_stats = [\n        \"batters_faced\",\n        \"outs_recorded\",\n        \"inherited_runners_scored\",\n        \"bequeathed_runners_scored\",\n        \"team_unearned_runs\"\n    ] %}\n\n    {{ return(extra_pitching_stats + remove_items(event_level_offense_stats(), non_pitching_stats)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.baseball_computer.remove_items", "macro.baseball_computer.event_level_offense_stats"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.7513542, "supported_languages": null}, "macro.baseball_computer.game_level_pitching_stats": {"name": "game_level_pitching_stats", "resource_type": "macro", "package_name": "baseball_computer", "path": "macros/stat_lists.sql", "original_file_path": "macros/stat_lists.sql", "unique_id": "macro.baseball_computer.game_level_pitching_stats", "macro_sql": "{% macro game_level_pitching_stats() %}\n    {{ return([\n        \"games_started\",\n        \"innings_pitched\",\n        \"inherited_runners\",\n        \"bequeathed_runners\",\n        \"games_relieved\",\n        \"games_finished\",\n        \"save_situations_entered\",\n        \"holds\",\n        \"blown_saves\",\n        \"saves_by_rule\",\n        \"save_opportunities\",\n        \"wins\",\n        \"losses\",\n        \"saves\",\n        \"earned_runs\",\n        \"complete_games\",\n        \"shutouts\",\n        \"quality_starts\",\n        \"cheap_wins\",\n        \"tough_losses\",\n        \"no_decisions\",\n        \"no_hitters\",\n        \"perfect_games\",\n    ]) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.751874, "supported_languages": null}, "macro.baseball_computer.fielding_stats": {"name": "fielding_stats", "resource_type": "macro", "package_name": "baseball_computer", "path": "macros/stat_lists.sql", "original_file_path": "macros/stat_lists.sql", "unique_id": "macro.baseball_computer.fielding_stats", "macro_sql": "{% macro fielding_stats() %}\n{{ return([\n    \"outs_played\",\n    \"plate_apperances_in_field\",\n    \"plate_appearances_in_field_with_ball_in_play\",\n    \"putouts\",\n    \"assists\",\n    \"errors\",\n    \"fielders_choices\",\n    \"reaching_errors\",\n    \"double_plays\",\n    \"triple_plays\",\n    \"ground_ball_double_plays\",\n    \"passed_balls\",\n    \"balls_hit_to\",\n    \"stolen_bases\",\n    \"caught_stealing\",\n    \"games_left_field\",\n    \"games_center_field\",\n    \"games_right_field\",\n    \"unknown_putouts_while_fielding\",\n    \"assisted_putouts\",\n    \"in_play_putouts\",\n    \"in_play_assists\",\n    \"pickoffs\",\n    \"double_plays_started\",\n    \"ground_ball_double_plays_started\",\n]) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.7524118, "supported_languages": null}, "macro.baseball_computer.remove_items": {"name": "remove_items", "resource_type": "macro", "package_name": "baseball_computer", "path": "macros/stat_lists.sql", "original_file_path": "macros/stat_lists.sql", "unique_id": "macro.baseball_computer.remove_items", "macro_sql": "{% macro remove_items(my_list, values_to_remove) %}\n  {% set new_list = [] %}\n  {% for item in my_list if item not in values_to_remove %}\n    {% do new_list.append(item) %}\n  {% endfor %}\n  {{ return(new_list) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.752864, "supported_languages": null}, "macro.dbt_duckdb.duckdb__get_binding_char": {"name": "duckdb__get_binding_char", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/seed.sql", "original_file_path": "macros/seed.sql", "unique_id": "macro.dbt_duckdb.duckdb__get_binding_char", "macro_sql": "{% macro duckdb__get_binding_char() %}\n  {{ return(adapter.get_binding_char()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.7554471, "supported_languages": null}, "macro.dbt_duckdb.duckdb__get_batch_size": {"name": "duckdb__get_batch_size", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/seed.sql", "original_file_path": "macros/seed.sql", "unique_id": "macro.dbt_duckdb.duckdb__get_batch_size", "macro_sql": "{% macro duckdb__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.755597, "supported_languages": null}, "macro.dbt_duckdb.duckdb__load_csv_rows": {"name": "duckdb__load_csv_rows", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/seed.sql", "original_file_path": "macros/seed.sql", "unique_id": "macro.dbt_duckdb.duckdb__load_csv_rows", "macro_sql": "{% macro duckdb__load_csv_rows(model, agate_table) %}\n    {% if config.get('fast', true) %}\n        {% set seed_file_path = adapter.get_seed_file_path(model) %}\n        {% set delimiter = config.get('delimiter', ',') %}\n        {% set sql %}\n          COPY {{ this.render() }} FROM '{{ seed_file_path }}' (FORMAT CSV, HEADER TRUE, DELIMITER '{{ delimiter }}')\n        {% endset %}\n        {% do adapter.add_query(sql, abridge_sql_log=True) %}\n        {{ return(sql) }}\n    {% endif %}\n\n    {% set batch_size = get_batch_size() %}\n    {% set agate_table = adapter.convert_datetimes_to_strs(agate_table) %}\n    {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n    {% set bindings = [] %}\n\n    {% set statements = [] %}\n\n    {% for chunk in agate_table.rows | batch(batch_size) %}\n        {% set bindings = [] %}\n\n        {% for row in chunk %}\n            {% do bindings.extend(row) %}\n        {% endfor %}\n\n        {% set sql %}\n            insert into {{ this.render() }} ({{ cols_sql }}) values\n            {% for row in chunk -%}\n                ({%- for column in agate_table.column_names -%}\n                    {{ get_binding_char() }}\n                    {%- if not loop.last%},{%- endif %}\n                {%- endfor -%})\n                {%- if not loop.last%},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n\n        {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n        {% if loop.index0 == 0 %}\n            {% do statements.append(sql) %}\n        {% endif %}\n    {% endfor %}\n\n    {# Return SQL so we can render it out into the compiled files #}\n    {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.7578502, "supported_languages": null}, "macro.dbt_duckdb.duckdb__snapshot_merge_sql": {"name": "duckdb__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/snapshot_helper.sql", "original_file_path": "macros/snapshot_helper.sql", "unique_id": "macro.dbt_duckdb.duckdb__snapshot_merge_sql", "macro_sql": "{% macro duckdb__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    update {{ target }} as DBT_INTERNAL_TARGET\n    set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_scd_id::text = DBT_INTERNAL_TARGET.dbt_scd_id::text\n      and DBT_INTERNAL_SOURCE.dbt_change_type::text in ('update'::text, 'delete'::text)\n      and DBT_INTERNAL_TARGET.dbt_valid_to is null;\n\n    insert into {{ target }} ({{ insert_cols_csv }})\n    select {% for column in insert_cols -%}\n        DBT_INTERNAL_SOURCE.{{ column }} {%- if not loop.last %}, {%- endif %}\n    {%- endfor %}\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_change_type::text = 'insert'::text;\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.7591329, "supported_languages": null}, "macro.dbt_duckdb.build_snapshot_staging_table": {"name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/snapshot_helper.sql", "original_file_path": "macros/snapshot_helper.sql", "unique_id": "macro.dbt_duckdb.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(False, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.759707, "supported_languages": null}, "macro.dbt_duckdb.duckdb__post_snapshot": {"name": "duckdb__post_snapshot", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/snapshot_helper.sql", "original_file_path": "macros/snapshot_helper.sql", "unique_id": "macro.dbt_duckdb.duckdb__post_snapshot", "macro_sql": "{% macro duckdb__post_snapshot(staging_relation) %}\n    {% do return(drop_relation(staging_relation)) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.7599208, "supported_languages": null}, "macro.dbt_duckdb.duckdb__get_catalog": {"name": "duckdb__get_catalog", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_duckdb.duckdb__get_catalog", "macro_sql": "{% macro duckdb__get_catalog(information_schema, schemas) -%}\n  {%- call statement('catalog', fetch_result=True) -%}\n    select\n        '{{ database }}' as table_database,\n        t.table_schema,\n        t.table_name,\n        t.table_type,\n        '' as table_comment,\n        c.column_name,\n        c.ordinal_position as column_index,\n        c.data_type column_type,\n        '' as column_comment,\n        '' as table_owner\n    FROM information_schema.tables t JOIN information_schema.columns c ON t.table_schema = c.table_schema AND t.table_name = c.table_name\n    WHERE (\n        {%- for schema in schemas -%}\n          upper(t.table_schema) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n    )\n    AND t.table_type IN ('BASE TABLE', 'VIEW')\n    ORDER BY\n        t.table_schema,\n        t.table_name,\n        c.ordinal_position\n  {%- endcall -%}\n  {{ return(load_result('catalog').table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.76082, "supported_languages": null}, "macro.dbt_duckdb.duckdb__create_schema": {"name": "duckdb__create_schema", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__create_schema", "macro_sql": "{% macro duckdb__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {%- endcall -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.772616, "supported_languages": null}, "macro.dbt_duckdb.duckdb__drop_schema": {"name": "duckdb__drop_schema", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__drop_schema", "macro_sql": "{% macro duckdb__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {%- endcall -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.772853, "supported_languages": null}, "macro.dbt_duckdb.duckdb__list_schemas": {"name": "duckdb__list_schemas", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__list_schemas", "macro_sql": "{% macro duckdb__list_schemas(database) -%}\n  {% set sql %}\n    select schema_name\n    from system.information_schema.schemata\n    {% if database is not none %}\n    where catalog_name = '{{ database }}'\n    {% endif %}\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.773231, "supported_languages": null}, "macro.dbt_duckdb.duckdb__check_schema_exists": {"name": "duckdb__check_schema_exists", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__check_schema_exists", "macro_sql": "{% macro duckdb__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from system.information_schema.schemata\n        where schema_name = '{{ schema }}'\n        and catalog_name = '{{ information_schema.database }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.77357, "supported_languages": null}, "macro.dbt_duckdb.get_column_names": {"name": "get_column_names", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.get_column_names", "macro_sql": "{% macro get_column_names() %}\n  {# loop through user_provided_columns to get column names #}\n    {%- set user_provided_columns = model['columns'] -%}\n    (\n    {% for i in user_provided_columns %}\n      {% set col = user_provided_columns[i] %}\n      {{ col['name'] }} {{ \",\" if not loop.last }}\n    {% endfor %}\n  )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.774028, "supported_languages": null}, "macro.dbt_duckdb.duckdb__create_table_as": {"name": "duckdb__create_table_as", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__create_table_as", "macro_sql": "{% macro duckdb__create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {%- if language == 'sql' -%}\n    {% set contract_config = config.get('contract') %}\n    {% if contract_config.enforced %}\n      {{ get_assert_columns_equivalent(compiled_code) }}\n    {% endif %}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none }}\n\n    create {% if temporary: -%}temporary{%- endif %} table\n      {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  {% if contract_config.enforced and not temporary %}\n    {#-- DuckDB doesnt support constraints on temp tables --#}\n    {{ get_table_columns_and_constraints() }} ;\n    insert into {{ relation }} {{ get_column_names() }} (\n      {{ get_select_subquery(compiled_code) }}\n    );\n  {% else %}\n    as (\n      {{ compiled_code }}\n    );\n  {% endif %}\n  {%- elif language == 'python' -%}\n    {{ py_write_table(temporary=temporary, relation=relation, compiled_code=compiled_code) }}\n  {%- else -%}\n      {% do exceptions.raise_compiler_error(\"duckdb__create_table_as macro didn't get supported language, it got %s\" % language) %}\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt_duckdb.get_column_names", "macro.dbt.get_select_subquery", "macro.dbt_duckdb.py_write_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.7753642, "supported_languages": null}, "macro.dbt_duckdb.py_write_table": {"name": "py_write_table", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.py_write_table", "macro_sql": "{% macro py_write_table(temporary, relation, compiled_code) -%}\n{{ compiled_code }}\n\ndef materialize(df, con):\n    try:\n        import pyarrow\n        pyarrow_available = True\n    except ImportError:\n        pyarrow_available = False\n    finally:\n        if pyarrow_available and isinstance(df, pyarrow.Table):\n            # https://github.com/duckdb/duckdb/issues/6584\n            import pyarrow.dataset\n    con.execute('create table {{ relation }} as select * from df')\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.775585, "supported_languages": null}, "macro.dbt_duckdb.duckdb__create_view_as": {"name": "duckdb__create_view_as", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__create_view_as", "macro_sql": "{% macro duckdb__create_view_as(relation, sql) -%}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced %}\n    {{ get_assert_columns_equivalent(sql) }}\n  {%- endif %}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.776117, "supported_languages": null}, "macro.dbt_duckdb.duckdb__get_columns_in_relation": {"name": "duckdb__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__get_columns_in_relation", "macro_sql": "{% macro duckdb__get_columns_in_relation(relation) -%}\n  {% call statement('get_columns_in_relation', fetch_result=True) %}\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from system.information_schema.columns\n      where table_name = '{{ relation.identifier }}'\n      {% if relation.schema %}\n      and table_schema = '{{ relation.schema }}'\n      {% endif %}\n      {% if relation.database %}\n      and table_catalog = '{{ relation.database }}'\n      {% endif %}\n      order by ordinal_position\n\n  {% endcall %}\n  {% set table = load_result('get_columns_in_relation').table %}\n  {{ return(sql_convert_columns_in_relation(table)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.sql_convert_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.7767491, "supported_languages": null}, "macro.dbt_duckdb.duckdb__list_relations_without_caching": {"name": "duckdb__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__list_relations_without_caching", "macro_sql": "{% macro duckdb__list_relations_without_caching(schema_relation) %}\n  {% call statement('list_relations_without_caching', fetch_result=True) -%}\n    select\n      '{{ schema_relation.database }}' as database,\n      table_name as name,\n      table_schema as schema,\n      CASE table_type\n        WHEN 'BASE TABLE' THEN 'table'\n        WHEN 'VIEW' THEN 'view'\n        WHEN 'LOCAL TEMPORARY' THEN 'table'\n        END as type\n    from system.information_schema.tables\n    where table_schema = '{{ schema_relation.schema }}'\n    and table_catalog = '{{ schema_relation.database }}'\n  {% endcall %}\n  {{ return(load_result('list_relations_without_caching').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.777262, "supported_languages": null}, "macro.dbt_duckdb.duckdb__drop_relation": {"name": "duckdb__drop_relation", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__drop_relation", "macro_sql": "{% macro duckdb__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.777545, "supported_languages": null}, "macro.dbt_duckdb.duckdb__rename_relation": {"name": "duckdb__rename_relation", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__rename_relation", "macro_sql": "{% macro duckdb__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter {{ to_relation.type }} {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.777946, "supported_languages": null}, "macro.dbt_duckdb.duckdb__make_temp_relation": {"name": "duckdb__make_temp_relation", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__make_temp_relation", "macro_sql": "{% macro duckdb__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix ~ py_current_timestring() %}\n    {% do return(base_relation.incorporate(\n                                  path={\n                                    \"identifier\": tmp_identifier,\n                                    \"schema\": none,\n                                    \"database\": none\n                                  })) -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.py_current_timestring"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.7785091, "supported_languages": null}, "macro.dbt_duckdb.duckdb__current_timestamp": {"name": "duckdb__current_timestamp", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__current_timestamp", "macro_sql": "{% macro duckdb__current_timestamp() -%}\n  now()\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.7786229, "supported_languages": null}, "macro.dbt_duckdb.duckdb__snapshot_string_as_time": {"name": "duckdb__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__snapshot_string_as_time", "macro_sql": "{% macro duckdb__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"'\" ~ timestamp ~ \"'::timestamp\" -%}\n    {{ return(result) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.778857, "supported_languages": null}, "macro.dbt_duckdb.duckdb__snapshot_get_time": {"name": "duckdb__snapshot_get_time", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__snapshot_get_time", "macro_sql": "{% macro duckdb__snapshot_get_time() -%}\n  {{ current_timestamp() }}::timestamp\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.778996, "supported_languages": null}, "macro.dbt_duckdb.duckdb__get_incremental_default_sql": {"name": "duckdb__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__get_incremental_default_sql", "macro_sql": "{% macro duckdb__get_incremental_default_sql(arg_dict) %}\n  {% do return(get_incremental_delete_insert_sql(arg_dict)) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.7791822, "supported_languages": null}, "macro.dbt_duckdb.location_exists": {"name": "location_exists", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.location_exists", "macro_sql": "{% macro location_exists(location) -%}\n  {% do return(adapter.location_exists(location)) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.77937, "supported_languages": null}, "macro.dbt_duckdb.write_to_file": {"name": "write_to_file", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.write_to_file", "macro_sql": "{% macro write_to_file(relation, location, options) -%}\n  {% call statement('write_to_file') -%}\n    copy {{ relation }} to '{{ location }}' ({{ options }})\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.779661, "supported_languages": null}, "macro.dbt_duckdb.store_relation": {"name": "store_relation", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.store_relation", "macro_sql": "{% macro store_relation(plugin, relation, location, format, config) -%}\n  {%- set column_list = adapter.get_columns_in_relation(relation) -%}\n  {% do adapter.store_relation(plugin, relation, column_list, location, format, config) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.78004, "supported_languages": null}, "macro.dbt_duckdb.render_write_options": {"name": "render_write_options", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.render_write_options", "macro_sql": "{% macro render_write_options(config) -%}\n  {% set options = config.get('options', {}) %}\n  {% if options is not mapping %}\n    {% do exceptions.raise_compiler_error(\"The options argument must be a dictionary\") %}\n  {% endif %}\n\n  {% for k in options %}\n    {% set _ = options.update({k: render(options[k])}) %}\n  {% endfor %}\n\n  {# legacy top-level write options #}\n  {% if config.get('format') %}\n    {% set _ = options.update({'format': render(config.get('format'))}) %}\n  {% endif %}\n  {% if config.get('delimiter') %}\n    {% set _ = options.update({'delimiter': render(config.get('delimiter'))}) %}\n  {% endif %}\n\n  {% do return(options) %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.781239, "supported_languages": null}, "macro.dbt_duckdb.duckdb__get_delete_insert_merge_sql": {"name": "duckdb__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/incremental_helper.sql", "original_file_path": "macros/incremental_helper.sql", "unique_id": "macro.dbt_duckdb.duckdb__get_delete_insert_merge_sql", "macro_sql": "{% macro duckdb__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }} as DBT_INCREMENTAL_TARGET\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = DBT_INCREMENTAL_TARGET.{{ key }}\n                    {{ \"and \" if not loop.last}}\n                {% endfor %}\n                {% if incremental_predicates %}\n                    {% for predicate in incremental_predicates %}\n                        and {{ predicate }}\n                    {% endfor %}\n                {% endif %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            )\n            {%- if incremental_predicates %}\n                {% for predicate in incremental_predicates %}\n                    and {{ predicate }}\n                {% endfor %}\n            {%- endif -%};\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.784273, "supported_languages": null}, "macro.dbt_duckdb.duckdb__alter_relation_add_remove_columns": {"name": "duckdb__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/columns.sql", "original_file_path": "macros/columns.sql", "unique_id": "macro.dbt_duckdb.duckdb__alter_relation_add_remove_columns", "macro_sql": "{% macro duckdb__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns %}\n    {% for column in add_columns %}\n      {% set sql -%}\n         alter {{ relation.type }} {{ relation }} add column\n           {{ column.name }} {{ column.data_type }}\n      {%- endset -%}\n      {% do run_query(sql) %}\n    {% endfor %}\n  {% endif %}\n\n  {% if remove_columns %}\n    {% for column in remove_columns %}\n      {% set sql -%}\n        alter {{ relation.type }} {{ relation }} drop column\n          {{ column.name }}\n      {%- endset -%}\n      {% do run_query(sql) %}\n    {% endfor %}\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.785693, "supported_languages": null}, "macro.dbt_duckdb.materialization_table_duckdb": {"name": "materialization_table_duckdb", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_duckdb.materialization_table_duckdb", "macro_sql": "{% materialization table, adapter=\"duckdb\", supported_languages=['sql', 'python'] %}\n\n  {%- set language = model['language'] -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main', language=language) -%}\n    {{- create_table_as(False, intermediate_relation, compiled_code, language) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n      {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.789408, "supported_languages": ["sql", "python"]}, "macro.dbt_duckdb.materialization_external_duckdb": {"name": "materialization_external_duckdb", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/materializations/external.sql", "original_file_path": "macros/materializations/external.sql", "unique_id": "macro.dbt_duckdb.materialization_external_duckdb", "macro_sql": "{% materialization external, adapter=\"duckdb\", supported_languages=['sql', 'python'] %}\n\n  {%- set location = render(config.get('location', default=external_location(this, config))) -%})\n  {%- set rendered_options = render_write_options(config) -%}\n  {%- set format = config.get('format', 'parquet') -%}\n  {%- set write_options = adapter.external_write_options(location, rendered_options) -%}\n  {%- set read_location = adapter.external_read_location(location, rendered_options) -%}\n\n  -- set language - python or sql\n  {%- set language = model['language'] -%}\n\n  {%- set target_relation = this.incorporate(type='view') %}\n\n  -- Continue as normal materialization\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set temp_relation =  make_intermediate_relation(this.incorporate(type='table'), suffix='__dbt_tmp') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation, suffix='__dbt_int') -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_temp_relation = load_cached_relation(temp_relation) -%}\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_temp_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('create_table', language=language) -%}\n    {{- create_table_as(False, temp_relation, compiled_code, language) }}\n  {%- endcall %}\n\n  -- write an temp relation into file\n  {{ write_to_file(temp_relation, location, write_options) }}\n  -- create a view on top of the location\n  {% call statement('main', language='sql') -%}\n    create or replace view {{ intermediate_relation }} as (\n        select * from '{{ read_location }}'\n    );\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n      {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n  {{ drop_relation_if_exists(temp_relation) }}\n\n  -- register table into glue\n  {%- set plugin_name = config.get('plugin') -%}\n  {%- set glue_register = config.get('glue_register', default=false) -%}\n  {% if plugin_name is not none or glue_register is true %}\n    {% if glue_register %}\n      {# legacy hack to set the glue database name, deprecate this #}\n      {%- set plugin_name = 'glue|' ~ config.get('glue_database', 'default') -%}\n    {% endif %}\n    {% do store_relation(plugin_name, target_relation, location, format, config) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt_duckdb.external_location", "macro.dbt_duckdb.render_write_options", "macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt_duckdb.write_to_file", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt_duckdb.store_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.796329, "supported_languages": ["sql", "python"]}, "macro.dbt_duckdb.materialization_incremental_duckdb": {"name": "materialization_incremental_duckdb", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_duckdb.materialization_incremental_duckdb", "macro_sql": "{% materialization incremental, adapter=\"duckdb\", supported_languages=['sql', 'python'] -%}\n\n  {%- set language = model['language'] -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n    {% set build_sql = create_table_as(False, target_relation, compiled_code, language) %}\n  {% elif full_refresh_mode %}\n    {% set build_sql = create_table_as(False, intermediate_relation, compiled_code, language) %}\n    {% set need_swap = true %}\n  {% else %}\n    {% if language == 'python' %}\n      {% set build_python = create_table_as(False, temp_relation, compiled_code, language) %}\n      {% call statement(\"pre\", language=language) %}\n        {{- build_python }}\n      {% endcall %}\n    {% else %} {# SQL #}\n      {% do run_query(create_table_as(True, temp_relation, compiled_code, language)) %}\n    {% endif %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n    {% set language = \"sql\" %}\n\n  {% endif %}\n\n  {% call statement(\"main\", language=language) %}\n      {{- build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.statement", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.804013, "supported_languages": ["sql", "python"]}, "macro.dbt_duckdb.duckdb__dateadd": {"name": "duckdb__dateadd", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt_duckdb.duckdb__dateadd", "macro_sql": "{% macro duckdb__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ from_date_or_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.8043609, "supported_languages": null}, "macro.dbt_duckdb.duckdb__listagg": {"name": "duckdb__listagg", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt_duckdb.duckdb__listagg", "macro_sql": "{% macro duckdb__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n    {% if limit_num -%}\n    list_aggr(\n        (array_agg(\n            {{ measure }}\n            {% if order_by_clause -%}\n            {{ order_by_clause }}\n            {%- endif %}\n        ))[1:{{ limit_num }}],\n        'string_agg',\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        )\n    {%- endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.805193, "supported_languages": null}, "macro.dbt_duckdb.duckdb__datediff": {"name": "duckdb__datediff", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt_duckdb.duckdb__datediff", "macro_sql": "{% macro duckdb__datediff(first_date, second_date, datepart) -%}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.8096168, "supported_languages": null}, "macro.dbt_duckdb.duckdb__any_value": {"name": "duckdb__any_value", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt_duckdb.duckdb__any_value", "macro_sql": "{% macro duckdb__any_value(expression) -%}\n\n    arbitrary({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.809821, "supported_languages": null}, "macro.dbt_duckdb.register_upstream_external_models": {"name": "register_upstream_external_models", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/utils/upstream.sql", "original_file_path": "macros/utils/upstream.sql", "unique_id": "macro.dbt_duckdb.register_upstream_external_models", "macro_sql": "{%- macro register_upstream_external_models() -%}\n{% if execute %}\n{% set upstream_nodes = {} %}\n{% set upstream_schemas = {} %}\n{% for node in selected_resources %}\n  {% for upstream_node in graph['nodes'][node]['depends_on']['nodes'] %}\n    {% if upstream_node not in upstream_nodes and upstream_node not in selected_resources %}\n      {% do upstream_nodes.update({upstream_node: None}) %}\n      {% set upstream = graph['nodes'].get(upstream_node) %}\n      {% if upstream\n         and upstream.resource_type in ('model', 'seed')\n         and upstream.config.materialized=='external'\n      %}\n        {%- set upstream_rel = api.Relation.create(\n          database=upstream['database'],\n          schema=upstream['schema'],\n          identifier=upstream['alias']\n        ) -%}\n        {%- set location = upstream.config.get('location', external_location(upstream_rel, upstream.config)) -%}\n        {%- set rendered_options = render_write_options(upstream.config) -%}\n        {%- set upstream_location = adapter.external_read_location(location, rendered_options) -%}\n        {% if upstream_rel.schema not in upstream_schemas %}\n          {% call statement('main', language='sql') -%}\n            create schema if not exists {{ upstream_rel.schema }}\n          {%- endcall %}\n          {% do upstream_schemas.update({upstream_rel.schema: None}) %}\n        {% endif %}\n        {% call statement('main', language='sql') -%}\n          create or replace view {{ upstream_rel }} as (\n            select * from '{{ upstream_location }}'\n          );\n        {%- endcall %}\n      {%- endif %}\n    {% endif %}\n  {% endfor %}\n{% endfor %}\n{% do adapter.commit() %}\n{% endif %}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_duckdb.external_location", "macro.dbt_duckdb.render_write_options", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.8131058, "supported_languages": null}, "macro.dbt_duckdb.duckdb__split_part": {"name": "duckdb__split_part", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/utils/splitpart.sql", "original_file_path": "macros/utils/splitpart.sql", "unique_id": "macro.dbt_duckdb.duckdb__split_part", "macro_sql": "{% macro duckdb__split_part(string_text, delimiter_text, part_number) %}\n    string_split({{ string_text }}, {{ delimiter_text }})[ {{ part_number }} ]\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.813397, "supported_languages": null}, "macro.dbt_duckdb.duckdb__last_day": {"name": "duckdb__last_day", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/utils/lastday.sql", "original_file_path": "macros/utils/lastday.sql", "unique_id": "macro.dbt_duckdb.duckdb__last_day", "macro_sql": "{% macro duckdb__last_day(date, datepart) -%}\n\n    {%- if datepart == 'quarter' -%}\n    -- duckdb dateadd does not support quarter interval.\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd('month', '3', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n    {%- else -%}\n    {{dbt.default_last_day(date, datepart)}}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc", "macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.8140302, "supported_languages": null}, "macro.dbt_duckdb.external_location": {"name": "external_location", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/utils/external_location.sql", "original_file_path": "macros/utils/external_location.sql", "unique_id": "macro.dbt_duckdb.external_location", "macro_sql": "{%- macro external_location(relation, config) -%}\n  {%- if config.get('options', {}).get('partition_by') is none -%}\n    {%- set format = config.get('format', 'parquet') -%}\n    {{- adapter.external_root() }}/{{ relation.identifier }}.{{ format }}\n  {%- else -%}\n    {{- adapter.external_root() }}/{{ relation.identifier }}\n  {%- endif -%}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.814743, "supported_languages": null}, "macro.dbt.run_hooks": {"name": "run_hooks", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.816191, "supported_languages": null}, "macro.dbt.make_hook_config": {"name": "make_hook_config", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.816442, "supported_languages": null}, "macro.dbt.before_begin": {"name": "before_begin", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.8166242, "supported_languages": null}, "macro.dbt.in_transaction": {"name": "in_transaction", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.8168058, "supported_languages": null}, "macro.dbt.after_commit": {"name": "after_commit", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.816983, "supported_languages": null}, "macro.dbt.set_sql_header": {"name": "set_sql_header", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.817486, "supported_languages": null}, "macro.dbt.should_full_refresh": {"name": "should_full_refresh", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.817865, "supported_languages": null}, "macro.dbt.should_store_failures": {"name": "should_store_failures", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.818253, "supported_languages": null}, "macro.dbt.snapshot_merge_sql": {"name": "snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.818843, "supported_languages": null}, "macro.dbt.default__snapshot_merge_sql": {"name": "default__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.819197, "supported_languages": null}, "macro.dbt.strategy_dispatch": {"name": "strategy_dispatch", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.824159, "supported_languages": null}, "macro.dbt.snapshot_hash_arguments": {"name": "snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.824377, "supported_languages": null}, "macro.dbt.default__snapshot_hash_arguments": {"name": "default__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.824667, "supported_languages": null}, "macro.dbt.snapshot_timestamp_strategy": {"name": "snapshot_timestamp_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.825621, "supported_languages": null}, "macro.dbt.snapshot_string_as_time": {"name": "snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.825839, "supported_languages": null}, "macro.dbt.default__snapshot_string_as_time": {"name": "default__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.826079, "supported_languages": null}, "macro.dbt.snapshot_check_all_get_existing_columns": {"name": "snapshot_check_all_get_existing_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n            {#-- N.B. The whitespace below is necessary to avoid edge case issue with comments --#}\n            {#-- See: https://github.com/dbt-labs/dbt-core/issues/6781 --#}\n            select {{ check_cols_config | join(', ') }} from (\n                {{ node['compiled_code'] }}\n            ) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.827991, "supported_languages": null}, "macro.dbt.snapshot_check_strategy": {"name": "snapshot_check_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.829619, "supported_languages": null}, "macro.dbt.create_columns": {"name": "create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.835856, "supported_languages": null}, "macro.dbt.default__create_columns": {"name": "default__create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.836224, "supported_languages": null}, "macro.dbt.post_snapshot": {"name": "post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.83644, "supported_languages": null}, "macro.dbt.default__post_snapshot": {"name": "default__post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.836555, "supported_languages": null}, "macro.dbt.get_true_sql": {"name": "get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.8367412, "supported_languages": null}, "macro.dbt.default__get_true_sql": {"name": "default__get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.836884, "supported_languages": null}, "macro.dbt.snapshot_staging_table": {"name": "snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.837146, "supported_languages": null}, "macro.dbt.default__snapshot_staging_table": {"name": "default__snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.8383071, "supported_languages": null}, "macro.dbt.build_snapshot_table": {"name": "build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.8385558, "supported_languages": null}, "macro.dbt.default__build_snapshot_table": {"name": "default__build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.8388941, "supported_languages": null}, "macro.dbt.build_snapshot_staging_table": {"name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.839422, "supported_languages": null}, "macro.dbt.materialization_snapshot_default": {"name": "materialization_snapshot_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "unique_id": "macro.dbt.materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.8480692, "supported_languages": ["sql"]}, "macro.dbt.materialization_test_default": {"name": "materialization_test_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "unique_id": "macro.dbt.materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n    {% set store_failures_as = config.get('store_failures_as') %}\n    -- if `--store-failures` is invoked via command line and `store_failures_as` is not set,\n    -- config.get('store_failures_as', 'table') returns None, not 'table'\n    {% if store_failures_as == none %}{% set store_failures_as = 'table' %}{% endif %}\n    {% if store_failures_as not in ['table', 'view'] %}\n        {{ exceptions.raise_compiler_error(\n            \"'\" ~ store_failures_as ~ \"' is not a valid value for `store_failures_as`. \"\n            \"Accepted values are: ['ephemeral', 'table', 'view']\"\n        ) }}\n    {% endif %}\n\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type=store_failures_as) -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ get_create_sql(target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.get_create_sql", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.8517811, "supported_languages": ["sql"]}, "macro.dbt.get_test_sql": {"name": "get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.8523798, "supported_languages": null}, "macro.dbt.default__get_test_sql": {"name": "default__get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.852767, "supported_languages": null}, "macro.dbt.get_where_subquery": {"name": "get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.8532648, "supported_languages": null}, "macro.dbt.default__get_where_subquery": {"name": "default__get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.853739, "supported_languages": null}, "macro.dbt.materialization_materialized_view_default": {"name": "materialization_materialized_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialization_materialized_view_default", "macro_sql": "{% materialization materialized_view, default %}\n    {% set existing_relation = load_cached_relation(this) %}\n    {% set target_relation = this.incorporate(type=this.MaterializedView) %}\n    {% set intermediate_relation = make_intermediate_relation(target_relation) %}\n    {% set backup_relation_type = target_relation.MaterializedView if existing_relation is none else existing_relation.type %}\n    {% set backup_relation = make_backup_relation(target_relation, backup_relation_type) %}\n\n    {{ materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) }}\n\n        {% set build_sql = materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n        {% if build_sql == '' %}\n            {{ materialized_view_execute_no_op(target_relation) }}\n        {% else %}\n            {{ materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) }}\n        {% endif %}\n\n    {{ materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) }}\n\n    {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.materialized_view_setup", "macro.dbt.materialized_view_get_build_sql", "macro.dbt.materialized_view_execute_no_op", "macro.dbt.materialized_view_execute_build_sql", "macro.dbt.materialized_view_teardown"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.861068, "supported_languages": ["sql"]}, "macro.dbt.materialized_view_setup": {"name": "materialized_view_setup", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_setup", "macro_sql": "{% macro materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) %}\n\n    -- backup_relation and intermediate_relation should not already exist in the database\n    -- it's possible these exist because of a previous run that exited unexpectedly\n    {% set preexisting_backup_relation = load_cached_relation(backup_relation) %}\n    {% set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) %}\n\n    -- drop the temp relations if they exist already in the database\n    {{ drop_relation_if_exists(preexisting_backup_relation) }}\n    {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n\n    {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.8615592, "supported_languages": null}, "macro.dbt.materialized_view_teardown": {"name": "materialized_view_teardown", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_teardown", "macro_sql": "{% macro materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) %}\n\n    -- drop the temp relations if they exist to leave the database clean for the next run\n    {{ drop_relation_if_exists(backup_relation) }}\n    {{ drop_relation_if_exists(intermediate_relation) }}\n\n    {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.861875, "supported_languages": null}, "macro.dbt.materialized_view_get_build_sql": {"name": "materialized_view_get_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_get_build_sql", "macro_sql": "{% macro materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n    {% set full_refresh_mode = should_full_refresh() %}\n\n    -- determine the scenario we're in: create, full_refresh, alter, refresh data\n    {% if existing_relation is none %}\n        {% set build_sql = get_create_materialized_view_as_sql(target_relation, sql) %}\n    {% elif full_refresh_mode or not existing_relation.is_materialized_view %}\n        {% set build_sql = get_replace_sql(existing_relation, target_relation, sql) %}\n    {% else %}\n\n        -- get config options\n        {% set on_configuration_change = config.get('on_configuration_change') %}\n        {% set configuration_changes = get_materialized_view_configuration_changes(existing_relation, config) %}\n\n        {% if configuration_changes is none %}\n            {% set build_sql = refresh_materialized_view(target_relation) %}\n\n        {% elif on_configuration_change == 'apply' %}\n            {% set build_sql = get_alter_materialized_view_as_sql(target_relation, configuration_changes, sql, existing_relation, backup_relation, intermediate_relation) %}\n        {% elif on_configuration_change == 'continue' %}\n            {% set build_sql = '' %}\n            {{ exceptions.warn(\"Configuration changes were identified and `on_configuration_change` was set to `continue` for `\" ~ target_relation ~ \"`\") }}\n        {% elif on_configuration_change == 'fail' %}\n            {{ exceptions.raise_fail_fast_error(\"Configuration changes were identified and `on_configuration_change` was set to `fail` for `\" ~ target_relation ~ \"`\") }}\n\n        {% else %}\n            -- this only happens if the user provides a value other than `apply`, 'skip', 'fail'\n            {{ exceptions.raise_compiler_error(\"Unexpected configuration scenario\") }}\n\n        {% endif %}\n\n    {% endif %}\n\n    {% do return(build_sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.get_create_materialized_view_as_sql", "macro.dbt.get_replace_sql", "macro.dbt.get_materialized_view_configuration_changes", "macro.dbt.refresh_materialized_view", "macro.dbt.get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.863477, "supported_languages": null}, "macro.dbt.materialized_view_execute_no_op": {"name": "materialized_view_execute_no_op", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_no_op", "macro_sql": "{% macro materialized_view_execute_no_op(target_relation) %}\n    {% do store_raw_result(\n        name=\"main\",\n        message=\"skip \" ~ target_relation,\n        code=\"skip\",\n        rows_affected=\"-1\"\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.8637671, "supported_languages": null}, "macro.dbt.materialized_view_execute_build_sql": {"name": "materialized_view_execute_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_build_sql", "macro_sql": "{% macro materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) %}\n\n    -- `BEGIN` happens here:\n    {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n    {% set grant_config = config.get('grants') %}\n\n    {% call statement(name=\"main\") %}\n        {{ build_sql }}\n    {% endcall %}\n\n    {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n    {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n    {% do persist_docs(target_relation, model) %}\n\n    {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n    {{ adapter.commit() }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.864574, "supported_languages": null}, "macro.dbt.materialization_view_default": {"name": "materialization_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view.sql", "original_file_path": "macros/materializations/models/view.sql", "unique_id": "macro.dbt.materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.868404, "supported_languages": ["sql"]}, "macro.dbt.materialization_table_default": {"name": "materialization_table_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table.sql", "original_file_path": "macros/materializations/models/table.sql", "unique_id": "macro.dbt.materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.872226, "supported_languages": ["sql"]}, "macro.dbt.get_quoted_csv": {"name": "get_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.874563, "supported_languages": null}, "macro.dbt.diff_columns": {"name": "diff_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.875252, "supported_languages": null}, "macro.dbt.diff_column_data_types": {"name": "diff_column_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.876092, "supported_languages": null}, "macro.dbt.get_merge_update_columns": {"name": "get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.876391, "supported_languages": null}, "macro.dbt.default__get_merge_update_columns": {"name": "default__get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.877285, "supported_languages": null}, "macro.dbt.get_merge_sql": {"name": "get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n   -- back compat for old kwarg name\n  {% set incremental_predicates = kwargs.get('predicates', incremental_predicates) %}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.8870559, "supported_languages": null}, "macro.dbt.default__get_merge_sql": {"name": "default__get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{\"(\" ~ predicates | join(\") and (\") ~ \")\"}}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.889187, "supported_languages": null}, "macro.dbt.get_delete_insert_merge_sql": {"name": "get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.8895192, "supported_languages": null}, "macro.dbt.default__get_delete_insert_merge_sql": {"name": "default__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last}}\n                {% endfor %}\n                {% if incremental_predicates %}\n                    {% for predicate in incremental_predicates %}\n                        and {{ predicate }}\n                    {% endfor %}\n                {% endif %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            )\n            {%- if incremental_predicates %}\n                {% for predicate in incremental_predicates %}\n                    and {{ predicate }}\n                {% endfor %}\n            {%- endif -%};\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.89083, "supported_languages": null}, "macro.dbt.get_insert_overwrite_merge_sql": {"name": "get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.891179, "supported_languages": null}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"name": "default__get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.89199, "supported_languages": null}, "macro.dbt.is_incremental": {"name": "is_incremental", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "unique_id": "macro.dbt.is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.892831, "supported_languages": null}, "macro.dbt.get_incremental_append_sql": {"name": "get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.894101, "supported_languages": null}, "macro.dbt.default__get_incremental_append_sql": {"name": "default__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.894429, "supported_languages": null}, "macro.dbt.get_incremental_delete_insert_sql": {"name": "get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.894689, "supported_languages": null}, "macro.dbt.default__get_incremental_delete_insert_sql": {"name": "default__get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.8951218, "supported_languages": null}, "macro.dbt.get_incremental_merge_sql": {"name": "get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.895415, "supported_languages": null}, "macro.dbt.default__get_incremental_merge_sql": {"name": "default__get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.895812, "supported_languages": null}, "macro.dbt.get_incremental_insert_overwrite_sql": {"name": "get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.896074, "supported_languages": null}, "macro.dbt.default__get_incremental_insert_overwrite_sql": {"name": "default__get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.8964212, "supported_languages": null}, "macro.dbt.get_incremental_default_sql": {"name": "get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__get_incremental_default_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.8967009, "supported_languages": null}, "macro.dbt.default__get_incremental_default_sql": {"name": "default__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.896894, "supported_languages": null}, "macro.dbt.get_insert_into_sql": {"name": "get_insert_into_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.8972511, "supported_languages": null}, "macro.dbt.materialization_incremental_default": {"name": "materialization_incremental_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "unique_id": "macro.dbt.materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.903925, "supported_languages": ["sql"]}, "macro.dbt.incremental_validate_on_schema_change": {"name": "incremental_validate_on_schema_change", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.9125419, "supported_languages": null}, "macro.dbt.check_for_schema_changes": {"name": "check_for_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.914091, "supported_languages": null}, "macro.dbt.sync_column_schemas": {"name": "sync_column_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.915645, "supported_languages": null}, "macro.dbt.process_schema_changes": {"name": "process_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.916707, "supported_languages": null}, "macro.dbt.can_clone_table": {"name": "can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/can_clone_table.sql", "original_file_path": "macros/materializations/models/clone/can_clone_table.sql", "unique_id": "macro.dbt.can_clone_table", "macro_sql": "{% macro can_clone_table() %}\n    {{ return(adapter.dispatch('can_clone_table', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__can_clone_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.917015, "supported_languages": null}, "macro.dbt.default__can_clone_table": {"name": "default__can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/can_clone_table.sql", "original_file_path": "macros/materializations/models/clone/can_clone_table.sql", "unique_id": "macro.dbt.default__can_clone_table", "macro_sql": "{% macro default__can_clone_table() %}\n    {{ return(False) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.917161, "supported_languages": null}, "macro.dbt.create_or_replace_clone": {"name": "create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/create_or_replace_clone.sql", "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql", "unique_id": "macro.dbt.create_or_replace_clone", "macro_sql": "{% macro create_or_replace_clone(this_relation, defer_relation) %}\n    {{ return(adapter.dispatch('create_or_replace_clone', 'dbt')(this_relation, defer_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_or_replace_clone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.9175448, "supported_languages": null}, "macro.dbt.default__create_or_replace_clone": {"name": "default__create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/create_or_replace_clone.sql", "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql", "unique_id": "macro.dbt.default__create_or_replace_clone", "macro_sql": "{% macro default__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace table {{ this_relation }} clone {{ defer_relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.917713, "supported_languages": null}, "macro.dbt.materialization_clone_default": {"name": "materialization_clone_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/clone.sql", "original_file_path": "macros/materializations/models/clone/clone.sql", "unique_id": "macro.dbt.materialization_clone_default", "macro_sql": "{%- materialization clone, default -%}\n\n  {%- set relations = {'relations': []} -%}\n\n  {%- if not defer_relation -%}\n      -- nothing to do\n      {{ log(\"No relation found in state manifest for \" ~ model.unique_id, info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n\n  {%- if existing_relation and not flags.FULL_REFRESH -%}\n      -- noop!\n      {{ log(\"Relation \" ~ existing_relation ~ \" already exists\", info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set other_existing_relation = load_cached_relation(defer_relation) -%}\n\n  -- If this is a database that can do zero-copy cloning of tables, and the other relation is a table, then this will be a table\n  -- Otherwise, this will be a view\n\n  {% set can_clone_table = can_clone_table() %}\n\n  {%- if other_existing_relation and other_existing_relation.type == 'table' and can_clone_table -%}\n\n      {%- set target_relation = this.incorporate(type='table') -%}\n      {% if existing_relation is not none and not existing_relation.is_table %}\n        {{ log(\"Dropping relation \" ~ existing_relation ~ \" because it is of type \" ~ existing_relation.type) }}\n        {{ drop_relation_if_exists(existing_relation) }}\n      {% endif %}\n\n      -- as a general rule, data platforms that can clone tables can also do atomic 'create or replace'\n      {% call statement('main') %}\n          {% if target_relation and defer_relation and target_relation == defer_relation %}\n              {{ log(\"Target relation and defer relation are the same, skipping clone for relation: \" ~ target_relation) }}\n          {% else %}\n              {{ create_or_replace_clone(target_relation, defer_relation) }}\n          {% endif %}\n\n      {% endcall %}\n\n      {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n      {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n      {% do persist_docs(target_relation, model) %}\n\n      {{ return({'relations': [target_relation]}) }}\n\n  {%- else -%}\n\n      {%- set target_relation = this.incorporate(type='view') -%}\n\n      -- reuse the view materialization\n      -- TODO: support actual dispatch for materialization macros\n      -- Tracking ticket: https://github.com/dbt-labs/dbt-core/issues/7799\n      {% set search_name = \"materialization_view_\" ~ adapter.type() %}\n      {% if not search_name in context %}\n          {% set search_name = \"materialization_view_default\" %}\n      {% endif %}\n      {% set materialization_macro = context[search_name] %}\n      {% set relations = materialization_macro() %}\n      {{ return(relations) }}\n\n  {%- endif -%}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.can_clone_table", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_or_replace_clone", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.9226508, "supported_languages": ["sql"]}, "macro.dbt.materialization_seed_default": {"name": "materialization_seed_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "unique_id": "macro.dbt.materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparison later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.9269, "supported_languages": ["sql"]}, "macro.dbt.create_csv_table": {"name": "create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.934622, "supported_languages": null}, "macro.dbt.default__create_csv_table": {"name": "default__create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.935755, "supported_languages": null}, "macro.dbt.reset_csv_table": {"name": "reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.9360719, "supported_languages": null}, "macro.dbt.default__reset_csv_table": {"name": "default__reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.936694, "supported_languages": null}, "macro.dbt.get_csv_sql": {"name": "get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.936954, "supported_languages": null}, "macro.dbt.default__get_csv_sql": {"name": "default__get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.937124, "supported_languages": null}, "macro.dbt.get_binding_char": {"name": "get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.937328, "supported_languages": null}, "macro.dbt.default__get_binding_char": {"name": "default__get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.937493, "supported_languages": null}, "macro.dbt.get_batch_size": {"name": "get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.937706, "supported_languages": null}, "macro.dbt.default__get_batch_size": {"name": "default__get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.937868, "supported_languages": null}, "macro.dbt.get_seed_column_quoted_csv": {"name": "get_seed_column_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.938519, "supported_languages": null}, "macro.dbt.load_csv_rows": {"name": "load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.9387572, "supported_languages": null}, "macro.dbt.default__load_csv_rows": {"name": "default__load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.940423, "supported_languages": null}, "macro.dbt.generate_alias_name": {"name": "generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.941001, "supported_languages": null}, "macro.dbt.default__generate_alias_name": {"name": "default__generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- elif node.version -%}\n\n        {{ return(node.name ~ \"_v\" ~ (node.version | replace(\".\", \"_\"))) }}\n\n    {%- else -%}\n\n        {{ node.name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.9414852, "supported_languages": null}, "macro.dbt.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.942177, "supported_languages": null}, "macro.dbt.default__generate_schema_name": {"name": "default__generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.942518, "supported_languages": null}, "macro.dbt.generate_schema_name_for_env": {"name": "generate_schema_name_for_env", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.9428759, "supported_languages": null}, "macro.dbt.generate_database_name": {"name": "generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.943389, "supported_languages": null}, "macro.dbt.default__generate_database_name": {"name": "default__generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.9437141, "supported_languages": null}, "macro.dbt.get_drop_sql": {"name": "get_drop_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.get_drop_sql", "macro_sql": "{%- macro get_drop_sql(relation) -%}\n    {{- log('Applying DROP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.9447029, "supported_languages": null}, "macro.dbt.default__get_drop_sql": {"name": "default__get_drop_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.default__get_drop_sql", "macro_sql": "{%- macro default__get_drop_sql(relation) -%}\n\n    {%- if relation.is_view -%}\n        {{ drop_view(relation) }}\n\n    {%- elif relation.is_table -%}\n        {{ drop_table(relation) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ drop_materialized_view(relation) }}\n\n    {%- else -%}\n        drop {{ relation.type }} if exists {{ relation }} cascade\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.drop_view", "macro.dbt.drop_table", "macro.dbt.drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.945174, "supported_languages": null}, "macro.dbt.drop_relation": {"name": "drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n    {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.9454012, "supported_languages": null}, "macro.dbt.default__drop_relation": {"name": "default__drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n    {% call statement('drop_relation', auto_begin=False) -%}\n        {{ get_drop_sql(relation) }}\n    {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.945674, "supported_languages": null}, "macro.dbt.drop_relation_if_exists": {"name": "drop_relation_if_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.945927, "supported_languages": null}, "macro.dbt.get_replace_sql": {"name": "get_replace_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/replace.sql", "original_file_path": "macros/relations/replace.sql", "unique_id": "macro.dbt.get_replace_sql", "macro_sql": "{% macro get_replace_sql(existing_relation, target_relation, sql) %}\n    {{- log('Applying REPLACE to: ' ~ existing_relation) -}}\n    {{- adapter.dispatch('get_replace_sql', 'dbt')(existing_relation, target_relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.947059, "supported_languages": null}, "macro.dbt.default__get_replace_sql": {"name": "default__get_replace_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/replace.sql", "original_file_path": "macros/relations/replace.sql", "unique_id": "macro.dbt.default__get_replace_sql", "macro_sql": "{% macro default__get_replace_sql(existing_relation, target_relation, sql) %}\n\n    {# /* use a create or replace statement if possible */ #}\n\n    {% set is_replaceable = existing_relation.type == target_relation_type and existing_relation.can_be_replaced %}\n\n    {% if is_replaceable and existing_relation.is_view %}\n        {{ get_replace_view_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_table %}\n        {{ get_replace_table_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_materialized_view %}\n        {{ get_replace_materialized_view_sql(target_relation, sql) }}\n\n    {# /* a create or replace statement is not possible, so try to stage and/or backup to be safe */ #}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one using a backup */ #}\n    {%- elif target_relation.can_be_renamed and existing_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one without using a backup */ #}\n    {%- elif target_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }}\n\n    {# /* create target_relation in place by first backing up the existing relation */ #}\n    {%- elif existing_relation.can_be_renamed -%}\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* no renaming is allowed, so just drop and create */ #}\n    {%- else -%}\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }}\n\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_replace_view_sql", "macro.dbt.get_replace_table_sql", "macro.dbt.get_replace_materialized_view_sql", "macro.dbt.get_create_intermediate_sql", "macro.dbt.get_create_backup_sql", "macro.dbt.get_rename_intermediate_sql", "macro.dbt.get_drop_backup_sql", "macro.dbt.get_drop_sql", "macro.dbt.get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.9485419, "supported_languages": null}, "macro.dbt.get_create_intermediate_sql": {"name": "get_create_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_intermediate.sql", "original_file_path": "macros/relations/create_intermediate.sql", "unique_id": "macro.dbt.get_create_intermediate_sql", "macro_sql": "{%- macro get_create_intermediate_sql(relation, sql) -%}\n    {{- log('Applying CREATE INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_intermediate_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_intermediate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.949043, "supported_languages": null}, "macro.dbt.default__get_create_intermediate_sql": {"name": "default__get_create_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_intermediate.sql", "original_file_path": "macros/relations/create_intermediate.sql", "unique_id": "macro.dbt.default__get_create_intermediate_sql", "macro_sql": "{%- macro default__get_create_intermediate_sql(relation, sql) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    -- drop any pre-existing intermediate\n    {{ get_drop_sql(intermediate_relation) }};\n\n    {{ get_create_sql(intermediate_relation, sql) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.949357, "supported_languages": null}, "macro.dbt.get_drop_backup_sql": {"name": "get_drop_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop_backup.sql", "original_file_path": "macros/relations/drop_backup.sql", "unique_id": "macro.dbt.get_drop_backup_sql", "macro_sql": "{%- macro get_drop_backup_sql(relation) -%}\n    {{- log('Applying DROP BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_drop_backup_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.949783, "supported_languages": null}, "macro.dbt.default__get_drop_backup_sql": {"name": "default__get_drop_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop_backup.sql", "original_file_path": "macros/relations/drop_backup.sql", "unique_id": "macro.dbt.default__get_drop_backup_sql", "macro_sql": "{%- macro default__get_drop_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    {{ get_drop_sql(backup_relation) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.950067, "supported_languages": null}, "macro.dbt.get_rename_sql": {"name": "get_rename_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.get_rename_sql", "macro_sql": "{%- macro get_rename_sql(relation, new_name) -%}\n    {{- log('Applying RENAME to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_sql', 'dbt')(relation, new_name) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.951048, "supported_languages": null}, "macro.dbt.default__get_rename_sql": {"name": "default__get_rename_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.default__get_rename_sql", "macro_sql": "{%- macro default__get_rename_sql(relation, new_name) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_rename_view_sql(relation, new_name) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_rename_table_sql(relation, new_name) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_rename_materialized_view_sql(relation, new_name) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_rename_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.get_rename_view_sql", "macro.dbt.get_rename_table_sql", "macro.dbt.get_rename_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.9516091, "supported_languages": null}, "macro.dbt.rename_relation": {"name": "rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.95188, "supported_languages": null}, "macro.dbt.default__rename_relation": {"name": "default__rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.952267, "supported_languages": null}, "macro.dbt.get_create_backup_sql": {"name": "get_create_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_backup.sql", "original_file_path": "macros/relations/create_backup.sql", "unique_id": "macro.dbt.get_create_backup_sql", "macro_sql": "{%- macro get_create_backup_sql(relation) -%}\n    {{- log('Applying CREATE BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_backup_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.952739, "supported_languages": null}, "macro.dbt.default__get_create_backup_sql": {"name": "default__get_create_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_backup.sql", "original_file_path": "macros/relations/create_backup.sql", "unique_id": "macro.dbt.default__get_create_backup_sql", "macro_sql": "{%- macro default__get_create_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    -- drop any pre-existing backup\n    {{ get_drop_sql(backup_relation) }};\n\n    {{ get_rename_sql(relation, backup_relation.identifier) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.9531069, "supported_languages": null}, "macro.dbt.get_create_sql": {"name": "get_create_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create.sql", "original_file_path": "macros/relations/create.sql", "unique_id": "macro.dbt.get_create_sql", "macro_sql": "{%- macro get_create_sql(relation, sql) -%}\n    {{- log('Applying CREATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.953761, "supported_languages": null}, "macro.dbt.default__get_create_sql": {"name": "default__get_create_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create.sql", "original_file_path": "macros/relations/create.sql", "unique_id": "macro.dbt.default__get_create_sql", "macro_sql": "{%- macro default__get_create_sql(relation, sql) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_create_view_as_sql(relation, sql) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_create_table_as_sql(False, relation, sql) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_create_materialized_view_as_sql(relation, sql) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_create_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.get_create_view_as_sql", "macro.dbt.get_create_table_as_sql", "macro.dbt.get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.954489, "supported_languages": null}, "macro.dbt.get_rename_intermediate_sql": {"name": "get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename_intermediate.sql", "original_file_path": "macros/relations/rename_intermediate.sql", "unique_id": "macro.dbt.get_rename_intermediate_sql", "macro_sql": "{%- macro get_rename_intermediate_sql(relation) -%}\n    {{- log('Applying RENAME INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_intermediate_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_rename_intermediate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.954931, "supported_languages": null}, "macro.dbt.default__get_rename_intermediate_sql": {"name": "default__get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename_intermediate.sql", "original_file_path": "macros/relations/rename_intermediate.sql", "unique_id": "macro.dbt.default__get_rename_intermediate_sql", "macro_sql": "{%- macro default__get_rename_intermediate_sql(relation) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    {{ get_rename_sql(intermediate_relation, relation.identifier) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.955203, "supported_languages": null}, "macro.dbt.drop_materialized_view": {"name": "drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/drop.sql", "original_file_path": "macros/relations/materialized_view/drop.sql", "unique_id": "macro.dbt.drop_materialized_view", "macro_sql": "{% macro drop_materialized_view(relation) -%}\n    {{ return(adapter.dispatch('drop_materialized_view', 'dbt')(relation)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.9555452, "supported_languages": null}, "macro.dbt.default__drop_materialized_view": {"name": "default__drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/drop.sql", "original_file_path": "macros/relations/materialized_view/drop.sql", "unique_id": "macro.dbt.default__drop_materialized_view", "macro_sql": "{% macro default__drop_materialized_view(relation) -%}\n    drop materialized view if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.955677, "supported_languages": null}, "macro.dbt.get_replace_materialized_view_sql": {"name": "get_replace_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/replace.sql", "original_file_path": "macros/relations/materialized_view/replace.sql", "unique_id": "macro.dbt.get_replace_materialized_view_sql", "macro_sql": "{% macro get_replace_materialized_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_materialized_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.956028, "supported_languages": null}, "macro.dbt.default__get_replace_materialized_view_sql": {"name": "default__get_replace_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/replace.sql", "original_file_path": "macros/relations/materialized_view/replace.sql", "unique_id": "macro.dbt.default__get_replace_materialized_view_sql", "macro_sql": "{% macro default__get_replace_materialized_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.9562151, "supported_languages": null}, "macro.dbt.refresh_materialized_view": {"name": "refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/refresh.sql", "original_file_path": "macros/relations/materialized_view/refresh.sql", "unique_id": "macro.dbt.refresh_materialized_view", "macro_sql": "{% macro refresh_materialized_view(relation) %}\n    {{- log('Applying REFRESH to: ' ~ relation) -}}\n    {{- adapter.dispatch('refresh_materialized_view', 'dbt')(relation) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__refresh_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.956615, "supported_languages": null}, "macro.dbt.default__refresh_materialized_view": {"name": "default__refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/refresh.sql", "original_file_path": "macros/relations/materialized_view/refresh.sql", "unique_id": "macro.dbt.default__refresh_materialized_view", "macro_sql": "{% macro default__refresh_materialized_view(relation) %}\n    {{ exceptions.raise_compiler_error(\"`refresh_materialized_view` has not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.956785, "supported_languages": null}, "macro.dbt.get_rename_materialized_view_sql": {"name": "get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/rename.sql", "original_file_path": "macros/relations/materialized_view/rename.sql", "unique_id": "macro.dbt.get_rename_materialized_view_sql", "macro_sql": "{% macro get_rename_materialized_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_materialized_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_rename_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.95714, "supported_languages": null}, "macro.dbt.default__get_rename_materialized_view_sql": {"name": "default__get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/rename.sql", "original_file_path": "macros/relations/materialized_view/rename.sql", "unique_id": "macro.dbt.default__get_rename_materialized_view_sql", "macro_sql": "{% macro default__get_rename_materialized_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.957325, "supported_languages": null}, "macro.dbt.get_alter_materialized_view_as_sql": {"name": "get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.get_alter_materialized_view_as_sql", "macro_sql": "{% macro get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{- log('Applying ALTER to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_alter_materialized_view_as_sql', 'dbt')(\n        relation,\n        configuration_changes,\n        sql,\n        existing_relation,\n        backup_relation,\n        intermediate_relation\n    ) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.958147, "supported_languages": null}, "macro.dbt.default__get_alter_materialized_view_as_sql": {"name": "default__get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.default__get_alter_materialized_view_as_sql", "macro_sql": "{% macro default__get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.958394, "supported_languages": null}, "macro.dbt.get_materialized_view_configuration_changes": {"name": "get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.get_materialized_view_configuration_changes", "macro_sql": "{% macro get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    /* {#\n    It's recommended that configuration changes be formatted as follows:\n    {\"<change_category>\": [{\"action\": \"<name>\", \"context\": ...}]}\n\n    For example:\n    {\n        \"indexes\": [\n            {\"action\": \"drop\", \"context\": \"index_abc\"},\n            {\"action\": \"create\", \"context\": {\"columns\": [\"column_1\", \"column_2\"], \"type\": \"hash\", \"unique\": True}},\n        ],\n    }\n\n    Either way, `get_materialized_view_configuration_changes` needs to align with `get_alter_materialized_view_as_sql`.\n    #} */\n    {{- log('Determining configuration changes on: ' ~ existing_relation) -}}\n    {%- do return(adapter.dispatch('get_materialized_view_configuration_changes', 'dbt')(existing_relation, new_config)) -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_materialized_view_configuration_changes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.9587462, "supported_languages": null}, "macro.dbt.default__get_materialized_view_configuration_changes": {"name": "default__get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.default__get_materialized_view_configuration_changes", "macro_sql": "{% macro default__get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.958934, "supported_languages": null}, "macro.dbt.get_create_materialized_view_as_sql": {"name": "get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/create.sql", "original_file_path": "macros/relations/materialized_view/create.sql", "unique_id": "macro.dbt.get_create_materialized_view_as_sql", "macro_sql": "{% macro get_create_materialized_view_as_sql(relation, sql) -%}\n    {{- adapter.dispatch('get_create_materialized_view_as_sql', 'dbt')(relation, sql) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.959286, "supported_languages": null}, "macro.dbt.default__get_create_materialized_view_as_sql": {"name": "default__get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/create.sql", "original_file_path": "macros/relations/materialized_view/create.sql", "unique_id": "macro.dbt.default__get_create_materialized_view_as_sql", "macro_sql": "{% macro default__get_create_materialized_view_as_sql(relation, sql) -%}\n    {{ exceptions.raise_compiler_error(\n        \"`get_create_materialized_view_as_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.959473, "supported_languages": null}, "macro.dbt.get_table_columns_and_constraints": {"name": "get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_table_columns_and_constraints", "macro_sql": "{%- macro get_table_columns_and_constraints() -%}\n  {{ adapter.dispatch('get_table_columns_and_constraints', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.960906, "supported_languages": null}, "macro.dbt.default__get_table_columns_and_constraints": {"name": "default__get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_table_columns_and_constraints", "macro_sql": "{% macro default__get_table_columns_and_constraints() -%}\n  {{ return(table_columns_and_constraints()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.961066, "supported_languages": null}, "macro.dbt.table_columns_and_constraints": {"name": "table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.table_columns_and_constraints", "macro_sql": "{% macro table_columns_and_constraints() %}\n  {# loop through user_provided_columns to create DDL with data types and constraints #}\n    {%- set raw_column_constraints = adapter.render_raw_columns_constraints(raw_columns=model['columns']) -%}\n    {%- set raw_model_constraints = adapter.render_raw_model_constraints(raw_constraints=model['constraints']) -%}\n    (\n    {% for c in raw_column_constraints -%}\n      {{ c }}{{ \",\" if not loop.last or raw_model_constraints }}\n    {% endfor %}\n    {% for c in raw_model_constraints -%}\n        {{ c }}{{ \",\" if not loop.last }}\n    {% endfor -%}\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.9617531, "supported_languages": null}, "macro.dbt.get_assert_columns_equivalent": {"name": "get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_assert_columns_equivalent", "macro_sql": "\n\n{%- macro get_assert_columns_equivalent(sql) -%}\n  {{ adapter.dispatch('get_assert_columns_equivalent', 'dbt')(sql) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.9619782, "supported_languages": null}, "macro.dbt.default__get_assert_columns_equivalent": {"name": "default__get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_assert_columns_equivalent", "macro_sql": "{% macro default__get_assert_columns_equivalent(sql) -%}\n  {{ return(assert_columns_equivalent(sql)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.962147, "supported_languages": null}, "macro.dbt.assert_columns_equivalent": {"name": "assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.assert_columns_equivalent", "macro_sql": "{% macro assert_columns_equivalent(sql) %}\n\n  {#-- First ensure the user has defined 'columns' in yaml specification --#}\n  {%- set user_defined_columns = model['columns'] -%}\n  {%- if not user_defined_columns -%}\n      {{ exceptions.raise_contract_error([], []) }}\n  {%- endif -%}\n\n  {#-- Obtain the column schema provided by sql file. #}\n  {%- set sql_file_provided_columns = get_column_schema_from_query(sql, config.get('sql_header', none)) -%}\n  {#--Obtain the column schema provided by the schema file by generating an 'empty schema' query from the model's columns. #}\n  {%- set schema_file_provided_columns = get_column_schema_from_query(get_empty_schema_sql(user_defined_columns)) -%}\n\n  {#-- create dictionaries with name and formatted data type and strings for exception #}\n  {%- set sql_columns = format_columns(sql_file_provided_columns) -%}\n  {%- set yaml_columns = format_columns(schema_file_provided_columns)  -%}\n\n  {%- if sql_columns|length != yaml_columns|length -%}\n    {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n  {%- endif -%}\n\n  {%- for sql_col in sql_columns -%}\n    {%- set yaml_col = [] -%}\n    {%- for this_col in yaml_columns -%}\n      {%- if this_col['name'] == sql_col['name'] -%}\n        {%- do yaml_col.append(this_col) -%}\n        {%- break -%}\n      {%- endif -%}\n    {%- endfor -%}\n    {%- if not yaml_col -%}\n      {#-- Column with name not found in yaml #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n    {%- if sql_col['formatted'] != yaml_col[0]['formatted'] -%}\n      {#-- Column data types don't match #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n  {%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_column_schema_from_query", "macro.dbt.get_empty_schema_sql", "macro.dbt.format_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.963812, "supported_languages": null}, "macro.dbt.format_columns": {"name": "format_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.format_columns", "macro_sql": "{% macro format_columns(columns) %}\n  {% set formatted_columns = [] %}\n  {% for column in columns %}\n    {%- set formatted_column = adapter.dispatch('format_column', 'dbt')(column) -%}\n    {%- do formatted_columns.append(formatted_column) -%}\n  {% endfor %}\n  {{ return(formatted_columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.codegen.format_column", "macro.dbt.default__format_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.964409, "supported_languages": null}, "macro.dbt.default__format_column": {"name": "default__format_column", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__format_column", "macro_sql": "{% macro default__format_column(column) -%}\n  {% set data_type = column.dtype %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.964841, "supported_languages": null}, "macro.dbt.drop_table": {"name": "drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt.drop_table", "macro_sql": "{% macro drop_table(relation) -%}\n    {{ return(adapter.dispatch('drop_table', 'dbt')(relation)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.9651918, "supported_languages": null}, "macro.dbt.default__drop_table": {"name": "default__drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt.default__drop_table", "macro_sql": "{% macro default__drop_table(relation) -%}\n    drop table if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.96533, "supported_languages": null}, "macro.dbt.get_replace_table_sql": {"name": "get_replace_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/replace.sql", "original_file_path": "macros/relations/table/replace.sql", "unique_id": "macro.dbt.get_replace_table_sql", "macro_sql": "{% macro get_replace_table_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_table_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.9656808, "supported_languages": null}, "macro.dbt.default__get_replace_table_sql": {"name": "default__get_replace_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/replace.sql", "original_file_path": "macros/relations/table/replace.sql", "unique_id": "macro.dbt.default__get_replace_table_sql", "macro_sql": "{% macro default__get_replace_table_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.965869, "supported_languages": null}, "macro.dbt.get_rename_table_sql": {"name": "get_rename_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt.get_rename_table_sql", "macro_sql": "{% macro get_rename_table_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_table_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_rename_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.966218, "supported_languages": null}, "macro.dbt.default__get_rename_table_sql": {"name": "default__get_rename_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt.default__get_rename_table_sql", "macro_sql": "{% macro default__get_rename_table_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.9664278, "supported_languages": null}, "macro.dbt.get_create_table_as_sql": {"name": "get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.967678, "supported_languages": null}, "macro.dbt.default__get_create_table_as_sql": {"name": "default__get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.967915, "supported_languages": null}, "macro.dbt.create_table_as": {"name": "create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.96846, "supported_languages": null}, "macro.dbt.default__create_table_as": {"name": "default__create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced and (not temporary) %}\n    {{ get_assert_columns_equivalent(sql) }}\n    {{ get_table_columns_and_constraints() }}\n    {%- set sql = get_select_subquery(sql) %}\n  {% endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.969331, "supported_languages": null}, "macro.dbt.default__get_column_names": {"name": "default__get_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_column_names", "macro_sql": "{% macro default__get_column_names() %}\n  {#- loop through user_provided_columns to get column names -#}\n    {%- set user_provided_columns = model['columns'] -%}\n    {%- for i in user_provided_columns %}\n      {%- set col = user_provided_columns[i] -%}\n      {%- set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] -%}\n      {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.9699001, "supported_languages": null}, "macro.dbt.get_select_subquery": {"name": "get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.get_select_subquery", "macro_sql": "{% macro get_select_subquery(sql) %}\n  {{ return(adapter.dispatch('get_select_subquery', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.970138, "supported_languages": null}, "macro.dbt.default__get_select_subquery": {"name": "default__get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_select_subquery", "macro_sql": "{% macro default__get_select_subquery(sql) %}\n    select {{ adapter.dispatch('get_column_names', 'dbt')() }}\n    from (\n        {{ sql }}\n    ) as model_subq\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.get_column_names", "macro.dbt.default__get_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.9703622, "supported_languages": null}, "macro.dbt.drop_view": {"name": "drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt.drop_view", "macro_sql": "{% macro drop_view(relation) -%}\n    {{ return(adapter.dispatch('drop_view', 'dbt')(relation)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.970721, "supported_languages": null}, "macro.dbt.default__drop_view": {"name": "default__drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt.default__drop_view", "macro_sql": "{% macro default__drop_view(relation) -%}\n    drop view if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.970871, "supported_languages": null}, "macro.dbt.get_replace_view_sql": {"name": "get_replace_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.get_replace_view_sql", "macro_sql": "{% macro get_replace_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.972107, "supported_languages": null}, "macro.dbt.default__get_replace_view_sql": {"name": "default__get_replace_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.default__get_replace_view_sql", "macro_sql": "{% macro default__get_replace_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.972297, "supported_languages": null}, "macro.dbt.create_or_replace_view": {"name": "create_or_replace_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.973692, "supported_languages": null}, "macro.dbt.handle_existing_table": {"name": "handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.973943, "supported_languages": null}, "macro.dbt.default__handle_existing_table": {"name": "default__handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.9742222, "supported_languages": null}, "macro.dbt.get_rename_view_sql": {"name": "get_rename_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt.get_rename_view_sql", "macro_sql": "{% macro get_rename_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_rename_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.974591, "supported_languages": null}, "macro.dbt.default__get_rename_view_sql": {"name": "default__get_rename_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt.default__get_rename_view_sql", "macro_sql": "{% macro default__get_rename_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.974785, "supported_languages": null}, "macro.dbt.get_create_view_as_sql": {"name": "get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.975379, "supported_languages": null}, "macro.dbt.default__get_create_view_as_sql": {"name": "default__get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.975582, "supported_languages": null}, "macro.dbt.create_view_as": {"name": "create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.975828, "supported_languages": null}, "macro.dbt.default__create_view_as": {"name": "default__create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }}\n    {% set contract_config = config.get('contract') %}\n    {% if contract_config.enforced %}\n      {{ get_assert_columns_equivalent(sql) }}\n    {%- endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.976497, "supported_languages": null}, "macro.dbt.default__test_relationships": {"name": "default__test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "unique_id": "macro.dbt.default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.9769568, "supported_languages": null}, "macro.dbt.default__test_not_null": {"name": "default__test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "unique_id": "macro.dbt.default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.977338, "supported_languages": null}, "macro.dbt.default__test_unique": {"name": "default__test_unique", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "unique_id": "macro.dbt.default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.977661, "supported_languages": null}, "macro.dbt.default__test_accepted_values": {"name": "default__test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "unique_id": "macro.dbt.default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.9784389, "supported_languages": null}, "macro.dbt.statement": {"name": "statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.statement", "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.9804091, "supported_languages": null}, "macro.dbt.noop_statement": {"name": "noop_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.9811351, "supported_languages": null}, "macro.dbt.run_query": {"name": "run_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.981508, "supported_languages": null}, "macro.dbt.convert_datetime": {"name": "convert_datetime", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.9842172, "supported_languages": null}, "macro.dbt.dates_in_range": {"name": "dates_in_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partition start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.985698, "supported_languages": null}, "macro.dbt.partition_range": {"name": "partition_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.98664, "supported_languages": null}, "macro.dbt.py_current_timestring": {"name": "py_current_timestring", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.986967, "supported_languages": null}, "macro.dbt.except": {"name": "except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.987266, "supported_languages": null}, "macro.dbt.default__except": {"name": "default__except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.987364, "supported_languages": null}, "macro.dbt.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.9884028, "supported_languages": null}, "macro.dbt.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.9891331, "supported_languages": null}, "macro.dbt.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.989432, "supported_languages": null}, "macro.dbt.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n    {# call as follows:\n\n    date_spine(\n        \"day\",\n        \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n        \"dbt.dateadd(week, 1, current_date)\"\n    ) #}\n\n\n    with rawdata as (\n\n        {{dbt.generate_series(\n            dbt.get_intervals_between(start_date, end_date, datepart)\n        )}}\n\n    ),\n\n    all_periods as (\n\n        select (\n            {{\n                dbt.dateadd(\n                    datepart,\n                    \"row_number() over (order by 1) - 1\",\n                    start_date\n                )\n            }}\n        ) as date_{{datepart}}\n        from rawdata\n\n    ),\n\n    filtered as (\n\n        select *\n        from all_periods\n        where date_{{datepart}} <= {{ end_date }}\n\n    )\n\n    select * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.generate_series", "macro.dbt.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.989891, "supported_languages": null}, "macro.dbt.replace": {"name": "replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.990328, "supported_languages": null}, "macro.dbt.default__replace": {"name": "default__replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.990536, "supported_languages": null}, "macro.dbt.concat": {"name": "concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.990861, "supported_languages": null}, "macro.dbt.default__concat": {"name": "default__concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.991023, "supported_languages": null}, "macro.dbt.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.992227, "supported_languages": null}, "macro.dbt.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.992791, "supported_languages": null}, "macro.dbt.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.993042, "supported_languages": null}, "macro.dbt.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.993848, "supported_languages": null}, "macro.dbt.length": {"name": "length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.994179, "supported_languages": null}, "macro.dbt.default__length": {"name": "default__length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.994315, "supported_languages": null}, "macro.dbt.dateadd": {"name": "dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.994752, "supported_languages": null}, "macro.dbt.default__dateadd": {"name": "default__dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.995011, "supported_languages": null}, "macro.dbt.intersect": {"name": "intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.995308, "supported_languages": null}, "macro.dbt.default__intersect": {"name": "default__intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.995417, "supported_languages": null}, "macro.dbt.escape_single_quotes": {"name": "escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.995754, "supported_languages": null}, "macro.dbt.default__escape_single_quotes": {"name": "default__escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.995935, "supported_languages": null}, "macro.dbt.right": {"name": "right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.996319, "supported_languages": null}, "macro.dbt.default__right": {"name": "default__right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.9964979, "supported_languages": null}, "macro.dbt.listagg": {"name": "listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.997377, "supported_languages": null}, "macro.dbt.default__listagg": {"name": "default__listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.997888, "supported_languages": null}, "macro.dbt.datediff": {"name": "datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.9983208, "supported_languages": null}, "macro.dbt.default__datediff": {"name": "default__datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.998533, "supported_languages": null}, "macro.dbt.safe_cast": {"name": "safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.9988961, "supported_languages": null}, "macro.dbt.default__safe_cast": {"name": "default__safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.999084, "supported_languages": null}, "macro.dbt.hash": {"name": "hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.9994082, "supported_languages": null}, "macro.dbt.default__hash": {"name": "default__hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.9996102, "supported_languages": null}, "macro.dbt.cast_bool_to_text": {"name": "cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281446.999926, "supported_languages": null}, "macro.dbt.default__cast_bool_to_text": {"name": "default__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.000126, "supported_languages": null}, "macro.dbt.any_value": {"name": "any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.000441, "supported_languages": null}, "macro.dbt.default__any_value": {"name": "default__any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.0005782, "supported_languages": null}, "macro.dbt.position": {"name": "position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.000961, "supported_languages": null}, "macro.dbt.default__position": {"name": "default__position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.001159, "supported_languages": null}, "macro.dbt.string_literal": {"name": "string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.001477, "supported_languages": null}, "macro.dbt.default__string_literal": {"name": "default__string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.001626, "supported_languages": null}, "macro.dbt.type_string": {"name": "type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.0030851, "supported_languages": null}, "macro.dbt.default__type_string": {"name": "default__type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.0032861, "supported_languages": null}, "macro.dbt.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.003505, "supported_languages": null}, "macro.dbt.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.003697, "supported_languages": null}, "macro.dbt.type_float": {"name": "type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.003915, "supported_languages": null}, "macro.dbt.default__type_float": {"name": "default__type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.0041049, "supported_languages": null}, "macro.dbt.type_numeric": {"name": "type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.004305, "supported_languages": null}, "macro.dbt.default__type_numeric": {"name": "default__type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.004524, "supported_languages": null}, "macro.dbt.type_bigint": {"name": "type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.004731, "supported_languages": null}, "macro.dbt.default__type_bigint": {"name": "default__type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.00493, "supported_languages": null}, "macro.dbt.type_int": {"name": "type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.0051289, "supported_languages": null}, "macro.dbt.default__type_int": {"name": "default__type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.00531, "supported_languages": null}, "macro.dbt.type_boolean": {"name": "type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_boolean", "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.0055108, "supported_languages": null}, "macro.dbt.default__type_boolean": {"name": "default__type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.005693, "supported_languages": null}, "macro.dbt.array_concat": {"name": "array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.0060532, "supported_languages": null}, "macro.dbt.default__array_concat": {"name": "default__array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.006222, "supported_languages": null}, "macro.dbt.bool_or": {"name": "bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.006542, "supported_languages": null}, "macro.dbt.default__bool_or": {"name": "default__bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.00668, "supported_languages": null}, "macro.dbt.last_day": {"name": "last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.007136, "supported_languages": null}, "macro.dbt.default_last_day": {"name": "default_last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.007475, "supported_languages": null}, "macro.dbt.default__last_day": {"name": "default__last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.0076602, "supported_languages": null}, "macro.dbt.split_part": {"name": "split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.008378, "supported_languages": null}, "macro.dbt.default__split_part": {"name": "default__split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.008595, "supported_languages": null}, "macro.dbt._split_part_negative": {"name": "_split_part_negative", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt._split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 + {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.0088809, "supported_languages": null}, "macro.dbt.date_trunc": {"name": "date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.0092301, "supported_languages": null}, "macro.dbt.default__date_trunc": {"name": "default__date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.009402, "supported_languages": null}, "macro.dbt.array_construct": {"name": "array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.009888, "supported_languages": null}, "macro.dbt.default__array_construct": {"name": "default__array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.010324, "supported_languages": null}, "macro.dbt.array_append": {"name": "array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.010682, "supported_languages": null}, "macro.dbt.default__array_append": {"name": "default__array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.010853, "supported_languages": null}, "macro.dbt.create_schema": {"name": "create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.011418, "supported_languages": null}, "macro.dbt.default__create_schema": {"name": "default__create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.0116632, "supported_languages": null}, "macro.dbt.drop_schema": {"name": "drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.01187, "supported_languages": null}, "macro.dbt.default__drop_schema": {"name": "default__drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.0121112, "supported_languages": null}, "macro.dbt.current_timestamp": {"name": "current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.012779, "supported_languages": null}, "macro.dbt.default__current_timestamp": {"name": "default__current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.0129669, "supported_languages": null}, "macro.dbt.snapshot_get_time": {"name": "snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.snapshot_get_time", "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.013145, "supported_languages": null}, "macro.dbt.default__snapshot_get_time": {"name": "default__snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.0132768, "supported_languages": null}, "macro.dbt.current_timestamp_backcompat": {"name": "current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.0134861, "supported_languages": null}, "macro.dbt.default__current_timestamp_backcompat": {"name": "default__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.013589, "supported_languages": null}, "macro.dbt.current_timestamp_in_utc_backcompat": {"name": "current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__current_timestamp_in_utc_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.0138109, "supported_languages": null}, "macro.dbt.default__current_timestamp_in_utc_backcompat": {"name": "default__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt.default__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.014016, "supported_languages": null}, "macro.dbt.get_create_index_sql": {"name": "get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.015211, "supported_languages": null}, "macro.dbt.default__get_create_index_sql": {"name": "default__get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.015384, "supported_languages": null}, "macro.dbt.create_indexes": {"name": "create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.015579, "supported_languages": null}, "macro.dbt.default__create_indexes": {"name": "default__create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.0160818, "supported_languages": null}, "macro.dbt.get_drop_index_sql": {"name": "get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_drop_index_sql", "macro_sql": "{% macro get_drop_index_sql(relation, index_name) -%}\n    {{ adapter.dispatch('get_drop_index_sql', 'dbt')(relation, index_name) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_drop_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.016316, "supported_languages": null}, "macro.dbt.default__get_drop_index_sql": {"name": "default__get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_drop_index_sql", "macro_sql": "{% macro default__get_drop_index_sql(relation, index_name) -%}\n    {{ exceptions.raise_compiler_error(\"`get_drop_index_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.016489, "supported_languages": null}, "macro.dbt.get_show_indexes_sql": {"name": "get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_show_indexes_sql", "macro_sql": "{% macro get_show_indexes_sql(relation) -%}\n    {{ adapter.dispatch('get_show_indexes_sql', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_show_indexes_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.016685, "supported_languages": null}, "macro.dbt.default__get_show_indexes_sql": {"name": "default__get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_show_indexes_sql", "macro_sql": "{% macro default__get_show_indexes_sql(relation) -%}\n    {{ exceptions.raise_compiler_error(\"`get_show_indexes_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.016844, "supported_languages": null}, "macro.dbt.make_intermediate_relation": {"name": "make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.019896, "supported_languages": null}, "macro.dbt.default__make_intermediate_relation": {"name": "default__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.020125, "supported_languages": null}, "macro.dbt.make_temp_relation": {"name": "make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.020402, "supported_languages": null}, "macro.dbt.default__make_temp_relation": {"name": "default__make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.021069, "supported_languages": null}, "macro.dbt.make_backup_relation": {"name": "make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.021375, "supported_languages": null}, "macro.dbt.default__make_backup_relation": {"name": "default__make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.021794, "supported_languages": null}, "macro.dbt.truncate_relation": {"name": "truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.022015, "supported_languages": null}, "macro.dbt.default__truncate_relation": {"name": "default__truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.022219, "supported_languages": null}, "macro.dbt.get_or_create_relation": {"name": "get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.022528, "supported_languages": null}, "macro.dbt.default__get_or_create_relation": {"name": "default__get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.023215, "supported_languages": null}, "macro.dbt.load_cached_relation": {"name": "load_cached_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.0235121, "supported_languages": null}, "macro.dbt.load_relation": {"name": "load_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.023689, "supported_languages": null}, "macro.dbt.collect_freshness": {"name": "collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.024234, "supported_languages": null}, "macro.dbt.default__collect_freshness": {"name": "default__collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.0247521, "supported_languages": null}, "macro.dbt.validate_sql": {"name": "validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/validate_sql.sql", "original_file_path": "macros/adapters/validate_sql.sql", "unique_id": "macro.dbt.validate_sql", "macro_sql": "{% macro validate_sql(sql) -%}\n  {{ return(adapter.dispatch('validate_sql', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__validate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.0251222, "supported_languages": null}, "macro.dbt.default__validate_sql": {"name": "default__validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/validate_sql.sql", "original_file_path": "macros/adapters/validate_sql.sql", "unique_id": "macro.dbt.default__validate_sql", "macro_sql": "{% macro default__validate_sql(sql) -%}\n  {% call statement('validate_sql') -%}\n    explain {{ sql }}\n  {% endcall %}\n  {{ return(load_result('validate_sql')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.025407, "supported_languages": null}, "macro.dbt.copy_grants": {"name": "copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.027918, "supported_languages": null}, "macro.dbt.default__copy_grants": {"name": "default__copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.028061, "supported_languages": null}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"name": "support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.0282738, "supported_languages": null}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"name": "default__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.028414, "supported_languages": null}, "macro.dbt.should_revoke": {"name": "should_revoke", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.028845, "supported_languages": null}, "macro.dbt.get_show_grant_sql": {"name": "get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.0290802, "supported_languages": null}, "macro.dbt.default__get_show_grant_sql": {"name": "default__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.0292149, "supported_languages": null}, "macro.dbt.get_grant_sql": {"name": "get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.0294988, "supported_languages": null}, "macro.dbt.default__get_grant_sql": {"name": "default__get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.029734, "supported_languages": null}, "macro.dbt.get_revoke_sql": {"name": "get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.030014, "supported_languages": null}, "macro.dbt.default__get_revoke_sql": {"name": "default__get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.030251, "supported_languages": null}, "macro.dbt.get_dcl_statement_list": {"name": "get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.0305312, "supported_languages": null}, "macro.dbt.default__get_dcl_statement_list": {"name": "default__get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.031517, "supported_languages": null}, "macro.dbt.call_dcl_statements": {"name": "call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.031761, "supported_languages": null}, "macro.dbt.default__call_dcl_statements": {"name": "default__call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.0320792, "supported_languages": null}, "macro.dbt.apply_grants": {"name": "apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.0323699, "supported_languages": null}, "macro.dbt.default__apply_grants": {"name": "default__apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.033802, "supported_languages": null}, "macro.dbt.get_show_sql": {"name": "get_show_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.get_show_sql", "macro_sql": "{% macro get_show_sql(compiled_code, sql_header, limit) -%}\n  {%- if sql_header -%}\n  {{ sql_header }}\n  {%- endif -%}\n  {%- if limit is not none -%}\n  {{ get_limit_subquery_sql(compiled_code, limit) }}\n  {%- else -%}\n  {{ compiled_code }}\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_limit_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.034514, "supported_languages": null}, "macro.dbt.get_limit_subquery_sql": {"name": "get_limit_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.get_limit_subquery_sql", "macro_sql": "{% macro get_limit_subquery_sql(sql, limit) %}\n  {{ adapter.dispatch('get_limit_subquery_sql', 'dbt')(sql, limit) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_limit_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.034752, "supported_languages": null}, "macro.dbt.default__get_limit_subquery_sql": {"name": "default__get_limit_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.default__get_limit_subquery_sql", "macro_sql": "{% macro default__get_limit_subquery_sql(sql, limit) %}\n    select *\n    from (\n        {{ sql }}\n    ) as model_limit_subq\n    limit {{ limit }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.034933, "supported_languages": null}, "macro.dbt.alter_column_comment": {"name": "alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.035935, "supported_languages": null}, "macro.dbt.default__alter_column_comment": {"name": "default__alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.036151, "supported_languages": null}, "macro.dbt.alter_relation_comment": {"name": "alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.036408, "supported_languages": null}, "macro.dbt.default__alter_relation_comment": {"name": "default__alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.036625, "supported_languages": null}, "macro.dbt.persist_docs": {"name": "persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.0369542, "supported_languages": null}, "macro.dbt.default__persist_docs": {"name": "default__persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.03756, "supported_languages": null}, "macro.dbt.get_catalog_relations": {"name": "get_catalog_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog_relations", "macro_sql": "{% macro get_catalog_relations(information_schema, relations) -%}\n  {{ return(adapter.dispatch('get_catalog_relations', 'dbt')(information_schema, relations)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_catalog_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.041846, "supported_languages": null}, "macro.dbt.default__get_catalog_relations": {"name": "default__get_catalog_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog_relations", "macro_sql": "{% macro default__get_catalog_relations(information_schema, relations) -%}\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog_relations not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.042183, "supported_languages": null}, "macro.dbt.get_catalog": {"name": "get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.042443, "supported_languages": null}, "macro.dbt.default__get_catalog": {"name": "default__get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.042762, "supported_languages": null}, "macro.dbt.information_schema_name": {"name": "information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.042994, "supported_languages": null}, "macro.dbt.default__information_schema_name": {"name": "default__information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.04319, "supported_languages": null}, "macro.dbt.list_schemas": {"name": "list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.0434508, "supported_languages": null}, "macro.dbt.default__list_schemas": {"name": "default__list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.043775, "supported_languages": null}, "macro.dbt.check_schema_exists": {"name": "check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.044055, "supported_languages": null}, "macro.dbt.default__check_schema_exists": {"name": "default__check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.0444329, "supported_languages": null}, "macro.dbt.list_relations_without_caching": {"name": "list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.044665, "supported_languages": null}, "macro.dbt.default__list_relations_without_caching": {"name": "default__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.044867, "supported_languages": null}, "macro.dbt.get_relations": {"name": "get_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_relations", "macro_sql": "{% macro get_relations() %}\n  {{ return(adapter.dispatch('get_relations', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.0450728, "supported_languages": null}, "macro.dbt.default__get_relations": {"name": "default__get_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_relations", "macro_sql": "{% macro default__get_relations() %}\n  {{ exceptions.raise_not_implemented(\n    'get_relations macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.0452712, "supported_languages": null}, "macro.dbt.get_relation_last_modified": {"name": "get_relation_last_modified", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_relation_last_modified", "macro_sql": "{% macro get_relation_last_modified(information_schema, relations) %}\n  {{ return(adapter.dispatch('get_relation_last_modified', 'dbt')(information_schema, relations)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_relation_last_modified"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.045653, "supported_languages": null}, "macro.dbt.default__get_relation_last_modified": {"name": "default__get_relation_last_modified", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_relation_last_modified", "macro_sql": "{% macro default__get_relation_last_modified(information_schema, relations) %}\n  {{ exceptions.raise_not_implemented(\n    'get_relation_last_modified macro not implemented for adapter ' + adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.0458722, "supported_languages": null}, "macro.dbt.get_columns_in_relation": {"name": "get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.049134, "supported_languages": null}, "macro.dbt.default__get_columns_in_relation": {"name": "default__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.049335, "supported_languages": null}, "macro.dbt.sql_convert_columns_in_relation": {"name": "sql_convert_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.04972, "supported_languages": null}, "macro.dbt.get_empty_subquery_sql": {"name": "get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_subquery_sql", "macro_sql": "{% macro get_empty_subquery_sql(select_sql, select_sql_header=none) -%}\n  {{ return(adapter.dispatch('get_empty_subquery_sql', 'dbt')(select_sql, select_sql_header)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.049995, "supported_languages": null}, "macro.dbt.default__get_empty_subquery_sql": {"name": "default__get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_subquery_sql", "macro_sql": "{% macro default__get_empty_subquery_sql(select_sql, select_sql_header=none) %}\n    {%- if select_sql_header is not none -%}\n    {{ select_sql_header }}\n    {%- endif -%}\n    select * from (\n        {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.050252, "supported_languages": null}, "macro.dbt.get_empty_schema_sql": {"name": "get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_schema_sql", "macro_sql": "{% macro get_empty_schema_sql(columns) -%}\n  {{ return(adapter.dispatch('get_empty_schema_sql', 'dbt')(columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_schema_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.0504801, "supported_languages": null}, "macro.dbt.default__get_empty_schema_sql": {"name": "default__get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_schema_sql", "macro_sql": "{% macro default__get_empty_schema_sql(columns) %}\n    {%- set col_err = [] -%}\n    {%- set col_naked_numeric = [] -%}\n    select\n    {% for i in columns %}\n      {%- set col = columns[i] -%}\n      {%- if col['data_type'] is not defined -%}\n        {%- do col_err.append(col['name']) -%}\n      {#-- If this column's type is just 'numeric' then it is missing precision/scale, raise a warning --#}\n      {%- elif col['data_type'].strip().lower() in ('numeric', 'decimal', 'number') -%}\n        {%- do col_naked_numeric.append(col['name']) -%}\n      {%- endif -%}\n      {% set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] %}\n      cast(null as {{ col['data_type'] }}) as {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n    {%- if (col_err | length) > 0 -%}\n      {{ exceptions.column_type_missing(column_names=col_err) }}\n    {%- elif (col_naked_numeric | length) > 0 -%}\n      {{ exceptions.warn(\"Detected columns with numeric type and unspecified precision/scale, this can lead to unintended rounding: \" ~ col_naked_numeric ~ \"`\") }}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.051948, "supported_languages": null}, "macro.dbt.get_column_schema_from_query": {"name": "get_column_schema_from_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_column_schema_from_query", "macro_sql": "{% macro get_column_schema_from_query(select_sql, select_sql_header=none) -%}\n    {% set columns = [] %}\n    {# -- Using an 'empty subquery' here to get the same schema as the given select_sql statement, without necessitating a data scan.#}\n    {% set sql = get_empty_subquery_sql(select_sql, select_sql_header) %}\n    {% set column_schema = adapter.get_column_schema_from_query(sql) %}\n    {{ return(column_schema) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.052386, "supported_languages": null}, "macro.dbt.get_columns_in_query": {"name": "get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.05262, "supported_languages": null}, "macro.dbt.default__get_columns_in_query": {"name": "default__get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        {{ get_empty_subquery_sql(select_sql) }}\n    {% endcall %}\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.0530539, "supported_languages": null}, "macro.dbt.alter_column_type": {"name": "alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.05334, "supported_languages": null}, "macro.dbt.default__alter_column_type": {"name": "default__alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.054085, "supported_languages": null}, "macro.dbt.alter_relation_add_remove_columns": {"name": "alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.054413, "supported_languages": null}, "macro.dbt.default__alter_relation_add_remove_columns": {"name": "default__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.055397, "supported_languages": null}, "macro.dbt.resolve_model_name": {"name": "resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.resolve_model_name", "macro_sql": "{% macro resolve_model_name(input_model_name) %}\n    {{ return(adapter.dispatch('resolve_model_name', 'dbt')(input_model_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.057819, "supported_languages": null}, "macro.dbt.default__resolve_model_name": {"name": "default__resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.default__resolve_model_name", "macro_sql": "\n\n{%- macro default__resolve_model_name(input_model_name) -%}\n    {{  input_model_name | string | replace('\"', '\\\"') }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.058021, "supported_languages": null}, "macro.dbt.build_ref_function": {"name": "build_ref_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {% set _ref_args = [_ref.get('package'), _ref['name']] if _ref.get('package') else [_ref['name'],] %}\n        {%- set resolved = ref(*_ref_args, v=_ref.get('version')) -%}\n        {%- if _ref.get('version') -%}\n            {% do _ref_args.extend([\"v\" ~ _ref['version']]) %}\n        {%- endif -%}\n       {%- do ref_dict.update({_ref_args | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef ref(*args, **kwargs):\n    refs = {{ ref_dict | tojson }}\n    key = '.'.join(args)\n    version = kwargs.get(\"v\") or kwargs.get(\"version\")\n    if version:\n        key += f\".v{version}\"\n    dbt_load_df_function = kwargs.get(\"dbt_load_df_function\")\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.059032, "supported_languages": null}, "macro.dbt.build_source_function": {"name": "build_source_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.0596192, "supported_languages": null}, "macro.dbt.build_config_dict": {"name": "build_config_dict", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {% set config_dbt_used = zip(model.config.config_keys_used, model.config.config_keys_defaults) | list %}\n    {%- for key, default in config_dbt_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == \"language\" -%}\n          {%- set value = \"python\" -%}\n        {%- endif -%}\n        {%- set value = model.config.get(key, default) -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.060351, "supported_languages": null}, "macro.dbt.py_script_postfix": {"name": "py_script_postfix", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"{{ this.database }}\"\n    schema = \"{{ this.schema }}\"\n    identifier = \"{{ this.identifier }}\"\n    {% set this_relation_name = resolve_model_name(this) %}\n    def __repr__(self):\n        return '{{ this_relation_name  }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args, **kwargs: ref(*args, **kwargs, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.resolve_model_name", "macro.dbt.is_incremental", "macro.dbt.py_script_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.060971, "supported_languages": null}, "macro.dbt.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.061068, "supported_languages": null}, "macro.dbt.test_unique": {"name": "test_unique", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.061806, "supported_languages": null}, "macro.dbt.test_not_null": {"name": "test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.062101, "supported_languages": null}, "macro.dbt.test_accepted_values": {"name": "test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.062464, "supported_languages": null}, "macro.dbt.test_relationships": {"name": "test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.062808, "supported_languages": null}, "macro.dbt_utils.get_url_host": {"name": "get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.063295, "supported_languages": null}, "macro.dbt_utils.default__get_url_host": {"name": "default__get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt.split_part(\n        dbt.split_part(\n            dbt.replace(\n                dbt.replace(\n                    dbt.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt.safe_cast(\n        parsed,\n        dbt.type_string()\n        )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part", "macro.dbt.replace", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.0641, "supported_languages": null}, "macro.dbt_utils.get_url_path": {"name": "get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.064779, "supported_languages": null}, "macro.dbt_utils.default__get_url_path": {"name": "default__get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url =\n        dbt.replace(\n            dbt.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{ dbt.position(\"'/'\", stripped_url) }}, 0),\n            {{ dbt.position(\"'?'\", stripped_url) }} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt.split_part(\n            dbt.right(\n                stripped_url,\n                dbt.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ),\n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt.safe_cast(\n        parsed_path,\n        dbt.type_string()\n    )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.position", "macro.dbt.split_part", "macro.dbt.right", "macro.dbt.length", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.065585, "supported_languages": null}, "macro.dbt_utils.get_url_parameter": {"name": "get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.066001, "supported_languages": null}, "macro.dbt_utils.default__get_url_parameter": {"name": "default__get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt.split_part(dbt.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.066405, "supported_languages": null}, "macro.dbt_utils.test_fewer_rows_than": {"name": "test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.067994, "supported_languages": null}, "macro.dbt_utils.default__test_fewer_rows_than": {"name": "default__test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model, group_by_columns) %}\n\n{{ config(fail_calc = 'sum(coalesce(row_count_delta, 0))') }}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in equal_rowcount. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_fewer_rows_than'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_our_model \n    from {{ model }}\n    {{ groupby_gb_cols }}\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_comparison_model \n    from {{ compare_model }}\n    {{ groupby_gb_cols }}\n\n),\ncounts as (\n\n    select\n\n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_our_model,\n        count_comparison_model\n    from a\n    full join b on \n    a.id_dbtutils_test_fewer_rows_than = b.id_dbtutils_test_fewer_rows_than\n    {{ join_gb_cols }}\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.069294, "supported_languages": null}, "macro.dbt_utils.test_equal_rowcount": {"name": "test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.070498, "supported_languages": null}, "macro.dbt_utils.default__test_equal_rowcount": {"name": "default__test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model, group_by_columns) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'sum(coalesce(diff_count, 0))') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(', ') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in fewer_rows_than. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_equal_rowcount'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_a \n    from {{ model }}\n    {{groupby_gb_cols}}\n\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_b \n    from {{ compare_model }}\n    {{groupby_gb_cols}}\n\n),\nfinal as (\n\n    select\n    \n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n\n    from a\n    full join b\n    on\n    a.id_dbtutils_test_equal_rowcount = b.id_dbtutils_test_equal_rowcount\n    {{join_gb_cols}}\n\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.071865, "supported_languages": null}, "macro.dbt_utils.test_relationships_where": {"name": "test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.0727491, "supported_languages": null}, "macro.dbt_utils.default__test_relationships_where": {"name": "default__test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.073189, "supported_languages": null}, "macro.dbt_utils.test_recency": {"name": "test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.test_recency", "macro_sql": "{% test recency(model, field, datepart, interval, ignore_time_component=False, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval, ignore_time_component, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.074186, "supported_languages": null}, "macro.dbt_utils.default__test_recency": {"name": "default__test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval, ignore_time_component, group_by_columns) %}\n\n{% set threshold = 'cast(' ~ dbt.dateadd(datepart, interval * -1, dbt.current_timestamp()) ~ ' as ' ~ ('date' if ignore_time_component else dbt.type_timestamp()) ~ ')'  %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nwith recency as (\n\n    select \n\n      {{ select_gb_cols }}\n      {% if ignore_time_component %}\n        cast(max({{ field }}) as date) as most_recent\n      {%- else %}\n        max({{ field }}) as most_recent\n      {%- endif %}\n\n    from {{ model }}\n\n    {{ groupby_gb_cols }}\n\n)\n\nselect\n\n    {{ select_gb_cols }}\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.current_timestamp", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.075244, "supported_languages": null}, "macro.dbt_utils.test_not_constant": {"name": "test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.test_not_constant", "macro_sql": "{% test not_constant(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.075886, "supported_languages": null}, "macro.dbt_utils.default__test_not_constant": {"name": "default__test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name, group_by_columns) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    {{select_gb_cols}}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\n  {{groupby_gb_cols}}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.0764768, "supported_languages": null}, "macro.dbt_utils.test_accepted_range": {"name": "test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.077295, "supported_languages": null}, "macro.dbt_utils.default__test_accepted_range": {"name": "default__test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.077888, "supported_languages": null}, "macro.dbt_utils.test_not_accepted_values": {"name": "test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.0786402, "supported_languages": null}, "macro.dbt_utils.default__test_not_accepted_values": {"name": "default__test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.0791218, "supported_languages": null}, "macro.dbt_utils.test_at_least_one": {"name": "test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.080019, "supported_languages": null}, "macro.dbt_utils.default__test_at_least_one": {"name": "default__test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name, group_by_columns) %}\n\n{% set pruned_cols = [column_name] %}\n\n{% if group_by_columns|length() > 0 %}\n\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n  {% set pruned_cols = group_by_columns %}\n\n  {% if column_name not in pruned_cols %}\n    {% do pruned_cols.append(column_name) %}\n  {% endif %}\n\n{% endif %}\n\n{% set select_pruned_cols = pruned_cols|join(' ,') %}\n\nselect *\nfrom (\n    with pruned_rows as (\n      select\n        {{ select_pruned_cols }}\n      from {{ model }}\n      where {{ column_name }} is not null\n      limit 1\n    )\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      {{select_gb_cols}}\n      count({{ column_name }}) as filler_column\n\n    from pruned_rows\n\n    {{groupby_gb_cols}}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.080999, "supported_languages": null}, "macro.dbt_utils.test_unique_combination_of_columns": {"name": "test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.081866, "supported_languages": null}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"name": "default__test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.082674, "supported_languages": null}, "macro.dbt_utils.test_cardinality_equality": {"name": "test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.0834072, "supported_languages": null}, "macro.dbt_utils.default__test_cardinality_equality": {"name": "default__test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.083885, "supported_languages": null}, "macro.dbt_utils.test_expression_is_true": {"name": "test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None) %}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.084414, "supported_languages": null}, "macro.dbt_utils.default__test_expression_is_true": {"name": "default__test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else \"1\" %}\n\nselect\n    {{ column_list }}\nfrom {{ model }}\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.085005, "supported_languages": null}, "macro.dbt_utils.test_not_null_proportion": {"name": "test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, group_by_columns, **kwargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.085888, "supported_languages": null}, "macro.dbt_utils.default__test_not_null_proportion": {"name": "default__test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model, group_by_columns) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith validation as (\n  select\n    {{select_gb_cols}}\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n  {{groupby_gb_cols}}\n),\nvalidation_errors as (\n  select\n    {{select_gb_cols}}\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.086903, "supported_languages": null}, "macro.dbt_utils.test_sequential_values": {"name": "test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart, group_by_columns)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.088162, "supported_languages": null}, "macro.dbt_utils.default__test_sequential_values": {"name": "default__test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(',') + ', ' %}\n  {% set partition_gb_cols = 'partition by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith windowed as (\n\n    select\n        {{ select_gb_cols }}\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            {{partition_gb_cols}}\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt.type_timestamp() }})= cast({{ dbt.dateadd(datepart, interval, previous_column_name) }} as {{ dbt.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.slugify", "macro.dbt.type_timestamp", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.089303, "supported_languages": null}, "macro.dbt_utils.test_equality": {"name": "test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.0903292, "supported_languages": null}, "macro.dbt_utils.default__test_equality": {"name": "default__test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.091465, "supported_languages": null}, "macro.dbt_utils.test_not_empty_string": {"name": "test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.test_not_empty_string", "macro_sql": "{% test not_empty_string(model, column_name, trim_whitespace=true) %}\n\n  {{ return(adapter.dispatch('test_not_empty_string', 'dbt_utils')(model, column_name, trim_whitespace)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_empty_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.0922291, "supported_languages": null}, "macro.dbt_utils.default__test_not_empty_string": {"name": "default__test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.default__test_not_empty_string", "macro_sql": "{% macro default__test_not_empty_string(model, column_name, trim_whitespace=true) %}\n\n    with\n    \n    all_values as (\n\n        select \n\n\n            {% if trim_whitespace == true -%}\n\n                trim({{ column_name }}) as {{ column_name }}\n\n            {%- else -%}\n\n                {{ column_name }}\n\n            {%- endif %}\n            \n        from {{ model }}\n\n    ),\n\n    errors as (\n\n        select * from all_values\n        where {{ column_name }} = ''\n\n    )\n\n    select * from errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.092627, "supported_languages": null}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"name": "test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.097898, "supported_languages": null}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"name": "default__test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}, {{ upper_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc, {{ upper_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions more cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.099846, "supported_languages": null}, "macro.dbt_utils.pretty_log_format": {"name": "pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.100209, "supported_languages": null}, "macro.dbt_utils.default__pretty_log_format": {"name": "default__pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.100441, "supported_languages": null}, "macro.dbt_utils._is_relation": {"name": "_is_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_relation.sql", "original_file_path": "macros/jinja_helpers/_is_relation.sql", "unique_id": "macro.dbt_utils._is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.101005, "supported_languages": null}, "macro.dbt_utils.pretty_time": {"name": "pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.1013582, "supported_languages": null}, "macro.dbt_utils.default__pretty_time": {"name": "default__pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.101611, "supported_languages": null}, "macro.dbt_utils.log_info": {"name": "log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.101933, "supported_languages": null}, "macro.dbt_utils.default__log_info": {"name": "default__log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.1021519, "supported_languages": null}, "macro.dbt_utils.slugify": {"name": "slugify", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/slugify.sql", "original_file_path": "macros/jinja_helpers/slugify.sql", "unique_id": "macro.dbt_utils.slugify", "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n{#- Prepends \"_\" if string begins with a number -#}\n{% set string = modules.re.sub('^[0-9]', '_' + string[0], string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.1029131, "supported_languages": null}, "macro.dbt_utils._is_ephemeral": {"name": "_is_ephemeral", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_ephemeral.sql", "original_file_path": "macros/jinja_helpers/_is_ephemeral.sql", "unique_id": "macro.dbt_utils._is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.104013, "supported_languages": null}, "macro.dbt_utils.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.105, "supported_languages": null}, "macro.dbt_utils.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.105759, "supported_languages": null}, "macro.dbt_utils.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.10605, "supported_languages": null}, "macro.dbt_utils.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dbt.dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.106511, "supported_languages": null}, "macro.dbt_utils.safe_subtract": {"name": "safe_subtract", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_subtract.sql", "original_file_path": "macros/sql/safe_subtract.sql", "unique_id": "macro.dbt_utils.safe_subtract", "macro_sql": "{%- macro safe_subtract(field_list) -%}\n    {{ return(adapter.dispatch('safe_subtract', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_subtract"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.1070368, "supported_languages": null}, "macro.dbt_utils.default__safe_subtract": {"name": "default__safe_subtract", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_subtract.sql", "original_file_path": "macros/sql/safe_subtract.sql", "unique_id": "macro.dbt_utils.default__safe_subtract", "macro_sql": "\n\n{%- macro default__safe_subtract(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_subtract` macro takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' -\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.107763, "supported_languages": null}, "macro.dbt_utils.nullcheck_table": {"name": "nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.108202, "supported_languages": null}, "macro.dbt_utils.default__nullcheck_table": {"name": "default__nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.1087658, "supported_languages": null}, "macro.dbt_utils.get_relations_by_pattern": {"name": "get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.1097238, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_pattern": {"name": "default__get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.1107771, "supported_languages": null}, "macro.dbt_utils.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.111986, "supported_languages": null}, "macro.dbt_utils.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.1125078, "supported_languages": null}, "macro.dbt_utils.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.112749, "supported_languages": null}, "macro.dbt_utils.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.11341, "supported_languages": null}, "macro.dbt_utils.get_relations_by_prefix": {"name": "get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.1143548, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_prefix": {"name": "default__get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.115416, "supported_languages": null}, "macro.dbt_utils.get_tables_by_prefix_sql": {"name": "get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.115975, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"name": "default__get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.116357, "supported_languages": null}, "macro.dbt_utils.star": {"name": "star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix, quote_identifiers)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.118167, "supported_languages": null}, "macro.dbt_utils.default__star": {"name": "default__star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {%- do dbt_utils._is_relation(from, 'star') -%}\r\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\r\n\r\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\r\n    {%- if not execute -%}\r\n        {% do return('*') %}\r\n    {%- endif -%}\r\n\r\n    {% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\r\n\r\n    {%- if cols|length <= 0 -%}\r\n        {% if flags.WHICH == 'compile' %}\r\n            {% set response %}\r\n*\r\n/* No columns were returned. Maybe the relation doesn't exist yet \r\nor all columns were excluded. This star is only output during  \r\ndbt compile, and exists to keep SQLFluff happy. */\r\n            {% endset %}\r\n            {% do return(response) %}\r\n        {% else %}\r\n            {% do return(\"/* no columns returned from star() macro */\") %}\r\n        {% endif %}\r\n    {%- else -%}\r\n        {%- for col in cols %}\r\n            {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}\r\n                {%- if quote_identifiers -%}\r\n                    {{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {%- else -%}\r\n                    {{ col|trim }} {%- if prefix!='' or suffix!='' %} as {{ (prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {% endif %}\r\n            {%- if not loop.last %},{{ '\\n  ' }}{%- endif -%}\r\n        {%- endfor -%}\r\n    {% endif %}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.1199622, "supported_languages": null}, "macro.dbt_utils.unpivot": {"name": "unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.121877, "supported_languages": null}, "macro.dbt_utils.default__unpivot": {"name": "default__unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n\n    {% if not relation %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt.type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt.cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.type_string", "macro.dbt.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.123872, "supported_languages": null}, "macro.dbt_utils.safe_divide": {"name": "safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.safe_divide", "macro_sql": "{% macro safe_divide(numerator, denominator) -%}\n  {{ return(adapter.dispatch('safe_divide', 'dbt_utils')(numerator, denominator)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_divide"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.124293, "supported_languages": null}, "macro.dbt_utils.default__safe_divide": {"name": "default__safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.default__safe_divide", "macro_sql": "{% macro default__safe_divide(numerator, denominator) %}\n    ( {{ numerator }} ) / nullif( ( {{ denominator }} ), 0)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.1244779, "supported_languages": null}, "macro.dbt_utils.union_relations": {"name": "union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.129333, "supported_languages": null}, "macro.dbt_utils.default__union_relations": {"name": "default__union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n    {%- set all_excludes = [] -%}\n    {%- set all_includes = [] -%}\n\n    {%- if exclude -%}\n        {%- for exc in exclude -%}\n            {%- do all_excludes.append(exc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- if include -%}\n        {%- for inc in include -%}\n            {%- do all_includes.append(inc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column | lower in all_excludes -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column | lower not in all_includes -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n    {%- set dbt_command = flags.WHICH -%}\n\n\n    {% if dbt_command in ['run', 'build'] %}\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                {%- if source_column_name is not none %}\n                cast({{ dbt.string_literal(relation) }} as {{ dbt.type_string() }}) as {{ source_column_name }},\n                {%- endif %}\n\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.string_literal", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.1338172, "supported_languages": null}, "macro.dbt_utils.group_by": {"name": "group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.134204, "supported_languages": null}, "macro.dbt_utils.default__group_by": {"name": "default__group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.1345239, "supported_languages": null}, "macro.dbt_utils.deduplicate": {"name": "deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.deduplicate", "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by) -%}\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.135572, "supported_languages": null}, "macro.dbt_utils.default__deduplicate": {"name": "default__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.default__deduplicate", "macro_sql": "\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n    with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ partition_by }}\n                order by {{ order_by }}\n            ) as rn\n        from {{ relation }} as _inner\n    )\n\n    select\n        distinct data.*\n    from {{ relation }} as data\n    {#\n    -- Not all DBs will support natural joins but the ones that do include:\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n    -- Apache Spark, SingleStore, Vertica\n    -- Those that do not appear to support natural joins include:\n    -- SQLServer, Trino, Presto, Rockset, Athena\n    #}\n    natural join row_numbered\n    where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.13586, "supported_languages": null}, "macro.dbt_utils.redshift__deduplicate": {"name": "redshift__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.redshift__deduplicate", "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n    {{ return(dbt_utils.default__deduplicate(relation, partition_by, order_by=order_by)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.136109, "supported_languages": null}, "macro.dbt_utils.postgres__deduplicate": {"name": "postgres__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.postgres__deduplicate", "macro_sql": "\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n    select\n        distinct on ({{ partition_by }}) *\n    from {{ relation }}\n    order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.136348, "supported_languages": null}, "macro.dbt_utils.snowflake__deduplicate": {"name": "snowflake__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.snowflake__deduplicate", "macro_sql": "\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.136561, "supported_languages": null}, "macro.dbt_utils.bigquery__deduplicate": {"name": "bigquery__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.bigquery__deduplicate", "macro_sql": "\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n    select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by {{ order_by }}\n                limit 1\n            )[offset(0)] unique\n        from {{ relation }} original\n        group by {{ partition_by }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.136779, "supported_languages": null}, "macro.dbt_utils.surrogate_key": {"name": "surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.137305, "supported_languages": null}, "macro.dbt_utils.default__surrogate_key": {"name": "default__surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- set error_message = '\nWarning: `dbt_utils.surrogate_key` has been replaced by \\\n`dbt_utils.generate_surrogate_key`. The new macro treats null values \\\ndifferently to empty strings. To restore the behaviour of the original \\\nmacro, add a global variable in dbt_project.yml called \\\n`surrogate_key_treat_nulls_as_empty_strings` to your \\\ndbt_project.yml file with a value of True. \\\nThe {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.137623, "supported_languages": null}, "macro.dbt_utils.safe_add": {"name": "safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.safe_add", "macro_sql": "{%- macro safe_add(field_list) -%}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.13813, "supported_languages": null}, "macro.dbt_utils.default__safe_add": {"name": "default__safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_add` macro now takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.138816, "supported_languages": null}, "macro.dbt_utils.nullcheck": {"name": "nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.1392782, "supported_languages": null}, "macro.dbt_utils.default__nullcheck": {"name": "default__nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.1397161, "supported_languages": null}, "macro.dbt_utils.get_tables_by_pattern_sql": {"name": "get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.142281, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"name": "default__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.142741, "supported_languages": null}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"name": "bigquery__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata", "macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.1436548, "supported_languages": null}, "macro.dbt_utils._bigquery__get_matching_schemata": {"name": "_bigquery__get_matching_schemata", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.144296, "supported_languages": null}, "macro.dbt_utils.get_column_values": {"name": "get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.145886, "supported_languages": null}, "macro.dbt_utils.default__get_column_values": {"name": "default__get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n\n            {% if where is not none %}\n            where {{ where }}\n            {% endif %}\n\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_ephemeral", "macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.147764, "supported_languages": null}, "macro.dbt_utils.pivot": {"name": "pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.149214, "supported_languages": null}, "macro.dbt_utils.default__pivot": {"name": "default__pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.escape_single_quotes", "macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.150275, "supported_languages": null}, "macro.dbt_utils.get_filtered_columns_in_relation": {"name": "get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.get_filtered_columns_in_relation", "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.150906, "supported_languages": null}, "macro.dbt_utils.default__get_filtered_columns_in_relation": {"name": "default__get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation", "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.1518211, "supported_languages": null}, "macro.dbt_utils.width_bucket": {"name": "width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.1529238, "supported_languages": null}, "macro.dbt_utils.default__width_bucket": {"name": "default__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt.safe_cast(expr, dbt.type_numeric() ) }},\n                    {{ dbt.safe_cast(bin_size, dbt.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.safe_cast", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.1536698, "supported_languages": null}, "macro.dbt_utils.snowflake__width_bucket": {"name": "snowflake__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.153919, "supported_languages": null}, "macro.dbt_utils.get_query_results_as_dict": {"name": "get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.154444, "supported_languages": null}, "macro.dbt_utils.default__get_query_results_as_dict": {"name": "default__get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.155217, "supported_languages": null}, "macro.dbt_utils.generate_surrogate_key": {"name": "generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.generate_surrogate_key", "macro_sql": "{%- macro generate_surrogate_key(field_list) -%}\n    {{ return(adapter.dispatch('generate_surrogate_key', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.155843, "supported_languages": null}, "macro.dbt_utils.default__generate_surrogate_key": {"name": "default__generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.default__generate_surrogate_key", "macro_sql": "\n\n{%- macro default__generate_surrogate_key(field_list) -%}\n\n{%- if var('surrogate_key_treat_nulls_as_empty_strings', False) -%}\n    {%- set default_null_value = \"\" -%}\n{%- else -%}\n    {%- set default_null_value = '_dbt_utils_surrogate_key_null_' -%}\n{%- endif -%}\n\n{%- set fields = [] -%}\n\n{%- for field in field_list -%}\n\n    {%- do fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt.type_string() ~ \"), '\" ~ default_null_value  ~\"')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- do fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{ dbt.hash(dbt.concat(fields)) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.hash", "macro.dbt.concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.156694, "supported_languages": null}, "macro.dbt_utils.get_table_types_sql": {"name": "get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.get_table_types_sql", "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_utils.default__get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.157502, "supported_languages": null}, "macro.dbt_utils.default__get_table_types_sql": {"name": "default__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.default__get_table_types_sql", "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.157682, "supported_languages": null}, "macro.dbt_utils.postgres__get_table_types_sql": {"name": "postgres__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.postgres__get_table_types_sql", "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.157859, "supported_languages": null}, "macro.dbt_utils.databricks__get_table_types_sql": {"name": "databricks__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.databricks__get_table_types_sql", "macro_sql": "{% macro databricks__get_table_types_sql() %}\n            case table_type\n                when 'MANAGED' then 'table'\n                when 'BASE TABLE' then 'table'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.158032, "supported_languages": null}, "macro.dbt_utils.get_single_value": {"name": "get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.get_single_value", "macro_sql": "{% macro get_single_value(query, default=none) %}\n    {{ return(adapter.dispatch('get_single_value', 'dbt_utils')(query, default)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_single_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.158734, "supported_languages": null}, "macro.dbt_utils.default__get_single_value": {"name": "default__get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.default__get_single_value", "macro_sql": "{% macro default__get_single_value(query, default) %}\n\n{# This macro returns the (0, 0) record in a query, i.e. the first row of the first column #}\n\n    {%- call statement('get_query_result', fetch_result=True, auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {%- if execute -%}\n\n        {% set r = load_result('get_query_result').table.columns[0].values() %}\n        {% if r | length == 0 %}\n            {% do print('Query `' ~ query ~ '` returned no rows. Using the default value: ' ~ default) %}\n            {% set sql_result = default %}\n        {% else %}\n            {% set sql_result = r[0] %}\n        {% endif %}\n        \n    {%- else -%}\n    \n        {% set sql_result = default %}\n    \n    {%- endif -%}\n\n    {% do return(sql_result) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.1596959, "supported_languages": null}, "macro.dbt_utils.degrees_to_radians": {"name": "degrees_to_radians", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.161278, "supported_languages": null}, "macro.dbt_utils.haversine_distance": {"name": "haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.16162, "supported_languages": null}, "macro.dbt_utils.default__haversine_distance": {"name": "default__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.162359, "supported_languages": null}, "macro.dbt_utils.bigquery__haversine_distance": {"name": "bigquery__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.163381, "supported_languages": null}, "macro.codegen.generate_model_import_ctes": {"name": "generate_model_import_ctes", "resource_type": "macro", "package_name": "codegen", "path": "macros/generate_model_import_ctes.sql", "original_file_path": "macros/generate_model_import_ctes.sql", "unique_id": "macro.codegen.generate_model_import_ctes", "macro_sql": "{% macro generate_model_import_ctes(model_name, leading_commas = False) %}\n    {{ return(adapter.dispatch('generate_model_import_ctes', 'codegen')(model_name, leading_commas)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.codegen.default__generate_model_import_ctes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.17358, "supported_languages": null}, "macro.codegen.default__generate_model_import_ctes": {"name": "default__generate_model_import_ctes", "resource_type": "macro", "package_name": "codegen", "path": "macros/generate_model_import_ctes.sql", "original_file_path": "macros/generate_model_import_ctes.sql", "unique_id": "macro.codegen.default__generate_model_import_ctes", "macro_sql": "{% macro default__generate_model_import_ctes(model_name, leading_commas) %}\n\n    {%- if execute -%}\n    {%- set nodes = graph.nodes.values() -%}\n\n    {%- set model = (nodes\n        | selectattr('name', 'equalto', model_name) \n        | selectattr('resource_type', 'equalto', 'model')\n        | list).pop() -%}\n\n    {%- set model_raw_sql = model.raw_sql or model.raw_code -%}\n    {%- else -%}\n    {%- set model_raw_sql = '' -%}\n    {%- endif -%}\n\n    {#-\n\n        REGEX Explanations\n\n        # with_regex\n        - matches (start of file followed by anything then whitespace\n        or whitespace\n        or a comma) followed by the word with then a space   \n\n        # from_ref \n        - matches (from or join) followed by some spaces and then {{ref(<something>)}}\n\n        # from_source \n        - matches (from or join) followed by some spaces and then {{source(<something>,<something_else>)}}\n\n        # from_var_1\n        - matches (from or join) followed by some spaces and then {{var(<something>)}}\n\n        # from_var_2\n        - matches (from or join) followed by some spaces and then {{var(<something>,<something_else>)}}\n\n        # from_table_1\n        - matches (from or join) followed by some spaces and then <something>.<something_else>\n          where each <something> is enclosed by (` or [ or \" or ' or nothing)\n\n        # from_table_2\n        - matches (from or join) followed by some spaces and then <something>.<something_else>.<something_different>\n          where each <something> is enclosed by (` or [ or \" or ' or nothing)\n\n        # from_table_3\n        - matches (from or join) followed by some spaces and then <something>\n          where <something> is enclosed by (` or [ or \" or ')\n\n        # config block\n        - matches the start of the file followed by anything and then {{config(<something>)}}\n\n    -#}\n\n    {%- set re = modules.re -%}\n\n    {%- set with_regex = '(?i)(?s)(^.*\\s*|\\s+|,)with\\s' -%}\n    {%- set does_raw_sql_contain_cte = re.search(with_regex, model_raw_sql) -%}\n\n    {%- set from_regexes = {\n        'from_ref':\n            '(?ix)\n\n            # first matching group\n            # from or join followed by at least 1 whitespace character\n            (from|join)\\s+\n\n            # second matching group\n            # opening {{, 0 or more whitespace character(s), ref, 0 or more whitespace character(s), an opening parenthesis, 0 or more whitespace character(s), 1 or 0 quotation mark\n            ({{\\s*ref\\s*\\(\\s*[\\'\\\"]?)\n            \n            # third matching group\n            # at least 1 of anything except a parenthesis or quotation mark\n            ([^)\\'\\\"]+)\n            \n            # fourth matching group\n            # 1 or 0 quotation mark, 0 or more whitespace character(s)\n            ([\\'\\\"]?\\s*)\n\n            # fifth matching group\n            # a closing parenthesis, 0 or more whitespace character(s), closing }}\n            (\\)\\s*}})\n        \n            ',\n        'from_source':\n            '(?ix)\n\n            # first matching group\n            # from or join followed by at least 1 whitespace character\n            (from|join)\\s+\n\n            # second matching group\n            # opening {{, 0 or more whitespace character(s), source, 0 or more whitespace character(s), an opening parenthesis, 0 or more whitespace character(s), 1 or 0 quotation mark\n            ({{\\s*source\\s*\\(\\s*[\\'\\\"]?)\n\n            # third matching group\n            # at least 1 of anything except a parenthesis or quotation mark\n            ([^)\\'\\\"]+)\n\n            # fourth matching group\n            # 1 or 0 quotation mark, 0 or more whitespace character(s)\n            ([\\'\\\"]?\\s*)\n\n            # fifth matching group\n            # a comma\n            (,)\n\n            # sixth matching group\n            # 0 or more whitespace character(s), 1 or 0 quotation mark\n            (\\s*[\\'\\\"]?)\n\n            # seventh matching group\n            # at least 1 of anything except a parenthesis or quotation mark\n            ([^)\\'\\\"]+)\n\n            # eighth matching group\n            # 1 or 0 quotation mark, 0 or more whitespace character(s)\n            ([\\'\\\"]?\\s*)\n\n            # ninth matching group\n            # a closing parenthesis, 0 or more whitespace character(s), closing }}\n            (\\)\\s*}})\n\n            ',\n        'from_var_1':\n            '(?ix)\n\n            # first matching group\n            # from or join followed by at least 1 whitespace character\n            (from|join)\\s+\n\n            # second matching group\n            # opening {{, 0 or more whitespace character(s), var, 0 or more whitespace character(s), an opening parenthesis, 0 or more whitespace character(s), 1 or 0 quotation mark\n            ({{\\s*var\\s*\\(\\s*[\\'\\\"]?)\n\n            # third matching group\n            # at least 1 of anything except a parenthesis or quotation mark\n            ([^)\\'\\\"]+)\n\n            # fourth matching group\n            # 1 or 0 quotation mark, 0 or more whitespace character(s)\n            ([\\'\\\"]?\\s*)\n\n            # fifth matching group\n            # a closing parenthesis, 0 or more whitespace character(s), closing }}\n            (\\)\\s*}})\n            \n            ',\n        'from_var_2':\n            '(?ix)\n\n            # first matching group\n            # from or join followed by at least 1 whitespace character\n            (from|join)\\s+\n            \n            # second matching group\n            # opening {{, 0 or more whitespace character(s), var, 0 or more whitespace character(s), an opening parenthesis, 0 or more whitespace character(s), 1 or 0 quotation mark\n            ({{\\s*var\\s*\\(\\s*[\\'\\\"]?)\n\n            # third matching group\n            # at least 1 of anything except a parenthesis or quotation mark            \n            ([^)\\'\\\"]+)\n            \n            # fourth matching group\n            # 1 or 0 quotation mark, 0 or more whitespace character(s)\n            ([\\'\\\"]?\\s*)\n\n            # fifth matching group\n            # a comma\n            (,)\n\n            # sixth matching group\n            # 0 or more whitespace character(s), 1 or 0 quotation mark            \n            (\\s*[\\'\\\"]?)\n\n            # seventh matching group\n            # at least 1 of anything except a parenthesis or quotation mark            \n            ([^)\\'\\\"]+)\n\n            # eighth matching group\n            # 1 or 0 quotation mark, 0 or more whitespace character(s)            \n            ([\\'\\\"]?\\s*)\n\n            # ninth matching group\n            # a closing parenthesis, 0 or more whitespace character(s), closing }}            \n            (\\)\\s*}})\n            \n            ',\n        'from_table_1':\n            '(?ix)\n            \n            # first matching group\n            # from or join followed by at least 1 whitespace character            \n            (from|join)\\s+\n            \n            # second matching group\n            # 1 or 0 of (opening bracket, backtick, or quotation mark)\n            ([\\[`\\\"\\']?)\n            \n            # third matching group\n            # at least 1 word character\n            (\\w+)\n            \n            # fouth matching group\n            # 1 or 0 of (closing bracket, backtick, or quotation mark)\n            ([\\]`\\\"\\']?)\n            \n            # fifth matching group\n            # a period\n            (\\.)\n            \n            # sixth matching group\n            # 1 or 0 of (opening bracket, backtick, or quotation mark)\n            ([\\[`\\\"\\']?)\n            \n            # seventh matching group\n            # at least 1 word character\n            (\\w+)\n            \n            # eighth matching group\n            # 1 or 0 of (closing bracket, backtick, or quotation mark) folowed by a whitespace character or end of string\n            ([\\]`\\\"\\']?)(?=\\s|$)\n            \n            ',\n        'from_table_2':\n            '(?ix)\n\n            # first matching group\n            # from or join followed by at least 1 whitespace character \n            (from|join)\\s+\n            \n            # second matching group\n            # 1 or 0 of (opening bracket, backtick, or quotation mark)            \n            ([\\[`\\\"\\']?)\n            \n            # third matching group\n            # at least 1 word character\n            (\\w+)\n\n            # fouth matching group\n            # 1 or 0 of (closing bracket, backtick, or quotation mark)            \n            ([\\]`\\\"\\']?)\n            \n            # fifth matching group\n            # a period            \n            (\\.)\n            \n            # sixth matching group\n            # 1 or 0 of (opening bracket, backtick, or quotation mark)\n            ([\\[`\\\"\\']?)\n\n            # seventh matching group\n            # at least 1 word character            \n            (\\w+)\n            \n            # eighth matching group\n            # 1 or 0 of (closing bracket, backtick, or quotation mark) \n            ([\\]`\\\"\\']?)\n            \n            # ninth matching group\n            # a period             \n            (\\.)\n            \n            # tenth matching group\n            # 1 or 0 of (closing bracket, backtick, or quotation mark)             \n            ([\\[`\\\"\\']?)\n            \n            # eleventh matching group\n            # at least 1 word character   \n            (\\w+)\n\n            # twelfth matching group\n            # 1 or 0 of (closing bracket, backtick, or quotation mark) folowed by a whitespace character or end of string\n            ([\\]`\\\"\\']?)(?=\\s|$)\n            \n            ',\n        'from_table_3':\n            '(?ix)\n\n            # first matching group\n            # from or join followed by at least 1 whitespace character             \n            (from|join)\\s+\n            \n            # second matching group\n            # 1 or 0 of (opening bracket, backtick, or quotation mark)            \n            ([\\[`\\\"\\'])\n            \n            # third matching group\n            # at least 1 word character or space \n            ([\\w ]+)\n\n            # fourth matching group\n            # 1 or 0 of (closing bracket, backtick, or quotation mark) folowed by a whitespace character or end of string\n            ([\\]`\\\"\\'])(?=\\s|$)\n            \n            ',\n        'config_block':'(?i)(?s)^.*{{\\s*config\\s*\\([^)]+\\)\\s*}}'\n    } -%}\n\n    {%- set from_list = [] -%}\n    {%- set config_list = [] -%}\n    {%- set ns = namespace(model_sql = model_raw_sql) -%}\n\n    {%- for regex_name, regex_pattern in from_regexes.items() -%}\n\n        {%- set all_regex_matches = re.findall(regex_pattern, model_raw_sql) -%}\n\n        {%- for match in all_regex_matches -%}\n\n            {%- if regex_name == 'config_block' -%}\n                {%- set match_tuple = (match|trim, regex_name) -%}\n                {%- do config_list.append(match_tuple) -%}\n            {%- elif regex_name == 'from_source' -%}    \n                {%- set full_from_clause = match[1:]|join|trim -%}\n                {%- set cte_name = 'source_' + match[6]|lower -%}\n                {%- set match_tuple = (cte_name, full_from_clause, regex_name) -%}\n                {%- do from_list.append(match_tuple) -%} \n            {%- elif regex_name == 'from_table_1' -%}\n                {%- set full_from_clause = match[1:]|join()|trim -%}\n                {%- set cte_name = match[2]|lower + '_' + match[6]|lower -%}\n                {%- set match_tuple = (cte_name, full_from_clause, regex_name) -%}\n                {%- do from_list.append(match_tuple) -%}   \n            {%- elif regex_name == 'from_table_2' -%}\n                {%- set full_from_clause = match[1:]|join()|trim -%}\n                {%- set cte_name = match[2]|lower + '_' + match[6]|lower + '_' + match[10]|lower -%}\n                {%- set match_tuple = (cte_name, full_from_clause, regex_name) -%}\n                {%- do from_list.append(match_tuple) -%}                     \n            {%- else -%}\n                {%- set full_from_clause = match[1:]|join|trim -%}\n                {%- set cte_name = match[2]|trim|lower -%}\n                {%- set match_tuple = (cte_name, full_from_clause, regex_name) -%}\n                {%- do from_list.append(match_tuple) -%}\n            {%- endif -%}\n\n        {%- endfor -%}\n\n        {%- if regex_name == 'config_block' -%}\n        {%- elif regex_name == 'from_source' -%}\n            {%- set ns.model_sql = re.sub(regex_pattern, '\\g<1> source_\\g<7>', ns.model_sql) -%}            \n        {%- elif regex_name == 'from_table_1' -%}\n            {%- set ns.model_sql = re.sub(regex_pattern, '\\g<1> \\g<3>_\\g<7>', ns.model_sql) -%}     \n        {%- elif regex_name == 'from_table_2' -%}\n            {%- set ns.model_sql = re.sub(regex_pattern, '\\g<1> \\g<3>_\\g<7>_\\g<11>', ns.model_sql) -%} \n        {%- else -%}   \n            {%- set ns.model_sql = re.sub(regex_pattern, '\\g<1> \\g<3>', ns.model_sql) -%}         \n        {% endif %}\n\n    {%- endfor -%}\n\n{%- if from_list|length > 0 -%}\n\n{%- set model_import_ctes -%}\n\n    {%- for config_obj in config_list -%}\n\n    {%- set ns.model_sql = ns.model_sql|replace(config_obj[0], '') -%}\n\n{{ config_obj[0] }}\n\n{% endfor -%}\n\n    {%- for from_obj in from_list|unique|sort -%}\n\n{%- if loop.first -%}with {% else -%}{%- if leading_commas -%},{%- endif -%}{%- endif -%}{{ from_obj[0] }} as (\n\n    select * from {{ from_obj[1] }}\n    {%- if from_obj[2] == 'from_source' and from_list|length > 1 %} \n    -- CAUTION: It's best practice to create staging layer for raw sources\n    {%- elif from_obj[2] == 'from_table_1' or from_obj[2] == 'from_table_2' or from_obj[2] == 'from_table_3' %}\n    -- CAUTION: It's best practice to use the ref or source function instead of a direct reference\n    {%- elif from_obj[2] == 'from_var_1' or from_obj[2] == 'from_var_2' %}\n    -- CAUTION: It's best practice to use the ref or source function instead of a var\n    {%- endif %}\n  \n){%- if ((loop.last and does_raw_sql_contain_cte) or (not loop.last)) and not leading_commas -%},{%- endif %}\n\n{% endfor -%}\n\n{%- if does_raw_sql_contain_cte -%}\n    {%- if leading_commas -%}\n        {%- set replace_with = '\\g<1>,' -%}\n    {%- else -%}\n        {%- set replace_with = '\\g<1>' -%}\n    {%- endif -%}\n{{ re.sub(with_regex, replace_with, ns.model_sql, 1)|trim }}\n{%- else -%}\n{{ ns.model_sql|trim }}\n{%- endif -%}\n\n{%- endset -%}\n\n{%- else -%}\n\n{% set model_import_ctes = model_raw_sql %}\n\n{%- endif -%}\n\n{%- if execute -%}\n\n{{ print(model_import_ctes) }}\n{% do return(model_import_ctes) %}\n\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.18066, "supported_languages": null}, "macro.codegen.generate_column_yaml": {"name": "generate_column_yaml", "resource_type": "macro", "package_name": "codegen", "path": "macros/generate_model_yaml.sql", "original_file_path": "macros/generate_model_yaml.sql", "unique_id": "macro.codegen.generate_column_yaml", "macro_sql": "{% macro generate_column_yaml(column, model_yaml, column_desc_dict, include_data_types, parent_column_name=\"\") %}\n  {{ return(adapter.dispatch('generate_column_yaml', 'codegen')(column, model_yaml, column_desc_dict, include_data_types, parent_column_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.codegen.default__generate_column_yaml"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.1840231, "supported_languages": null}, "macro.codegen.default__generate_column_yaml": {"name": "default__generate_column_yaml", "resource_type": "macro", "package_name": "codegen", "path": "macros/generate_model_yaml.sql", "original_file_path": "macros/generate_model_yaml.sql", "unique_id": "macro.codegen.default__generate_column_yaml", "macro_sql": "{% macro default__generate_column_yaml(column, model_yaml, column_desc_dict, include_data_types, parent_column_name) %}\n    {% if parent_column_name %}\n        {% set column_name = parent_column_name ~ \".\" ~ column.name %}\n    {% else %}\n        {% set column_name = column.name %}\n    {% endif %}\n\n    {% do model_yaml.append('      - name: ' ~ column_name  | lower ) %}\n    {% if include_data_types %}\n        {% do model_yaml.append('        data_type: ' ~ codegen.data_type_format_model(column)) %}\n    {% endif %}\n    {% do model_yaml.append('        description: \"' ~ column_desc_dict.get(column.name | lower,'') ~ '\"') %}\n    {% do model_yaml.append('') %}\n\n    {% if column.fields|length > 0 %}\n        {% for child_column in column.fields %}\n            {% set model_yaml = codegen.generate_column_yaml(child_column, model_yaml, column_desc_dict, include_data_types, parent_column_name=column_name) %}\n        {% endfor %}\n    {% endif %}\n    {% do return(model_yaml) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.codegen.data_type_format_model", "macro.codegen.generate_column_yaml"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.1853461, "supported_languages": null}, "macro.codegen.generate_model_yaml": {"name": "generate_model_yaml", "resource_type": "macro", "package_name": "codegen", "path": "macros/generate_model_yaml.sql", "original_file_path": "macros/generate_model_yaml.sql", "unique_id": "macro.codegen.generate_model_yaml", "macro_sql": "{% macro generate_model_yaml(model_names=[], upstream_descriptions=False, include_data_types=True) -%}\n  {{ return(adapter.dispatch('generate_model_yaml', 'codegen')(model_names, upstream_descriptions, include_data_types)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.codegen.default__generate_model_yaml"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.1856909, "supported_languages": null}, "macro.codegen.default__generate_model_yaml": {"name": "default__generate_model_yaml", "resource_type": "macro", "package_name": "codegen", "path": "macros/generate_model_yaml.sql", "original_file_path": "macros/generate_model_yaml.sql", "unique_id": "macro.codegen.default__generate_model_yaml", "macro_sql": "{% macro default__generate_model_yaml(model_names, upstream_descriptions, include_data_types) %}\n\n    {% set model_yaml=[] %}\n\n    {% do model_yaml.append('version: 2') %}\n    {% do model_yaml.append('') %}\n    {% do model_yaml.append('models:') %}\n\n    {% if model_names is string %}\n        {{ exceptions.raise_compiler_error(\"The `model_names` argument must always be a list, even if there is only one model.\") }}\n    {% else %}\n        {% for model in model_names %}\n            {% do model_yaml.append('  - name: ' ~ model | lower) %}\n            {% do model_yaml.append('    description: \"\"') %}\n            {% do model_yaml.append('    columns:') %}\n\n            {% set relation=ref(model) %}\n            {%- set columns = adapter.get_columns_in_relation(relation) -%}\n            {% set column_desc_dict =  codegen.build_dict_column_descriptions(model) if upstream_descriptions else {} %}\n\n            {% for column in columns %}\n                {% set model_yaml = codegen.generate_column_yaml(column, model_yaml, column_desc_dict, include_data_types) %}\n            {% endfor %}\n        {% endfor %}\n    {% endif %}\n\n{% if execute %}\n\n    {% set joined = model_yaml | join ('\\n') %}\n    {{ print(joined) }}\n    {% do return(joined) %}\n\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.codegen.build_dict_column_descriptions", "macro.codegen.generate_column_yaml"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.187299, "supported_languages": null}, "macro.codegen.create_base_models": {"name": "create_base_models", "resource_type": "macro", "package_name": "codegen", "path": "macros/create_base_models.sql", "original_file_path": "macros/create_base_models.sql", "unique_id": "macro.codegen.create_base_models", "macro_sql": "{% macro create_base_models(source_name, tables) %}\n    {{ return(adapter.dispatch('create_base_models', 'codegen')(source_name, tables)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.codegen.default__create_base_models"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.187871, "supported_languages": null}, "macro.codegen.default__create_base_models": {"name": "default__create_base_models", "resource_type": "macro", "package_name": "codegen", "path": "macros/create_base_models.sql", "original_file_path": "macros/create_base_models.sql", "unique_id": "macro.codegen.default__create_base_models", "macro_sql": "{% macro default__create_base_models(source_name, tables) %}\n\n{% set source_name = \"\"~ source_name ~\"\" %}\n\n{% set zsh_command_models = \"source dbt_packages/codegen/bash_scripts/base_model_creation.sh \"\"\"~ source_name ~\"\"\" \" %}\n\n{%- set models_array = [] -%}\n\n{% for t in tables %}\n    {% set help_command = zsh_command_models + t %}\n    {{ models_array.append(help_command) }}\n{% endfor %}\n\n{{ log(\"Run these commands in your shell to generate the models:\\n\" ~ models_array|join(' && \\n'), info=True) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.188524, "supported_languages": null}, "macro.codegen.generate_base_model": {"name": "generate_base_model", "resource_type": "macro", "package_name": "codegen", "path": "macros/generate_base_model.sql", "original_file_path": "macros/generate_base_model.sql", "unique_id": "macro.codegen.generate_base_model", "macro_sql": "{% macro generate_base_model(source_name, table_name, leading_commas=False, case_sensitive_cols=False, materialized=None) %}\n  {{ return(adapter.dispatch('generate_base_model', 'codegen')(source_name, table_name, leading_commas, case_sensitive_cols, materialized)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.codegen.default__generate_base_model"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.190272, "supported_languages": null}, "macro.codegen.default__generate_base_model": {"name": "default__generate_base_model", "resource_type": "macro", "package_name": "codegen", "path": "macros/generate_base_model.sql", "original_file_path": "macros/generate_base_model.sql", "unique_id": "macro.codegen.default__generate_base_model", "macro_sql": "{% macro default__generate_base_model(source_name, table_name, leading_commas, case_sensitive_cols, materialized) %}\n\n{%- set source_relation = source(source_name, table_name) -%}\n\n{%- set columns = adapter.get_columns_in_relation(source_relation) -%}\n{% set column_names=columns | map(attribute='name') %}\n{% set base_model_sql %}\n\n{%- if materialized is not none -%}\n    {{ \"{{ config(materialized='\" ~ materialized ~ \"') }}\" }}\n{%- endif %}\n\nwith source as (\n\n    select * from {% raw %}{{ source({% endraw %}'{{ source_name }}', '{{ table_name }}'{% raw %}) }}{% endraw %}\n\n),\n\nrenamed as (\n\n    select\n        {%- if leading_commas -%}\n        {%- for column in column_names %}\n        {{\", \" if not loop.first}}{% if not case_sensitive_cols %}{{ column | lower }}{% elif target.type == \"bigquery\" %}{{ column }}{% else %}{{ \"\\\"\" ~ column ~ \"\\\"\" }}{% endif %}\n        {%- endfor %}\n        {%- else -%}\n        {%- for column in column_names %}\n        {% if not case_sensitive_cols %}{{ column | lower }}{% elif target.type == \"bigquery\" %}{{ column }}{% else %}{{ \"\\\"\" ~ column ~ \"\\\"\" }}{% endif %}{{\",\" if not loop.last}}\n        {%- endfor -%}\n        {%- endif %}\n\n    from source\n\n)\n\nselect * from renamed\n{% endset %}\n\n{% if execute %}\n\n{{ print(base_model_sql) }}\n{% do return(base_model_sql) %}\n\n{% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.191909, "supported_languages": null}, "macro.codegen.get_tables_in_schema": {"name": "get_tables_in_schema", "resource_type": "macro", "package_name": "codegen", "path": "macros/generate_source.sql", "original_file_path": "macros/generate_source.sql", "unique_id": "macro.codegen.get_tables_in_schema", "macro_sql": "{% macro get_tables_in_schema(schema_name, database_name=target.database, table_pattern='%', exclude='') %}\n    \n    {% set tables=dbt_utils.get_relations_by_pattern(\n        schema_pattern=schema_name,\n        database=database_name,\n        table_pattern=table_pattern,\n        exclude=exclude\n    ) %}\n\n    {% set table_list= tables | map(attribute='identifier') %}\n\n    {{ return(table_list | sort) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.1958652, "supported_languages": null}, "macro.codegen.generate_source": {"name": "generate_source", "resource_type": "macro", "package_name": "codegen", "path": "macros/generate_source.sql", "original_file_path": "macros/generate_source.sql", "unique_id": "macro.codegen.generate_source", "macro_sql": "{% macro generate_source(schema_name, database_name=target.database, generate_columns=False, include_descriptions=False, include_data_types=True, table_pattern='%', exclude='', name=schema_name, table_names=None, include_database=False, include_schema=False) %}\n    {{ return(adapter.dispatch('generate_source', 'codegen')(schema_name, database_name, generate_columns, include_descriptions, include_data_types, table_pattern, exclude, name, table_names, include_database, include_schema)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.codegen.default__generate_source"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.196526, "supported_languages": null}, "macro.codegen.default__generate_source": {"name": "default__generate_source", "resource_type": "macro", "package_name": "codegen", "path": "macros/generate_source.sql", "original_file_path": "macros/generate_source.sql", "unique_id": "macro.codegen.default__generate_source", "macro_sql": "{% macro default__generate_source(schema_name, database_name, generate_columns, include_descriptions, include_data_types, table_pattern, exclude, name, table_names, include_database, include_schema) %}\n\n{% set sources_yaml=[] %}\n{% do sources_yaml.append('version: 2') %}\n{% do sources_yaml.append('') %}\n{% do sources_yaml.append('sources:') %}\n{% do sources_yaml.append('  - name: ' ~ name | lower) %}\n\n{% if include_descriptions %}\n    {% do sources_yaml.append('    description: \"\"' ) %}\n{% endif %}\n\n{% if database_name != target.database or include_database %}\n{% do sources_yaml.append('    database: ' ~ database_name | lower) %}\n{% endif %}\n\n{% if schema_name != name or include_schema %}\n{% do sources_yaml.append('    schema: ' ~ schema_name | lower) %}\n{% endif %}\n\n{% do sources_yaml.append('    tables:') %}\n\n{% if table_names is none %}\n{% set tables=codegen.get_tables_in_schema(schema_name, database_name, table_pattern, exclude) %}\n{% else %}\n{% set tables = table_names %}\n{% endif %}\n\n{% for table in tables %}\n    {% do sources_yaml.append('      - name: ' ~ table | lower ) %}\n    {% if include_descriptions %}\n        {% do sources_yaml.append('        description: \"\"' ) %}\n    {% endif %}\n    {% if generate_columns %}\n    {% do sources_yaml.append('        columns:') %}\n\n        {% set table_relation=api.Relation.create(\n            database=database_name,\n            schema=schema_name,\n            identifier=table\n        ) %}\n\n        {% set columns=adapter.get_columns_in_relation(table_relation) %}\n\n        {% for column in columns %}\n            {% do sources_yaml.append('          - name: ' ~ column.name | lower ) %}\n            {% if include_data_types %}\n                {% do sources_yaml.append('            data_type: ' ~ codegen.data_type_format_source(column)) %}\n            {% endif %}\n            {% if include_descriptions %}\n                {% do sources_yaml.append('            description: \"\"' ) %}\n            {% endif %}\n        {% endfor %}\n            {% do sources_yaml.append('') %}\n\n    {% endif %}\n\n{% endfor %}\n\n{% if execute %}\n\n    {% set joined = sources_yaml | join ('\\n') %}\n    {{ print(joined) }}\n    {% do return(joined) %}\n\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.codegen.get_tables_in_schema", "macro.codegen.data_type_format_source"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.199511, "supported_languages": null}, "macro.codegen.format_column": {"name": "format_column", "resource_type": "macro", "package_name": "codegen", "path": "macros/vendored/dbt_core/format_column.sql", "original_file_path": "macros/vendored/dbt_core/format_column.sql", "unique_id": "macro.codegen.format_column", "macro_sql": "{% macro format_column(column) -%}\n  {% set data_type = column.dtype %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.200056, "supported_languages": null}, "macro.codegen.get_model_dependencies": {"name": "get_model_dependencies", "resource_type": "macro", "package_name": "codegen", "path": "macros/helpers/helpers.sql", "original_file_path": "macros/helpers/helpers.sql", "unique_id": "macro.codegen.get_model_dependencies", "macro_sql": "{% macro get_model_dependencies(model_name) %}\n    {% for node in graph.nodes.values() | selectattr('name', \"equalto\", model_name) %}\n        {{ return(node.depends_on.nodes) }}\n    {% endfor %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.202076, "supported_languages": null}, "macro.codegen.add_model_column_descriptions_to_dict": {"name": "add_model_column_descriptions_to_dict", "resource_type": "macro", "package_name": "codegen", "path": "macros/helpers/helpers.sql", "original_file_path": "macros/helpers/helpers.sql", "unique_id": "macro.codegen.add_model_column_descriptions_to_dict", "macro_sql": "{% macro add_model_column_descriptions_to_dict(model_name,dict_with_descriptions={}) %}\n    {% for node in graph.nodes.values() | selectattr('name', \"equalto\", model_name) %}\n        {% for col_name, col_values in node.columns.items() %}\n            {% do dict_with_descriptions.update( {col_name: col_values.description} ) %}\n        {% endfor %}\n    {% endfor %}\n    {{ return(dict_with_descriptions) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.202683, "supported_languages": null}, "macro.codegen.build_dict_column_descriptions": {"name": "build_dict_column_descriptions", "resource_type": "macro", "package_name": "codegen", "path": "macros/helpers/helpers.sql", "original_file_path": "macros/helpers/helpers.sql", "unique_id": "macro.codegen.build_dict_column_descriptions", "macro_sql": "{% macro build_dict_column_descriptions(model_name) %}\n    {% if execute %}\n        {% set glob_dict = {} %}\n        {% for full_model in codegen.get_model_dependencies(model_name) %}\n            {% do codegen.add_model_column_descriptions_to_dict(full_model.split('.')[-1],glob_dict) %}\n        {% endfor %}\n        {{ return(glob_dict) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.codegen.get_model_dependencies", "macro.codegen.add_model_column_descriptions_to_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.203257, "supported_languages": null}, "macro.codegen.get_models": {"name": "get_models", "resource_type": "macro", "package_name": "codegen", "path": "macros/helpers/helpers.sql", "original_file_path": "macros/helpers/helpers.sql", "unique_id": "macro.codegen.get_models", "macro_sql": "{% macro get_models(directory=None, prefix=None) %}\n    {% set model_names=[] %}\n    {% set models = graph.nodes.values() | selectattr('resource_type', \"equalto\", 'model') %}\n    {% if directory and prefix %}\n        {% for model in models %}\n            {% set model_path = \"/\".join(model.path.split(\"/\")[:-1]) %}\n            {% if model_path == directory and model.name.startswith(prefix) %}\n                {% do model_names.append(model.name) %}\n            {% endif %} \n        {% endfor %}\n    {% elif directory %}\n        {% for model in models %}\n            {% set model_path = \"/\".join(model.path.split(\"/\")[:-1]) %}\n            {% if model_path == directory %}\n                {% do model_names.append(model.name) %}\n            {% endif %}\n        {% endfor %}\n    {% elif prefix %}\n        {% for model in models if model.name.startswith(prefix) %}\n            {% do model_names.append(model.name) %}\n        {% endfor %}\n    {% else %}\n        {% for model in models %}\n            {% do model_names.append(model.name) %}\n        {% endfor %}\n    {% endif %}\n    {{ return(model_names) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.2050922, "supported_languages": null}, "macro.codegen.data_type_format_source": {"name": "data_type_format_source", "resource_type": "macro", "package_name": "codegen", "path": "macros/helpers/helpers.sql", "original_file_path": "macros/helpers/helpers.sql", "unique_id": "macro.codegen.data_type_format_source", "macro_sql": "{% macro data_type_format_source(column) -%}\n  {{ return(adapter.dispatch('data_type_format_source', 'codegen')(column)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.codegen.default__data_type_format_source"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.205347, "supported_languages": null}, "macro.codegen.default__data_type_format_source": {"name": "default__data_type_format_source", "resource_type": "macro", "package_name": "codegen", "path": "macros/helpers/helpers.sql", "original_file_path": "macros/helpers/helpers.sql", "unique_id": "macro.codegen.default__data_type_format_source", "macro_sql": "{% macro default__data_type_format_source(column) %}\n    {% set formatted = codegen.format_column(column) %}\n    {{ return(formatted['data_type'] | lower) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.codegen.format_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.205635, "supported_languages": null}, "macro.codegen.data_type_format_model": {"name": "data_type_format_model", "resource_type": "macro", "package_name": "codegen", "path": "macros/helpers/helpers.sql", "original_file_path": "macros/helpers/helpers.sql", "unique_id": "macro.codegen.data_type_format_model", "macro_sql": "{% macro data_type_format_model(column) -%}\n  {{ return(adapter.dispatch('data_type_format_model', 'codegen')(column)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.codegen.default__data_type_format_model"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.205858, "supported_languages": null}, "macro.codegen.default__data_type_format_model": {"name": "default__data_type_format_model", "resource_type": "macro", "package_name": "codegen", "path": "macros/helpers/helpers.sql", "original_file_path": "macros/helpers/helpers.sql", "unique_id": "macro.codegen.default__data_type_format_model", "macro_sql": "{% macro default__data_type_format_model(column) %}\n    {% set formatted = codegen.format_column(column) %}\n    {{ return(formatted['data_type'] | lower) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.codegen.format_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1702281447.206136, "supported_languages": null}}, "docs": {"doc.baseball_computer.game_id": {"name": "game_id", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_global_cols.md", "original_file_path": "models/doc_global_cols.md", "unique_id": "doc.baseball_computer.game_id", "block_contents": "Retrosheet game ID, A 12-character string structured as follows:\n\n    - Chars 1-3: Home team ID\n    - Chars 4-11: Date (YYYYMMDD)\n    - Char 12: Game number (0 if only one game was played on that day)\n    \n    Example: MLN195607170"}, "doc.baseball_computer.season": {"name": "season", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_global_cols.md", "original_file_path": "models/doc_global_cols.md", "unique_id": "doc.baseball_computer.season", "block_contents": "Year, 4-digit integer"}, "doc.baseball_computer.date": {"name": "date", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_global_cols.md", "original_file_path": "models/doc_global_cols.md", "unique_id": "doc.baseball_computer.date", "block_contents": "Date on which the entity took place."}, "doc.baseball_computer.event_key": {"name": "event_key", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_global_cols.md", "original_file_path": "models/doc_global_cols.md", "unique_id": "doc.baseball_computer.event_key", "block_contents": "4-byte integer that uniquely identifies an event across the entire\n    dataset (contrast with event_id, which is game-specific). The key\n    is generated deterministically given the same dataset, but it may\n    change when the data is updated. It is guaranteed to follow the \n    order of events within a single game."}, "doc.baseball_computer.event_id": {"name": "event_id", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_global_cols.md", "original_file_path": "models/doc_global_cols.md", "unique_id": "doc.baseball_computer.event_id", "block_contents": "1-byte integer that uniquely identifies, in order, an event within a single game.\n    This value will remain the same across multiple versions as long as events\n    are not added or removed from that specific game, and should align exactly\n    with the event_id produced by Retrosheet's BEVENT software."}, "doc.baseball_computer.team_id": {"name": "team_id", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_global_cols.md", "original_file_path": "models/doc_global_cols.md", "unique_id": "doc.baseball_computer.team_id", "block_contents": "Retrosheet team ID, 3-character string which identifies the team\n    that a franchise was playing as at a given time."}, "doc.baseball_computer.away_team_id": {"name": "away_team_id", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_global_cols.md", "original_file_path": "models/doc_global_cols.md", "unique_id": "doc.baseball_computer.away_team_id", "block_contents": "Retrosheet team ID, 3-character string which identifies the team\n    that a franchise was playing as at a given time."}, "doc.baseball_computer.home_team_id": {"name": "home_team_id", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_global_cols.md", "original_file_path": "models/doc_global_cols.md", "unique_id": "doc.baseball_computer.home_team_id", "block_contents": "Retrosheet team ID, 3-character string which identifies the team\n    that a franchise was playing as at a given time."}, "doc.baseball_computer.person_id": {"name": "person_id", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_global_cols.md", "original_file_path": "models/doc_global_cols.md", "unique_id": "doc.baseball_computer.person_id", "block_contents": "Retrosheet 8-character person ID which consists of\n    the first four characters of the last name, the first character\n    of the first name, and then three digits to disambiguate between\n    players with the same five characters. The first of the three digits\n    designates the type of person (in their main role in MLB):\n    - 0 and 1: player\n    - 7: scorekeeper (not present in file but used in `scorer` field for newer games)\n    - 8: coach\n    - 9: umpire"}, "doc.baseball_computer.player_id": {"name": "player_id", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_global_cols.md", "original_file_path": "models/doc_global_cols.md", "unique_id": "doc.baseball_computer.player_id", "block_contents": "Retrosheet 8-character person ID for a player, which consists of\n    the first four characters of the last name, the first character\n    of the first name, and then three digits to disambiguate between\n    players with the same five characters."}, "doc.baseball_computer.batter_id": {"name": "batter_id", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_global_cols.md", "original_file_path": "models/doc_global_cols.md", "unique_id": "doc.baseball_computer.batter_id", "block_contents": "Retrosheet 8-character person ID for the batter associated with the\n    entity."}, "doc.baseball_computer.pitcher_id": {"name": "pitcher_id", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_global_cols.md", "original_file_path": "models/doc_global_cols.md", "unique_id": "doc.baseball_computer.pitcher_id", "block_contents": "Retrosheet 8-character person ID for the pitcher associated with the\n    entity."}, "doc.baseball_computer.runner_id": {"name": "runner_id", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_global_cols.md", "original_file_path": "models/doc_global_cols.md", "unique_id": "doc.baseball_computer.runner_id", "block_contents": "Retrosheet 8-character person ID for the baserunner associated with the\n    entity."}, "doc.baseball_computer.databank_player_id": {"name": "databank_player_id", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_global_cols.md", "original_file_path": "models/doc_global_cols.md", "unique_id": "doc.baseball_computer.databank_player_id", "block_contents": "Baseball Databank player ID, which is different from Retrosheet's.\n    This ID must be used to join player data from the Baseball Databank\n    sources."}, "doc.baseball_computer.league": {"name": "league", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_global_cols.md", "original_file_path": "models/doc_global_cols.md", "unique_id": "doc.baseball_computer.league", "block_contents": "Abbreviation for the league associated with this entity. NULL\n    indicates that a team is not part of a league (e.g. all-star games\n    or Negro League barnstorming teams)."}, "doc.baseball_computer.park_id": {"name": "park_id", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_global_cols.md", "original_file_path": "models/doc_global_cols.md", "unique_id": "doc.baseball_computer.park_id", "block_contents": "Retrosheet park ID, 3-character string which identifies the ballpark\n    associated with this entity. See `stg_parks` for full park info."}, "doc.baseball_computer.game_type": {"name": "game_type", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_global_cols.md", "original_file_path": "models/doc_global_cols.md", "unique_id": "doc.baseball_computer.game_type", "block_contents": "The context in which a game took place, such as the regular season,\n    a specific playoff round, or an all-star game."}, "doc.baseball_computer.side": {"name": "side", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_global_cols.md", "original_file_path": "models/doc_global_cols.md", "unique_id": "doc.baseball_computer.side", "block_contents": "The side, Home or Away, associated with the entity. A generic way\n    of identifying the two teams playing in a game."}, "doc.baseball_computer.batting_side": {"name": "batting_side", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_global_cols.md", "original_file_path": "models/doc_global_cols.md", "unique_id": "doc.baseball_computer.batting_side", "block_contents": "The side that was batting when the entity took place."}, "doc.baseball_computer.bat_first_side": {"name": "bat_first_side", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_global_cols.md", "original_file_path": "models/doc_global_cols.md", "unique_id": "doc.baseball_computer.bat_first_side", "block_contents": "The side that batted in the top of the inning during the game.\n    This is almost always the Away side, but there are a good number of\n    home-team-bats-first games in the 19th century and 2020.\n    See this SABR article for historical context: https://sabr.org/journal/article/the-death-and-rebirth-of-the-home-team-batting-first/"}, "doc.baseball_computer.fielding_position": {"name": "fielding_position", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_global_cols.md", "original_file_path": "models/doc_global_cols.md", "unique_id": "doc.baseball_computer.fielding_position", "block_contents": "A 1-byte integer for the traditional 1-9 fielder identification, along with additional\n    values for unknown fielders and batting-specific positions. Depending on the\n    context, this value may be NULL for batting positions.\n    ```\n    0 - Unknown\n    1 - Pitcher\n    2 - Catcher\n    3 - First baseman\n    4 - Second baseman\n    5 - Third baseman\n    6 - Shortstop\n    7 - Left fielder\n    8 - Center fielder\n    9 - Right fielder\n    10 - Designated Hitter\n    11 - Pinch Hitter\n    12 - Pinch Runner\n    ```"}, "doc.baseball_computer.fielding_position_category": {"name": "fielding_position_category", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_global_cols.md", "original_file_path": "models/doc_global_cols.md", "unique_id": "doc.baseball_computer.fielding_position_category", "block_contents": "Divided between P, C, IF, OF, and DH.\n    This is particularly important for 19th century data, where we don't know\n    which specific outfield position a player accumulated his stats at."}, "doc.baseball_computer.lineup_position": {"name": "lineup_position", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_global_cols.md", "original_file_path": "models/doc_global_cols.md", "unique_id": "doc.baseball_computer.lineup_position", "block_contents": "1-byte integer for the traditional 1-9 batting order position, along with\n    10 for the pitcher in games with a DH. With very few exceptions, a player will\n    only appear in one lineup position per game. The exceptions are from courtesy\n    runners and the Ohtani rule."}, "doc.baseball_computer.inning": {"name": "inning", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_global_cols.md", "original_file_path": "models/doc_global_cols.md", "unique_id": "doc.baseball_computer.inning", "block_contents": "The inning during which the entity took place."}, "doc.baseball_computer.frame": {"name": "frame", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_global_cols.md", "original_file_path": "models/doc_global_cols.md", "unique_id": "doc.baseball_computer.frame", "block_contents": "Top or bottom of the inning."}, "doc.baseball_computer.frame_start": {"name": "frame_start", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_global_cols.md", "original_file_path": "models/doc_global_cols.md", "unique_id": "doc.baseball_computer.frame_start", "block_contents": "Top or bottom of the inning at the start of the play."}, "doc.baseball_computer.frame_end": {"name": "frame_end", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_global_cols.md", "original_file_path": "models/doc_global_cols.md", "unique_id": "doc.baseball_computer.frame_end", "block_contents": "Top or bottom of the inning at the end of the play."}, "doc.baseball_computer.time_of_day": {"name": "time_of_day", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_global_cols.md", "original_file_path": "models/doc_global_cols.md", "unique_id": "doc.baseball_computer.time_of_day", "block_contents": "A day game/night game indicator for the entity. This value\n    is close to 100% populated for the pre-night-baseball era and from 1949 on,\n    and is still well-populated for the years in between. By far the most reliably\n    populated data point for game environmental conditions."}, "doc.baseball_computer.start_time": {"name": "start_time", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_global_cols.md", "original_file_path": "models/doc_global_cols.md", "unique_id": "doc.baseball_computer.start_time", "block_contents": "The specific date and time when the game started (local time).\n    Data here is generally pretty spotty until the 2000s."}, "doc.baseball_computer.attendance": {"name": "attendance", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_global_cols.md", "original_file_path": "models/doc_global_cols.md", "unique_id": "doc.baseball_computer.attendance", "block_contents": "The number of people in attendance at the game.\n    The source for this number is not consistent over time\n    and may refer to paid attendance or some other way\n    of estimating the number. Attendance data is is very well-populated\n    historically, but there is a zero-or-missing ambiguity in Retrosheet\n    data. At the moment, we NULL out 0 attendance for all years\n    other than 2020, which contains almost all of the true-zero-attendance\n    games in history."}, "doc.baseball_computer.sky": {"name": "sky", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_global_cols.md", "original_file_path": "models/doc_global_cols.md", "unique_id": "doc.baseball_computer.sky", "block_contents": "Enum describing the sky conditions."}, "doc.baseball_computer.precipitation": {"name": "precipitation", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_global_cols.md", "original_file_path": "models/doc_global_cols.md", "unique_id": "doc.baseball_computer.precipitation", "block_contents": "Enum describing precipitation level."}, "doc.baseball_computer.field_condition": {"name": "field_condition", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_global_cols.md", "original_file_path": "models/doc_global_cols.md", "unique_id": "doc.baseball_computer.field_condition", "block_contents": "Enum describing the field conditions,\n    particularly with respect to wetness. This\n    can be different from precipitation if, for\n    example, there was rain before the game."}, "doc.baseball_computer.wind_direction": {"name": "wind_direction", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_global_cols.md", "original_file_path": "models/doc_global_cols.md", "unique_id": "doc.baseball_computer.wind_direction", "block_contents": "Enum describing wind direction in terms\n    of one part of the field to another."}, "doc.baseball_computer.wind_speed_mph": {"name": "wind_speed_mph", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_global_cols.md", "original_file_path": "models/doc_global_cols.md", "unique_id": "doc.baseball_computer.wind_speed_mph", "block_contents": "Wind speed in miles per hour."}, "doc.baseball_computer.temperature_fahrenheit": {"name": "temperature_fahrenheit", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_global_cols.md", "original_file_path": "models/doc_global_cols.md", "unique_id": "doc.baseball_computer.temperature_fahrenheit", "block_contents": "Temperature in degrees Fahrenheit."}, "doc.baseball_computer.source_type": {"name": "source_type", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_global_cols.md", "original_file_path": "models/doc_global_cols.md", "unique_id": "doc.baseball_computer.source_type", "block_contents": "Broad categorization of the source of the data.\n    - PlayByPlay: Retrosheet play-by-play files (either from an account or deduced)\n    - BoxScore: Retrosheet box score files\n    - GameLog: Retrosheet game log files"}, "doc.baseball_computer.filename": {"name": "filename", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_global_cols.md", "original_file_path": "models/doc_global_cols.md", "unique_id": "doc.baseball_computer.filename", "block_contents": "Name of the Retrosheet file that this data is derived from.\n    Helpful for debugging."}, "doc.baseball_computer.umpire_home_id": {"name": "umpire_home_id", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_global_cols.md", "original_file_path": "models/doc_global_cols.md", "unique_id": "doc.baseball_computer.umpire_home_id", "block_contents": "Retrosheet person ID of the umpire at home plate."}, "doc.baseball_computer.umpire_first_id": {"name": "umpire_first_id", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_global_cols.md", "original_file_path": "models/doc_global_cols.md", "unique_id": "doc.baseball_computer.umpire_first_id", "block_contents": "Retrosheet person ID of the umpire at first base."}, "doc.baseball_computer.umpire_second_id": {"name": "umpire_second_id", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_global_cols.md", "original_file_path": "models/doc_global_cols.md", "unique_id": "doc.baseball_computer.umpire_second_id", "block_contents": "Retrosheet person ID of the umpire at second base."}, "doc.baseball_computer.umpire_third_id": {"name": "umpire_third_id", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_global_cols.md", "original_file_path": "models/doc_global_cols.md", "unique_id": "doc.baseball_computer.umpire_third_id", "block_contents": "Retrosheet person ID of the umpire at third base."}, "doc.baseball_computer.umpire_left_id": {"name": "umpire_left_id", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_global_cols.md", "original_file_path": "models/doc_global_cols.md", "unique_id": "doc.baseball_computer.umpire_left_id", "block_contents": "Retrosheet person ID of the umpire in left field."}, "doc.baseball_computer.umpire_right_id": {"name": "umpire_right_id", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_global_cols.md", "original_file_path": "models/doc_global_cols.md", "unique_id": "doc.baseball_computer.umpire_right_id", "block_contents": "Retrosheet person ID of the umpire in right field."}, "doc.baseball_computer.sequence_id": {"name": "sequence_id", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_global_cols.md", "original_file_path": "models/doc_global_cols.md", "unique_id": "doc.baseball_computer.sequence_id", "block_contents": "The nth item of a given sequence, used to differentiate and order\n    multiple items of the same type within a single entity."}, "doc.baseball_computer.comment": {"name": "comment", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_global_cols.md", "original_file_path": "models/doc_global_cols.md", "unique_id": "doc.baseball_computer.comment", "block_contents": "Comment string from a Retrosheet file. Sometimes these are misc.\n    details and trivia from the game, but they are also used as adhoc\n    data structures for things like ejections."}, "doc.baseball_computer.baserunner": {"name": "baserunner", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_global_cols.md", "original_file_path": "models/doc_global_cols.md", "unique_id": "doc.baseball_computer.baserunner", "block_contents": "Enum indicating the specific baserunner associated with the entity.\n    Baserunner is designated by the state at the start of an event."}, "doc.baseball_computer.batted_to_fielder": {"name": "batted_to_fielder", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_global_cols.md", "original_file_path": "models/doc_global_cols.md", "unique_id": "doc.baseball_computer.batted_to_fielder", "block_contents": "The fielder who fielded the batted ball as a 1-byte integer, if applicable. This field is\n    *always* populated for plate appearances that end with a ball in play,\n    regardless of whether we know the fielder. It is filled with 0\n    in those cases where no fielder was recorded. On in-play outs,\n    this field has excellent historical coverage going back as far as we have data.\n    Hits have much spottier coverage, but there is still a large amount of data across\n    all years. For most of baseball history, this ends up being our best proxy\n    for batted ball location and trajectory."}, "doc.baseball_computer.outs_on_play": {"name": "outs_on_play", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_global_cols.md", "original_file_path": "models/doc_global_cols.md", "unique_id": "doc.baseball_computer.outs_on_play", "block_contents": "The total number of outs that were recorded during the event.\n    Mutually exclusive with all other events."}, "doc.baseball_computer.runs_on_play": {"name": "runs_on_play", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_global_cols.md", "original_file_path": "models/doc_global_cols.md", "unique_id": "doc.baseball_computer.runs_on_play", "block_contents": "The total number of runs that scored during the event.\n    Mutually exclusive with all other events."}, "doc.baseball_computer.batted_location_general": {"name": "batted_location_general", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_global_cols.md", "original_file_path": "models/doc_global_cols.md", "unique_id": "doc.baseball_computer.batted_location_general", "block_contents": "baseball.computer's parser interprets Retrosheet's hit location codes as having\n    a general location followed by modifiers that add specificity. This field\n    contains the general location, which correspond to each fielding position\n    as well as the gaps between each position, e.g. Third and ThirdShortstop.\n\n    Note that the for air balls, the location is defined according to where the\n    ball was fielded or landed. For ground balls, the location is defined according\n    to where the ball was fielded by an infielder, or where the ball left the infield\n    if it made it through to the outfield."}, "doc.baseball_computer.batted_location_depth": {"name": "batted_location_depth", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_global_cols.md", "original_file_path": "models/doc_global_cols.md", "unique_id": "doc.baseball_computer.batted_location_depth", "block_contents": "Refers to the depth of the batted ball within the area of the general location\n    (as opposed to the depth of the general location itself). The data here can\n    be difficult to interpret, as 'Default' can either mean the ball was hit to the\n    medium depth of the general location, or that the detaial was not recorded."}, "doc.baseball_computer.batted_location_angle": {"name": "batted_location_angle", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_global_cols.md", "original_file_path": "models/doc_global_cols.md", "unique_id": "doc.baseball_computer.batted_location_angle", "block_contents": "Refers to the angle of the batted ball within the area of the general location,\n    either towards the foul line or the middle of the field. Only a few of the\n    general locations have this modifier. The data here can\n    be difficult to interpret, as 'Default' can either mean the ball was hit to the\n    middle of the general location, or that the detaial was not recorded."}, "doc.baseball_computer.batted_contact_strength": {"name": "batted_contact_strength", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_global_cols.md", "original_file_path": "models/doc_global_cols.md", "unique_id": "doc.baseball_computer.batted_contact_strength", "block_contents": "A modifier indicating that the ball was sharply or softly hit. Prior to the Statcast era,\n    this detail is rarely specified and does not have any standard definition.\n    In the Statcast era, hard-hit balls are explicitly defined as 95+ miles per hour\n    exit velocity, and soft-hit balls are explicitly defined as 59- miles per hour."}, "doc.baseball_computer.plate_appearance_result": {"name": "plate_appearance_result", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_global_cols.md", "original_file_path": "models/doc_global_cols.md", "unique_id": "doc.baseball_computer.plate_appearance_result", "block_contents": "This field is present for all events in which a plate appearance finished,\n    and absent for all other types of events.\n    It is an enum describing the result of the plate appearance, e.g. Single,\n    InPlayOut, etc. See `seed_plate_appearance_results` for more info."}, "doc.baseball_computer.charge_event_id": {"name": "charge_event_id", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_global_cols.md", "original_file_path": "models/doc_global_cols.md", "unique_id": "doc.baseball_computer.charge_event_id", "block_contents": "The event ID that this baserunner is charged to,\n    for the purpose of keeping tracked of inherited/bequeathed runners.\n    The pitcher/catcher present at the charge_event_id are on the hook\n    for the earned run. This doesn't necessarily remain constant\n    throughout a baserunning apperance, as force-outs can change\n    the inheritance of a particular runner."}, "doc.baseball_computer.reached_on_event_id": {"name": "reached_on_event_id", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_global_cols.md", "original_file_path": "models/doc_global_cols.md", "unique_id": "doc.baseball_computer.reached_on_event_id", "block_contents": "Event id on which this baserunner originally reached base,\n    if applicable."}, "doc.baseball_computer.explicit_charged_pitcher_id": {"name": "explicit_charged_pitcher_id", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_global_cols.md", "original_file_path": "models/doc_global_cols.md", "unique_id": "doc.baseball_computer.explicit_charged_pitcher_id", "block_contents": "For some games prior to the establishment of official inherited runner rules,\n    a pitcher could be explicitly noted as the one charged with a runner. When\n    this is present, it overrides the pitcher from `charge_event_id`."}, "doc.baseball_computer.attempted_advance_to_base": {"name": "attempted_advance_to_base", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_global_cols.md", "original_file_path": "models/doc_global_cols.md", "unique_id": "doc.baseball_computer.attempted_advance_to_base", "block_contents": "For some games prior to the establishment of official inherited runner rules,\n    a pitcher could be explicitly noted as the one charged with a runner. When\n    this is present, it overrides the pitcher from `charge_event_id`."}, "doc.baseball_computer.charge_event_key": {"name": "charge_event_key", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_global_cols.md", "original_file_path": "models/doc_global_cols.md", "unique_id": "doc.baseball_computer.charge_event_key", "block_contents": "`event_key` corresponding to `charge_event_id`, see that field\n    for more detail."}, "doc.baseball_computer.reached_on_event_key": {"name": "reached_on_event_key", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_global_cols.md", "original_file_path": "models/doc_global_cols.md", "unique_id": "doc.baseball_computer.reached_on_event_key", "block_contents": "`event_key` corresponding to `reached_on_event_id`, see that field\n    for more detail."}, "doc.baseball_computer.inning_start": {"name": "inning_start", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_global_cols.md", "original_file_path": "models/doc_global_cols.md", "unique_id": "doc.baseball_computer.inning_start", "block_contents": "The inning at the start of the event."}, "doc.baseball_computer.inning_end": {"name": "inning_end", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_global_cols.md", "original_file_path": "models/doc_global_cols.md", "unique_id": "doc.baseball_computer.inning_end", "block_contents": "The inning at the end of the event."}, "doc.baseball_computer.inning_in_outs_start": {"name": "inning_in_outs_start", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_global_cols.md", "original_file_path": "models/doc_global_cols.md", "unique_id": "doc.baseball_computer.inning_in_outs_start", "block_contents": "The inning at the start of the event, expressed in outs.\n    ((Inning * 3 - 1) + outs in current innning)\n    For example, 2 outs in the second inning would be 5."}, "doc.baseball_computer.outs_start": {"name": "outs_start", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_global_cols.md", "original_file_path": "models/doc_global_cols.md", "unique_id": "doc.baseball_computer.outs_start", "block_contents": "The number of outs at the start of the event."}, "doc.baseball_computer.outs_end": {"name": "outs_end", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_global_cols.md", "original_file_path": "models/doc_global_cols.md", "unique_id": "doc.baseball_computer.outs_end", "block_contents": "The number of outs at the end of the event."}, "doc.baseball_computer.is_gidp_eligible": {"name": "is_gidp_eligible", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_global_cols.md", "original_file_path": "models/doc_global_cols.md", "unique_id": "doc.baseball_computer.is_gidp_eligible", "block_contents": "Whether or not the event started with a runner on first and less than two outs."}, "doc.baseball_computer.base_state_start": {"name": "base_state_start", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_global_cols.md", "original_file_path": "models/doc_global_cols.md", "unique_id": "doc.baseball_computer.base_state_start", "block_contents": "The base state at the start of the event, a base-10 representation of a binary number. See `base_state` for more info."}, "doc.baseball_computer.runner_first_id_start": {"name": "runner_first_id_start", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_global_cols.md", "original_file_path": "models/doc_global_cols.md", "unique_id": "doc.baseball_computer.runner_first_id_start", "block_contents": "The Retrosheet person ID of the runner on first base at the start of the event."}, "doc.baseball_computer.runner_second_id_start": {"name": "runner_second_id_start", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_global_cols.md", "original_file_path": "models/doc_global_cols.md", "unique_id": "doc.baseball_computer.runner_second_id_start", "block_contents": "The Retrosheet person ID of the runner on second base at the start of the event."}, "doc.baseball_computer.runner_third_id_start": {"name": "runner_third_id_start", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_global_cols.md", "original_file_path": "models/doc_global_cols.md", "unique_id": "doc.baseball_computer.runner_third_id_start", "block_contents": "The Retrosheet person ID of the runner on third base at the start of the event."}, "doc.baseball_computer.runners_count_start": {"name": "runners_count_start", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_global_cols.md", "original_file_path": "models/doc_global_cols.md", "unique_id": "doc.baseball_computer.runners_count_start", "block_contents": "The number of runners on base at the start of the event."}, "doc.baseball_computer.base_state_end": {"name": "base_state_end", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_global_cols.md", "original_file_path": "models/doc_global_cols.md", "unique_id": "doc.baseball_computer.base_state_end", "block_contents": "The base state at the end of the event, a base-10 representation of a binary number. See `base_state` for more info."}, "doc.baseball_computer.runner_first_id_end": {"name": "runner_first_id_end", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_global_cols.md", "original_file_path": "models/doc_global_cols.md", "unique_id": "doc.baseball_computer.runner_first_id_end", "block_contents": "The Retrosheet person ID of the runner on first base at the end of the event."}, "doc.baseball_computer.runner_second_id_end": {"name": "runner_second_id_end", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_global_cols.md", "original_file_path": "models/doc_global_cols.md", "unique_id": "doc.baseball_computer.runner_second_id_end", "block_contents": "The Retrosheet person ID of the runner on second base at the end of the event."}, "doc.baseball_computer.runner_third_id_end": {"name": "runner_third_id_end", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_global_cols.md", "original_file_path": "models/doc_global_cols.md", "unique_id": "doc.baseball_computer.runner_third_id_end", "block_contents": "The Retrosheet person ID of the runner on third base at the end of the event."}, "doc.baseball_computer.runners_count_end": {"name": "runners_count_end", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_global_cols.md", "original_file_path": "models/doc_global_cols.md", "unique_id": "doc.baseball_computer.runners_count_end", "block_contents": "The number of runners on base at the end of the event."}, "doc.baseball_computer.score_home_start": {"name": "score_home_start", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_global_cols.md", "original_file_path": "models/doc_global_cols.md", "unique_id": "doc.baseball_computer.score_home_start", "block_contents": "The home team's score at the start of the event."}, "doc.baseball_computer.score_away_start": {"name": "score_away_start", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_global_cols.md", "original_file_path": "models/doc_global_cols.md", "unique_id": "doc.baseball_computer.score_away_start", "block_contents": "The away team's score at the start of the event."}, "doc.baseball_computer.score_home_end": {"name": "score_home_end", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_global_cols.md", "original_file_path": "models/doc_global_cols.md", "unique_id": "doc.baseball_computer.score_home_end", "block_contents": "The home team's score at the end of the event."}, "doc.baseball_computer.score_away_end": {"name": "score_away_end", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_global_cols.md", "original_file_path": "models/doc_global_cols.md", "unique_id": "doc.baseball_computer.score_away_end", "block_contents": "The away team's score at the end of the event."}, "doc.baseball_computer.frame_start_flag": {"name": "frame_start_flag", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_global_cols.md", "original_file_path": "models/doc_global_cols.md", "unique_id": "doc.baseball_computer.frame_start_flag", "block_contents": "Whether the event was the first event of the half-inning."}, "doc.baseball_computer.frame_end_flag": {"name": "frame_end_flag", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_global_cols.md", "original_file_path": "models/doc_global_cols.md", "unique_id": "doc.baseball_computer.frame_end_flag", "block_contents": "Whether the event was the last event of the half-inning."}, "doc.baseball_computer.truncated_frame_flag": {"name": "truncated_frame_flag", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_global_cols.md", "original_file_path": "models/doc_global_cols.md", "unique_id": "doc.baseball_computer.truncated_frame_flag", "block_contents": "Whether the event was the last of the half-inning, but there were fewer\n    than three outs recorded, e.g. a walk-off home run or a rain-shortened-game."}, "doc.baseball_computer.game_start_flag": {"name": "game_start_flag", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_global_cols.md", "original_file_path": "models/doc_global_cols.md", "unique_id": "doc.baseball_computer.game_start_flag", "block_contents": "Whether the event was the first event of the game."}, "doc.baseball_computer.game_end_flag": {"name": "game_end_flag", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_global_cols.md", "original_file_path": "models/doc_global_cols.md", "unique_id": "doc.baseball_computer.game_end_flag", "block_contents": "Whether the event was the last event of the game."}, "doc.baseball_computer.home_starting_pitcher_id": {"name": "home_starting_pitcher_id", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_global_cols.md", "original_file_path": "models/doc_global_cols.md", "unique_id": "doc.baseball_computer.home_starting_pitcher_id", "block_contents": "The Retrosheet person ID of the starting pitcher for the home team in this game."}, "doc.baseball_computer.away_starting_pitcher_id": {"name": "away_starting_pitcher_id", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_global_cols.md", "original_file_path": "models/doc_global_cols.md", "unique_id": "doc.baseball_computer.away_starting_pitcher_id", "block_contents": "The Retrosheet person ID of the starting pitcher for the away team in this game."}, "doc.baseball_computer.is_regular_season": {"name": "is_regular_season", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_global_cols.md", "original_file_path": "models/doc_global_cols.md", "unique_id": "doc.baseball_computer.is_regular_season", "block_contents": "Indicates whether the game is a regular season game."}, "doc.baseball_computer.is_postseason": {"name": "is_postseason", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_global_cols.md", "original_file_path": "models/doc_global_cols.md", "unique_id": "doc.baseball_computer.is_postseason", "block_contents": "Indicates whether the game is a postseason game."}, "doc.baseball_computer.away_franchise_id": {"name": "away_franchise_id", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_global_cols.md", "original_file_path": "models/doc_global_cols.md", "unique_id": "doc.baseball_computer.away_franchise_id", "block_contents": "The Retrosheet franchise ID of the away team in this game.\n    Franchise ID connects team_ids that are associated with the same franchise\n    over time. See `seed_franchises` for more info."}, "doc.baseball_computer.home_franchise_id": {"name": "home_franchise_id", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_global_cols.md", "original_file_path": "models/doc_global_cols.md", "unique_id": "doc.baseball_computer.home_franchise_id", "block_contents": "The Retrosheet franchise ID of the home team in this game.\n    Franchise ID connects team_ids that are associated with the same franchise\n    over time. See `seed_franchises` for more info."}, "doc.baseball_computer.away_league": {"name": "away_league", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_global_cols.md", "original_file_path": "models/doc_global_cols.md", "unique_id": "doc.baseball_computer.away_league", "block_contents": "The league of the away team in this game."}, "doc.baseball_computer.home_league": {"name": "home_league", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_global_cols.md", "original_file_path": "models/doc_global_cols.md", "unique_id": "doc.baseball_computer.home_league", "block_contents": "The league of the home team in this game."}, "doc.baseball_computer.away_division": {"name": "away_division", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_global_cols.md", "original_file_path": "models/doc_global_cols.md", "unique_id": "doc.baseball_computer.away_division", "block_contents": "The division of the away team in this game. Null if the team is not associated\n    with a divsion (e.g. any game prior to 1969)."}, "doc.baseball_computer.home_division": {"name": "home_division", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_global_cols.md", "original_file_path": "models/doc_global_cols.md", "unique_id": "doc.baseball_computer.home_division", "block_contents": "The division of the home team in this game. Null if the team is not associated\n    with a divsion (e.g. any game prior to 1969)."}, "doc.baseball_computer.division": {"name": "division", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_global_cols.md", "original_file_path": "models/doc_global_cols.md", "unique_id": "doc.baseball_computer.division", "block_contents": "The team's division within the league. Null if the team is not associated\n    with a divsion (e.g. any game prior to 1969)."}, "doc.baseball_computer.away_team_name": {"name": "away_team_name", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_global_cols.md", "original_file_path": "models/doc_global_cols.md", "unique_id": "doc.baseball_computer.away_team_name", "block_contents": "The name of the away team in this game (location and nickname)."}, "doc.baseball_computer.home_team_name": {"name": "home_team_name", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_global_cols.md", "original_file_path": "models/doc_global_cols.md", "unique_id": "doc.baseball_computer.home_team_name", "block_contents": "The name of the home team in this game (location and nickname)."}, "doc.baseball_computer.team_name": {"name": "team_name", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_global_cols.md", "original_file_path": "models/doc_global_cols.md", "unique_id": "doc.baseball_computer.team_name", "block_contents": "Team name, both city and nickname."}, "doc.baseball_computer.is_interleague": {"name": "is_interleague", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_global_cols.md", "original_file_path": "models/doc_global_cols.md", "unique_id": "doc.baseball_computer.is_interleague", "block_contents": "Indicates whether the game is an interleague game. Defined as\n    a game played in any context between two teams who are defined at the time\n    as being in different leagues (if one of the teams is not in a league, this is false)."}, "doc.baseball_computer.lineup_map_away": {"name": "lineup_map_away", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_global_cols.md", "original_file_path": "models/doc_global_cols.md", "unique_id": "doc.baseball_computer.lineup_map_away", "block_contents": "A dictionary that maps starting lineup positions (1-10) to player IDs for the away team."}, "doc.baseball_computer.lineup_map_home": {"name": "lineup_map_home", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_global_cols.md", "original_file_path": "models/doc_global_cols.md", "unique_id": "doc.baseball_computer.lineup_map_home", "block_contents": "A dictionary that maps starting lineup positions (1-10) to player IDs for the home team."}, "doc.baseball_computer.fielding_map_away": {"name": "fielding_map_away", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_global_cols.md", "original_file_path": "models/doc_global_cols.md", "unique_id": "doc.baseball_computer.fielding_map_away", "block_contents": "A dictionary that maps starting fielding positions (1-10) to player IDs for the away team."}, "doc.baseball_computer.fielding_map_home": {"name": "fielding_map_home", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_global_cols.md", "original_file_path": "models/doc_global_cols.md", "unique_id": "doc.baseball_computer.fielding_map_home", "block_contents": "A dictionary that maps starting fielding positions (1-10) to player IDs for the home team."}, "doc.baseball_computer.plate_appearances": {"name": "plate_appearances", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.plate_appearances", "block_contents": "(PA) Number of times a batter came to the plate, including walks, hit by pitches, sacrifices, and at-bats."}, "doc.baseball_computer.at_bats": {"name": "at_bats", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.at_bats", "block_contents": "(AB) Number of plate appearances that ended in either a hit or a non-sacrifice out."}, "doc.baseball_computer.hits": {"name": "hits", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.hits", "block_contents": "(H) Number of times a batter reached base safely without an error or fielder's choice."}, "doc.baseball_computer.singles": {"name": "singles", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.singles", "block_contents": "(1B) Number of hits in which a batter reached first base."}, "doc.baseball_computer.doubles": {"name": "doubles", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.doubles", "block_contents": "(2B) Number of hits in which a batter reached second base without the help of an error or an attempted\n    play on another runner."}, "doc.baseball_computer.triples": {"name": "triples", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.triples", "block_contents": "(3B) Number of hits in which a batter reached third base without the help of an error or an attempted\n    play on another runner."}, "doc.baseball_computer.home_runs": {"name": "home_runs", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.home_runs", "block_contents": "(HR) Number of hits in which a batter reached home plate without the help of an error or an attempted\n    play on another runner (usually by hitting the ball out of the park)."}, "doc.baseball_computer.total_bases": {"name": "total_bases", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.total_bases", "block_contents": "(TB) Number of bases a batter reached safely without the help of an error or an attempted\n    play on another runner. HR * 4 + 3B * 3 + 2B * 2 + (H - HR - 3B - 2B)"}, "doc.baseball_computer.strikeouts": {"name": "strikeouts", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.strikeouts", "block_contents": "(K, SO) Number of times a batter struck out. This includes plays in which a batter reached base on\n    a dropped third strike."}, "doc.baseball_computer.walks": {"name": "walks", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.walks", "block_contents": "(BB, occasionally W) Number of times a batter reaches base on called balls out of the strike zone\n    (Four balls for all of MLB history after the 1880s)."}, "doc.baseball_computer.intentional_walks": {"name": "intentional_walks", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.intentional_walks", "block_contents": "(IBB, occasionally IW) Number of times a batter was intentionally walked. This number may be missing or undercounted\n    in earlier years, as intentional walks were not officially tracked until 1955."}, "doc.baseball_computer.hit_by_pitches": {"name": "hit_by_pitches", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.hit_by_pitches", "block_contents": "(HBP) Number of times a batter was awarded first base after being hit by a pitch."}, "doc.baseball_computer.sacrifice_hits": {"name": "sacrifice_hits", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.sacrifice_hits", "block_contents": "(SH) Number of times a batter performed a sacrifice bunt to advance another runner.\n    A bunt may count as a sacrifice even if the batter reaches base safely.\n    Unsuccessful attempts are not counted, nor are non-sacrifice bunts."}, "doc.baseball_computer.sacrifice_flies": {"name": "sacrifice_flies", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.sacrifice_flies", "block_contents": "(SF) Number of times a batter hit a fly ball that resulted in an out (or error),\n    but allowed a runner to score on the throw."}, "doc.baseball_computer.reached_on_errors": {"name": "reached_on_errors", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.reached_on_errors", "block_contents": "(ROE) Number of times a batter reached base safely due to an error."}, "doc.baseball_computer.reached_on_interferences": {"name": "reached_on_interferences", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.reached_on_interferences", "block_contents": "Number of times a batter was awarded first base for being illegally hindered\n    by a fielder, usually the catcher."}, "doc.baseball_computer.inside_the_park_home_runs": {"name": "inside_the_park_home_runs", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.inside_the_park_home_runs", "block_contents": "Number of times a batter hit a home run without the ball leaving the field of play."}, "doc.baseball_computer.ground_rule_doubles": {"name": "ground_rule_doubles", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.ground_rule_doubles", "block_contents": "Number of times a batter was awarded a double on a ball that went out of play after\n    bouncing in fair territory."}, "doc.baseball_computer.infield_hits": {"name": "infield_hits", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.infield_hits", "block_contents": "Number of times a batter reached base safely on a hit that did not reach the outfield."}, "doc.baseball_computer.on_base_opportunities": {"name": "on_base_opportunities", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.on_base_opportunities", "block_contents": "Number of plate appearances in which a batter either did or did not reach base,\n    as defined by the formula for on-base percentage. Note that this is very similar to but different\n    from plate_appearances, as it does not include sacrifice hits or interference."}, "doc.baseball_computer.on_base_successes": {"name": "on_base_successes", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.on_base_successes", "block_contents": "Number of hits, walks, and hit by pitches that serves as the numerator in the formula\n    for on-base percentage."}, "doc.baseball_computer.runs_batted_in": {"name": "runs_batted_in", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.runs_batted_in", "block_contents": "(RBI) Number of runs that scored as a result of a batter's plate appearance. This is usually\n    the number of runs that scored on the play, but errors and other similar cases may cause\n    some runs not to be credited to the batter. Scorerkeeper discretion occasionally causes differences\n    between the number in the database and the official MLB total."}, "doc.baseball_computer.grounded_into_double_plays": {"name": "grounded_into_double_plays", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.grounded_into_double_plays", "block_contents": "(GIDP) Number of times a batter grounded into a double play. This is the conventional way\n    to record a double play and as such is an important statistic on its own. Games without\n    play-by-play accounts don't have data on the trajectory of the double play, so\n    this number is not populated for those games."}, "doc.baseball_computer.double_plays": {"name": "double_plays", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.double_plays", "block_contents": "(DP) Number of times a play ended in two outs being recorded."}, "doc.baseball_computer.triple_plays": {"name": "triple_plays", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.triple_plays", "block_contents": "(TP) Number of times a play ended in three outs being recorded."}, "doc.baseball_computer.batting_outs": {"name": "batting_outs", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.batting_outs", "block_contents": "Number of outs that \"should\" have been recorded as a result of a batter's plate apperances.\n    A batting out is still counted if no actual out is recorded on an error or a failed fielder's choice.\n    Outs on baserunners (including the batter trying to stretch a hit) do not count here.\n    Grounded-into-double-plays count as two outs, but other types of double plays do not (the \n    idea here is that the baserunner is responsible on other types of double plays).\n    Unofficial stat, but designed here to be generally useful in determining rates of official stats."}, "doc.baseball_computer.balls_in_play": {"name": "balls_in_play", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.balls_in_play", "block_contents": "Number of plate appearances that resulted in a live\n    ball on the field of play. The difference between this and batted_balls is that\n    balls_in_play does not include out-of-the-park home runs. This distinction is important\n    for calculating batting average on balls in play, a stat designed to isolate at_bats\n    in which the defense was involved."}, "doc.baseball_computer.balls_batted": {"name": "balls_batted", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.balls_batted", "block_contents": "Number of plate appearances that ended in a fair ball or a foul flyout. This is equivalent\n    to balls_in_play + home_runs, and may be a more useful denominator for \"in play\" stats depending\n    on the context."}, "doc.baseball_computer.trajectory_fly_ball": {"name": "trajectory_fly_ball", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.trajectory_fly_ball", "block_contents": "(FB) Number of plate appearances that ended in a fly ball. A fly ball is defined here\n    as the subset of balls hit in the air that are neither line drives nor pop flies."}, "doc.baseball_computer.trajectory_ground_ball": {"name": "trajectory_ground_ball", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.trajectory_ground_ball", "block_contents": "(GB) Number of plate appearances that ended in a ground ball, also called a grounder. A ground ball is defined\n    here to only include swings, not bunts, although older data may not have a proper distinction. Ground\n    balls tend to be easy to distinguish between other types of contact, but Statcast-era data defines it\n    as balls with a launch angle under 10 degrees."}, "doc.baseball_computer.trajectory_line_drive": {"name": "trajectory_line_drive", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.trajectory_line_drive", "block_contents": "(LD) Number of plate appearances that ended in a line drive, also called a liner. Line drives are distiguished\n    from fly balls by some combination of angle and exit velocity. In the Statcast era, line drives\n    are defined purely in terms of launch angle (10-25 degrees), but just about any colloquial definition\n    involves hard-hitness as well. The line-drive-fly-ball distinction is by far the most arbitrary\n    and subjective trajectory categorization. Many scorekeepers never included line drives, while others counted\n    any successful in-play air-hit as a line drive. Nevertheless, the distinction is a crucial one,\n    as line drives are by far the most likely type of batted ball to result in a hit (even when they are not hit very hard)."}, "doc.baseball_computer.trajectory_pop_up": {"name": "trajectory_pop_up", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.trajectory_pop_up", "block_contents": "(sometimes PU)  Number of plate appearances that ended in a pop-up, also called a pop fly.\n    Pop-ups are distinguished from fly balls in that they are hit at a higher angle, tend to be\n    hit with less exit velocity, and (as a result) end up in the infield or shallow outfield. Before\n    Statcast-era standardization, the distinction between a fly ball and a pop-up was a matter of\n    scorerkeeper judgement, and many unofficial scorekeepers did not distinguish between the two.\n    Statcast determines pop flies exclusively by angle (> 50 degrees)."}, "doc.baseball_computer.trajectory_unknown": {"name": "trajectory_unknown", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.trajectory_unknown", "block_contents": "Number of plate appearances ending in a batted ball whose trajectory was not recorded and cannot\n    be reliably deduced from context. This number includes balls that we know were hit in the air,\n    but do not know which kind of air ball (FB/PU/LD) they were (see trajectory_broad_classification_unknown\n    for a number that does not include those balls). The strong majority of batted balls prior to 1988\n    fall into this category, especially hits."}, "doc.baseball_computer.trajectory_known": {"name": "trajectory_known", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.trajectory_known", "block_contents": "Number of plate appearances ending in a batted ball whose trajectory was recorded or was reliably deduced\n    from the context. An example of reliable deduction is an at-bat with the fielding play 6-3, which\n    almost always is a ground ball fielded by the shortstop and thrown to the first baseman. See\n    `calc_batted_ball_type` for the deduction logic."}, "doc.baseball_computer.trajectory_broad_air_ball": {"name": "trajectory_broad_air_ball", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.trajectory_broad_air_ball", "block_contents": "Number of plate appearances that ended in an air ball (a fly ball, line drive, or pop-up).\n    Because it is much easier to deduce that a ball was hit in the air than it is to deduce the exact\n    trajectory, this number field is more reliably populated than any of its three consituent parts."}, "doc.baseball_computer.trajectory_broad_ground_ball": {"name": "trajectory_broad_ground_ball", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.trajectory_broad_ground_ball", "block_contents": "Same as `trajectory_ground_ball`."}, "doc.baseball_computer.trajectory_broad_unknown": {"name": "trajectory_broad_unknown", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.trajectory_broad_unknown", "block_contents": "Number of plate appearances ending in a batted ball whose trajectory was not recorded and cannot\n    be reliably deduced from context, even to the extent of knowing whether it was a ground ball or an air ball.\n    This will include a disproportionate number of hits, which are more likely to be missing trajectory data\n    and harder to make deductions about."}, "doc.baseball_computer.trajectory_broad_known": {"name": "trajectory_broad_known", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.trajectory_broad_known", "block_contents": "Number of plate appearances ending in a batted ball whose ground/air status was recorded or\n    reliably deduced from the context. This is the sum of `trajectory_broad_air_ball` and\n    `trajectory_broad_ground_ball`. Outs in play have excellent coverage historically here,\n    even for older games."}, "doc.baseball_computer.bunts": {"name": "bunts", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.bunts", "block_contents": "Number of plate appearances ending in an in-play bunt.\n    This does not include strikeouts on foul bunts with two strikes."}, "doc.baseball_computer.batted_distance_plate": {"name": "batted_distance_plate", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.batted_distance_plate", "block_contents": "Number of plate appearances in which the ball was batted to catcher's area around home plate."}, "doc.baseball_computer.batted_distance_infield": {"name": "batted_distance_infield", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.batted_distance_infield", "block_contents": "Number of plate appearances in which the ball was batted to the infield (not including the catcher).\n    All ground balls are included here, regardless of whether they made it through to the outfield."}, "doc.baseball_computer.batted_distance_outfield": {"name": "batted_distance_outfield", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.batted_distance_outfield", "block_contents": "Number of plate appearances in which the ball was hit on the fly to the outfield."}, "doc.baseball_computer.batted_distance_unknown": {"name": "batted_distance_unknown", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.batted_distance_unknown", "block_contents": "Number of plate appearances in which the ball was hit, but the distance was not recorded\n    and cannot be reliably deduced from context."}, "doc.baseball_computer.batted_distance_known": {"name": "batted_distance_known", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.batted_distance_known", "block_contents": "Number of plate appearances in which the ball was hit, and the distance was either\n    recorded or reliably deduced from context."}, "doc.baseball_computer.fielded_by_battery": {"name": "fielded_by_battery", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.fielded_by_battery", "block_contents": "Number of plate appearances in which the ball was fielded by the pitcher or catcher."}, "doc.baseball_computer.fielded_by_infielder": {"name": "fielded_by_infielder", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.fielded_by_infielder", "block_contents": "Number of plate appearances in which the ball was fielded by an infielder."}, "doc.baseball_computer.fielded_by_outfielder": {"name": "fielded_by_outfielder", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.fielded_by_outfielder", "block_contents": "Number of plate appearances in which the ball was fielded by an outfielder."}, "doc.baseball_computer.fielded_by_known": {"name": "fielded_by_known", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.fielded_by_known", "block_contents": "Number of plate appearances in which the ball was fielded by a player, and the player was recorded."}, "doc.baseball_computer.fielded_by_unknown": {"name": "fielded_by_unknown", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.fielded_by_unknown", "block_contents": "Number of plate appearances in which the ball was fielded by a player, but the player was not recorded."}, "doc.baseball_computer.batted_angle_left": {"name": "batted_angle_left", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.batted_angle_left", "block_contents": "Number of plate appearances in which the ball was batted to the left side of the field.\n    This includes balls where the location was not recorded, but the fielder is on the left side\n    (3B, LF). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details."}, "doc.baseball_computer.batted_angle_right": {"name": "batted_angle_right", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.batted_angle_right", "block_contents": "Number of plate appearances in which the ball was batted to the right side of the field.\n    This includes balls where the location was not recorded, but the fielder is on the right side\n    (1B, RF). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details."}, "doc.baseball_computer.batted_angle_middle": {"name": "batted_angle_middle", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.batted_angle_middle", "block_contents": "Number of plate appearances in which the ball was batted to the middle of the field.\n    This includes balls where the location was not recorded, but the fielder is up the middle\n    (P, 2B, SS, CF). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details."}, "doc.baseball_computer.batted_angle_unknown": {"name": "batted_angle_unknown", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.batted_angle_unknown", "block_contents": "Number of plate appearances in which the ball was batted, but we don't have enough location\n    to determine the spray angle."}, "doc.baseball_computer.batted_angle_known": {"name": "batted_angle_known", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.batted_angle_known", "block_contents": "Number of plate appearances in which the ball was hit and we have enough location to determine\n    the spray angle."}, "doc.baseball_computer.batted_location_plate": {"name": "batted_location_plate", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.batted_location_plate", "block_contents": "Number of plate appearances in which the ball was batted to the catcher's area around home plate."}, "doc.baseball_computer.batted_location_right_infield": {"name": "batted_location_right_infield", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.batted_location_right_infield", "block_contents": "Number of plate appearances in which the ball was batted to the right side of the infield.\n    This includes balls where the location was not recorded, but the fielder is on the right side\n    (1B). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details."}, "doc.baseball_computer.batted_location_middle_infield": {"name": "batted_location_middle_infield", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.batted_location_middle_infield", "block_contents": "Number of plate appearances in which the ball was batted to the middle of the infield.\n    This includes balls where the location was not recorded, but the fielder is up the middle\n    (P, SS, 2B). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details."}, "doc.baseball_computer.batted_location_left_infield": {"name": "batted_location_left_infield", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.batted_location_left_infield", "block_contents": "Number of plate appearances in which the ball was batted to the left side of the infield.\n    This includes balls where the location was not recorded, but the fielder is on the left side\n    (3B). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details."}, "doc.baseball_computer.batted_location_left_field": {"name": "batted_location_left_field", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.batted_location_left_field", "block_contents": "Number of plate appearances in which the ball was batted to the left side of the outfield.\n    This includes balls where the location was not recorded, but the fielder is on the left side\n    (LF). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details."}, "doc.baseball_computer.batted_location_center_field": {"name": "batted_location_center_field", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.batted_location_center_field", "block_contents": "Number of plate appearances in which the ball was batted to the center of the outfield.\n    This includes balls where the location was not recorded, but the fielder is up the middle\n    (CF). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details."}, "doc.baseball_computer.batted_location_right_field": {"name": "batted_location_right_field", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.batted_location_right_field", "block_contents": "Number of plate appearances in which the ball was batted to the right side of the outfield.\n    This includes balls where the location was not recorded, but the fielder is on the right side\n    (RF, CF). See `seed_hit_location_categories` and `seed_hit_to_fielder_categories` for more details."}, "doc.baseball_computer.batted_location_unknown": {"name": "batted_location_unknown", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.batted_location_unknown", "block_contents": "Number of plate appearances in which the ball was batted, but we don't have enough location\n    to determine the specific location."}, "doc.baseball_computer.batted_location_known": {"name": "batted_location_known", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.batted_location_known", "block_contents": "Number of plate appearances in which the ball was batted and we have enough location to determine\n    the specific location."}, "doc.baseball_computer.batted_balls_pulled": {"name": "batted_balls_pulled", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.batted_balls_pulled", "block_contents": "Number of plate appearances in which the ball was pulled (the left side for right-handed batters, the right side for left-handed batters)."}, "doc.baseball_computer.batted_balls_opposite_field": {"name": "batted_balls_opposite_field", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.batted_balls_opposite_field", "block_contents": "Number of plate appearances in which the ball was hit to the opposite field (the right side for right-handed batters, the left side for left-handed batters)."}, "doc.baseball_computer.runs": {"name": "runs", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.runs", "block_contents": "(R) Number of runs scored."}, "doc.baseball_computer.times_reached_base": {"name": "times_reached_base", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.times_reached_base", "block_contents": "Number of times a batter ended a plate appearance on base, even if it was through a fielder's choice, error, etc."}, "doc.baseball_computer.times_lead_runner": {"name": "times_lead_runner", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.times_lead_runner", "block_contents": "Number of events that a runner was the lead runner on a play\n    (the runner who is furthest along the basepaths).\n    Batter is never counted as the lead runner. No-play events excluded,\n    but events without plate appearances are included."}, "doc.baseball_computer.times_force_on_runner": {"name": "times_force_on_runner", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.times_force_on_runner", "block_contents": "Number of events that a force existed on the runner's next base.\n    The batter is counted as having a force on them (at first).\n    No-play events excluded, but events without plate appearances are included."}, "doc.baseball_computer.times_next_base_empty": {"name": "times_next_base_empty", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.times_next_base_empty", "block_contents": "Number of events that the runner's next base was empty.\n    The batter is counted on events where first base is empty.\n    No-play events excluded, but events without plate appearances are included."}, "doc.baseball_computer.stolen_base_opportunities": {"name": "stolen_base_opportunities", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.stolen_base_opportunities", "block_contents": "Number of events in which a runner had an opportunity to steal a base as the\n    lead basestealer OR the runner recorded a SB/CS in any situation.\n    \"Opportunity\" is defined as a situation in which the next base\n    was empty at the start of the event (not including the batter).\n    No-play events excluded, but events without plate appearances are included."}, "doc.baseball_computer.stolen_base_opportunities_second": {"name": "stolen_base_opportunities_second", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.stolen_base_opportunities_second", "block_contents": "Number of opportunities to steal second base (see `stolen_base_opportunities` for detailed criteria)."}, "doc.baseball_computer.stolen_base_opportunities_third": {"name": "stolen_base_opportunities_third", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.stolen_base_opportunities_third", "block_contents": "Number of opportunities to steal third base (see `stolen_base_opportunities` for detailed criteria)."}, "doc.baseball_computer.stolen_base_opportunities_home": {"name": "stolen_base_opportunities_home", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.stolen_base_opportunities_home", "block_contents": "Number of opportunities to steal home (see `stolen_base_opportunities` for detailed criteria)."}, "doc.baseball_computer.stolen_bases": {"name": "stolen_bases", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.stolen_bases", "block_contents": "(SB) Number of successful stolen bases."}, "doc.baseball_computer.stolen_bases_second": {"name": "stolen_bases_second", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.stolen_bases_second", "block_contents": "Number of successful steals of second base."}, "doc.baseball_computer.stolen_bases_third": {"name": "stolen_bases_third", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.stolen_bases_third", "block_contents": "Number of successful steals of third base."}, "doc.baseball_computer.stolen_bases_home": {"name": "stolen_bases_home", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.stolen_bases_home", "block_contents": "Number of successful steals of home."}, "doc.baseball_computer.caught_stealing": {"name": "caught_stealing", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.caught_stealing", "block_contents": "(CS) Number of times a runner was caught stealing."}, "doc.baseball_computer.caught_stealing_second": {"name": "caught_stealing_second", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.caught_stealing_second", "block_contents": "Number of times a runner was caught stealing second base."}, "doc.baseball_computer.caught_stealing_third": {"name": "caught_stealing_third", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.caught_stealing_third", "block_contents": "Number of times a runner was caught stealing third base."}, "doc.baseball_computer.caught_stealing_home": {"name": "caught_stealing_home", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.caught_stealing_home", "block_contents": "Number of times a runner was caught stealing home."}, "doc.baseball_computer.picked_off": {"name": "picked_off", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.picked_off", "block_contents": "(PO, at risk of confusion with putouts) Number of times a runner was picked off."}, "doc.baseball_computer.picked_off_first": {"name": "picked_off_first", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.picked_off_first", "block_contents": "Number of times a runner was picked off first base."}, "doc.baseball_computer.picked_off_second": {"name": "picked_off_second", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.picked_off_second", "block_contents": "Number of times a runner was picked off second base."}, "doc.baseball_computer.picked_off_third": {"name": "picked_off_third", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.picked_off_third", "block_contents": "Number of times a runner was picked off third base."}, "doc.baseball_computer.picked_off_caught_stealing": {"name": "picked_off_caught_stealing", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.picked_off_caught_stealing", "block_contents": "(POCS) Number of times a runner was picked off, but instead of going back to the bag,\n    tried to run to the next base and was put out."}, "doc.baseball_computer.outs_on_basepaths": {"name": "outs_on_basepaths", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.outs_on_basepaths", "block_contents": "Number of outs recorded by a baserunner (this is not mutually exclusive with outs recorded by the batter\n    in cases like failed advances or dropped third-strike putouts)."}, "doc.baseball_computer.unforced_outs_on_basepaths": {"name": "unforced_outs_on_basepaths", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.unforced_outs_on_basepaths", "block_contents": "Number of outs recorded by a baserunner that was not the result of a force on the runner.\n    \"Unforced\" is meant to be in both the literal sense of a force not being in play, but also\n    the figurative sense of the runner being responsible for the out. The latter may or may not\n    be the best interpretation of any given play, but it is useful to assign responsibility to the\n    runner by default in those contexts."}, "doc.baseball_computer.extra_base_chances": {"name": "extra_base_chances", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.extra_base_chances", "block_contents": "Number of hits where a runner on base had an opportunity to advance by a greater\n    number of bases than the batter."}, "doc.baseball_computer.extra_bases_taken": {"name": "extra_bases_taken", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.extra_bases_taken", "block_contents": "Number of hits where a runner on base advanced by a greater number of bases than the batter."}, "doc.baseball_computer.outs_avoided_on_errors": {"name": "outs_avoided_on_errors", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.outs_avoided_on_errors", "block_contents": "Number of times that a baserunner would have been out, but an error allowed them to remain\n    on the basepaths (either staying put or advancing)."}, "doc.baseball_computer.advances_on_wild_pitches": {"name": "advances_on_wild_pitches", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.advances_on_wild_pitches", "block_contents": "(WP) Number of times a baserunner advanced on a wild pitch."}, "doc.baseball_computer.advances_on_passed_balls": {"name": "advances_on_passed_balls", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.advances_on_passed_balls", "block_contents": "(PB) Number of times a baserunner advanced on a passed ball."}, "doc.baseball_computer.advances_on_balks": {"name": "advances_on_balks", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.advances_on_balks", "block_contents": "(sometimes BK) Number of times a baserunner advanced on a balk."}, "doc.baseball_computer.advances_on_unspecified_plays": {"name": "advances_on_unspecified_plays", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.advances_on_unspecified_plays", "block_contents": "Number of times a baserunner advanced for an unspecified reason."}, "doc.baseball_computer.advances_on_defensive_indifference": {"name": "advances_on_defensive_indifference", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.advances_on_defensive_indifference", "block_contents": "(DI) Number of times a baserunner advanced on defensive indifference.\n   Defensive indifference is a judgement call by the official scorer that the defense\n   did not try to stop the runner from stealing a base. This usually happens\n   when the defense has a lead late in the game."}, "doc.baseball_computer.advances_on_errors": {"name": "advances_on_errors", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.advances_on_errors", "block_contents": "Number of times a baserunner advanced on an error."}, "doc.baseball_computer.plate_appearances_while_on_base": {"name": "plate_appearances_while_on_base", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.plate_appearances_while_on_base", "block_contents": "Number of plate appearances in which the baserunner started on 1st, 2nd, or 3rd base."}, "doc.baseball_computer.balls_in_play_while_running": {"name": "balls_in_play_while_running", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.balls_in_play_while_running", "block_contents": "Number of balls in play while either batting or on base."}, "doc.baseball_computer.balls_in_play_while_on_base": {"name": "balls_in_play_while_on_base", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.balls_in_play_while_on_base", "block_contents": "Number of balls in play in which the baserunner started on 1st, 2nd, or 3rd base."}, "doc.baseball_computer.batter_total_bases_while_running": {"name": "batter_total_bases_while_running", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.batter_total_bases_while_running", "block_contents": "Number of total bases accumulated by the batter while the baserunner was running, including the batter."}, "doc.baseball_computer.batter_total_bases_while_on_base": {"name": "batter_total_bases_while_on_base", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.batter_total_bases_while_on_base", "block_contents": "Number of total bases accumulated by the batter while the baserunner was on base, excluding the batter."}, "doc.baseball_computer.extra_base_advance_attempts": {"name": "extra_base_advance_attempts", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.extra_base_advance_attempts", "block_contents": "Number of times a baserunner tried to advance by a greater number of bases than the batter."}, "doc.baseball_computer.bases_advanced": {"name": "bases_advanced", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.bases_advanced", "block_contents": "Number of bases advanced by a baserunner, including the batter."}, "doc.baseball_computer.bases_advanced_on_balls_in_play": {"name": "bases_advanced_on_balls_in_play", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.bases_advanced_on_balls_in_play", "block_contents": "Number of bases advanced by a baserunner on a ball in play, including the batter."}, "doc.baseball_computer.surplus_bases_advanced_on_balls_in_play": {"name": "surplus_bases_advanced_on_balls_in_play", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.surplus_bases_advanced_on_balls_in_play", "block_contents": "Number of bases advanced by a baserunner on a ball in play minus the number of total bases\n    accumulated by the batter on the same play. For example, if a runner goes from first to third\n    on a single, this number is 1 (3 - 2). If a runner only goes from second to third on a double,\n    this number is -1 (1 - 2)."}, "doc.baseball_computer.outs_on_extra_base_advance_attempts": {"name": "outs_on_extra_base_advance_attempts", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.outs_on_extra_base_advance_attempts", "block_contents": "Number of times a baserunner was out attempting to advance\n    by a greater number of bases than the batter. This includes\n    batters who were put out trying to stretch a hit to the next base."}, "doc.baseball_computer.pitches": {"name": "pitches", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.pitches", "block_contents": "Number of pitches thrown."}, "doc.baseball_computer.swings": {"name": "swings", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.swings", "block_contents": "Number of pitches that were swung at."}, "doc.baseball_computer.swings_with_contact": {"name": "swings_with_contact", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.swings_with_contact", "block_contents": "Number of pitches that were swung at and made contact."}, "doc.baseball_computer.strikes": {"name": "strikes", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.strikes", "block_contents": "Number of pitches that were called or swinging strikes."}, "doc.baseball_computer.strikes_called": {"name": "strikes_called", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.strikes_called", "block_contents": "Number of pitches that were called strikes."}, "doc.baseball_computer.strikes_swinging": {"name": "strikes_swinging", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.strikes_swinging", "block_contents": "Number of pitches that were swung on and missed (mutually exclusive\n    with `swings_with_contact`, which also count as strikes)."}, "doc.baseball_computer.strikes_foul": {"name": "strikes_foul", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.strikes_foul", "block_contents": "Number of pitches that were fouled off."}, "doc.baseball_computer.strikes_foul_tip": {"name": "strikes_foul_tip", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.strikes_foul_tip", "block_contents": "Number of pitches that were fouled off and caught by the catcher for strike three."}, "doc.baseball_computer.strikes_in_play": {"name": "strikes_in_play", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.strikes_in_play", "block_contents": "Number of pitches that were swung on and batted into play."}, "doc.baseball_computer.strikes_unknown": {"name": "strikes_unknown", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.strikes_unknown", "block_contents": "Number of pitches that we know were strikes, but don't know what kind."}, "doc.baseball_computer.balls": {"name": "balls", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.balls", "block_contents": "Number of pitches that were called balls."}, "doc.baseball_computer.balls_called": {"name": "balls_called", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.balls_called", "block_contents": "Number of pitches that were called balls (as opposed to automatic balls that were\n    not actually thrown)."}, "doc.baseball_computer.balls_intentional": {"name": "balls_intentional", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.balls_intentional", "block_contents": "Number of pitches that were called balls as part of an intentional walk."}, "doc.baseball_computer.balls_automatic": {"name": "balls_automatic", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.balls_automatic", "block_contents": "Number of pitches that were called balls on an automatic walk or a delay penalty."}, "doc.baseball_computer.unknown_pitches": {"name": "unknown_pitches", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.unknown_pitches", "block_contents": "Number of pitches that were thrown without any other information recorded."}, "doc.baseball_computer.pitchouts": {"name": "pitchouts", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.pitchouts", "block_contents": "Number of pitches that were thrown as pitchouts. A pitchout is a pitch that is thrown\n    intentionally very far outside in order to make it easier for the catcher to throw out\n    a baserunner who is likely to steal."}, "doc.baseball_computer.pitcher_pickoff_attempts": {"name": "pitcher_pickoff_attempts", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.pitcher_pickoff_attempts", "block_contents": "Number of times the pitcher attempted to pick off a baserunner."}, "doc.baseball_computer.catcher_pickoff_attempts": {"name": "catcher_pickoff_attempts", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.catcher_pickoff_attempts", "block_contents": "Number of times the catcher attempted to pick off a baserunner."}, "doc.baseball_computer.pitches_blocked_by_catcher": {"name": "pitches_blocked_by_catcher", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.pitches_blocked_by_catcher", "block_contents": "Number of pitches that were blocked by the catcher."}, "doc.baseball_computer.pitches_with_runners_going": {"name": "pitches_with_runners_going", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.pitches_with_runners_going", "block_contents": "Number of pitches that were thrown while a baserunner was on the move\n    (as part of a steal or hit-and-run)."}, "doc.baseball_computer.passed_balls": {"name": "passed_balls", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.passed_balls", "block_contents": "(PB) Number of passed balls."}, "doc.baseball_computer.wild_pitches": {"name": "wild_pitches", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.wild_pitches", "block_contents": "(WP) Number of wild pitches."}, "doc.baseball_computer.balks": {"name": "balks", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.balks", "block_contents": "(BK) Number of balks."}, "doc.baseball_computer.left_on_base": {"name": "left_on_base", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.left_on_base", "block_contents": "(LOB) At an individual level, the number of baserunners that a batter failed to advance during a plate appearance.\n    At a team level, the number of baserunners remaining on base at the end of an inning. In order to count, baserunners\n    must not have scored or been put out."}, "doc.baseball_computer.left_on_base_with_two_outs": {"name": "left_on_base_with_two_outs", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.left_on_base_with_two_outs", "block_contents": "(LOB) At an individual level, the number of baserunners that remain on base (unscored and not out) after a plate appearance that ends with the third out recorded. At a team level, this is interchangable with `left_on_base`."}, "doc.baseball_computer.games_started": {"name": "games_started", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.games_started", "block_contents": "(GS) Number of games started by a player."}, "doc.baseball_computer.innings_pitched": {"name": "innings_pitched", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.innings_pitched", "block_contents": "(IP) Number of innings pitched by a pitcher. Fractional innings are given by .33 and .67 here,\n    but they are often formatted as .1 and .2 elsewhere."}, "doc.baseball_computer.inherited_runners": {"name": "inherited_runners", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.inherited_runners", "block_contents": "(IR) Number of runners on base when a pitcher entered the game."}, "doc.baseball_computer.bequeathed_runners": {"name": "bequeathed_runners", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.bequeathed_runners", "block_contents": "Number of runners on base when a pitcher left the game."}, "doc.baseball_computer.games_relieved": {"name": "games_relieved", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.games_relieved", "block_contents": "Number of games in which a pitcher entered the game in relief."}, "doc.baseball_computer.games_finished": {"name": "games_finished", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.games_finished", "block_contents": "(GF) Number of games in which a pitcher entered the game in relief and finished the game."}, "doc.baseball_computer.save_situations_entered": {"name": "save_situations_entered", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.save_situations_entered", "block_contents": "Number of games in which a pitcher entered the game in a save situation. A save situation is defined\n    as when the pitcher enters the game ineligible to get the win with one of the following conditions:\n\n    - A lead of three runs or less and ineligible to get the win\n    - Any lead with the tying run on base, at bat, or on deck\n\n    If a pitcher pitches the final three innings of a game with any lead, they are credited with a save\n    but are not considered to have entered a save situation unless one of the above conditions is met.\n    Note the difference between this field and `save_opportunities`, which does not count games in which\n    the pitcher exited without completing or blowing the save."}, "doc.baseball_computer.holds": {"name": "holds", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.holds", "block_contents": "(HLD, H) Number of holds recorded by a pitcher. A hold is defined as a relief appearance in which\n    the pitcher enters the game in a save situation, records at least one out, and leaves the game\n    with the lead intact."}, "doc.baseball_computer.blown_saves": {"name": "blown_saves", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.blown_saves", "block_contents": "(BS) Number of games in which a pitcher entered the game in a save situation and gave up the lead.\n    The status of inherited runners is irrelevant in determining who blew the save - it is entirely\n    a function of who was on the mount when the lead as lost."}, "doc.baseball_computer.saves_by_rule": {"name": "saves_by_rule", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.saves_by_rule", "block_contents": "Number of games in which a pitcher earned a save according to the default rules.\n    This may be different than the actual number of saves, as the official scorer may award\n    the player a win instead of a save at their discretion in rare cases."}, "doc.baseball_computer.save_opportunities": {"name": "save_opportunities", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.save_opportunities", "block_contents": "(SVO) The sum of saves and blown saves."}, "doc.baseball_computer.wins": {"name": "wins", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.wins", "block_contents": "(W) Number of games in which a pitcher was credited with the win."}, "doc.baseball_computer.losses": {"name": "losses", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.losses", "block_contents": "(L) Number of games in which a pitcher was debited with the loss."}, "doc.baseball_computer.saves": {"name": "saves", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.saves", "block_contents": "(SV) Number of games in which a pitcher was credited with the save."}, "doc.baseball_computer.earned_runs": {"name": "earned_runs", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.earned_runs", "block_contents": "(ER) Number of runs that are charged to a pitcher. This may include runs that scored after the pitcher\n    left the game (in the case of inherited runners), as well as runs that the scorekeeper deemed to be\n    the pitcher's responsibility in the absence of official inherited runner rules in the olden days.\n    Earned runs are only an official statistic at a game level: the earnedness of any given run is never\n    officially specified, only the total. It would be possible to make a very good guess algorithmically,\n    but that would be a huge pain for a stat that is not very useful in the first place."}, "doc.baseball_computer.complete_games": {"name": "complete_games", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.complete_games", "block_contents": "(CG) Number of games in which a pitcher pitched the entire game, regardless of how long the game lasted."}, "doc.baseball_computer.shutouts": {"name": "shutouts", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.shutouts", "block_contents": "(SHO) Number of games in which a pitcher recorded every out for his team and did not allow any runs,\n    earned or unearned, regardless of how long the game lasted. Note the subtle difference between the\n    definition of a shutout and a complete game: it is possible to pitch a shutout without a complete game\n    if the pitcher enters in relief when no outs have been recorded. AFAIK, the only reason this distinction\n    exists is for us to remember the time that Babe Ruth started a game, walked a batter, yelled at the umpire,\n    got ejected, punched the umpire, and then Ernie Shore came in and retired every batter he faced,\n    which is good enough for me."}, "doc.baseball_computer.quality_starts": {"name": "quality_starts", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.quality_starts", "block_contents": "(QS) Number of games in which a starting pitcher pitched at least six innings and allowed three or fewer earned runs."}, "doc.baseball_computer.cheap_wins": {"name": "cheap_wins", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.cheap_wins", "block_contents": "Number of wins in which a starting pitcher did not record a quality start."}, "doc.baseball_computer.tough_losses": {"name": "tough_losses", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.tough_losses", "block_contents": "Number of losses in which a starting pitcher record a quality start."}, "doc.baseball_computer.no_decisions": {"name": "no_decisions", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.no_decisions", "block_contents": "(ND) Number of games in which a pitcher pitched but did not recieve a win or a loss."}, "doc.baseball_computer.no_hitters": {"name": "no_hitters", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.no_hitters", "block_contents": "At an individual level, the number of games in which a pitcher was the only pitcher for their team and pitched a full-length game without allowing any hits.\n    At a team level, the \"only pitcher\" requirement is dropped."}, "doc.baseball_computer.perfect_games": {"name": "perfect_games", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.perfect_games", "block_contents": "Number of games in which a pitcher was the only pitcher for their team and pitched the entire game\n    without allowing any baserunners. At a team level, the \"only pitcher\" requirement is dropped.\n    Generally considered the most impressive single-game pitching accomplishment."}, "doc.baseball_computer.batters_faced": {"name": "batters_faced", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.batters_faced", "block_contents": "Number of batters faced by a pitcher, generally equivalent to plate appearances (in old box-score-only games, this may not match up perfectly)."}, "doc.baseball_computer.outs_recorded": {"name": "outs_recorded", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.outs_recorded", "block_contents": "Number of outs recorded by a pitcher."}, "doc.baseball_computer.inherited_runners_scored": {"name": "inherited_runners_scored", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.inherited_runners_scored", "block_contents": "(IRS) Number of inherited runners that scored while a pitcher was on the mound."}, "doc.baseball_computer.bequeathed_runners_scored": {"name": "bequeathed_runners_scored", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.bequeathed_runners_scored", "block_contents": "Number of bequeathed runners that scored after a pitcher left the game."}, "doc.baseball_computer.team_unearned_runs": {"name": "team_unearned_runs", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.team_unearned_runs", "block_contents": "Number of runs that are charged as earned to the pitcher, but unearned to the team.\n    This happens when a pitcher enters an inning which should have been over already because\n    of an error and then the pitcher allows a run to score without the help of any additional\n    errors. This is a rare occurrence and it might seem unnecessary to track,\n    but it is absolutely essential that we do so in order to preserve the space-time continuu-\n    T\u0355he\u030a\u0346\u0328\u035c y\u036a\u0363e\u0321\u0303\u0313\u030ea\u0347r\u0350\u0355\u035c\u035d i\u0313\u035a\u0314\u0324\u033a\u033b\u035bs 20\u032e\u033f89\u032a\u030a an\u032b\u032b\u035e\u0326\u0305d\u0331\u033f\u0369 E\u0361\u0354\u0330\u0351\u0320s\u036d\u0366t\u0351\u0359\u035de\u0303\u0352\u0310b\u0301\u036e\u0359a\u0361\u0359\u0310\u0301\u0330\u0330\u0320n\u036f\u0352\u035f Y\u032a\u0318\u0311a\u035c\u0302\u031c\u031a\u036c\u0345\u0360n\u0304\u0301\u0309 h\u035c\u0314\u0306a\u0359\u033e\u031d\u035f\u0361\u0308\u0301\u0351s\u035f\u0338 fu\u0326\u036d\u030f\u032e\u0306\u030dl\u033a\u0347\u0311\u0349\u034c\u0305\u0303l\u0345\u030f\u0308\u036a\u033f\u031dy\u0312\u0313\u034b\u036e\u0332\u0347 m\u0326\u030a\u0363e\u0365\u034a\u0367\u0320\u0325rg\u0347\u0366\u0300e\u0309\u0339\u031c\u031f\u0353\u0331\u0319d\u0331\u0327 wi\u0307\u034eth\u0366\u0361\u031b\u036d\u0358 t\u031d\u0362\u035d\u0328\u035e\u0342h\u0336\u0357\u031e\u032d\u035f\u0319e\u0322\u030a\u0321\u032f w\u0300\u0329\u0309\u032co\u036d\u0349r\u0311\u0367\u0327\u0360\u036a\u0327\u036cm\u034c\u031c."}, "doc.baseball_computer.putouts": {"name": "putouts", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.putouts", "block_contents": "(PO) Outs credited to fielder based on who physically made the out, either by:\n        - Catching a ball on the fly\n        - Tagging a runner out\n        - Forcing a runner out\n        - Catching a called third strike\n        - Being the nearest fielder to a baserunner who is called out for interference\n\n    Putouts have been an important baseball statistic longer than MLB has been around,\n    so it has excellent historical coverage. Unassisted\n    putouts are very important in determining the location of batted balls.\n    \n    In modern baseball rules, each out in the game is credited as a putout, and at the play/event\n    level this will always be the case. However, in older games for which we only have box score or season-level\n    data, rare plays like baserunner interference may not be assigned to a specific fielder.\n    \n    Every play-by-play out has a putout, but the fielder who gets the putout may be unknown."}, "doc.baseball_computer.assists": {"name": "assists", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.assists", "block_contents": "(A) Number of outs in which a fielder touched the ball before anothber fielder recorded a putout.\n    This is almost always a throw to another fielder, but it can also be a deflection.\n\n    Assists have excellent historical data coverage, and they are particularly useful in determining\n    the location of ground balls. The data is present in almost all season-level and game-level accounts.\n    However, individual plays with unknown-fielder putouts are likely to be missing assists entirely."}, "doc.baseball_computer.errors": {"name": "errors", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.errors", "block_contents": "(E) Number of errors recorded by a fielder. This is recorded when a fielder either fails to make an out\n    that an average fielder should have made or makes a bad play that allows a baserunner to advance.\n    Errors are awarded at the scorekeeper's discretion, making them more subjective than the other two main\n    fielding stats.\n    \n    Errors used to be a much larger component of evaluating fielder quality.\n    When the stat was invented, routine plays were completed much less frequently than they are today.\n    As baseball evolved, routine plays became truly routine, and a fielder's ability to get to the ball\n    became more relevant than their ability\n    to reliably convert the out once they got there. While plenty of people as early as the 19th century were\n    aware of this, statistics mostly failed to reflect it until the 1980s, when Bill James and others\n    developed Range Factor and other stats that attempted to measure a fielder's ability to create chances."}, "doc.baseball_computer.fielders_choices": {"name": "fielders_choices", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.fielders_choices", "block_contents": "(FC) Number of times a fielder who fielded the ball attempted to put out a baserunner other than the batter.\n    A fielder's choice can be assigned when the attempt fails, even if there was no error on the play.\n\n    Fielder's choices are only available on play-by-play data and tend to be recorded when the attempt was\n    a tag and not a force. Force plays are explicitly noted and have little overlap with fielder's choices."}, "doc.baseball_computer.plays_started": {"name": "plays_started", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.plays_started", "block_contents": "Number of times that a fielder made the first play on a prospective batted-ball-out and did not immediately record an error.\n    Hits without any putouts are not included, but assists made on plays that had errors or failed fielder's choices do count."}, "doc.baseball_computer.assisted_putouts": {"name": "assisted_putouts", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.assisted_putouts", "block_contents": "Number of putouts by the fielder that had at least one recorded, associated assist. For older games, this may be a subset\n    of the true total assisted putouts, as unknown-fielder putouts almost never have recorded assists."}, "doc.baseball_computer.first_errors": {"name": "first_errors", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.first_errors", "block_contents": "Number of events in which a fielder made an error that was the first attempted out on the play."}, "doc.baseball_computer.unknown_putouts": {"name": "unknown_putouts", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.unknown_putouts", "block_contents": "Number of putouts that were recorded, but without a specified fielder."}, "doc.baseball_computer.incomplete_events": {"name": "incomplete_events", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.incomplete_events", "block_contents": "Number of events in which at least one known fielding play was made by an unknown fielder."}, "doc.baseball_computer.outs_played": {"name": "outs_played", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.outs_played", "block_contents": "Total amount of time played in the field, expressed in the total\n    number of outs recorded while the fielder was playing. This has\n    close to 100% coverage for all years."}, "doc.baseball_computer.plate_appearances_in_field": {"name": "plate_appearances_in_field", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.plate_appearances_in_field", "block_contents": "Total amount of time played in the field, expressed in the total\n    number of plate appearances that ended while the fielder was playing.\n    This is only populated for games with play-by-play data."}, "doc.baseball_computer.plate_appearances_in_field_with_ball_in_play": {"name": "plate_appearances_in_field_with_ball_in_play", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.plate_appearances_in_field_with_ball_in_play", "block_contents": "Total number of plate appearances that ended in a ball in play while the fielder was playing.\n    This is only populated for games with play-by-play data."}, "doc.baseball_computer.reaching_errors": {"name": "reaching_errors", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.reaching_errors", "block_contents": "Total number of errors made by a fielder that allowed the batter to reach base\n    when they would otherwise have been out. Only populated for games with play-by-play data."}, "doc.baseball_computer.ground_ball_double_plays": {"name": "ground_ball_double_plays", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.ground_ball_double_plays", "block_contents": "Total number of ground ball double plays in which the fielder was involved.\n    This is only populated for games with play-by-play data."}, "doc.baseball_computer.balls_hit_to": {"name": "balls_hit_to", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.balls_hit_to", "block_contents": "Total number of balls hit to the fielder, as determined by the `batted_to_fielder`\n    field in `stg_events`. This is only populated for games with play-by-play data."}, "doc.baseball_computer.games_left_field": {"name": "games_left_field", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.games_left_field", "block_contents": "Total number of games in which the player appeared in left field. This is\n    an important distinction for years with only season-level player data, because\n    stats are only aggregated at the outfield level without distinguishing\n    between left, center, and right field."}, "doc.baseball_computer.games_center_field": {"name": "games_center_field", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.games_center_field", "block_contents": "Total number of games in which the player appeared in center field. This is\n    an important distinction for years with only season-level player data, because\n    stats are only aggregated at the outfield level without distinguishing\n    between left, center, and right field."}, "doc.baseball_computer.games_right_field": {"name": "games_right_field", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.games_right_field", "block_contents": "Total number of games in which the player appeared in right field. This is\n    an important distinction for years with only season-level player data, because\n    stats are only aggregated at the outfield level without distinguishing\n    between left, center, and right field."}, "doc.baseball_computer.unknown_putouts_while_fielding": {"name": "unknown_putouts_while_fielding", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.unknown_putouts_while_fielding", "block_contents": "Total number of putouts that happened while a player was on the field in which\n    no data is available for which player made the putout. This is an especially important\n    number for years with relatively high unknown-fielder rates in their play-by-play data.\n    If this number is 0, then you can trust that all of the player's putouts are accounted for\n    at the event level (or that there's no event data at all). If the number is non-zero,\n    then player putout/assist data is only valid at the game level and higher."}, "doc.baseball_computer.in_play_putouts": {"name": "in_play_putouts", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.in_play_putouts", "block_contents": "Total number of putouts made by the player on balls in play (as opposed to strikeouts\n    and other non-batted-ball outs). This is only populated for games with play-by-play data."}, "doc.baseball_computer.in_play_assists": {"name": "in_play_assists", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.in_play_assists", "block_contents": "Total number of assists made by the player on balls in play (as opposed to strikeouts\n    and other non-batted-ball outs). This is only populated for games with play-by-play data."}, "doc.baseball_computer.pickoffs": {"name": "pickoffs", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.pickoffs", "block_contents": "Total number of outs recorded by throwing over to a base either before (for pitchers)\n    or immediately after (for catchers) a pitch was was thrown. The pickoff is credited to the\n    player who makes the throw."}, "doc.baseball_computer.double_plays_started": {"name": "double_plays_started", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.double_plays_started", "block_contents": "Number of double plays in which the fielder fielded the ball (and did not make an error).\n    This is only populated for games with play-by-play data."}, "doc.baseball_computer.ground_ball_double_plays_started": {"name": "ground_ball_double_plays_started", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_stat_list.md", "original_file_path": "models/doc_stat_list.md", "unique_id": "doc.baseball_computer.ground_ball_double_plays_started", "block_contents": "Number of ground ball double plays in which the fielder fielded the ball\n    (and did not make an error). This is only populated for games with play-by-play data."}, "doc.baseball_computer.batting_average": {"name": "batting_average", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_metric_calc.md", "original_file_path": "models/doc_metric_calc.md", "unique_id": "doc.baseball_computer.batting_average", "block_contents": "(AVG, BA) Hits divided by at bats. Historically speaking, the single most well-known hitting statistic.\n    It retains much of its popularity and cultural significance today, if not its importance: the\n    \"batting title\" goes to the player with the highest batting average.\n    While batting average is rightly maligned for the limited picture it captures of a player's offensive\n    contribution, it's still a nice object of study when learning about statistical inference."}, "doc.baseball_computer.on_base_percentage": {"name": "on_base_percentage", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_metric_calc.md", "original_file_path": "models/doc_metric_calc.md", "unique_id": "doc.baseball_computer.on_base_percentage", "block_contents": "(OBP) Measures a player's ability to get on base. It is calculated as (H + BB + HBP)/(AB + BB + HBP + SF),\n    which is confusingly a bit different from on-base events per plate appearance. We have `on_base_successes`\n    and `on_base_opportunities` to make the OBP calculation simpler. The modern analogue to batting average,\n    both in what it tries to measure and in its cultural significance."}, "doc.baseball_computer.slugging_percentage": {"name": "slugging_percentage", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_metric_calc.md", "original_file_path": "models/doc_metric_calc.md", "unique_id": "doc.baseball_computer.slugging_percentage", "block_contents": "(SLG) Total bases per at bat. More of an average than a percentage, but the name has stuck (though\n    you'll also hear \"slugging average\"). The simplest and most well-known measure of the \"advancement factor\"\n    of a player's offensive ability."}, "doc.baseball_computer.on_base_plus_slugging": {"name": "on_base_plus_slugging", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_metric_calc.md", "original_file_path": "models/doc_metric_calc.md", "unique_id": "doc.baseball_computer.on_base_plus_slugging", "block_contents": "(OPS) On-base percentage plus slugging percentage. Popularized in the 1980s, OPS is a simple way to\n    combine the two aspects of a player's hitting ability. In terms of its overall precision, it is easily surpassed\n    by other metrics, but it remains hard to beat for its economy of calculation and expression."}, "doc.baseball_computer.isolated_power": {"name": "isolated_power", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_metric_calc.md", "original_file_path": "models/doc_metric_calc.md", "unique_id": "doc.baseball_computer.isolated_power", "block_contents": "(ISO) Slugging percentage minus batting average, or the average number of extra bases per at bat.\n    An intuitive expression of a player's raw power or ability to push runners around the bases.\n    Less indicative of overall ability than slugging percentage, but more precise in what it tries to measure."}, "doc.baseball_computer.secondary_average": {"name": "secondary_average", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_metric_calc.md", "original_file_path": "models/doc_metric_calc.md", "unique_id": "doc.baseball_computer.secondary_average", "block_contents": "(SecA) A statistic invented by Bill James that measures a player's ability to gain bases by means independent\n    of batting average. Its formula is (TB - H + BB + SB - CS)/(AB). A good way to answer the question of which players\n    would be most underrated by only looking at their batting averages. Also a good way to show how well you can understand\n    a player's offensive ability without taking their batting average into account."}, "doc.baseball_computer.batting_average_on_balls_in_play": {"name": "batting_average_on_balls_in_play", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_metric_calc.md", "original_file_path": "models/doc_metric_calc.md", "unique_id": "doc.baseball_computer.batting_average_on_balls_in_play", "block_contents": "(BABIP) A measure of the rate at which fieldable balls go for hits. It is calculated as (H - HR)/(AB - K - HR + SF).\n    Pitchers are generally (but controversially) thought to have little control over balls in play, so a high BABIP\n    is a good sign that that they have been unlucky or have played in front of a poor defense. Most pitchers do have some\n    \"true\" BABIP ability that is different from the league average, but the difference is usually much smaller than the year-to-year\n    variance in their actual BABIP. In rare cases, pitchers can have such a strong influence on balls in play that their\n    contribution is measurable in smaller sample sizes. For pitchers in the dead-ball era and earlier, it makes less sense\n    to treat BABIP as luck because a much higher percentage of at-bats ended in balls in play, and pitchers were more focused\n    on getting outs by inducing weak contact without having to worry about home runs.\n\n    All of the above is also true for hitters, but to a much lesser extent, as hitters face different defenses, control\n    their ability to beat out grounders for infield hits, and generally have more control over the quality of contact they\n    make. BABIP can also be misleading for hitters because it excludes home runs, so Barry Bonds ends up having a lower BABIP\n    even though there were occasional eyewitness reports of his making solid contact.\n\n    BABIP was invented by Voros McCracken around the turn of the millenium, and it remains the most prominent\n    example of a statistic that tracks player luck as opposed to skill or performance."}, "doc.baseball_computer.home_run_rate": {"name": "home_run_rate", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_metric_calc.md", "original_file_path": "models/doc_metric_calc.md", "unique_id": "doc.baseball_computer.home_run_rate", "block_contents": "(HR/PA) Home runs per plate appearance."}, "doc.baseball_computer.walk_rate": {"name": "walk_rate", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_metric_calc.md", "original_file_path": "models/doc_metric_calc.md", "unique_id": "doc.baseball_computer.walk_rate", "block_contents": "(BB/PA) Walks per plate appearance."}, "doc.baseball_computer.strikeout_rate": {"name": "strikeout_rate", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_metric_calc.md", "original_file_path": "models/doc_metric_calc.md", "unique_id": "doc.baseball_computer.strikeout_rate", "block_contents": "(K/PA) Strikeouts per plate appearance."}, "doc.baseball_computer.stolen_base_percentage": {"name": "stolen_base_percentage", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_metric_calc.md", "original_file_path": "models/doc_metric_calc.md", "unique_id": "doc.baseball_computer.stolen_base_percentage", "block_contents": "(SB%) The rate of stolen base attempts that are successful. Calculated as SB/(SB + CS)."}, "doc.baseball_computer.earned_run_average": {"name": "earned_run_average", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_metric_calc.md", "original_file_path": "models/doc_metric_calc.md", "unique_id": "doc.baseball_computer.earned_run_average", "block_contents": "(ERA) Earned runs per nine innings, the analogue of batting average for pitchers in both its\n    fame and its limitations. `earned_runs` are a subset of the total runs allowed by a pitcher:\n    those unaffected by fielding errors. ERA is a strange compromise between the desire to isolate\n    a pitcher's true defense-independent ability and to describe actually happened when they were on the mound.\n    Because fielding errors are a small component of overall luck and defense, it doesn't really remove much\n    noise and might even add more. In general, the idea is right but the execution is wrong."}, "doc.baseball_computer.run_average": {"name": "run_average", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_metric_calc.md", "original_file_path": "models/doc_metric_calc.md", "unique_id": "doc.baseball_computer.run_average", "block_contents": "(RA) Runs allowed by the pitcher per nine innings. Because of the historical importance of ERA,\n    this is often thought of as earned run average plus unearned run average, but this obscures how much simpler\n    it is to calculate than ERA. While it is subject to many factors beyond the pitcher's control, it does arguably\n    the best possible job of describing what actually happened when the pitcher was on the mound. This makes it a popular\n    starting point for some implementations of WAR (such as Baseball Reference's)."}, "doc.baseball_computer.walks_per_9_innings": {"name": "walks_per_9_innings", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_metric_calc.md", "original_file_path": "models/doc_metric_calc.md", "unique_id": "doc.baseball_computer.walks_per_9_innings", "block_contents": "(BB/9) Walks allowed by the pitcher per nine innings. Probably the statistic most \n    frequently used to describe a pitcher's control. One of the three main \"peripheral\"\n    stats that describe a pitcher's performance on outcomes over which they have the most control."}, "doc.baseball_computer.strikeouts_per_9_innings": {"name": "strikeouts_per_9_innings", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_metric_calc.md", "original_file_path": "models/doc_metric_calc.md", "unique_id": "doc.baseball_computer.strikeouts_per_9_innings", "block_contents": "(K/9) Strikeouts recorded by the pitcher per nine innings. One of the three main \"peripheral\"\n    stats that describe a pitcher's performance on outcomes over which they have the most control."}, "doc.baseball_computer.home_runs_per_9_innings": {"name": "home_runs_per_9_innings", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_metric_calc.md", "original_file_path": "models/doc_metric_calc.md", "unique_id": "doc.baseball_computer.home_runs_per_9_innings", "block_contents": "(HR/9) Home runs allowed by the pitcher per nine innings. One of the three main \"peripheral\"\n    stats that describe a pitcher's performance on outcomes over which they have the most control,\n    although the lower frequency of home runs gives it a much higher relative variance than the other two."}, "doc.baseball_computer.hits_per_9_innings": {"name": "hits_per_9_innings", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_metric_calc.md", "original_file_path": "models/doc_metric_calc.md", "unique_id": "doc.baseball_computer.hits_per_9_innings", "block_contents": "(H/9) Hits allowed by the pitcher per nine innings."}, "doc.baseball_computer.walks_and_hits_per_innings_pitched": {"name": "walks_and_hits_per_innings_pitched", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_metric_calc.md", "original_file_path": "models/doc_metric_calc.md", "unique_id": "doc.baseball_computer.walks_and_hits_per_innings_pitched", "block_contents": "(WHIP) Describes the rate at which pitchers allow baserunners. It is calculated as (BB + H)/IP."}, "doc.baseball_computer.strikeout_to_walk_ratio": {"name": "strikeout_to_walk_ratio", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_metric_calc.md", "original_file_path": "models/doc_metric_calc.md", "unique_id": "doc.baseball_computer.strikeout_to_walk_ratio", "block_contents": "(K/BB) Ratio of strikeouts to walks, almost always appearing as a pitching statistic even though it\n    can also be expressed for hitters. A simple and useful way to describe pitching performance\n    on non-at-bat outcomes. Also a bit more robust when comparing across time periods than most\n    unadjusted strikeout-related statistics. Leaders in this stat tend to be a mix\n    of the most dominant pitchers in the league and contact-oriented control freaks,\n    e.g. Pedro Martinez and Phil Hughes (respectively or not, who's to say)."}, "doc.baseball_computer.batting_average_against": {"name": "batting_average_against", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_metric_calc.md", "original_file_path": "models/doc_metric_calc.md", "unique_id": "doc.baseball_computer.batting_average_against", "block_contents": "(BAA, OAV) Same as batting average, but for pitchers. For the most part,\n    this database doesn't rephrase hitting statistics for pitchers, but this one is\n    so common that it's worth including."}, "doc.baseball_computer.on_base_percentage_against": {"name": "on_base_percentage_against", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_metric_calc.md", "original_file_path": "models/doc_metric_calc.md", "unique_id": "doc.baseball_computer.on_base_percentage_against", "block_contents": "Same as on-base percentage, but for pitchers/defense."}, "doc.baseball_computer.slugging_percentage_against": {"name": "slugging_percentage_against", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_metric_calc.md", "original_file_path": "models/doc_metric_calc.md", "unique_id": "doc.baseball_computer.slugging_percentage_against", "block_contents": "Same as slugging percentage, but for pitchers/defense."}, "doc.baseball_computer.on_base_plus_slugging_against": {"name": "on_base_plus_slugging_against", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_metric_calc.md", "original_file_path": "models/doc_metric_calc.md", "unique_id": "doc.baseball_computer.on_base_plus_slugging_against", "block_contents": "Same as OPS, but for pitchers/defense."}, "doc.baseball_computer.known_trajectory_rate_outs": {"name": "known_trajectory_rate_outs", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_metric_calc.md", "original_file_path": "models/doc_metric_calc.md", "unique_id": "doc.baseball_computer.known_trajectory_rate_outs", "block_contents": "Rate of outs in play for which we know the detailed trajectory of the batted ball."}, "doc.baseball_computer.known_trajectory_rate_hits": {"name": "known_trajectory_rate_hits", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_metric_calc.md", "original_file_path": "models/doc_metric_calc.md", "unique_id": "doc.baseball_computer.known_trajectory_rate_hits", "block_contents": "Rate of hits for which we know the detailed trajectory of the batted ball."}, "doc.baseball_computer.known_trajectory_rate": {"name": "known_trajectory_rate", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_metric_calc.md", "original_file_path": "models/doc_metric_calc.md", "unique_id": "doc.baseball_computer.known_trajectory_rate", "block_contents": "Overall rate of batted balls for which we know the detailed trajectory."}, "doc.baseball_computer.known_trajectory_broad_rate_outs": {"name": "known_trajectory_broad_rate_outs", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_metric_calc.md", "original_file_path": "models/doc_metric_calc.md", "unique_id": "doc.baseball_computer.known_trajectory_broad_rate_outs", "block_contents": "Overall rate of outs in play for which we know whether\n    the ball was hit in the air or on the ground.\n    This is generally very high even for the oldest play-by-play data."}, "doc.baseball_computer.known_trajectory_broad_rate_hits": {"name": "known_trajectory_broad_rate_hits", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_metric_calc.md", "original_file_path": "models/doc_metric_calc.md", "unique_id": "doc.baseball_computer.known_trajectory_broad_rate_hits", "block_contents": "Overall rate of hits for which we know whether\n    the ball was hit in the air or on the ground."}, "doc.baseball_computer.known_trajectory_broad_rate": {"name": "known_trajectory_broad_rate", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_metric_calc.md", "original_file_path": "models/doc_metric_calc.md", "unique_id": "doc.baseball_computer.known_trajectory_broad_rate", "block_contents": "Overall rate of batted balls for which we know whether\n    the ball was hit in the air or on the ground."}, "doc.baseball_computer.known_trajectory_out_hit_ratio": {"name": "known_trajectory_out_hit_ratio", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_metric_calc.md", "original_file_path": "models/doc_metric_calc.md", "unique_id": "doc.baseball_computer.known_trajectory_out_hit_ratio", "block_contents": "The ratio of `known_trajectory_rate_outs` to `known_trajectory_rate_hits`.\n    This ratio is generally very high for years without complete batted ball data,\n    which makes it useful for estimating quantities that would be affected by\n    the selection bias."}, "doc.baseball_computer.known_trajectory_broad_out_hit_ratio": {"name": "known_trajectory_broad_out_hit_ratio", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_metric_calc.md", "original_file_path": "models/doc_metric_calc.md", "unique_id": "doc.baseball_computer.known_trajectory_broad_out_hit_ratio", "block_contents": "The ratio of `known_trajectory_broad_rate_outs` to `known_trajectory_broad_rate_hits`.\n    This ratio is generally very high for years without complete batted ball data,\n    which makes it useful for estimating quantities that would be affected by\n    the selection bias."}, "doc.baseball_computer.air_ball_rate_outs": {"name": "air_ball_rate_outs", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_metric_calc.md", "original_file_path": "models/doc_metric_calc.md", "unique_id": "doc.baseball_computer.air_ball_rate_outs", "block_contents": "The rate of outs in play that were fly balls, pop-ups, or line drives."}, "doc.baseball_computer.ground_ball_rate_outs": {"name": "ground_ball_rate_outs", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_metric_calc.md", "original_file_path": "models/doc_metric_calc.md", "unique_id": "doc.baseball_computer.ground_ball_rate_outs", "block_contents": "The rate of outs in play that were ground balls."}, "doc.baseball_computer.ground_air_out_ratio": {"name": "ground_air_out_ratio", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_metric_calc.md", "original_file_path": "models/doc_metric_calc.md", "unique_id": "doc.baseball_computer.ground_air_out_ratio", "block_contents": "The ratio of `ground_ball_rate_outs` to `air_ball_rate_outs`.\n    This is a useful metric by itself because it is unaffected by\n    the higher percentage of missing data on hits, so it is probably\n    a more accurate measure of overall ground ball rate than `ground_ball_rate`\n    itself for most seasons."}, "doc.baseball_computer.air_ball_hit_rate": {"name": "air_ball_hit_rate", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_metric_calc.md", "original_file_path": "models/doc_metric_calc.md", "unique_id": "doc.baseball_computer.air_ball_hit_rate", "block_contents": "The rate of hits in play that were fly balls, pop-ups, or line drives."}, "doc.baseball_computer.ground_ball_hit_rate": {"name": "ground_ball_hit_rate", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_metric_calc.md", "original_file_path": "models/doc_metric_calc.md", "unique_id": "doc.baseball_computer.ground_ball_hit_rate", "block_contents": "The rate of hits in play that were ground balls."}, "doc.baseball_computer.ground_air_hit_ratio": {"name": "ground_air_hit_ratio", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_metric_calc.md", "original_file_path": "models/doc_metric_calc.md", "unique_id": "doc.baseball_computer.ground_air_hit_ratio", "block_contents": "The ratio of `ground_ball_hit_rate` to `air_ball_hit_rate`.\n    Difference between this and `ground_air_out_ratio` is potentially interesting,\n    but will be noisy for older years."}, "doc.baseball_computer.fly_ball_rate": {"name": "fly_ball_rate", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_metric_calc.md", "original_file_path": "models/doc_metric_calc.md", "unique_id": "doc.baseball_computer.fly_ball_rate", "block_contents": "Of all batted_balls for which we know the trajectory,\n    The rate that were fly balls."}, "doc.baseball_computer.line_drive_rate": {"name": "line_drive_rate", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_metric_calc.md", "original_file_path": "models/doc_metric_calc.md", "unique_id": "doc.baseball_computer.line_drive_rate", "block_contents": "Of all batted_balls for which we know the trajectory,\n    The rate that were line drives."}, "doc.baseball_computer.pop_up_rate": {"name": "pop_up_rate", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_metric_calc.md", "original_file_path": "models/doc_metric_calc.md", "unique_id": "doc.baseball_computer.pop_up_rate", "block_contents": "Of all batted_balls for which we know the trajectory,\n    The rate that were pop-ups."}, "doc.baseball_computer.ground_ball_rate": {"name": "ground_ball_rate", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_metric_calc.md", "original_file_path": "models/doc_metric_calc.md", "unique_id": "doc.baseball_computer.ground_ball_rate", "block_contents": "Of all batted_balls for which we know the trajectory,\n    The rate that were ground balls."}, "doc.baseball_computer.coverage_weighted_air_ball_batting_average": {"name": "coverage_weighted_air_ball_batting_average", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_metric_calc.md", "original_file_path": "models/doc_metric_calc.md", "unique_id": "doc.baseball_computer.coverage_weighted_air_ball_batting_average", "block_contents": "The batting average of batted_balls that were fly balls, pop-ups, or line drives,\n    weighted according to the `known_trajectory_broad_out_hit_ratio`. This is an attempt\n    to measure trajectory-specific BABIP even in years where trajectory data is rarely\n    present for hits. While it handles that specific bias, it is still likely to be noisy\n    because of the small sample size of known-trajectory balls."}, "doc.baseball_computer.coverage_weighted_ground_ball_batting_average": {"name": "coverage_weighted_ground_ball_batting_average", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_metric_calc.md", "original_file_path": "models/doc_metric_calc.md", "unique_id": "doc.baseball_computer.coverage_weighted_ground_ball_batting_average", "block_contents": "The batting average of batted_balls that were ground balls,\n    weighted according to the `known_trajectory_broad_out_hit_ratio`. This is an attempt\n    to measure trajectory-specific BABIP even in years where trajectory data is rarely\n    present for hits. While it handles that specific bias, it is still likely to be noisy\n    because of the small sample size of known-trajectory balls."}, "doc.baseball_computer.coverage_weighted_fly_ball_batting_average": {"name": "coverage_weighted_fly_ball_batting_average", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_metric_calc.md", "original_file_path": "models/doc_metric_calc.md", "unique_id": "doc.baseball_computer.coverage_weighted_fly_ball_batting_average", "block_contents": "The batting average of batted_balls that were fly balls,\n    weighted according to the `known_trajectory_out_hit_ratio`. This is an attempt\n    to measure trajectory-specific BABIP even in years where trajectory data is rarely\n    present for hits. It is still vulnerable to the variance and arbitrariness with which\n    historical scorekeepers differentiated fly balls from line drives and pop-ups."}, "doc.baseball_computer.coverage_weighted_line_drive_batting_average": {"name": "coverage_weighted_line_drive_batting_average", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_metric_calc.md", "original_file_path": "models/doc_metric_calc.md", "unique_id": "doc.baseball_computer.coverage_weighted_line_drive_batting_average", "block_contents": "The batting average of batted_balls that were line drives,\n    weighted according to the `known_trajectory_out_hit_ratio`. This is an attempt\n    to measure trajectory-specific BABIP even in years where trajectory data is rarely\n    present for hits. It is still vulnerable to the variance and arbitrariness with which\n    historical scorekeepers differentiated line drives from other air outs, which was\n    extremely high all the way up to the Statcast era."}, "doc.baseball_computer.coverage_weighted_pop_up_batting_average": {"name": "coverage_weighted_pop_up_batting_average", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_metric_calc.md", "original_file_path": "models/doc_metric_calc.md", "unique_id": "doc.baseball_computer.coverage_weighted_pop_up_batting_average", "block_contents": "The batting average of batted_balls that were pop-ups,\n    weighted according to the `known_trajectory_out_hit_ratio`. This is an attempt\n    to measure trajectory-specific BABIP even in years where trajectory data is rarely\n    present for hits. It is still vulnerable to the variance and arbitrariness with which\n    historical scorekeepers differentiated pop-ups from other air outs."}, "doc.baseball_computer.known_angle_rate_outs": {"name": "known_angle_rate_outs", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_metric_calc.md", "original_file_path": "models/doc_metric_calc.md", "unique_id": "doc.baseball_computer.known_angle_rate_outs", "block_contents": "Rate of batted-ball outs for which we know (or have a good proxy for)\n    whether the ball was hit to the left, right, or middle of the field."}, "doc.baseball_computer.known_angle_rate_hits": {"name": "known_angle_rate_hits", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_metric_calc.md", "original_file_path": "models/doc_metric_calc.md", "unique_id": "doc.baseball_computer.known_angle_rate_hits", "block_contents": "Rate of batted-ball hits for which we know (or have a good proxy for)\n    whether the ball was hit to the left, right, or middle of the field."}, "doc.baseball_computer.known_angle_rate": {"name": "known_angle_rate", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_metric_calc.md", "original_file_path": "models/doc_metric_calc.md", "unique_id": "doc.baseball_computer.known_angle_rate", "block_contents": "Rate of batted balls for which we know (or have a good proxy for)\n    whether the ball was hit to the left, right, or middle of the field."}, "doc.baseball_computer.known_angle_out_hit_ratio": {"name": "known_angle_out_hit_ratio", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_metric_calc.md", "original_file_path": "models/doc_metric_calc.md", "unique_id": "doc.baseball_computer.known_angle_out_hit_ratio", "block_contents": "The ratio of `known_angle_rate_outs` to `known_angle_rate_hits`.\n    This ratio is generally very high for years without complete batted ball data,\n    which makes it useful for estimating quantities that would be affected by\n    the selection bias. Angle is generally better known than location itself, because\n    when a batter gets a hit, we often know which outfielder fielded the ball even\n    though we don't know how it got there."}, "doc.baseball_computer.angle_left_rate_outs": {"name": "angle_left_rate_outs", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_metric_calc.md", "original_file_path": "models/doc_metric_calc.md", "unique_id": "doc.baseball_computer.angle_left_rate_outs", "block_contents": "The rate of batted-ball outs that were hit to the left side of the field."}, "doc.baseball_computer.angle_left_rate_hits": {"name": "angle_left_rate_hits", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_metric_calc.md", "original_file_path": "models/doc_metric_calc.md", "unique_id": "doc.baseball_computer.angle_left_rate_hits", "block_contents": "The rate of hits that were hit to the left side of the field."}, "doc.baseball_computer.angle_left_rate": {"name": "angle_left_rate", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_metric_calc.md", "original_file_path": "models/doc_metric_calc.md", "unique_id": "doc.baseball_computer.angle_left_rate", "block_contents": "The overall rate of batted balls that were hit to the left side of the field."}, "doc.baseball_computer.coverage_weighted_angle_left_batting_average": {"name": "coverage_weighted_angle_left_batting_average", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_metric_calc.md", "original_file_path": "models/doc_metric_calc.md", "unique_id": "doc.baseball_computer.coverage_weighted_angle_left_batting_average", "block_contents": "The batting average on batted balls that were hit to the left side of the field,\n    weighted according to the `known_angle_out_hit_ratio`. This is an attempt\n    to measure angle-specific BABIP even in years where angle data is rarely\n    present for hits."}, "doc.baseball_computer.angle_right_rate_outs": {"name": "angle_right_rate_outs", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_metric_calc.md", "original_file_path": "models/doc_metric_calc.md", "unique_id": "doc.baseball_computer.angle_right_rate_outs", "block_contents": "The rate of batted-ball outs that were hit to the right side of the field."}, "doc.baseball_computer.angle_right_rate_hits": {"name": "angle_right_rate_hits", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_metric_calc.md", "original_file_path": "models/doc_metric_calc.md", "unique_id": "doc.baseball_computer.angle_right_rate_hits", "block_contents": "The rate of hits that were hit to the right side of the field."}, "doc.baseball_computer.angle_right_rate": {"name": "angle_right_rate", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_metric_calc.md", "original_file_path": "models/doc_metric_calc.md", "unique_id": "doc.baseball_computer.angle_right_rate", "block_contents": "The overall rate of batted balls that were hit to the right side of the field."}, "doc.baseball_computer.coverage_weighted_angle_right_batting_average": {"name": "coverage_weighted_angle_right_batting_average", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_metric_calc.md", "original_file_path": "models/doc_metric_calc.md", "unique_id": "doc.baseball_computer.coverage_weighted_angle_right_batting_average", "block_contents": "The batting average on batted balls that were hit to the right side of the field,\n    weighted according to the `known_angle_out_hit_ratio`. This is an attempt\n    to measure angle-specific BABIP even in years where angle data is rarely\n    present for hits."}, "doc.baseball_computer.angle_middle_rate_outs": {"name": "angle_middle_rate_outs", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_metric_calc.md", "original_file_path": "models/doc_metric_calc.md", "unique_id": "doc.baseball_computer.angle_middle_rate_outs", "block_contents": "The rate of batted-ball outs that were hit to the middle of the field."}, "doc.baseball_computer.angle_middle_rate_hits": {"name": "angle_middle_rate_hits", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_metric_calc.md", "original_file_path": "models/doc_metric_calc.md", "unique_id": "doc.baseball_computer.angle_middle_rate_hits", "block_contents": "The rate of hits that were hit to the middle of the field."}, "doc.baseball_computer.angle_middle_rate": {"name": "angle_middle_rate", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_metric_calc.md", "original_file_path": "models/doc_metric_calc.md", "unique_id": "doc.baseball_computer.angle_middle_rate", "block_contents": "The overall rate of batted balls that were hit to the middle of the field."}, "doc.baseball_computer.coverage_weighted_angle_middle_batting_average": {"name": "coverage_weighted_angle_middle_batting_average", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_metric_calc.md", "original_file_path": "models/doc_metric_calc.md", "unique_id": "doc.baseball_computer.coverage_weighted_angle_middle_batting_average", "block_contents": "The batting average on batted balls that were hit to the middle of the field,\n    weighted according to the `known_angle_out_hit_ratio`. This is an attempt\n    to measure angle-specific BABIP even in years where angle data is rarely\n    present for hits."}, "doc.baseball_computer.pulled_rate_outs": {"name": "pulled_rate_outs", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_metric_calc.md", "original_file_path": "models/doc_metric_calc.md", "unique_id": "doc.baseball_computer.pulled_rate_outs", "block_contents": "`angle_right_rate_outs` for lefty batters\n    and `angle_left_rate_outs` for righty batters."}, "doc.baseball_computer.pulled_rate_hits": {"name": "pulled_rate_hits", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_metric_calc.md", "original_file_path": "models/doc_metric_calc.md", "unique_id": "doc.baseball_computer.pulled_rate_hits", "block_contents": "`angle_right_rate_hits` for lefty batters\n    and `angle_left_rate_hits` for righty batters."}, "doc.baseball_computer.pulled_rate": {"name": "pulled_rate", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_metric_calc.md", "original_file_path": "models/doc_metric_calc.md", "unique_id": "doc.baseball_computer.pulled_rate", "block_contents": "`angle_right_rate` for lefty batters\n    and `angle_left_rate` for righty batters."}, "doc.baseball_computer.coverage_weighted_pulled_batting_average": {"name": "coverage_weighted_pulled_batting_average", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_metric_calc.md", "original_file_path": "models/doc_metric_calc.md", "unique_id": "doc.baseball_computer.coverage_weighted_pulled_batting_average", "block_contents": "`coverage_weighted_angle_right_batting_average` for lefty batters\n    and `coverage_weighted_angle_left_batting_average` for righty batters."}, "doc.baseball_computer.opposite_field_rate_outs": {"name": "opposite_field_rate_outs", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_metric_calc.md", "original_file_path": "models/doc_metric_calc.md", "unique_id": "doc.baseball_computer.opposite_field_rate_outs", "block_contents": "`angle_left_rate_outs` for lefty batters\n    and `angle_right_rate_outs` for righty batters."}, "doc.baseball_computer.opposite_field_rate_hits": {"name": "opposite_field_rate_hits", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_metric_calc.md", "original_file_path": "models/doc_metric_calc.md", "unique_id": "doc.baseball_computer.opposite_field_rate_hits", "block_contents": "`angle_left_rate_hits` for lefty batters\n    and `angle_right_rate_hits` for righty batters."}, "doc.baseball_computer.opposite_field_rate": {"name": "opposite_field_rate", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_metric_calc.md", "original_file_path": "models/doc_metric_calc.md", "unique_id": "doc.baseball_computer.opposite_field_rate", "block_contents": "`angle_left_rate` for lefty batters\n    and `angle_right_rate` for righty batters."}, "doc.baseball_computer.coverage_weighted_opposite_field_batting_average": {"name": "coverage_weighted_opposite_field_batting_average", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_metric_calc.md", "original_file_path": "models/doc_metric_calc.md", "unique_id": "doc.baseball_computer.coverage_weighted_opposite_field_batting_average", "block_contents": "`coverage_weighted_angle_left_batting_average` for lefty batters\n    and `coverage_weighted_angle_right_batting_average` for righty batters."}, "doc.baseball_computer.stolen_base_attempt_rate_second": {"name": "stolen_base_attempt_rate_second", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_metric_calc.md", "original_file_path": "models/doc_metric_calc.md", "unique_id": "doc.baseball_computer.stolen_base_attempt_rate_second", "block_contents": "The rate of stolen base opportunities taken\n    when the runner was on first base (trying to steal second).\n    See `stolen_base_opportunities` for the definition."}, "doc.baseball_computer.stolen_base_attempt_rate_third": {"name": "stolen_base_attempt_rate_third", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_metric_calc.md", "original_file_path": "models/doc_metric_calc.md", "unique_id": "doc.baseball_computer.stolen_base_attempt_rate_third", "block_contents": "The rate of stolen base opportunities taken\n    when the runner was on second base (trying to steal third).\n    See `stolen_base_opportunities` for the definition."}, "doc.baseball_computer.stolen_base_attempt_rate_home": {"name": "stolen_base_attempt_rate_home", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_metric_calc.md", "original_file_path": "models/doc_metric_calc.md", "unique_id": "doc.baseball_computer.stolen_base_attempt_rate_home", "block_contents": "The rate of stolen base opportunities taken\n    when the runner was on third base (trying to steal home).\n    See `stolen_base_opportunities` for the definition."}, "doc.baseball_computer.unforced_out_rate": {"name": "unforced_out_rate", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_metric_calc.md", "original_file_path": "models/doc_metric_calc.md", "unique_id": "doc.baseball_computer.unforced_out_rate", "block_contents": "The rate of appearances on the basepaths that ended in an unforced out.\n    See `unforced_outs_on_basepaths` for the definition."}, "doc.baseball_computer.pitch_strike_rate": {"name": "pitch_strike_rate", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_metric_calc.md", "original_file_path": "models/doc_metric_calc.md", "unique_id": "doc.baseball_computer.pitch_strike_rate", "block_contents": "The rate of pitches that were strikes."}, "doc.baseball_computer.pitch_contact_rate": {"name": "pitch_contact_rate", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_metric_calc.md", "original_file_path": "models/doc_metric_calc.md", "unique_id": "doc.baseball_computer.pitch_contact_rate", "block_contents": "The rate of pitches where some kind of contact was made."}, "doc.baseball_computer.pitch_swing_rate": {"name": "pitch_swing_rate", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_metric_calc.md", "original_file_path": "models/doc_metric_calc.md", "unique_id": "doc.baseball_computer.pitch_swing_rate", "block_contents": "The rate of pitches where the batter swung (and either made\n    contact or missed)."}, "doc.baseball_computer.pitch_ball_rate": {"name": "pitch_ball_rate", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_metric_calc.md", "original_file_path": "models/doc_metric_calc.md", "unique_id": "doc.baseball_computer.pitch_ball_rate", "block_contents": "The rate of pitches that were balls."}, "doc.baseball_computer.pitch_swing_and_miss_rate": {"name": "pitch_swing_and_miss_rate", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_metric_calc.md", "original_file_path": "models/doc_metric_calc.md", "unique_id": "doc.baseball_computer.pitch_swing_and_miss_rate", "block_contents": "The rate of pitches where the batter swung and missed."}, "doc.baseball_computer.pitch_foul_rate": {"name": "pitch_foul_rate", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_metric_calc.md", "original_file_path": "models/doc_metric_calc.md", "unique_id": "doc.baseball_computer.pitch_foul_rate", "block_contents": "The rate of pitches that were fouled off."}, "doc.baseball_computer.pitched_called_strike_rate": {"name": "pitched_called_strike_rate", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_metric_calc.md", "original_file_path": "models/doc_metric_calc.md", "unique_id": "doc.baseball_computer.pitched_called_strike_rate", "block_contents": "The rate of pitches that were called strikes."}, "doc.baseball_computer.pitch_data_coverage_rate": {"name": "pitch_data_coverage_rate", "resource_type": "doc", "package_name": "baseball_computer", "path": "doc_metric_calc.md", "original_file_path": "models/doc_metric_calc.md", "unique_id": "doc.baseball_computer.pitch_data_coverage_rate", "block_contents": "The rate of plate appearances for which we have pitch-by-pitch data."}, "doc.baseball_computer.year_id": {"name": "year_id", "resource_type": "doc", "package_name": "baseball_computer", "path": "staging/baseballdatabank/doc.md", "original_file_path": "models/staging/baseballdatabank/doc.md", "unique_id": "doc.baseball_computer.year_id", "block_contents": "4-digit year"}, "doc.baseball_computer.league_id": {"name": "league_id", "resource_type": "doc", "package_name": "baseball_computer", "path": "staging/baseballdatabank/doc.md", "original_file_path": "models/staging/baseballdatabank/doc.md", "unique_id": "doc.baseball_computer.league_id", "block_contents": "League abbreviation"}, "doc.baseball_computer.stint": {"name": "stint", "resource_type": "doc", "package_name": "baseball_computer", "path": "staging/baseballdatabank/doc.md", "original_file_path": "models/staging/baseballdatabank/doc.md", "unique_id": "doc.baseball_computer.stint", "block_contents": "Nth team played for in a season. Increments with each team switch."}, "doc.baseball_computer.games": {"name": "games", "resource_type": "doc", "package_name": "baseball_computer", "path": "staging/baseballdatabank/doc.md", "original_file_path": "models/staging/baseballdatabank/doc.md", "unique_id": "doc.baseball_computer.games", "block_contents": "Games played"}, "doc.dbt.__overview__": {"name": "__overview__", "resource_type": "doc", "package_name": "dbt", "path": "overview.md", "original_file_path": "docs/overview.md", "unique_id": "doc.dbt.__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}, "doc.baseball_computer.__dbt_utils__": {"name": "__dbt_utils__", "resource_type": "doc", "package_name": "baseball_computer", "path": "overview.md", "original_file_path": "models/overview.md", "unique_id": "doc.baseball_computer.__dbt_utils__", "block_contents": "Used for internal development only."}, "doc.baseball_computer.__codegen__": {"name": "__codegen__", "resource_type": "doc", "package_name": "baseball_computer", "path": "overview.md", "original_file_path": "models/overview.md", "unique_id": "doc.baseball_computer.__codegen__", "block_contents": "Used for internal development only."}, "doc.baseball_computer.__overview__": {"name": "__overview__", "resource_type": "doc", "package_name": "baseball_computer", "path": "overview.md", "original_file_path": "models/overview.md", "unique_id": "doc.baseball_computer.__overview__", "block_contents": "# baseball.computer\n\nWelcome to the baseball.computer documentation site. The database uses a tool called `dbt` to build\nout all of its tables. `dbt` also allows us to write documentation and tests for each table as part of its configuration.\n\nThis documentation is still a work in progress, but the majority of columns (around 75%) are documented. While the database\nis still in preview, expect breaking changes to table/column names. As the project matures, these changes will be\nminimized and spelled out clearly with each release.\n\n## Getting started\nThe subset of tables below are a good places to get a feel for the database as well as some actually useful data.\ndbt's individual table pages, in addition to column documentation, also contain the SQL used to generate the table\nas well as the set of upstream and downstream dependencies.\n### Metrics tables\nThe metrics tables are currently the most useful tables in the database for getting aggregate player information.\nThere are currently 9 of these tables:\n\n#### Player career\n- [metrics_player_career_offense]('https://docs.baseball.computer/#!/model/model.baseball_computer.metrics_player_career_offense')\n- [metrics_player_career_pitching]('https://docs.baseball.computer/#!/model/model.baseball_computer.metrics_player_career_pitching')\n- [metrics_player_career_fielding]('https://docs.baseball.computer/#!/model/model.baseball_computer.metrics_player_career_fielding')\n#### Player season (separated by league)\n- [metrics_player_season_league_offense]('https://docs.baseball.computer/#!/model/model.baseball_computer.metrics_player_season_league_offense')\n- [metrics_player_season_league_pitching]('https://docs.baseball.computer/#!/model/model.baseball_computer.metrics_player_season_league_pitching')\n- [metrics_player_season_league_fielding]('https://docs.baseball.computer/#!/model/model.baseball_computer.metrics_player_season_league_fielding')\n#### Team season\n- [metrics_team_season_offense]('https://docs.baseball.computer/#!/model/model.baseball_computer.metrics_team_season_offense')\n- [metrics_team_season_pitching]('https://docs.baseball.computer/#!/model/model.baseball_computer.metrics_team_season_pitching')\n- [metrics_team_season_fielding]('https://docs.baseball.computer/#!/model/model.baseball_computer.metrics_team_season_fielding')\n\n### Event-level tables\nThe following tables will be the most useful for doing your own aggregations of event-level data:\n- [event_offense_stats](https://docs.baseball.computer/#!/model/model.baseball_computer.event_offense_stats)\n- [event_pitching_stats](https://docs.baseball.computer/#!/model/model.baseball_computer.event_pitching_stats)\n- [event_player_fielding_stats](https://docs.baseball.computer/#!/model/model.baseball_computer.event_player_fielding_stats)\n- [event_fielding_stats](https://docs.baseball.computer/#!/model/model.baseball_computer.event_fielding_stats)\n- [event_states_full](https://docs.baseball.computer/#!/model/model.baseball_computer.event_states_full)\n\n### Full history game-level tables\nThese tables include data for every game in MLB history, not just the ones for which we have event-level or box-level data.\n- [game_start_info](https://docs.baseball.computer/#!/model/model.baseball_computer.game_start_info)\n- [team_game_start_info](https://docs.baseball.computer/#!/model/model.baseball_computer.team_game_start_info)\n- [game_results](https://docs.baseball.computer/#!/model/model.baseball_computer.game_results)\n- [team_game_results](https://docs.baseball.computer/#!/model/model.baseball_computer.team_game_results)\n\n### Other interesting/useful tables:\n- [park_factors](https://docs.baseball.computer/#!/model/model.baseball_computer.park_factors) contains park factors calculated \nusing a batter-pitcher-matched-pair methodology (and a more standard aggregate methodology as a fallback for years with insufficient data).\n\n- [event_transition_values](https://docs.baseball.computer/#!/model/model.baseball_computer.event_transition_values) contains\nthe changes in run and win expectancy for each event in the database, which is calculated by several intermediate tables.\n\n- [unknown_fielding_play_shares](https://docs.baseball.computer/#!/model/model.baseball_computer.unknown_fielding_play_shares) provides\na basic heuristic estimate of how much weight to assign to each fielder on plays when the fielder is unknown.\n\n- [calc_batted_ball_type](https://docs.baseball.computer/#!/model/model.baseball_computer.calc_batted_ball_type) is an\nexample of a table that specifically focuses on applying complex logic to the event-level data to make it more useful downstream.\n\n### Staging and seed tables\nMoving all the way to the beginning of the pipeline, tables with the `main_models.stg_` prefix are staging tables. There is generally a 1:1 relationship between any staging table and an input\nfile to the database. The majority of tables in the database are built from a program that parses [Retrosheet](https://www.retrosheet.org/) event\ndata into a set of flat files. These tables will have the prefixes `stg_event` (for play-level data), `stg_game` (for game-level data),\nand `stg_box_score` (for data derived from Retrosheet's box-score files). There are also a handful of miscellaneous files that are\nbased directly on flat CSV files that Retrosheet provides: rosters, schedules, park data, etc.\n\nAn important additional source for data is the [Baseball Databank](http://seanlahman.com/download-baseball-database/). This data,\nalso released under a Creative Commons license, is specifically used in our case to provide season-level player data on the years between 1873 and 1900,\nwhich Retrosheet does not yet have. It also fills in some small gaps in Retrosheet's biographical information. These tables will have the prefix `stg_databank`.\n\nSeed tables, located in the `main_seeds` schema, are tables constructed out of small CSV files that live directly in the repository.\nThese files are used to build out taxonomies and additional metadata for important concepts like batted ball locations and outcome result types.\n\n### Analyses\nThe analyses folder contains sets of SQL queries that are either one-off calculations or not yet ready to be incorporated into the main\ndatabase. These are generally more experimental and less well-documented than the rest of the database, but feel free to poke around."}}, "exposures": {}, "metrics": {}, "groups": {}, "selectors": {}, "disabled": {}, "parent_map": {"model.baseball_computer.stg_parks": ["source.baseball_computer.misc.park"], "model.baseball_computer.stg_rosters": ["source.baseball_computer.misc.roster"], "model.baseball_computer.stg_gamelog": ["source.baseball_computer.misc.gamelog"], "model.baseball_computer.stg_schedule": ["source.baseball_computer.misc.schedule"], "model.baseball_computer.stg_bio": ["source.baseball_computer.misc.bio"], "model.baseball_computer.stg_databank_fielding_of": ["source.baseball_computer.baseballdatabank.fielding_of"], "model.baseball_computer.stg_databank_batting": ["source.baseball_computer.baseballdatabank.batting"], "model.baseball_computer.stg_people": ["source.baseball_computer.baseballdatabank.people"], "model.baseball_computer.stg_databank_fielding": ["source.baseball_computer.baseballdatabank.fielding"], "model.baseball_computer.stg_databank_pitching": ["source.baseball_computer.baseballdatabank.pitching"], "model.baseball_computer.stg_box_score_team_fielding_lines": ["source.baseball_computer.box_score.box_score_team_fielding_lines"], "model.baseball_computer.stg_box_score_double_plays": ["source.baseball_computer.box_score.box_score_double_plays"], "model.baseball_computer.stg_box_score_pitching_lines": ["source.baseball_computer.box_score.box_score_pitching_lines"], "model.baseball_computer.stg_box_score_comments": ["source.baseball_computer.box_score.box_score_comments"], "model.baseball_computer.stg_box_score_triple_plays": ["source.baseball_computer.box_score.box_score_triple_plays"], "model.baseball_computer.stg_box_score_stolen_bases": ["source.baseball_computer.box_score.box_score_stolen_bases"], "model.baseball_computer.stg_box_score_team_batting_lines": ["source.baseball_computer.box_score.box_score_team_batting_lines"], "model.baseball_computer.stg_box_score_caught_stealing": ["source.baseball_computer.box_score.box_score_caught_stealing"], "model.baseball_computer.stg_box_score_pinch_hitting_lines": ["source.baseball_computer.box_score.box_score_pinch_hitting_lines"], "model.baseball_computer.stg_box_score_team_miscellaneous_lines": ["source.baseball_computer.box_score.box_score_team_miscellaneous_lines"], "model.baseball_computer.stg_box_score_line_scores": ["source.baseball_computer.box_score.box_score_line_scores"], "model.baseball_computer.stg_box_score_hit_by_pitches": ["source.baseball_computer.box_score.box_score_hit_by_pitches"], "model.baseball_computer.stg_box_score_batting_lines": ["source.baseball_computer.box_score.box_score_batting_lines"], "model.baseball_computer.stg_box_score_fielding_lines": ["source.baseball_computer.box_score.box_score_fielding_lines"], "model.baseball_computer.stg_box_score_home_runs": ["source.baseball_computer.box_score.box_score_home_runs"], "model.baseball_computer.stg_box_score_pinch_running_lines": ["source.baseball_computer.box_score.box_score_pinch_running_lines"], "model.baseball_computer.stg_game_earned_runs": ["source.baseball_computer.game.game_earned_runs"], "model.baseball_computer.stg_game_lineup_appearances": ["source.baseball_computer.game.game_lineup_appearances"], "model.baseball_computer.stg_games": ["source.baseball_computer.box_score.box_score_games", "source.baseball_computer.game.games"], "model.baseball_computer.stg_game_fielding_appearances": ["source.baseball_computer.game.game_fielding_appearances"], "model.baseball_computer.stg_event_audit": ["source.baseball_computer.event.event_audit"], "model.baseball_computer.stg_event_pitch_sequences": ["source.baseball_computer.event.event_pitch_sequences"], "model.baseball_computer.stg_event_fielding_plays": ["source.baseball_computer.event.event_fielding_play"], "model.baseball_computer.stg_event_baserunners": ["source.baseball_computer.event.event_baserunners"], "model.baseball_computer.stg_event_comments": ["source.baseball_computer.event.event_comments"], "model.baseball_computer.stg_event_flags": ["source.baseball_computer.event.event_flags"], "model.baseball_computer.stg_events": ["source.baseball_computer.event.events"], "model.baseball_computer.player_team_season_pitching_stats": ["model.baseball_computer.player_game_pitching_stats", "model.baseball_computer.stg_databank_pitching", "model.baseball_computer.stg_games", "model.baseball_computer.stg_people"], "model.baseball_computer.player_position_team_season_fielding_stats": ["model.baseball_computer.player_position_game_fielding_stats", "model.baseball_computer.stg_databank_fielding", "model.baseball_computer.stg_databank_fielding_of", "model.baseball_computer.stg_games", "model.baseball_computer.stg_people"], "model.baseball_computer.team_season_fielding_stats": ["model.baseball_computer.game_start_info", "model.baseball_computer.player_position_team_season_fielding_stats", "model.baseball_computer.team_game_fielding_stats", "model.baseball_computer.team_game_start_info"], "model.baseball_computer.calc_park_factors_basic": ["model.baseball_computer.team_game_results", "model.baseball_computer.team_game_start_info"], "model.baseball_computer.park_factors": ["model.baseball_computer.calc_park_factors_advanced", "model.baseball_computer.calc_park_factors_basic"], "model.baseball_computer.calc_park_factors_advanced": ["model.baseball_computer.event_offense_stats", "model.baseball_computer.event_states_full", "model.baseball_computer.game_start_info"], "model.baseball_computer.event_pitching_flags": ["model.baseball_computer.event_states_full"], "model.baseball_computer.ml_event_outcomes": ["model.baseball_computer.calc_batted_ball_type", "model.baseball_computer.game_results", "model.baseball_computer.stg_event_baserunners", "model.baseball_computer.stg_events", "seed.baseball_computer.seed_baserunning_play_types", "seed.baseball_computer.seed_plate_appearance_result_types"], "model.baseball_computer.ml_features": ["model.baseball_computer.event_states_full", "model.baseball_computer.ml_event_outcomes"], "model.baseball_computer.linear_weights": ["model.baseball_computer.event_transition_values", "model.baseball_computer.stg_event_baserunners", "model.baseball_computer.stg_events", "model.baseball_computer.team_game_results", "seed.baseball_computer.seed_baserunning_play_types", "seed.baseball_computer.seed_plate_appearance_result_types"], "model.baseball_computer.event_transition_values": ["model.baseball_computer.event_states_full", "model.baseball_computer.run_expectancy_matrix", "model.baseball_computer.win_expectancy_matrix"], "model.baseball_computer.unknown_fielding_play_shares": ["model.baseball_computer.calc_fielding_play_agg", "model.baseball_computer.player_position_game_fielding_stats", "model.baseball_computer.stg_events", "model.baseball_computer.team_game_fielding_stats"], "model.baseball_computer.leverage_index": ["model.baseball_computer.event_transition_values"], "model.baseball_computer.win_expectancy_matrix": ["model.baseball_computer.event_states_full"], "model.baseball_computer.run_expectancy_matrix": ["model.baseball_computer.event_states_full"], "model.baseball_computer.player_game_appearances": ["model.baseball_computer.stg_box_score_batting_lines", "model.baseball_computer.stg_box_score_fielding_lines", "model.baseball_computer.stg_box_score_pinch_hitting_lines", "model.baseball_computer.stg_box_score_pinch_running_lines", "model.baseball_computer.stg_game_fielding_appearances", "model.baseball_computer.stg_game_lineup_appearances", "model.baseball_computer.stg_games"], "model.baseball_computer.player_game_offense_stats": ["model.baseball_computer.event_offense_stats", "model.baseball_computer.game_start_info", "model.baseball_computer.stg_box_score_batting_lines"], "model.baseball_computer.player_game_pitching_stats": ["model.baseball_computer.event_pitching_flags", "model.baseball_computer.event_pitching_stats", "model.baseball_computer.stg_box_score_pitching_lines", "model.baseball_computer.stg_game_earned_runs", "model.baseball_computer.stg_games"], "model.baseball_computer.player_position_game_fielding_stats": ["model.baseball_computer.event_player_fielding_stats", "model.baseball_computer.player_game_appearances", "model.baseball_computer.stg_box_score_fielding_lines", "model.baseball_computer.stg_games"], "model.baseball_computer.personnel_fielding_states": ["model.baseball_computer.stg_game_fielding_appearances", "model.baseball_computer.stg_games"], "model.baseball_computer.event_states_batter_pitcher": ["model.baseball_computer.people", "model.baseball_computer.stg_events", "model.baseball_computer.stg_game_fielding_appearances"], "model.baseball_computer.event_score_states": ["model.baseball_computer.stg_events"], "model.baseball_computer.event_count_states": [], "model.baseball_computer.event_fielders_flat": ["model.baseball_computer.event_personnel_lookup", "model.baseball_computer.personnel_fielding_states"], "model.baseball_computer.personnel_lineup_states": ["model.baseball_computer.stg_game_lineup_appearances", "model.baseball_computer.stg_games"], "model.baseball_computer.event_personnel_lookup": ["model.baseball_computer.personnel_fielding_states", "model.baseball_computer.personnel_lineup_states", "model.baseball_computer.stg_events"], "model.baseball_computer.event_base_out_states": ["model.baseball_computer.stg_event_baserunners", "model.baseball_computer.stg_events", "seed.baseball_computer.seed_base_state_info"], "model.baseball_computer.game_starting_lineups": ["model.baseball_computer.stg_box_score_batting_lines", "model.baseball_computer.stg_box_score_fielding_lines", "model.baseball_computer.stg_game_fielding_appearances", "model.baseball_computer.stg_game_lineup_appearances"], "model.baseball_computer.team_game_fielding_stats": ["model.baseball_computer.event_fielding_stats", "model.baseball_computer.player_position_game_fielding_stats", "model.baseball_computer.stg_box_score_caught_stealing", "model.baseball_computer.stg_box_score_double_plays", "model.baseball_computer.stg_box_score_stolen_bases", "model.baseball_computer.stg_box_score_team_fielding_lines", "model.baseball_computer.stg_box_score_triple_plays", "model.baseball_computer.team_game_start_info"], "model.baseball_computer.game_forfeits": ["model.baseball_computer.stg_box_score_comments", "model.baseball_computer.stg_event_comments", "model.baseball_computer.stg_events", "model.baseball_computer.stg_gamelog"], "model.baseball_computer.game_suspensions": ["model.baseball_computer.stg_box_score_comments", "model.baseball_computer.stg_event_comments", "model.baseball_computer.stg_events"], "model.baseball_computer.team_game_pitching_stats": ["model.baseball_computer.player_game_pitching_stats"], "model.baseball_computer.team_game_offense_stats": ["model.baseball_computer.player_game_offense_stats"], "model.baseball_computer.game_line_scores": ["model.baseball_computer.event_states_full", "model.baseball_computer.stg_box_score_line_scores", "model.baseball_computer.stg_box_score_pitching_lines"], "model.baseball_computer.game_scorekeeping": ["model.baseball_computer.stg_games", "seed.baseball_computer.seed_franchises", "seed.baseball_computer.seed_scorer_disambiguation", "seed.baseball_computer.seed_scorer_lookup", "seed.baseball_computer.seed_scorer_numerical_ranges"], "model.baseball_computer.event_double_plays": ["model.baseball_computer.stg_event_flags", "seed.baseball_computer.seed_double_play_flag_types"], "model.baseball_computer.event_baserunning_stats": ["model.baseball_computer.stg_event_baserunners", "model.baseball_computer.stg_events", "seed.baseball_computer.seed_baserunner_info", "seed.baseball_computer.seed_bases_info", "seed.baseball_computer.seed_plate_appearance_result_types"], "model.baseball_computer.event_batted_ball_stats": ["model.baseball_computer.calc_batted_ball_type", "model.baseball_computer.event_states_batter_pitcher"], "model.baseball_computer.event_batting_stats": ["model.baseball_computer.event_double_plays", "model.baseball_computer.stg_event_flags", "model.baseball_computer.stg_events", "seed.baseball_computer.seed_plate_appearance_result_types"], "model.baseball_computer.event_run_assignment_stats": ["model.baseball_computer.event_baserunning_stats", "model.baseball_computer.event_states_batter_pitcher", "model.baseball_computer.stg_events"], "model.baseball_computer.calc_batted_ball_type": ["model.baseball_computer.calc_fielding_play_agg", "model.baseball_computer.stg_events", "seed.baseball_computer.seed_hit_location_categories", "seed.baseball_computer.seed_hit_to_fielder_categories", "seed.baseball_computer.seed_plate_appearance_trajectories"], "model.baseball_computer.event_pitch_sequence_stats": ["model.baseball_computer.stg_event_baserunners", "model.baseball_computer.stg_event_pitch_sequences", "seed.baseball_computer.seed_pitch_types"], "model.baseball_computer.calc_fielding_play_agg": ["model.baseball_computer.stg_event_fielding_plays", "model.baseball_computer.stg_events"], "analysis.baseball_computer.hit_vs_out_spray_air": ["model.baseball_computer.calc_batted_ball_type", "model.baseball_computer.event_offense_stats", "model.baseball_computer.event_states_full"], "analysis.baseball_computer.ground_ball_blame": ["model.baseball_computer.calc_batted_ball_type", "model.baseball_computer.event_offense_stats", "model.baseball_computer.event_states_full"], "analysis.baseball_computer.babip_by_count": ["model.baseball_computer.calc_batted_ball_type", "model.baseball_computer.event_offense_stats", "model.baseball_computer.event_states_full"], "analysis.baseball_computer.gb_babip_correlations": ["model.baseball_computer.event_pitching_stats", "model.baseball_computer.game_start_info", "model.baseball_computer.people"], "analysis.baseball_computer.runner_advance_expectancy": ["model.baseball_computer.calc_batted_ball_type", "model.baseball_computer.event_baserunning_stats", "model.baseball_computer.stg_events", "seed.baseball_computer.seed_plate_appearance_result_types"], "analysis.baseball_computer.outfield_hits": ["model.baseball_computer.calc_batted_ball_type", "model.baseball_computer.event_offense_stats", "model.baseball_computer.event_states_full"], "analysis.baseball_computer.fielder_location_shares": ["model.baseball_computer.calc_batted_ball_type", "model.baseball_computer.event_offense_stats", "model.baseball_computer.event_states_full"], "analysis.baseball_computer.fielder_advance_expectancy": ["model.baseball_computer.calc_batted_ball_type", "model.baseball_computer.event_baserunning_stats", "model.baseball_computer.event_player_fielding_stats", "model.baseball_computer.game_start_info", "model.baseball_computer.stg_events", "seed.baseball_computer.seed_plate_appearance_result_types"], "analysis.baseball_computer.scratch": ["model.baseball_computer.calc_batted_ball_type", "model.baseball_computer.event_offense_stats", "model.baseball_computer.game_scorekeeping", "model.baseball_computer.game_start_info", "model.baseball_computer.metrics_player_career_offense", "model.baseball_computer.player_game_offense_stats", "model.baseball_computer.stg_events"], "analysis.baseball_computer.player_completeness": [], "analysis.baseball_computer.ground_ball_hits": ["model.baseball_computer.event_pitching_stats", "model.baseball_computer.stg_games"], "analysis.baseball_computer.hit_vs_out_spray": ["model.baseball_computer.calc_batted_ball_type", "model.baseball_computer.event_offense_stats", "model.baseball_computer.event_states_full"], "analysis.baseball_computer.calc_park_factor_plate_appearances": ["model.baseball_computer.event_offense_stats", "model.baseball_computer.event_states_full", "model.baseball_computer.game_start_info"], "analysis.baseball_computer.calc_park_factor_trajectory_outs": ["model.baseball_computer.event_offense_stats", "model.baseball_computer.event_states_full", "model.baseball_computer.game_start_info"], "analysis.baseball_computer.calc_park_factor_outs": ["model.baseball_computer.event_offense_stats", "model.baseball_computer.event_states_full", "model.baseball_computer.game_start_info"], "analysis.baseball_computer.calc_park_factor_out_location": ["model.baseball_computer.event_offense_stats", "model.baseball_computer.event_states_full", "model.baseball_computer.game_start_info"], "analysis.baseball_computer.calc_park_factor_hit_location": ["model.baseball_computer.event_offense_stats", "model.baseball_computer.event_states_full", "model.baseball_computer.game_start_info"], "analysis.baseball_computer.calc_park_factor_in_play": ["model.baseball_computer.event_offense_stats", "model.baseball_computer.event_states_full", "model.baseball_computer.game_start_info"], "analysis.baseball_computer.unknown_play_no_box": ["model.baseball_computer.calc_fielding_play_agg", "model.baseball_computer.game_start_info", "model.baseball_computer.stg_box_score_fielding_lines", "model.baseball_computer.stg_event_audit", "model.baseball_computer.stg_games"], "analysis.baseball_computer.unknown_plays": ["model.baseball_computer.event_fielding_stats", "model.baseball_computer.stg_event_audit", "model.baseball_computer.stg_games", "model.baseball_computer.team_game_start_info"], "analysis.baseball_computer.putout_innings_gaps": ["model.baseball_computer.event_fielding_stats", "model.baseball_computer.team_game_results"], "analysis.baseball_computer.assists_as_putouts_finder": ["model.baseball_computer.calc_fielding_play_agg", "model.baseball_computer.event_fielding_stats", "model.baseball_computer.game_start_info", "model.baseball_computer.stg_event_audit", "model.baseball_computer.stg_event_flags", "model.baseball_computer.stg_events", "model.baseball_computer.stg_games"], "analysis.baseball_computer.box_event_fielding_discrepancies": ["model.baseball_computer.event_fielding_stats", "model.baseball_computer.player_position_game_fielding_stats", "model.baseball_computer.stg_event_audit", "model.baseball_computer.stg_games"], "analysis.baseball_computer.scorekeeper_tendencies_location": ["model.baseball_computer.event_offense_stats", "model.baseball_computer.event_states_full", "model.baseball_computer.game_scorekeeping", "model.baseball_computer.leverage_index", "model.baseball_computer.stg_events"], "analysis.baseball_computer.scorekeeper_tendencies_batter": ["model.baseball_computer.event_offense_stats"], "analysis.baseball_computer.scorekeeper_tendencies_contact": ["model.baseball_computer.event_offense_stats", "model.baseball_computer.game_scorekeeping", "model.baseball_computer.stg_events"], "analysis.baseball_computer.most_blown_save_rbi": ["model.baseball_computer.event_offense_stats", "model.baseball_computer.event_pitching_flags"], "analysis.baseball_computer.event_completeness_fielding_credit": ["model.baseball_computer.stg_event_fielding_plays", "model.baseball_computer.stg_events"], "analysis.baseball_computer.player_game_data_completeness": ["model.baseball_computer.calc_batted_ball_type", "model.baseball_computer.game_start_info", "model.baseball_computer.stg_events", "seed.baseball_computer.seed_plate_appearance_result_types"], "analysis.baseball_computer.event_completeness_batted_balls": ["model.baseball_computer.stg_events", "seed.baseball_computer.seed_hit_location_categories", "seed.baseball_computer.seed_plate_appearance_result_types", "seed.baseball_computer.seed_plate_appearance_trajectories"], "analysis.baseball_computer.game_data_completeness": ["model.baseball_computer.calc_batted_ball_type", "model.baseball_computer.game_start_info", "model.baseball_computer.stg_events", "seed.baseball_computer.seed_plate_appearance_result_types"], "analysis.baseball_computer.event_completeness_pitches": ["model.baseball_computer.stg_event_pitch_sequences", "model.baseball_computer.stg_events", "seed.baseball_computer.seed_pitch_types"], "seed.baseball_computer.seed_stat_categories": [], "seed.baseball_computer.seed_us_states_regions": [], "seed.baseball_computer.seed_plate_appearance_result_types": [], "seed.baseball_computer.seed_country_regions": [], "seed.baseball_computer.seed_pitch_types": [], "seed.baseball_computer.seed_franchises": [], "seed.baseball_computer.seed_game_types": [], "seed.baseball_computer.seed_double_play_flag_types": [], "seed.baseball_computer.seed_hit_location_categories": [], "seed.baseball_computer.seed_hit_to_fielder_categories": [], "seed.baseball_computer.seed_hit_location_angles": [], "seed.baseball_computer.seed_hit_location_alignments": [], "seed.baseball_computer.seed_outfield_hit_inference": [], "seed.baseball_computer.seed_hit_location_distance_buckets": [], "seed.baseball_computer.seed_plate_appearance_trajectories": [], "seed.baseball_computer.seed_baserunner_info": [], "seed.baseball_computer.seed_bases_info": [], "seed.baseball_computer.seed_baserunning_play_types": [], "seed.baseball_computer.seed_base_state_info": [], "seed.baseball_computer.seed_scorer_numerical_ranges": [], "seed.baseball_computer.seed_scorer_disambiguation": [], "seed.baseball_computer.seed_scorer_lookup": [], "test.baseball_computer.relationships_stg_game_lineup_appearances_game_id__game_id__ref_stg_games_.e186087a87": ["model.baseball_computer.stg_game_lineup_appearances", "model.baseball_computer.stg_games"], "test.baseball_computer.relationships_stg_game_lineup_appearances_player_id__player_id__ref_stg_bio_.032a75b5cb": ["model.baseball_computer.stg_bio", "model.baseball_computer.stg_game_lineup_appearances"], "test.baseball_computer.relationships_stg_game_earned_runs_game_id__game_id__ref_stg_games_.a12c168f7b": ["model.baseball_computer.stg_game_earned_runs", "model.baseball_computer.stg_games"], "test.baseball_computer.relationships_stg_games_park_id__park_id__ref_stg_parks_.670e6f218e": ["model.baseball_computer.stg_games", "model.baseball_computer.stg_parks"], "test.baseball_computer.not_null_stg_games_park_id.5fec03cb29": ["model.baseball_computer.stg_games"], "test.baseball_computer.relationships_stg_game_fielding_appearances_game_id__game_id__ref_stg_games_.53b862f062": ["model.baseball_computer.stg_game_fielding_appearances", "model.baseball_computer.stg_games"], "test.baseball_computer.relationships_stg_game_fielding_appearances_player_id__player_id__ref_stg_bio_.c79c4af955": ["model.baseball_computer.stg_bio", "model.baseball_computer.stg_game_fielding_appearances"], "test.baseball_computer.relationships_stg_event_pitch_sequences_game_id__game_id__ref_stg_games_.41a391d15a": ["model.baseball_computer.stg_event_pitch_sequences", "model.baseball_computer.stg_games"], "test.baseball_computer.relationships_stg_event_pitch_sequences_event_key__event_key__ref_stg_events_.6567690dc0": ["model.baseball_computer.stg_event_pitch_sequences", "model.baseball_computer.stg_events"], "test.baseball_computer.relationships_stg_event_audit_event_key__event_key__ref_stg_events_.c365ebf19a": ["model.baseball_computer.stg_event_audit", "model.baseball_computer.stg_events"], "test.baseball_computer.relationships_stg_events_game_id__game_id__ref_stg_games_.2ff9f22170": ["model.baseball_computer.stg_events", "model.baseball_computer.stg_games"], "test.baseball_computer.relationships_stg_event_fielding_plays_game_id__game_id__ref_stg_games_.377518fe2c": ["model.baseball_computer.stg_event_fielding_plays", "model.baseball_computer.stg_games"], "test.baseball_computer.relationships_stg_event_fielding_plays_event_key__event_key__ref_stg_events_.da88649ba4": ["model.baseball_computer.stg_event_fielding_plays", "model.baseball_computer.stg_events"], "test.baseball_computer.relationships_stg_event_baserunners_game_id__game_id__ref_stg_games_.d70abfb1df": ["model.baseball_computer.stg_event_baserunners", "model.baseball_computer.stg_games"], "test.baseball_computer.relationships_stg_event_baserunners_event_key__event_key__ref_stg_events_.44661689b8": ["model.baseball_computer.stg_event_baserunners", "model.baseball_computer.stg_events"], "test.baseball_computer.relationships_stg_event_comments_event_key__event_key__ref_stg_events_.10a708d8a1": ["model.baseball_computer.stg_event_comments", "model.baseball_computer.stg_events"], "test.baseball_computer.dbt_utils_not_null_proportion_event_transition_values_0_999__expected_runs_change.1f88bb4978": ["model.baseball_computer.event_transition_values"], "test.baseball_computer.dbt_utils_not_null_proportion_event_transition_values_0_999__expected_home_win_change.c38533e897": ["model.baseball_computer.event_transition_values"], "test.baseball_computer.dbt_utils_not_null_proportion_event_transition_values_0_999__expected_batting_win_change.a7ac9d0c20": ["model.baseball_computer.event_transition_values"], "test.baseball_computer.dbt_utils_not_null_proportion_player_position_game_fielding_stats_0_995__outs_played.8bb7eb59b4": ["model.baseball_computer.player_position_game_fielding_stats"], "test.baseball_computer.dbt_utils_not_null_proportion_player_position_game_fielding_stats_0_995__putouts.9e00a6ab61": ["model.baseball_computer.player_position_game_fielding_stats"], "test.baseball_computer.dbt_utils_not_null_proportion_player_position_game_fielding_stats_0_995__assists.a29066a509": ["model.baseball_computer.player_position_game_fielding_stats"], "test.baseball_computer.dbt_utils_not_null_proportion_player_position_game_fielding_stats_0_995__errors.8eea9cbcc8": ["model.baseball_computer.player_position_game_fielding_stats"], "test.baseball_computer.dbt_utils_not_null_proportion_player_position_game_fielding_stats_0_995__double_plays.5724973f8f": ["model.baseball_computer.player_position_game_fielding_stats"], "test.baseball_computer.dbt_utils_not_null_proportion_player_position_game_fielding_stats_0_995__triple_plays.534ecb7a2b": ["model.baseball_computer.player_position_game_fielding_stats"], "test.baseball_computer.dbt_utils_not_null_proportion_player_position_game_fielding_stats_0_93__stolen_bases.d6787fbb17": ["model.baseball_computer.player_position_game_fielding_stats"], "test.baseball_computer.dbt_utils_not_null_proportion_player_position_game_fielding_stats_0_93__caught_stealing.5f9f3af801": ["model.baseball_computer.player_position_game_fielding_stats"], "test.baseball_computer.accepted_values_calc_batted_ball_type_location_edge__Left__Middle__Right__Unknown.c9ef91bfc9": ["model.baseball_computer.calc_batted_ball_type"], "test.baseball_computer.source_not_null_misc_park_park_id.6eb47dd84e": ["source.baseball_computer.misc.park"], "test.baseball_computer.source_unique_misc_park_park_id.ab6b1ee1d3": ["source.baseball_computer.misc.park"], "test.baseball_computer.source_not_null_misc_park_name.cb07f266fc": ["source.baseball_computer.misc.park"], "test.baseball_computer.source_not_null_misc_park_city.dd95bd0af9": ["source.baseball_computer.misc.park"], "test.baseball_computer.source_not_null_misc_park_start_date.7ab9b2c116": ["source.baseball_computer.misc.park"], "test.baseball_computer.source_not_null_misc_roster_year.944fe03dad": ["source.baseball_computer.misc.roster"], "test.baseball_computer.source_not_null_misc_roster_player_id.a4e0bf60be": ["source.baseball_computer.misc.roster"], "test.baseball_computer.source_not_null_misc_roster_last_name.2016310734": ["source.baseball_computer.misc.roster"], "test.baseball_computer.source_not_null_misc_roster_team_id.251ed96cc3": ["source.baseball_computer.misc.roster"], "test.baseball_computer.source_not_null_misc_roster_position.0abc3727ad": ["source.baseball_computer.misc.roster"], "test.baseball_computer.source_unique_baseballdatabank_people_playerid.028c893cc1": ["source.baseball_computer.baseballdatabank.people"], "test.baseball_computer.source_not_null_baseballdatabank_people_playerid.15b902dc68": ["source.baseball_computer.baseballdatabank.people"], "test.baseball_computer.source_unique_baseballdatabank_people_retro_id.dd8c06d204": ["source.baseball_computer.baseballdatabank.people"], "test.baseball_computer.source_unique_baseballdatabank_people_bbrefid.ae622725ff": ["source.baseball_computer.baseballdatabank.people"], "test.baseball_computer.source_not_null_box_score_box_score_batting_lines_game_id.57dbc78fca": ["source.baseball_computer.box_score.box_score_batting_lines"], "test.baseball_computer.source_not_null_box_score_box_score_batting_lines_batter_id.d0f6fb2a89": ["source.baseball_computer.box_score.box_score_batting_lines"], "test.baseball_computer.source_not_null_box_score_box_score_batting_lines_side.002275cba3": ["source.baseball_computer.box_score.box_score_batting_lines"], "test.baseball_computer.source_not_null_box_score_box_score_batting_lines_lineup_position.ad36913951": ["source.baseball_computer.box_score.box_score_batting_lines"], "test.baseball_computer.source_not_null_box_score_box_score_batting_lines_nth_player_at_position.b79200b54d": ["source.baseball_computer.box_score.box_score_batting_lines"], "test.baseball_computer.source_not_null_box_score_box_score_batting_lines_at_bats.b6d88915f8": ["source.baseball_computer.box_score.box_score_batting_lines"], "test.baseball_computer.source_not_null_box_score_box_score_caught_stealing_game_id.6f95dd8a54": ["source.baseball_computer.box_score.box_score_caught_stealing"], "test.baseball_computer.source_not_null_box_score_box_score_caught_stealing_running_side.e9ccccfdf3": ["source.baseball_computer.box_score.box_score_caught_stealing"], "test.baseball_computer.source_not_null_box_score_box_score_caught_stealing_runner_id.f0b3ec2fc3": ["source.baseball_computer.box_score.box_score_caught_stealing"], "test.baseball_computer.source_not_null_box_score_box_score_double_plays_game_id.3eb854846f": ["source.baseball_computer.box_score.box_score_double_plays"], "test.baseball_computer.source_not_null_box_score_box_score_double_plays_defense_side.cea8fd9283": ["source.baseball_computer.box_score.box_score_double_plays"], "test.baseball_computer.source_not_null_box_score_box_score_fielding_lines_game_id.8a41130214": ["source.baseball_computer.box_score.box_score_fielding_lines"], "test.baseball_computer.source_not_null_box_score_box_score_fielding_lines_fielder_id.cf9c2b33ad": ["source.baseball_computer.box_score.box_score_fielding_lines"], "test.baseball_computer.source_not_null_box_score_box_score_fielding_lines_side.c31b2fa481": ["source.baseball_computer.box_score.box_score_fielding_lines"], "test.baseball_computer.source_not_null_box_score_box_score_fielding_lines_fielding_position.1a91f0160e": ["source.baseball_computer.box_score.box_score_fielding_lines"], "test.baseball_computer.source_not_null_box_score_box_score_fielding_lines_nth_position_played_by_player.3dc8b9aa9e": ["source.baseball_computer.box_score.box_score_fielding_lines"], "test.baseball_computer.source_unique_box_score_box_score_games_game_id.b94243eaff": ["source.baseball_computer.box_score.box_score_games"], "test.baseball_computer.source_not_null_box_score_box_score_games_game_id.44872eca82": ["source.baseball_computer.box_score.box_score_games"], "test.baseball_computer.source_not_null_box_score_box_score_games_game_key.76f62a5ea0": ["source.baseball_computer.box_score.box_score_games"], "test.baseball_computer.source_unique_box_score_box_score_games_game_key.a9054ce21a": ["source.baseball_computer.box_score.box_score_games"], "test.baseball_computer.source_not_null_box_score_box_score_games_date.4e354fb03d": ["source.baseball_computer.box_score.box_score_games"], "test.baseball_computer.source_not_null_box_score_box_score_games_doubleheader_status.d596eb38d8": ["source.baseball_computer.box_score.box_score_games"], "test.baseball_computer.source_not_null_box_score_box_score_games_time_of_day.c0265c9214": ["source.baseball_computer.box_score.box_score_games"], "test.baseball_computer.source_not_null_box_score_box_score_games_game_type.bec21d95d6": ["source.baseball_computer.box_score.box_score_games"], "test.baseball_computer.source_not_null_box_score_box_score_games_bat_first_side.f20df82299": ["source.baseball_computer.box_score.box_score_games"], "test.baseball_computer.source_not_null_box_score_box_score_games_sky.d531881035": ["source.baseball_computer.box_score.box_score_games"], "test.baseball_computer.source_not_null_box_score_box_score_games_field_condition.db9cd2b113": ["source.baseball_computer.box_score.box_score_games"], "test.baseball_computer.source_not_null_box_score_box_score_games_precipitation.b66a143e37": ["source.baseball_computer.box_score.box_score_games"], "test.baseball_computer.source_not_null_box_score_box_score_games_wind_direction.61c0ecd269": ["source.baseball_computer.box_score.box_score_games"], "test.baseball_computer.source_not_null_box_score_box_score_games_park_id.2bbc694559": ["source.baseball_computer.box_score.box_score_games"], "test.baseball_computer.source_not_null_box_score_box_score_games_use_dh.0576fbd0ba": ["source.baseball_computer.box_score.box_score_games"], "test.baseball_computer.source_not_null_box_score_box_score_games_scoring_method.2983bc45ed": ["source.baseball_computer.box_score.box_score_games"], "test.baseball_computer.source_not_null_box_score_box_score_games_account_type.ee49ce5d5e": ["source.baseball_computer.box_score.box_score_games"], "test.baseball_computer.source_not_null_box_score_box_score_games_away_team_id.3db65a46ed": ["source.baseball_computer.box_score.box_score_games"], "test.baseball_computer.source_not_null_box_score_box_score_games_home_team_id.7a5b9e78fc": ["source.baseball_computer.box_score.box_score_games"], "test.baseball_computer.source_not_null_box_score_box_score_home_runs_game_id.e28865fff5": ["source.baseball_computer.box_score.box_score_home_runs"], "test.baseball_computer.source_not_null_box_score_box_score_home_runs_batting_side.d8a1a565f0": ["source.baseball_computer.box_score.box_score_home_runs"], "test.baseball_computer.source_not_null_box_score_box_score_home_runs_batter_id.61a8db5c58": ["source.baseball_computer.box_score.box_score_home_runs"], "test.baseball_computer.source_not_null_box_score_box_score_home_runs_pitcher_id.469cea3d74": ["source.baseball_computer.box_score.box_score_home_runs"], "test.baseball_computer.source_not_null_box_score_box_score_pinch_hitting_lines_game_id.162a4e38b5": ["source.baseball_computer.box_score.box_score_pinch_hitting_lines"], "test.baseball_computer.source_not_null_box_score_box_score_pinch_hitting_lines_pinch_hitter_id.bae1f38990": ["source.baseball_computer.box_score.box_score_pinch_hitting_lines"], "test.baseball_computer.source_not_null_box_score_box_score_pinch_hitting_lines_side.d772416d56": ["source.baseball_computer.box_score.box_score_pinch_hitting_lines"], "test.baseball_computer.source_not_null_box_score_box_score_pinch_running_lines_game_id.08777674e3": ["source.baseball_computer.box_score.box_score_pinch_running_lines"], "test.baseball_computer.source_not_null_box_score_box_score_pinch_running_lines_pinch_runner_id.b0d9ccfc3e": ["source.baseball_computer.box_score.box_score_pinch_running_lines"], "test.baseball_computer.source_not_null_box_score_box_score_stolen_bases_game_id.026246df9e": ["source.baseball_computer.box_score.box_score_stolen_bases"], "test.baseball_computer.source_not_null_box_score_box_score_stolen_bases_running_side.c2c5c13135": ["source.baseball_computer.box_score.box_score_stolen_bases"], "test.baseball_computer.source_not_null_box_score_box_score_stolen_bases_runner_id.c702a78489": ["source.baseball_computer.box_score.box_score_stolen_bases"], "test.baseball_computer.source_not_null_box_score_box_score_team_batting_lines_game_id.bd95c834cc": ["source.baseball_computer.box_score.box_score_team_batting_lines"], "test.baseball_computer.source_not_null_box_score_box_score_team_batting_lines_side.804ee6c99a": ["source.baseball_computer.box_score.box_score_team_batting_lines"], "test.baseball_computer.source_not_null_box_score_box_score_team_batting_lines_at_bats.0a61108426": ["source.baseball_computer.box_score.box_score_team_batting_lines"], "test.baseball_computer.source_not_null_box_score_box_score_team_batting_lines_runs.eb5d3c40d4": ["source.baseball_computer.box_score.box_score_team_batting_lines"], "test.baseball_computer.source_not_null_box_score_box_score_team_batting_lines_hits.a6fddad181": ["source.baseball_computer.box_score.box_score_team_batting_lines"], "test.baseball_computer.source_not_null_box_score_box_score_team_fielding_lines_game_id.8437d7158c": ["source.baseball_computer.box_score.box_score_team_fielding_lines"], "test.baseball_computer.source_not_null_box_score_box_score_team_fielding_lines_side.7918cf72f9": ["source.baseball_computer.box_score.box_score_team_fielding_lines"], "test.baseball_computer.source_not_null_box_score_box_score_team_fielding_lines_outs_played.14ebdb3b7b": ["source.baseball_computer.box_score.box_score_team_fielding_lines"], "test.baseball_computer.source_not_null_box_score_box_score_team_miscellaneous_lines_game_id.fcda3e41c8": ["source.baseball_computer.box_score.box_score_team_miscellaneous_lines"], "test.baseball_computer.source_not_null_box_score_box_score_team_miscellaneous_lines_side.40c4727a51": ["source.baseball_computer.box_score.box_score_team_miscellaneous_lines"], "test.baseball_computer.source_not_null_box_score_box_score_triple_plays_game_id.bcc2a3622b": ["source.baseball_computer.box_score.box_score_triple_plays"], "test.baseball_computer.source_not_null_box_score_box_score_triple_plays_defense_side.2eec5d74dc": ["source.baseball_computer.box_score.box_score_triple_plays"], "test.baseball_computer.source_not_null_box_score_box_score_comments_game_id.ee9b68198f": ["source.baseball_computer.box_score.box_score_comments"], "test.baseball_computer.source_not_null_box_score_box_score_comments_sequence_id.61b7b70a39": ["source.baseball_computer.box_score.box_score_comments"], "test.baseball_computer.source_not_null_box_score_box_score_comments_comment.27f5650bb2": ["source.baseball_computer.box_score.box_score_comments"], "test.baseball_computer.source_unique_game_games_game_id.ed73a19cd5": ["source.baseball_computer.game.games"], "test.baseball_computer.source_not_null_game_games_game_id.2418071e8e": ["source.baseball_computer.game.games"], "test.baseball_computer.source_not_null_game_games_game_key.888d752037": ["source.baseball_computer.game.games"], "test.baseball_computer.source_unique_game_games_game_key.caa87137ff": ["source.baseball_computer.game.games"], "test.baseball_computer.source_not_null_game_games_date.742eb9e3c2": ["source.baseball_computer.game.games"], "test.baseball_computer.source_not_null_game_games_doubleheader_status.053829553b": ["source.baseball_computer.game.games"], "test.baseball_computer.source_not_null_game_games_time_of_day.c9113d1123": ["source.baseball_computer.game.games"], "test.baseball_computer.source_not_null_game_games_game_type.8ba97fed9b": ["source.baseball_computer.game.games"], "test.baseball_computer.source_not_null_game_games_bat_first_side.91b0360bdd": ["source.baseball_computer.game.games"], "test.baseball_computer.source_not_null_game_games_sky.d1e4d31777": ["source.baseball_computer.game.games"], "test.baseball_computer.source_not_null_game_games_field_condition.68aa42357b": ["source.baseball_computer.game.games"], "test.baseball_computer.source_not_null_game_games_precipitation.53cfe6a1d5": ["source.baseball_computer.game.games"], "test.baseball_computer.source_not_null_game_games_wind_direction.28ae0e1ff6": ["source.baseball_computer.game.games"], "test.baseball_computer.source_not_null_game_games_park_id.ae1e9e1fda": ["source.baseball_computer.game.games"], "test.baseball_computer.source_not_null_game_games_use_dh.9dcb036550": ["source.baseball_computer.game.games"], "test.baseball_computer.source_not_null_game_games_scoring_method.b1ac89e487": ["source.baseball_computer.game.games"], "test.baseball_computer.source_not_null_game_games_account_type.7a0a3ee64a": ["source.baseball_computer.game.games"], "test.baseball_computer.source_not_null_game_games_filename.b603af55c2": ["source.baseball_computer.game.games"], "test.baseball_computer.source_not_null_game_games_away_team_id.8e41b8425b": ["source.baseball_computer.game.games"], "test.baseball_computer.source_not_null_game_games_home_team_id.8a8347ed3c": ["source.baseball_computer.game.games"], "test.baseball_computer.source_not_null_game_game_earned_runs_game_id.5b52e3dc8e": ["source.baseball_computer.game.game_earned_runs"], "test.baseball_computer.source_not_null_game_game_earned_runs_player_id.c46963cd36": ["source.baseball_computer.game.game_earned_runs"], "test.baseball_computer.source_not_null_game_game_earned_runs_earned_runs.e4409d3c75": ["source.baseball_computer.game.game_earned_runs"], "test.baseball_computer.source_not_null_game_game_fielding_appearances_game_id.dd2b7e8969": ["source.baseball_computer.game.game_fielding_appearances"], "test.baseball_computer.source_not_null_game_game_fielding_appearances_player_id.0c7ac8daaa": ["source.baseball_computer.game.game_fielding_appearances"], "test.baseball_computer.source_not_null_game_game_fielding_appearances_side.266aa13571": ["source.baseball_computer.game.game_fielding_appearances"], "test.baseball_computer.source_not_null_game_game_fielding_appearances_fielding_position.fb3999bb73": ["source.baseball_computer.game.game_fielding_appearances"], "test.baseball_computer.source_not_null_game_game_fielding_appearances_start_event_id.408c346cde": ["source.baseball_computer.game.game_fielding_appearances"], "test.baseball_computer.source_not_null_game_game_fielding_appearances_end_event_id.60aa09d0ec": ["source.baseball_computer.game.game_fielding_appearances"], "test.baseball_computer.source_not_null_game_game_lineup_appearances_game_id.f63a900428": ["source.baseball_computer.game.game_lineup_appearances"], "test.baseball_computer.source_not_null_game_game_lineup_appearances_player_id.6033a911ba": ["source.baseball_computer.game.game_lineup_appearances"], "test.baseball_computer.source_not_null_game_game_lineup_appearances_side.bcbf5ff7f4": ["source.baseball_computer.game.game_lineup_appearances"], "test.baseball_computer.source_not_null_game_game_lineup_appearances_lineup_position.4b45e3e931": ["source.baseball_computer.game.game_lineup_appearances"], "test.baseball_computer.source_not_null_game_game_lineup_appearances_entered_game_as.a9e19b02e5": ["source.baseball_computer.game.game_lineup_appearances"], "test.baseball_computer.source_not_null_game_game_lineup_appearances_start_event_id.b44f764b97": ["source.baseball_computer.game.game_lineup_appearances"], "test.baseball_computer.source_not_null_game_game_lineup_appearances_end_event_id.62781ded2c": ["source.baseball_computer.game.game_lineup_appearances"], "model.baseball_computer.metrics_player_career_fielding": ["model.baseball_computer.event_player_fielding_stats", "model.baseball_computer.game_start_info", "model.baseball_computer.player_position_game_fielding_stats", "model.baseball_computer.player_position_team_season_fielding_stats", "model.baseball_computer.team_game_start_info", "seed.baseball_computer.seed_franchises", "seed.baseball_computer.seed_game_types"], "model.baseball_computer.metrics_player_career_offense": ["model.baseball_computer.event_offense_stats", "model.baseball_computer.game_start_info", "model.baseball_computer.player_game_offense_stats", "model.baseball_computer.player_team_season_offense_stats", "model.baseball_computer.team_game_start_info", "seed.baseball_computer.seed_franchises", "seed.baseball_computer.seed_game_types"], "model.baseball_computer.metrics_player_career_pitching": ["model.baseball_computer.event_pitching_stats", "model.baseball_computer.game_start_info", "model.baseball_computer.player_game_pitching_stats", "model.baseball_computer.player_team_season_pitching_stats", "model.baseball_computer.team_game_start_info", "seed.baseball_computer.seed_franchises", "seed.baseball_computer.seed_game_types"], "model.baseball_computer.metrics_player_season_league_fielding": ["model.baseball_computer.event_player_fielding_stats", "model.baseball_computer.game_start_info", "model.baseball_computer.player_position_game_fielding_stats", "model.baseball_computer.player_position_team_season_fielding_stats", "model.baseball_computer.team_game_start_info", "seed.baseball_computer.seed_franchises", "seed.baseball_computer.seed_game_types"], "model.baseball_computer.metrics_player_season_league_offense": ["model.baseball_computer.event_offense_stats", "model.baseball_computer.game_start_info", "model.baseball_computer.player_game_offense_stats", "model.baseball_computer.player_team_season_offense_stats", "model.baseball_computer.team_game_start_info", "seed.baseball_computer.seed_franchises", "seed.baseball_computer.seed_game_types"], "model.baseball_computer.metrics_player_season_league_pitching": ["model.baseball_computer.event_pitching_stats", "model.baseball_computer.game_start_info", "model.baseball_computer.player_game_pitching_stats", "model.baseball_computer.player_team_season_pitching_stats", "model.baseball_computer.team_game_start_info", "seed.baseball_computer.seed_franchises", "seed.baseball_computer.seed_game_types"], "model.baseball_computer.metrics_team_season_fielding": ["model.baseball_computer.event_player_fielding_stats", "model.baseball_computer.game_start_info", "model.baseball_computer.player_position_game_fielding_stats", "model.baseball_computer.player_position_team_season_fielding_stats", "model.baseball_computer.team_game_start_info", "seed.baseball_computer.seed_franchises", "seed.baseball_computer.seed_game_types"], "model.baseball_computer.metrics_team_season_offense": ["model.baseball_computer.event_offense_stats", "model.baseball_computer.game_start_info", "model.baseball_computer.player_game_offense_stats", "model.baseball_computer.player_team_season_offense_stats", "model.baseball_computer.team_game_start_info", "seed.baseball_computer.seed_franchises", "seed.baseball_computer.seed_game_types"], "model.baseball_computer.metrics_team_season_pitching": ["model.baseball_computer.event_pitching_stats", "model.baseball_computer.game_start_info", "model.baseball_computer.player_game_pitching_stats", "model.baseball_computer.player_team_season_pitching_stats", "model.baseball_computer.team_game_start_info", "seed.baseball_computer.seed_franchises", "seed.baseball_computer.seed_game_types"], "model.baseball_computer.standings": ["model.baseball_computer.game_results", "model.baseball_computer.game_start_info", "model.baseball_computer.team_game_results", "model.baseball_computer.team_game_start_info"], "model.baseball_computer.game_start_info": ["model.baseball_computer.game_starting_lineups", "model.baseball_computer.stg_gamelog", "model.baseball_computer.stg_games", "seed.baseball_computer.seed_franchises", "seed.baseball_computer.seed_game_types"], "model.baseball_computer.game_results": ["model.baseball_computer.game_forfeits", "model.baseball_computer.game_line_scores", "model.baseball_computer.game_start_info", "model.baseball_computer.game_suspensions", "model.baseball_computer.stg_gamelog", "model.baseball_computer.stg_games"], "model.baseball_computer.event_offense_stats": ["model.baseball_computer.event_baserunning_stats", "model.baseball_computer.event_batted_ball_stats", "model.baseball_computer.event_batting_stats", "model.baseball_computer.event_pitch_sequence_stats"], "model.baseball_computer.event_pitching_stats": ["model.baseball_computer.event_baserunning_stats", "model.baseball_computer.event_batted_ball_stats", "model.baseball_computer.event_batting_stats", "model.baseball_computer.event_pitch_sequence_stats", "model.baseball_computer.event_run_assignment_stats"], "model.baseball_computer.event_fielding_stats": ["model.baseball_computer.calc_fielding_play_agg", "model.baseball_computer.event_double_plays", "model.baseball_computer.event_personnel_lookup", "model.baseball_computer.stg_event_baserunners", "model.baseball_computer.stg_events", "seed.baseball_computer.seed_plate_appearance_result_types"], "model.baseball_computer.event_player_fielding_stats": ["model.baseball_computer.calc_fielding_play_agg", "model.baseball_computer.event_fielding_stats", "model.baseball_computer.personnel_fielding_states"], "model.baseball_computer.event_states_full": ["model.baseball_computer.event_base_out_states", "model.baseball_computer.event_states_batter_pitcher", "model.baseball_computer.game_start_info", "model.baseball_computer.stg_events"], "model.baseball_computer.people": ["model.baseball_computer.stg_bio", "model.baseball_computer.stg_box_score_batting_lines", "model.baseball_computer.stg_box_score_fielding_lines", "model.baseball_computer.stg_people", "model.baseball_computer.stg_rosters"], "model.baseball_computer.team_game_start_info": ["model.baseball_computer.game_start_info"], "model.baseball_computer.team_game_results": ["model.baseball_computer.game_results", "model.baseball_computer.team_game_fielding_stats", "model.baseball_computer.team_game_offense_stats", "model.baseball_computer.team_game_pitching_stats", "model.baseball_computer.team_game_start_info"], "model.baseball_computer.season_team_coverage": ["model.baseball_computer.game_forfeits", "model.baseball_computer.team_game_start_info"], "model.baseball_computer.player_team_season_offense_stats": ["model.baseball_computer.player_game_offense_stats", "model.baseball_computer.stg_databank_batting", "model.baseball_computer.stg_games", "model.baseball_computer.stg_people"], "source.baseball_computer.misc.gamelog": [], "source.baseball_computer.misc.park": [], "source.baseball_computer.misc.roster": [], "source.baseball_computer.misc.schedule": [], "source.baseball_computer.misc.bio": [], "source.baseball_computer.baseballdatabank.appearances": [], "source.baseball_computer.baseballdatabank.batting": [], "source.baseball_computer.baseballdatabank.fielding": [], "source.baseball_computer.baseballdatabank.pitching": [], "source.baseball_computer.baseballdatabank.people": [], "source.baseball_computer.baseballdatabank.fielding_of": [], "source.baseball_computer.box_score.box_score_batting_lines": [], "source.baseball_computer.box_score.box_score_caught_stealing": [], "source.baseball_computer.box_score.box_score_double_plays": [], "source.baseball_computer.box_score.box_score_fielding_lines": [], "source.baseball_computer.box_score.box_score_games": [], "source.baseball_computer.box_score.box_score_hit_by_pitches": [], "source.baseball_computer.box_score.box_score_home_runs": [], "source.baseball_computer.box_score.box_score_pinch_hitting_lines": [], "source.baseball_computer.box_score.box_score_pinch_running_lines": [], "source.baseball_computer.box_score.box_score_pitching_lines": [], "source.baseball_computer.box_score.box_score_stolen_bases": [], "source.baseball_computer.box_score.box_score_team_batting_lines": [], "source.baseball_computer.box_score.box_score_team_fielding_lines": [], "source.baseball_computer.box_score.box_score_team_miscellaneous_lines": [], "source.baseball_computer.box_score.box_score_triple_plays": [], "source.baseball_computer.box_score.box_score_comments": [], "source.baseball_computer.box_score.box_score_line_scores": [], "source.baseball_computer.game.games": [], "source.baseball_computer.game.game_earned_runs": [], "source.baseball_computer.game.game_fielding_appearances": [], "source.baseball_computer.game.game_lineup_appearances": [], "source.baseball_computer.event.event_audit": [], "source.baseball_computer.event.event_baserunners": [], "source.baseball_computer.event.event_comments": [], "source.baseball_computer.event.event_fielding_play": [], "source.baseball_computer.event.event_flags": [], "source.baseball_computer.event.event_pitch_sequences": [], "source.baseball_computer.event.events": []}, "child_map": {"model.baseball_computer.stg_parks": ["test.baseball_computer.relationships_stg_games_park_id__park_id__ref_stg_parks_.670e6f218e"], "model.baseball_computer.stg_rosters": ["model.baseball_computer.people"], "model.baseball_computer.stg_gamelog": ["model.baseball_computer.game_forfeits", "model.baseball_computer.game_results", "model.baseball_computer.game_start_info"], "model.baseball_computer.stg_schedule": [], "model.baseball_computer.stg_bio": ["model.baseball_computer.people", "test.baseball_computer.relationships_stg_game_fielding_appearances_player_id__player_id__ref_stg_bio_.c79c4af955", "test.baseball_computer.relationships_stg_game_lineup_appearances_player_id__player_id__ref_stg_bio_.032a75b5cb"], "model.baseball_computer.stg_databank_fielding_of": ["model.baseball_computer.player_position_team_season_fielding_stats"], "model.baseball_computer.stg_databank_batting": ["model.baseball_computer.player_team_season_offense_stats"], "model.baseball_computer.stg_people": ["model.baseball_computer.people", "model.baseball_computer.player_position_team_season_fielding_stats", "model.baseball_computer.player_team_season_offense_stats", "model.baseball_computer.player_team_season_pitching_stats"], "model.baseball_computer.stg_databank_fielding": ["model.baseball_computer.player_position_team_season_fielding_stats"], "model.baseball_computer.stg_databank_pitching": ["model.baseball_computer.player_team_season_pitching_stats"], "model.baseball_computer.stg_box_score_team_fielding_lines": ["model.baseball_computer.team_game_fielding_stats"], "model.baseball_computer.stg_box_score_double_plays": ["model.baseball_computer.team_game_fielding_stats"], "model.baseball_computer.stg_box_score_pitching_lines": ["model.baseball_computer.game_line_scores", "model.baseball_computer.player_game_pitching_stats"], "model.baseball_computer.stg_box_score_comments": ["model.baseball_computer.game_forfeits", "model.baseball_computer.game_suspensions"], "model.baseball_computer.stg_box_score_triple_plays": ["model.baseball_computer.team_game_fielding_stats"], "model.baseball_computer.stg_box_score_stolen_bases": ["model.baseball_computer.team_game_fielding_stats"], "model.baseball_computer.stg_box_score_team_batting_lines": [], "model.baseball_computer.stg_box_score_caught_stealing": ["model.baseball_computer.team_game_fielding_stats"], "model.baseball_computer.stg_box_score_pinch_hitting_lines": ["model.baseball_computer.player_game_appearances"], "model.baseball_computer.stg_box_score_team_miscellaneous_lines": [], "model.baseball_computer.stg_box_score_line_scores": ["model.baseball_computer.game_line_scores"], "model.baseball_computer.stg_box_score_hit_by_pitches": [], "model.baseball_computer.stg_box_score_batting_lines": ["model.baseball_computer.game_starting_lineups", "model.baseball_computer.people", "model.baseball_computer.player_game_appearances", "model.baseball_computer.player_game_offense_stats"], "model.baseball_computer.stg_box_score_fielding_lines": ["analysis.baseball_computer.unknown_play_no_box", "model.baseball_computer.game_starting_lineups", "model.baseball_computer.people", "model.baseball_computer.player_game_appearances", "model.baseball_computer.player_position_game_fielding_stats"], "model.baseball_computer.stg_box_score_home_runs": [], "model.baseball_computer.stg_box_score_pinch_running_lines": ["model.baseball_computer.player_game_appearances"], "model.baseball_computer.stg_game_earned_runs": ["model.baseball_computer.player_game_pitching_stats", "test.baseball_computer.relationships_stg_game_earned_runs_game_id__game_id__ref_stg_games_.a12c168f7b"], "model.baseball_computer.stg_game_lineup_appearances": ["model.baseball_computer.game_starting_lineups", "model.baseball_computer.personnel_lineup_states", "model.baseball_computer.player_game_appearances", "test.baseball_computer.relationships_stg_game_lineup_appearances_game_id__game_id__ref_stg_games_.e186087a87", "test.baseball_computer.relationships_stg_game_lineup_appearances_player_id__player_id__ref_stg_bio_.032a75b5cb"], "model.baseball_computer.stg_games": ["analysis.baseball_computer.assists_as_putouts_finder", "analysis.baseball_computer.box_event_fielding_discrepancies", "analysis.baseball_computer.ground_ball_hits", "analysis.baseball_computer.unknown_play_no_box", "analysis.baseball_computer.unknown_plays", "model.baseball_computer.game_results", "model.baseball_computer.game_scorekeeping", "model.baseball_computer.game_start_info", "model.baseball_computer.personnel_fielding_states", "model.baseball_computer.personnel_lineup_states", "model.baseball_computer.player_game_appearances", "model.baseball_computer.player_game_pitching_stats", "model.baseball_computer.player_position_game_fielding_stats", "model.baseball_computer.player_position_team_season_fielding_stats", "model.baseball_computer.player_team_season_offense_stats", "model.baseball_computer.player_team_season_pitching_stats", "test.baseball_computer.not_null_stg_games_park_id.5fec03cb29", "test.baseball_computer.relationships_stg_event_baserunners_game_id__game_id__ref_stg_games_.d70abfb1df", "test.baseball_computer.relationships_stg_event_fielding_plays_game_id__game_id__ref_stg_games_.377518fe2c", "test.baseball_computer.relationships_stg_event_pitch_sequences_game_id__game_id__ref_stg_games_.41a391d15a", "test.baseball_computer.relationships_stg_events_game_id__game_id__ref_stg_games_.2ff9f22170", "test.baseball_computer.relationships_stg_game_earned_runs_game_id__game_id__ref_stg_games_.a12c168f7b", "test.baseball_computer.relationships_stg_game_fielding_appearances_game_id__game_id__ref_stg_games_.53b862f062", "test.baseball_computer.relationships_stg_game_lineup_appearances_game_id__game_id__ref_stg_games_.e186087a87", "test.baseball_computer.relationships_stg_games_park_id__park_id__ref_stg_parks_.670e6f218e"], "model.baseball_computer.stg_game_fielding_appearances": ["model.baseball_computer.event_states_batter_pitcher", "model.baseball_computer.game_starting_lineups", "model.baseball_computer.personnel_fielding_states", "model.baseball_computer.player_game_appearances", "test.baseball_computer.relationships_stg_game_fielding_appearances_game_id__game_id__ref_stg_games_.53b862f062", "test.baseball_computer.relationships_stg_game_fielding_appearances_player_id__player_id__ref_stg_bio_.c79c4af955"], "model.baseball_computer.stg_event_audit": ["analysis.baseball_computer.assists_as_putouts_finder", "analysis.baseball_computer.box_event_fielding_discrepancies", "analysis.baseball_computer.unknown_play_no_box", "analysis.baseball_computer.unknown_plays", "test.baseball_computer.relationships_stg_event_audit_event_key__event_key__ref_stg_events_.c365ebf19a"], "model.baseball_computer.stg_event_pitch_sequences": ["analysis.baseball_computer.event_completeness_pitches", "model.baseball_computer.event_pitch_sequence_stats", "test.baseball_computer.relationships_stg_event_pitch_sequences_event_key__event_key__ref_stg_events_.6567690dc0", "test.baseball_computer.relationships_stg_event_pitch_sequences_game_id__game_id__ref_stg_games_.41a391d15a"], "model.baseball_computer.stg_event_fielding_plays": ["analysis.baseball_computer.event_completeness_fielding_credit", "model.baseball_computer.calc_fielding_play_agg", "test.baseball_computer.relationships_stg_event_fielding_plays_event_key__event_key__ref_stg_events_.da88649ba4", "test.baseball_computer.relationships_stg_event_fielding_plays_game_id__game_id__ref_stg_games_.377518fe2c"], "model.baseball_computer.stg_event_baserunners": ["model.baseball_computer.event_base_out_states", "model.baseball_computer.event_baserunning_stats", "model.baseball_computer.event_fielding_stats", "model.baseball_computer.event_pitch_sequence_stats", "model.baseball_computer.linear_weights", "model.baseball_computer.ml_event_outcomes", "test.baseball_computer.relationships_stg_event_baserunners_event_key__event_key__ref_stg_events_.44661689b8", "test.baseball_computer.relationships_stg_event_baserunners_game_id__game_id__ref_stg_games_.d70abfb1df"], "model.baseball_computer.stg_event_comments": ["model.baseball_computer.game_forfeits", "model.baseball_computer.game_suspensions", "test.baseball_computer.relationships_stg_event_comments_event_key__event_key__ref_stg_events_.10a708d8a1"], "model.baseball_computer.stg_event_flags": ["analysis.baseball_computer.assists_as_putouts_finder", "model.baseball_computer.event_batting_stats", "model.baseball_computer.event_double_plays"], "model.baseball_computer.stg_events": ["analysis.baseball_computer.assists_as_putouts_finder", "analysis.baseball_computer.event_completeness_batted_balls", "analysis.baseball_computer.event_completeness_fielding_credit", "analysis.baseball_computer.event_completeness_pitches", "analysis.baseball_computer.fielder_advance_expectancy", "analysis.baseball_computer.game_data_completeness", "analysis.baseball_computer.player_game_data_completeness", "analysis.baseball_computer.runner_advance_expectancy", "analysis.baseball_computer.scorekeeper_tendencies_contact", "analysis.baseball_computer.scorekeeper_tendencies_location", "analysis.baseball_computer.scratch", "model.baseball_computer.calc_batted_ball_type", "model.baseball_computer.calc_fielding_play_agg", "model.baseball_computer.event_base_out_states", "model.baseball_computer.event_baserunning_stats", "model.baseball_computer.event_batting_stats", "model.baseball_computer.event_fielding_stats", "model.baseball_computer.event_personnel_lookup", "model.baseball_computer.event_run_assignment_stats", "model.baseball_computer.event_score_states", "model.baseball_computer.event_states_batter_pitcher", "model.baseball_computer.event_states_full", "model.baseball_computer.game_forfeits", "model.baseball_computer.game_suspensions", "model.baseball_computer.linear_weights", "model.baseball_computer.ml_event_outcomes", "model.baseball_computer.unknown_fielding_play_shares", "test.baseball_computer.relationships_stg_event_audit_event_key__event_key__ref_stg_events_.c365ebf19a", "test.baseball_computer.relationships_stg_event_baserunners_event_key__event_key__ref_stg_events_.44661689b8", "test.baseball_computer.relationships_stg_event_comments_event_key__event_key__ref_stg_events_.10a708d8a1", "test.baseball_computer.relationships_stg_event_fielding_plays_event_key__event_key__ref_stg_events_.da88649ba4", "test.baseball_computer.relationships_stg_event_pitch_sequences_event_key__event_key__ref_stg_events_.6567690dc0", "test.baseball_computer.relationships_stg_events_game_id__game_id__ref_stg_games_.2ff9f22170"], "model.baseball_computer.player_team_season_pitching_stats": ["model.baseball_computer.metrics_player_career_pitching", "model.baseball_computer.metrics_player_season_league_pitching", "model.baseball_computer.metrics_team_season_pitching"], "model.baseball_computer.player_position_team_season_fielding_stats": ["model.baseball_computer.metrics_player_career_fielding", "model.baseball_computer.metrics_player_season_league_fielding", "model.baseball_computer.metrics_team_season_fielding", "model.baseball_computer.team_season_fielding_stats"], "model.baseball_computer.team_season_fielding_stats": [], "model.baseball_computer.calc_park_factors_basic": ["model.baseball_computer.park_factors"], "model.baseball_computer.park_factors": [], "model.baseball_computer.calc_park_factors_advanced": ["model.baseball_computer.park_factors"], "model.baseball_computer.event_pitching_flags": ["analysis.baseball_computer.most_blown_save_rbi", "model.baseball_computer.player_game_pitching_stats"], "model.baseball_computer.ml_event_outcomes": ["model.baseball_computer.ml_features"], "model.baseball_computer.ml_features": [], "model.baseball_computer.linear_weights": [], "model.baseball_computer.event_transition_values": ["model.baseball_computer.leverage_index", "model.baseball_computer.linear_weights", "test.baseball_computer.dbt_utils_not_null_proportion_event_transition_values_0_999__expected_batting_win_change.a7ac9d0c20", "test.baseball_computer.dbt_utils_not_null_proportion_event_transition_values_0_999__expected_home_win_change.c38533e897", "test.baseball_computer.dbt_utils_not_null_proportion_event_transition_values_0_999__expected_runs_change.1f88bb4978"], "model.baseball_computer.unknown_fielding_play_shares": [], "model.baseball_computer.leverage_index": ["analysis.baseball_computer.scorekeeper_tendencies_location"], "model.baseball_computer.win_expectancy_matrix": ["model.baseball_computer.event_transition_values"], "model.baseball_computer.run_expectancy_matrix": ["model.baseball_computer.event_transition_values"], "model.baseball_computer.player_game_appearances": ["model.baseball_computer.player_position_game_fielding_stats"], "model.baseball_computer.player_game_offense_stats": ["analysis.baseball_computer.scratch", "model.baseball_computer.metrics_player_career_offense", "model.baseball_computer.metrics_player_season_league_offense", "model.baseball_computer.metrics_team_season_offense", "model.baseball_computer.player_team_season_offense_stats", "model.baseball_computer.team_game_offense_stats"], "model.baseball_computer.player_game_pitching_stats": ["model.baseball_computer.metrics_player_career_pitching", "model.baseball_computer.metrics_player_season_league_pitching", "model.baseball_computer.metrics_team_season_pitching", "model.baseball_computer.player_team_season_pitching_stats", "model.baseball_computer.team_game_pitching_stats"], "model.baseball_computer.player_position_game_fielding_stats": ["analysis.baseball_computer.box_event_fielding_discrepancies", "model.baseball_computer.metrics_player_career_fielding", "model.baseball_computer.metrics_player_season_league_fielding", "model.baseball_computer.metrics_team_season_fielding", "model.baseball_computer.player_position_team_season_fielding_stats", "model.baseball_computer.team_game_fielding_stats", "model.baseball_computer.unknown_fielding_play_shares", "test.baseball_computer.dbt_utils_not_null_proportion_player_position_game_fielding_stats_0_93__caught_stealing.5f9f3af801", "test.baseball_computer.dbt_utils_not_null_proportion_player_position_game_fielding_stats_0_93__stolen_bases.d6787fbb17", "test.baseball_computer.dbt_utils_not_null_proportion_player_position_game_fielding_stats_0_995__assists.a29066a509", "test.baseball_computer.dbt_utils_not_null_proportion_player_position_game_fielding_stats_0_995__double_plays.5724973f8f", "test.baseball_computer.dbt_utils_not_null_proportion_player_position_game_fielding_stats_0_995__errors.8eea9cbcc8", "test.baseball_computer.dbt_utils_not_null_proportion_player_position_game_fielding_stats_0_995__outs_played.8bb7eb59b4", "test.baseball_computer.dbt_utils_not_null_proportion_player_position_game_fielding_stats_0_995__putouts.9e00a6ab61", "test.baseball_computer.dbt_utils_not_null_proportion_player_position_game_fielding_stats_0_995__triple_plays.534ecb7a2b"], "model.baseball_computer.personnel_fielding_states": ["model.baseball_computer.event_fielders_flat", "model.baseball_computer.event_personnel_lookup", "model.baseball_computer.event_player_fielding_stats"], "model.baseball_computer.event_states_batter_pitcher": ["model.baseball_computer.event_batted_ball_stats", "model.baseball_computer.event_run_assignment_stats", "model.baseball_computer.event_states_full"], "model.baseball_computer.event_score_states": [], "model.baseball_computer.event_count_states": [], "model.baseball_computer.event_fielders_flat": [], "model.baseball_computer.personnel_lineup_states": ["model.baseball_computer.event_personnel_lookup"], "model.baseball_computer.event_personnel_lookup": ["model.baseball_computer.event_fielders_flat", "model.baseball_computer.event_fielding_stats"], "model.baseball_computer.event_base_out_states": ["model.baseball_computer.event_states_full"], "model.baseball_computer.game_starting_lineups": ["model.baseball_computer.game_start_info"], "model.baseball_computer.team_game_fielding_stats": ["model.baseball_computer.team_game_results", "model.baseball_computer.team_season_fielding_stats", "model.baseball_computer.unknown_fielding_play_shares"], "model.baseball_computer.game_forfeits": ["model.baseball_computer.game_results", "model.baseball_computer.season_team_coverage"], "model.baseball_computer.game_suspensions": ["model.baseball_computer.game_results"], "model.baseball_computer.team_game_pitching_stats": ["model.baseball_computer.team_game_results"], "model.baseball_computer.team_game_offense_stats": ["model.baseball_computer.team_game_results"], "model.baseball_computer.game_line_scores": ["model.baseball_computer.game_results"], "model.baseball_computer.game_scorekeeping": ["analysis.baseball_computer.scorekeeper_tendencies_contact", "analysis.baseball_computer.scorekeeper_tendencies_location", "analysis.baseball_computer.scratch"], "model.baseball_computer.event_double_plays": ["model.baseball_computer.event_batting_stats", "model.baseball_computer.event_fielding_stats"], "model.baseball_computer.event_baserunning_stats": ["analysis.baseball_computer.fielder_advance_expectancy", "analysis.baseball_computer.runner_advance_expectancy", "model.baseball_computer.event_offense_stats", "model.baseball_computer.event_pitching_stats", "model.baseball_computer.event_run_assignment_stats"], "model.baseball_computer.event_batted_ball_stats": ["model.baseball_computer.event_offense_stats", "model.baseball_computer.event_pitching_stats"], "model.baseball_computer.event_batting_stats": ["model.baseball_computer.event_offense_stats", "model.baseball_computer.event_pitching_stats"], "model.baseball_computer.event_run_assignment_stats": ["model.baseball_computer.event_pitching_stats"], "model.baseball_computer.calc_batted_ball_type": ["analysis.baseball_computer.babip_by_count", "analysis.baseball_computer.fielder_advance_expectancy", "analysis.baseball_computer.fielder_location_shares", "analysis.baseball_computer.game_data_completeness", "analysis.baseball_computer.ground_ball_blame", "analysis.baseball_computer.hit_vs_out_spray", "analysis.baseball_computer.hit_vs_out_spray_air", "analysis.baseball_computer.outfield_hits", "analysis.baseball_computer.player_game_data_completeness", "analysis.baseball_computer.runner_advance_expectancy", "analysis.baseball_computer.scratch", "model.baseball_computer.event_batted_ball_stats", "model.baseball_computer.ml_event_outcomes", "test.baseball_computer.accepted_values_calc_batted_ball_type_location_edge__Left__Middle__Right__Unknown.c9ef91bfc9"], "model.baseball_computer.event_pitch_sequence_stats": ["model.baseball_computer.event_offense_stats", "model.baseball_computer.event_pitching_stats"], "model.baseball_computer.calc_fielding_play_agg": ["analysis.baseball_computer.assists_as_putouts_finder", "analysis.baseball_computer.unknown_play_no_box", "model.baseball_computer.calc_batted_ball_type", "model.baseball_computer.event_fielding_stats", "model.baseball_computer.event_player_fielding_stats", "model.baseball_computer.unknown_fielding_play_shares"], "analysis.baseball_computer.hit_vs_out_spray_air": [], "analysis.baseball_computer.ground_ball_blame": [], "analysis.baseball_computer.babip_by_count": [], "analysis.baseball_computer.gb_babip_correlations": [], "analysis.baseball_computer.runner_advance_expectancy": [], "analysis.baseball_computer.outfield_hits": [], "analysis.baseball_computer.fielder_location_shares": [], "analysis.baseball_computer.fielder_advance_expectancy": [], "analysis.baseball_computer.scratch": [], "analysis.baseball_computer.player_completeness": [], "analysis.baseball_computer.ground_ball_hits": [], "analysis.baseball_computer.hit_vs_out_spray": [], "analysis.baseball_computer.calc_park_factor_plate_appearances": [], "analysis.baseball_computer.calc_park_factor_trajectory_outs": [], "analysis.baseball_computer.calc_park_factor_outs": [], "analysis.baseball_computer.calc_park_factor_out_location": [], "analysis.baseball_computer.calc_park_factor_hit_location": [], "analysis.baseball_computer.calc_park_factor_in_play": [], "analysis.baseball_computer.unknown_play_no_box": [], "analysis.baseball_computer.unknown_plays": [], "analysis.baseball_computer.putout_innings_gaps": [], "analysis.baseball_computer.assists_as_putouts_finder": [], "analysis.baseball_computer.box_event_fielding_discrepancies": [], "analysis.baseball_computer.scorekeeper_tendencies_location": [], "analysis.baseball_computer.scorekeeper_tendencies_batter": [], "analysis.baseball_computer.scorekeeper_tendencies_contact": [], "analysis.baseball_computer.most_blown_save_rbi": [], "analysis.baseball_computer.event_completeness_fielding_credit": [], "analysis.baseball_computer.player_game_data_completeness": [], "analysis.baseball_computer.event_completeness_batted_balls": [], "analysis.baseball_computer.game_data_completeness": [], "analysis.baseball_computer.event_completeness_pitches": [], "seed.baseball_computer.seed_stat_categories": [], "seed.baseball_computer.seed_us_states_regions": [], "seed.baseball_computer.seed_plate_appearance_result_types": ["analysis.baseball_computer.event_completeness_batted_balls", "analysis.baseball_computer.fielder_advance_expectancy", "analysis.baseball_computer.game_data_completeness", "analysis.baseball_computer.player_game_data_completeness", "analysis.baseball_computer.runner_advance_expectancy", "model.baseball_computer.event_baserunning_stats", "model.baseball_computer.event_batting_stats", "model.baseball_computer.event_fielding_stats", "model.baseball_computer.linear_weights", "model.baseball_computer.ml_event_outcomes"], "seed.baseball_computer.seed_country_regions": [], "seed.baseball_computer.seed_pitch_types": ["analysis.baseball_computer.event_completeness_pitches", "model.baseball_computer.event_pitch_sequence_stats"], "seed.baseball_computer.seed_franchises": ["model.baseball_computer.game_scorekeeping", "model.baseball_computer.game_start_info", "model.baseball_computer.metrics_player_career_fielding", "model.baseball_computer.metrics_player_career_offense", "model.baseball_computer.metrics_player_career_pitching", "model.baseball_computer.metrics_player_season_league_fielding", "model.baseball_computer.metrics_player_season_league_offense", "model.baseball_computer.metrics_player_season_league_pitching", "model.baseball_computer.metrics_team_season_fielding", "model.baseball_computer.metrics_team_season_offense", "model.baseball_computer.metrics_team_season_pitching"], "seed.baseball_computer.seed_game_types": ["model.baseball_computer.game_start_info", "model.baseball_computer.metrics_player_career_fielding", "model.baseball_computer.metrics_player_career_offense", "model.baseball_computer.metrics_player_career_pitching", "model.baseball_computer.metrics_player_season_league_fielding", "model.baseball_computer.metrics_player_season_league_offense", "model.baseball_computer.metrics_player_season_league_pitching", "model.baseball_computer.metrics_team_season_fielding", "model.baseball_computer.metrics_team_season_offense", "model.baseball_computer.metrics_team_season_pitching"], "seed.baseball_computer.seed_double_play_flag_types": ["model.baseball_computer.event_double_plays"], "seed.baseball_computer.seed_hit_location_categories": ["analysis.baseball_computer.event_completeness_batted_balls", "model.baseball_computer.calc_batted_ball_type"], "seed.baseball_computer.seed_hit_to_fielder_categories": ["model.baseball_computer.calc_batted_ball_type"], "seed.baseball_computer.seed_hit_location_angles": [], "seed.baseball_computer.seed_hit_location_alignments": [], "seed.baseball_computer.seed_outfield_hit_inference": [], "seed.baseball_computer.seed_hit_location_distance_buckets": [], "seed.baseball_computer.seed_plate_appearance_trajectories": ["analysis.baseball_computer.event_completeness_batted_balls", "model.baseball_computer.calc_batted_ball_type"], "seed.baseball_computer.seed_baserunner_info": ["model.baseball_computer.event_baserunning_stats"], "seed.baseball_computer.seed_bases_info": ["model.baseball_computer.event_baserunning_stats"], "seed.baseball_computer.seed_baserunning_play_types": ["model.baseball_computer.linear_weights", "model.baseball_computer.ml_event_outcomes"], "seed.baseball_computer.seed_base_state_info": ["model.baseball_computer.event_base_out_states"], "seed.baseball_computer.seed_scorer_numerical_ranges": ["model.baseball_computer.game_scorekeeping"], "seed.baseball_computer.seed_scorer_disambiguation": ["model.baseball_computer.game_scorekeeping"], "seed.baseball_computer.seed_scorer_lookup": ["model.baseball_computer.game_scorekeeping"], "test.baseball_computer.relationships_stg_game_lineup_appearances_game_id__game_id__ref_stg_games_.e186087a87": [], "test.baseball_computer.relationships_stg_game_lineup_appearances_player_id__player_id__ref_stg_bio_.032a75b5cb": [], "test.baseball_computer.relationships_stg_game_earned_runs_game_id__game_id__ref_stg_games_.a12c168f7b": [], "test.baseball_computer.relationships_stg_games_park_id__park_id__ref_stg_parks_.670e6f218e": [], "test.baseball_computer.not_null_stg_games_park_id.5fec03cb29": [], "test.baseball_computer.relationships_stg_game_fielding_appearances_game_id__game_id__ref_stg_games_.53b862f062": [], "test.baseball_computer.relationships_stg_game_fielding_appearances_player_id__player_id__ref_stg_bio_.c79c4af955": [], "test.baseball_computer.relationships_stg_event_pitch_sequences_game_id__game_id__ref_stg_games_.41a391d15a": [], "test.baseball_computer.relationships_stg_event_pitch_sequences_event_key__event_key__ref_stg_events_.6567690dc0": [], "test.baseball_computer.relationships_stg_event_audit_event_key__event_key__ref_stg_events_.c365ebf19a": [], "test.baseball_computer.relationships_stg_events_game_id__game_id__ref_stg_games_.2ff9f22170": [], "test.baseball_computer.relationships_stg_event_fielding_plays_game_id__game_id__ref_stg_games_.377518fe2c": [], "test.baseball_computer.relationships_stg_event_fielding_plays_event_key__event_key__ref_stg_events_.da88649ba4": [], "test.baseball_computer.relationships_stg_event_baserunners_game_id__game_id__ref_stg_games_.d70abfb1df": [], "test.baseball_computer.relationships_stg_event_baserunners_event_key__event_key__ref_stg_events_.44661689b8": [], "test.baseball_computer.relationships_stg_event_comments_event_key__event_key__ref_stg_events_.10a708d8a1": [], "test.baseball_computer.dbt_utils_not_null_proportion_event_transition_values_0_999__expected_runs_change.1f88bb4978": [], "test.baseball_computer.dbt_utils_not_null_proportion_event_transition_values_0_999__expected_home_win_change.c38533e897": [], "test.baseball_computer.dbt_utils_not_null_proportion_event_transition_values_0_999__expected_batting_win_change.a7ac9d0c20": [], "test.baseball_computer.dbt_utils_not_null_proportion_player_position_game_fielding_stats_0_995__outs_played.8bb7eb59b4": [], "test.baseball_computer.dbt_utils_not_null_proportion_player_position_game_fielding_stats_0_995__putouts.9e00a6ab61": [], "test.baseball_computer.dbt_utils_not_null_proportion_player_position_game_fielding_stats_0_995__assists.a29066a509": [], "test.baseball_computer.dbt_utils_not_null_proportion_player_position_game_fielding_stats_0_995__errors.8eea9cbcc8": [], "test.baseball_computer.dbt_utils_not_null_proportion_player_position_game_fielding_stats_0_995__double_plays.5724973f8f": [], "test.baseball_computer.dbt_utils_not_null_proportion_player_position_game_fielding_stats_0_995__triple_plays.534ecb7a2b": [], "test.baseball_computer.dbt_utils_not_null_proportion_player_position_game_fielding_stats_0_93__stolen_bases.d6787fbb17": [], "test.baseball_computer.dbt_utils_not_null_proportion_player_position_game_fielding_stats_0_93__caught_stealing.5f9f3af801": [], "test.baseball_computer.accepted_values_calc_batted_ball_type_location_edge__Left__Middle__Right__Unknown.c9ef91bfc9": [], "test.baseball_computer.source_not_null_misc_park_park_id.6eb47dd84e": [], "test.baseball_computer.source_unique_misc_park_park_id.ab6b1ee1d3": [], "test.baseball_computer.source_not_null_misc_park_name.cb07f266fc": [], "test.baseball_computer.source_not_null_misc_park_city.dd95bd0af9": [], "test.baseball_computer.source_not_null_misc_park_start_date.7ab9b2c116": [], "test.baseball_computer.source_not_null_misc_roster_year.944fe03dad": [], "test.baseball_computer.source_not_null_misc_roster_player_id.a4e0bf60be": [], "test.baseball_computer.source_not_null_misc_roster_last_name.2016310734": [], "test.baseball_computer.source_not_null_misc_roster_team_id.251ed96cc3": [], "test.baseball_computer.source_not_null_misc_roster_position.0abc3727ad": [], "test.baseball_computer.source_unique_baseballdatabank_people_playerid.028c893cc1": [], "test.baseball_computer.source_not_null_baseballdatabank_people_playerid.15b902dc68": [], "test.baseball_computer.source_unique_baseballdatabank_people_retro_id.dd8c06d204": [], "test.baseball_computer.source_unique_baseballdatabank_people_bbrefid.ae622725ff": [], "test.baseball_computer.source_not_null_box_score_box_score_batting_lines_game_id.57dbc78fca": [], "test.baseball_computer.source_not_null_box_score_box_score_batting_lines_batter_id.d0f6fb2a89": [], "test.baseball_computer.source_not_null_box_score_box_score_batting_lines_side.002275cba3": [], "test.baseball_computer.source_not_null_box_score_box_score_batting_lines_lineup_position.ad36913951": [], "test.baseball_computer.source_not_null_box_score_box_score_batting_lines_nth_player_at_position.b79200b54d": [], "test.baseball_computer.source_not_null_box_score_box_score_batting_lines_at_bats.b6d88915f8": [], "test.baseball_computer.source_not_null_box_score_box_score_caught_stealing_game_id.6f95dd8a54": [], "test.baseball_computer.source_not_null_box_score_box_score_caught_stealing_running_side.e9ccccfdf3": [], "test.baseball_computer.source_not_null_box_score_box_score_caught_stealing_runner_id.f0b3ec2fc3": [], "test.baseball_computer.source_not_null_box_score_box_score_double_plays_game_id.3eb854846f": [], "test.baseball_computer.source_not_null_box_score_box_score_double_plays_defense_side.cea8fd9283": [], "test.baseball_computer.source_not_null_box_score_box_score_fielding_lines_game_id.8a41130214": [], "test.baseball_computer.source_not_null_box_score_box_score_fielding_lines_fielder_id.cf9c2b33ad": [], "test.baseball_computer.source_not_null_box_score_box_score_fielding_lines_side.c31b2fa481": [], "test.baseball_computer.source_not_null_box_score_box_score_fielding_lines_fielding_position.1a91f0160e": [], "test.baseball_computer.source_not_null_box_score_box_score_fielding_lines_nth_position_played_by_player.3dc8b9aa9e": [], "test.baseball_computer.source_unique_box_score_box_score_games_game_id.b94243eaff": [], "test.baseball_computer.source_not_null_box_score_box_score_games_game_id.44872eca82": [], "test.baseball_computer.source_not_null_box_score_box_score_games_game_key.76f62a5ea0": [], "test.baseball_computer.source_unique_box_score_box_score_games_game_key.a9054ce21a": [], "test.baseball_computer.source_not_null_box_score_box_score_games_date.4e354fb03d": [], "test.baseball_computer.source_not_null_box_score_box_score_games_doubleheader_status.d596eb38d8": [], "test.baseball_computer.source_not_null_box_score_box_score_games_time_of_day.c0265c9214": [], "test.baseball_computer.source_not_null_box_score_box_score_games_game_type.bec21d95d6": [], "test.baseball_computer.source_not_null_box_score_box_score_games_bat_first_side.f20df82299": [], "test.baseball_computer.source_not_null_box_score_box_score_games_sky.d531881035": [], "test.baseball_computer.source_not_null_box_score_box_score_games_field_condition.db9cd2b113": [], "test.baseball_computer.source_not_null_box_score_box_score_games_precipitation.b66a143e37": [], "test.baseball_computer.source_not_null_box_score_box_score_games_wind_direction.61c0ecd269": [], "test.baseball_computer.source_not_null_box_score_box_score_games_park_id.2bbc694559": [], "test.baseball_computer.source_not_null_box_score_box_score_games_use_dh.0576fbd0ba": [], "test.baseball_computer.source_not_null_box_score_box_score_games_scoring_method.2983bc45ed": [], "test.baseball_computer.source_not_null_box_score_box_score_games_account_type.ee49ce5d5e": [], "test.baseball_computer.source_not_null_box_score_box_score_games_away_team_id.3db65a46ed": [], "test.baseball_computer.source_not_null_box_score_box_score_games_home_team_id.7a5b9e78fc": [], "test.baseball_computer.source_not_null_box_score_box_score_home_runs_game_id.e28865fff5": [], "test.baseball_computer.source_not_null_box_score_box_score_home_runs_batting_side.d8a1a565f0": [], "test.baseball_computer.source_not_null_box_score_box_score_home_runs_batter_id.61a8db5c58": [], "test.baseball_computer.source_not_null_box_score_box_score_home_runs_pitcher_id.469cea3d74": [], "test.baseball_computer.source_not_null_box_score_box_score_pinch_hitting_lines_game_id.162a4e38b5": [], "test.baseball_computer.source_not_null_box_score_box_score_pinch_hitting_lines_pinch_hitter_id.bae1f38990": [], "test.baseball_computer.source_not_null_box_score_box_score_pinch_hitting_lines_side.d772416d56": [], "test.baseball_computer.source_not_null_box_score_box_score_pinch_running_lines_game_id.08777674e3": [], "test.baseball_computer.source_not_null_box_score_box_score_pinch_running_lines_pinch_runner_id.b0d9ccfc3e": [], "test.baseball_computer.source_not_null_box_score_box_score_stolen_bases_game_id.026246df9e": [], "test.baseball_computer.source_not_null_box_score_box_score_stolen_bases_running_side.c2c5c13135": [], "test.baseball_computer.source_not_null_box_score_box_score_stolen_bases_runner_id.c702a78489": [], "test.baseball_computer.source_not_null_box_score_box_score_team_batting_lines_game_id.bd95c834cc": [], "test.baseball_computer.source_not_null_box_score_box_score_team_batting_lines_side.804ee6c99a": [], "test.baseball_computer.source_not_null_box_score_box_score_team_batting_lines_at_bats.0a61108426": [], "test.baseball_computer.source_not_null_box_score_box_score_team_batting_lines_runs.eb5d3c40d4": [], "test.baseball_computer.source_not_null_box_score_box_score_team_batting_lines_hits.a6fddad181": [], "test.baseball_computer.source_not_null_box_score_box_score_team_fielding_lines_game_id.8437d7158c": [], "test.baseball_computer.source_not_null_box_score_box_score_team_fielding_lines_side.7918cf72f9": [], "test.baseball_computer.source_not_null_box_score_box_score_team_fielding_lines_outs_played.14ebdb3b7b": [], "test.baseball_computer.source_not_null_box_score_box_score_team_miscellaneous_lines_game_id.fcda3e41c8": [], "test.baseball_computer.source_not_null_box_score_box_score_team_miscellaneous_lines_side.40c4727a51": [], "test.baseball_computer.source_not_null_box_score_box_score_triple_plays_game_id.bcc2a3622b": [], "test.baseball_computer.source_not_null_box_score_box_score_triple_plays_defense_side.2eec5d74dc": [], "test.baseball_computer.source_not_null_box_score_box_score_comments_game_id.ee9b68198f": [], "test.baseball_computer.source_not_null_box_score_box_score_comments_sequence_id.61b7b70a39": [], "test.baseball_computer.source_not_null_box_score_box_score_comments_comment.27f5650bb2": [], "test.baseball_computer.source_unique_game_games_game_id.ed73a19cd5": [], "test.baseball_computer.source_not_null_game_games_game_id.2418071e8e": [], "test.baseball_computer.source_not_null_game_games_game_key.888d752037": [], "test.baseball_computer.source_unique_game_games_game_key.caa87137ff": [], "test.baseball_computer.source_not_null_game_games_date.742eb9e3c2": [], "test.baseball_computer.source_not_null_game_games_doubleheader_status.053829553b": [], "test.baseball_computer.source_not_null_game_games_time_of_day.c9113d1123": [], "test.baseball_computer.source_not_null_game_games_game_type.8ba97fed9b": [], "test.baseball_computer.source_not_null_game_games_bat_first_side.91b0360bdd": [], "test.baseball_computer.source_not_null_game_games_sky.d1e4d31777": [], "test.baseball_computer.source_not_null_game_games_field_condition.68aa42357b": [], "test.baseball_computer.source_not_null_game_games_precipitation.53cfe6a1d5": [], "test.baseball_computer.source_not_null_game_games_wind_direction.28ae0e1ff6": [], "test.baseball_computer.source_not_null_game_games_park_id.ae1e9e1fda": [], "test.baseball_computer.source_not_null_game_games_use_dh.9dcb036550": [], "test.baseball_computer.source_not_null_game_games_scoring_method.b1ac89e487": [], "test.baseball_computer.source_not_null_game_games_account_type.7a0a3ee64a": [], "test.baseball_computer.source_not_null_game_games_filename.b603af55c2": [], "test.baseball_computer.source_not_null_game_games_away_team_id.8e41b8425b": [], "test.baseball_computer.source_not_null_game_games_home_team_id.8a8347ed3c": [], "test.baseball_computer.source_not_null_game_game_earned_runs_game_id.5b52e3dc8e": [], "test.baseball_computer.source_not_null_game_game_earned_runs_player_id.c46963cd36": [], "test.baseball_computer.source_not_null_game_game_earned_runs_earned_runs.e4409d3c75": [], "test.baseball_computer.source_not_null_game_game_fielding_appearances_game_id.dd2b7e8969": [], "test.baseball_computer.source_not_null_game_game_fielding_appearances_player_id.0c7ac8daaa": [], "test.baseball_computer.source_not_null_game_game_fielding_appearances_side.266aa13571": [], "test.baseball_computer.source_not_null_game_game_fielding_appearances_fielding_position.fb3999bb73": [], "test.baseball_computer.source_not_null_game_game_fielding_appearances_start_event_id.408c346cde": [], "test.baseball_computer.source_not_null_game_game_fielding_appearances_end_event_id.60aa09d0ec": [], "test.baseball_computer.source_not_null_game_game_lineup_appearances_game_id.f63a900428": [], "test.baseball_computer.source_not_null_game_game_lineup_appearances_player_id.6033a911ba": [], "test.baseball_computer.source_not_null_game_game_lineup_appearances_side.bcbf5ff7f4": [], "test.baseball_computer.source_not_null_game_game_lineup_appearances_lineup_position.4b45e3e931": [], "test.baseball_computer.source_not_null_game_game_lineup_appearances_entered_game_as.a9e19b02e5": [], "test.baseball_computer.source_not_null_game_game_lineup_appearances_start_event_id.b44f764b97": [], "test.baseball_computer.source_not_null_game_game_lineup_appearances_end_event_id.62781ded2c": [], "model.baseball_computer.metrics_player_career_fielding": [], "model.baseball_computer.metrics_player_career_offense": ["analysis.baseball_computer.scratch"], "model.baseball_computer.metrics_player_career_pitching": [], "model.baseball_computer.metrics_player_season_league_fielding": [], "model.baseball_computer.metrics_player_season_league_offense": [], "model.baseball_computer.metrics_player_season_league_pitching": [], "model.baseball_computer.metrics_team_season_fielding": [], "model.baseball_computer.metrics_team_season_offense": [], "model.baseball_computer.metrics_team_season_pitching": [], "model.baseball_computer.standings": [], "model.baseball_computer.game_start_info": ["analysis.baseball_computer.assists_as_putouts_finder", "analysis.baseball_computer.calc_park_factor_hit_location", "analysis.baseball_computer.calc_park_factor_in_play", "analysis.baseball_computer.calc_park_factor_out_location", "analysis.baseball_computer.calc_park_factor_outs", "analysis.baseball_computer.calc_park_factor_plate_appearances", "analysis.baseball_computer.calc_park_factor_trajectory_outs", "analysis.baseball_computer.fielder_advance_expectancy", "analysis.baseball_computer.game_data_completeness", "analysis.baseball_computer.gb_babip_correlations", "analysis.baseball_computer.player_game_data_completeness", "analysis.baseball_computer.scratch", "analysis.baseball_computer.unknown_play_no_box", "model.baseball_computer.calc_park_factors_advanced", "model.baseball_computer.event_states_full", "model.baseball_computer.game_results", "model.baseball_computer.metrics_player_career_fielding", "model.baseball_computer.metrics_player_career_offense", "model.baseball_computer.metrics_player_career_pitching", "model.baseball_computer.metrics_player_season_league_fielding", "model.baseball_computer.metrics_player_season_league_offense", "model.baseball_computer.metrics_player_season_league_pitching", "model.baseball_computer.metrics_team_season_fielding", "model.baseball_computer.metrics_team_season_offense", "model.baseball_computer.metrics_team_season_pitching", "model.baseball_computer.player_game_offense_stats", "model.baseball_computer.standings", "model.baseball_computer.team_game_start_info", "model.baseball_computer.team_season_fielding_stats"], "model.baseball_computer.game_results": ["model.baseball_computer.ml_event_outcomes", "model.baseball_computer.standings", "model.baseball_computer.team_game_results"], "model.baseball_computer.event_offense_stats": ["analysis.baseball_computer.babip_by_count", "analysis.baseball_computer.calc_park_factor_hit_location", "analysis.baseball_computer.calc_park_factor_in_play", "analysis.baseball_computer.calc_park_factor_out_location", "analysis.baseball_computer.calc_park_factor_outs", "analysis.baseball_computer.calc_park_factor_plate_appearances", "analysis.baseball_computer.calc_park_factor_trajectory_outs", "analysis.baseball_computer.fielder_location_shares", "analysis.baseball_computer.ground_ball_blame", "analysis.baseball_computer.hit_vs_out_spray", "analysis.baseball_computer.hit_vs_out_spray_air", "analysis.baseball_computer.most_blown_save_rbi", "analysis.baseball_computer.outfield_hits", "analysis.baseball_computer.scorekeeper_tendencies_batter", "analysis.baseball_computer.scorekeeper_tendencies_contact", "analysis.baseball_computer.scorekeeper_tendencies_location", "analysis.baseball_computer.scratch", "model.baseball_computer.calc_park_factors_advanced", "model.baseball_computer.metrics_player_career_offense", "model.baseball_computer.metrics_player_season_league_offense", "model.baseball_computer.metrics_team_season_offense", "model.baseball_computer.player_game_offense_stats"], "model.baseball_computer.event_pitching_stats": ["analysis.baseball_computer.gb_babip_correlations", "analysis.baseball_computer.ground_ball_hits", "model.baseball_computer.metrics_player_career_pitching", "model.baseball_computer.metrics_player_season_league_pitching", "model.baseball_computer.metrics_team_season_pitching", "model.baseball_computer.player_game_pitching_stats"], "model.baseball_computer.event_fielding_stats": ["analysis.baseball_computer.assists_as_putouts_finder", "analysis.baseball_computer.box_event_fielding_discrepancies", "analysis.baseball_computer.putout_innings_gaps", "analysis.baseball_computer.unknown_plays", "model.baseball_computer.event_player_fielding_stats", "model.baseball_computer.team_game_fielding_stats"], "model.baseball_computer.event_player_fielding_stats": ["analysis.baseball_computer.fielder_advance_expectancy", "model.baseball_computer.metrics_player_career_fielding", "model.baseball_computer.metrics_player_season_league_fielding", "model.baseball_computer.metrics_team_season_fielding", "model.baseball_computer.player_position_game_fielding_stats"], "model.baseball_computer.event_states_full": ["analysis.baseball_computer.babip_by_count", "analysis.baseball_computer.calc_park_factor_hit_location", "analysis.baseball_computer.calc_park_factor_in_play", "analysis.baseball_computer.calc_park_factor_out_location", "analysis.baseball_computer.calc_park_factor_outs", "analysis.baseball_computer.calc_park_factor_plate_appearances", "analysis.baseball_computer.calc_park_factor_trajectory_outs", "analysis.baseball_computer.fielder_location_shares", "analysis.baseball_computer.ground_ball_blame", "analysis.baseball_computer.hit_vs_out_spray", "analysis.baseball_computer.hit_vs_out_spray_air", "analysis.baseball_computer.outfield_hits", "analysis.baseball_computer.scorekeeper_tendencies_location", "model.baseball_computer.calc_park_factors_advanced", "model.baseball_computer.event_pitching_flags", "model.baseball_computer.event_transition_values", "model.baseball_computer.game_line_scores", "model.baseball_computer.ml_features", "model.baseball_computer.run_expectancy_matrix", "model.baseball_computer.win_expectancy_matrix"], "model.baseball_computer.people": ["analysis.baseball_computer.gb_babip_correlations", "model.baseball_computer.event_states_batter_pitcher"], "model.baseball_computer.team_game_start_info": ["analysis.baseball_computer.unknown_plays", "model.baseball_computer.calc_park_factors_basic", "model.baseball_computer.metrics_player_career_fielding", "model.baseball_computer.metrics_player_career_offense", "model.baseball_computer.metrics_player_career_pitching", "model.baseball_computer.metrics_player_season_league_fielding", "model.baseball_computer.metrics_player_season_league_offense", "model.baseball_computer.metrics_player_season_league_pitching", "model.baseball_computer.metrics_team_season_fielding", "model.baseball_computer.metrics_team_season_offense", "model.baseball_computer.metrics_team_season_pitching", "model.baseball_computer.season_team_coverage", "model.baseball_computer.standings", "model.baseball_computer.team_game_fielding_stats", "model.baseball_computer.team_game_results", "model.baseball_computer.team_season_fielding_stats"], "model.baseball_computer.team_game_results": ["analysis.baseball_computer.putout_innings_gaps", "model.baseball_computer.calc_park_factors_basic", "model.baseball_computer.linear_weights", "model.baseball_computer.standings"], "model.baseball_computer.season_team_coverage": [], "model.baseball_computer.player_team_season_offense_stats": ["model.baseball_computer.metrics_player_career_offense", "model.baseball_computer.metrics_player_season_league_offense", "model.baseball_computer.metrics_team_season_offense"], "source.baseball_computer.misc.gamelog": ["model.baseball_computer.stg_gamelog"], "source.baseball_computer.misc.park": ["model.baseball_computer.stg_parks", "test.baseball_computer.source_not_null_misc_park_city.dd95bd0af9", "test.baseball_computer.source_not_null_misc_park_name.cb07f266fc", "test.baseball_computer.source_not_null_misc_park_park_id.6eb47dd84e", "test.baseball_computer.source_not_null_misc_park_start_date.7ab9b2c116", "test.baseball_computer.source_unique_misc_park_park_id.ab6b1ee1d3"], "source.baseball_computer.misc.roster": ["model.baseball_computer.stg_rosters", "test.baseball_computer.source_not_null_misc_roster_last_name.2016310734", "test.baseball_computer.source_not_null_misc_roster_player_id.a4e0bf60be", "test.baseball_computer.source_not_null_misc_roster_position.0abc3727ad", "test.baseball_computer.source_not_null_misc_roster_team_id.251ed96cc3", "test.baseball_computer.source_not_null_misc_roster_year.944fe03dad"], "source.baseball_computer.misc.schedule": ["model.baseball_computer.stg_schedule"], "source.baseball_computer.misc.bio": ["model.baseball_computer.stg_bio"], "source.baseball_computer.baseballdatabank.appearances": [], "source.baseball_computer.baseballdatabank.batting": ["model.baseball_computer.stg_databank_batting"], "source.baseball_computer.baseballdatabank.fielding": ["model.baseball_computer.stg_databank_fielding"], "source.baseball_computer.baseballdatabank.pitching": ["model.baseball_computer.stg_databank_pitching"], "source.baseball_computer.baseballdatabank.people": ["model.baseball_computer.stg_people", "test.baseball_computer.source_not_null_baseballdatabank_people_playerid.15b902dc68", "test.baseball_computer.source_unique_baseballdatabank_people_bbrefid.ae622725ff", "test.baseball_computer.source_unique_baseballdatabank_people_playerid.028c893cc1", "test.baseball_computer.source_unique_baseballdatabank_people_retro_id.dd8c06d204"], "source.baseball_computer.baseballdatabank.fielding_of": ["model.baseball_computer.stg_databank_fielding_of"], "source.baseball_computer.box_score.box_score_batting_lines": ["model.baseball_computer.stg_box_score_batting_lines", "test.baseball_computer.source_not_null_box_score_box_score_batting_lines_at_bats.b6d88915f8", "test.baseball_computer.source_not_null_box_score_box_score_batting_lines_batter_id.d0f6fb2a89", "test.baseball_computer.source_not_null_box_score_box_score_batting_lines_game_id.57dbc78fca", "test.baseball_computer.source_not_null_box_score_box_score_batting_lines_lineup_position.ad36913951", "test.baseball_computer.source_not_null_box_score_box_score_batting_lines_nth_player_at_position.b79200b54d", "test.baseball_computer.source_not_null_box_score_box_score_batting_lines_side.002275cba3"], "source.baseball_computer.box_score.box_score_caught_stealing": ["model.baseball_computer.stg_box_score_caught_stealing", "test.baseball_computer.source_not_null_box_score_box_score_caught_stealing_game_id.6f95dd8a54", "test.baseball_computer.source_not_null_box_score_box_score_caught_stealing_runner_id.f0b3ec2fc3", "test.baseball_computer.source_not_null_box_score_box_score_caught_stealing_running_side.e9ccccfdf3"], "source.baseball_computer.box_score.box_score_double_plays": ["model.baseball_computer.stg_box_score_double_plays", "test.baseball_computer.source_not_null_box_score_box_score_double_plays_defense_side.cea8fd9283", "test.baseball_computer.source_not_null_box_score_box_score_double_plays_game_id.3eb854846f"], "source.baseball_computer.box_score.box_score_fielding_lines": ["model.baseball_computer.stg_box_score_fielding_lines", "test.baseball_computer.source_not_null_box_score_box_score_fielding_lines_fielder_id.cf9c2b33ad", "test.baseball_computer.source_not_null_box_score_box_score_fielding_lines_fielding_position.1a91f0160e", "test.baseball_computer.source_not_null_box_score_box_score_fielding_lines_game_id.8a41130214", "test.baseball_computer.source_not_null_box_score_box_score_fielding_lines_nth_position_played_by_player.3dc8b9aa9e", "test.baseball_computer.source_not_null_box_score_box_score_fielding_lines_side.c31b2fa481"], "source.baseball_computer.box_score.box_score_games": ["model.baseball_computer.stg_games", "test.baseball_computer.source_not_null_box_score_box_score_games_account_type.ee49ce5d5e", "test.baseball_computer.source_not_null_box_score_box_score_games_away_team_id.3db65a46ed", "test.baseball_computer.source_not_null_box_score_box_score_games_bat_first_side.f20df82299", "test.baseball_computer.source_not_null_box_score_box_score_games_date.4e354fb03d", "test.baseball_computer.source_not_null_box_score_box_score_games_doubleheader_status.d596eb38d8", "test.baseball_computer.source_not_null_box_score_box_score_games_field_condition.db9cd2b113", "test.baseball_computer.source_not_null_box_score_box_score_games_game_id.44872eca82", "test.baseball_computer.source_not_null_box_score_box_score_games_game_key.76f62a5ea0", "test.baseball_computer.source_not_null_box_score_box_score_games_game_type.bec21d95d6", "test.baseball_computer.source_not_null_box_score_box_score_games_home_team_id.7a5b9e78fc", "test.baseball_computer.source_not_null_box_score_box_score_games_park_id.2bbc694559", "test.baseball_computer.source_not_null_box_score_box_score_games_precipitation.b66a143e37", "test.baseball_computer.source_not_null_box_score_box_score_games_scoring_method.2983bc45ed", "test.baseball_computer.source_not_null_box_score_box_score_games_sky.d531881035", "test.baseball_computer.source_not_null_box_score_box_score_games_time_of_day.c0265c9214", "test.baseball_computer.source_not_null_box_score_box_score_games_use_dh.0576fbd0ba", "test.baseball_computer.source_not_null_box_score_box_score_games_wind_direction.61c0ecd269", "test.baseball_computer.source_unique_box_score_box_score_games_game_id.b94243eaff", "test.baseball_computer.source_unique_box_score_box_score_games_game_key.a9054ce21a"], "source.baseball_computer.box_score.box_score_hit_by_pitches": ["model.baseball_computer.stg_box_score_hit_by_pitches"], "source.baseball_computer.box_score.box_score_home_runs": ["model.baseball_computer.stg_box_score_home_runs", "test.baseball_computer.source_not_null_box_score_box_score_home_runs_batter_id.61a8db5c58", "test.baseball_computer.source_not_null_box_score_box_score_home_runs_batting_side.d8a1a565f0", "test.baseball_computer.source_not_null_box_score_box_score_home_runs_game_id.e28865fff5", "test.baseball_computer.source_not_null_box_score_box_score_home_runs_pitcher_id.469cea3d74"], "source.baseball_computer.box_score.box_score_pinch_hitting_lines": ["model.baseball_computer.stg_box_score_pinch_hitting_lines", "test.baseball_computer.source_not_null_box_score_box_score_pinch_hitting_lines_game_id.162a4e38b5", "test.baseball_computer.source_not_null_box_score_box_score_pinch_hitting_lines_pinch_hitter_id.bae1f38990", "test.baseball_computer.source_not_null_box_score_box_score_pinch_hitting_lines_side.d772416d56"], "source.baseball_computer.box_score.box_score_pinch_running_lines": ["model.baseball_computer.stg_box_score_pinch_running_lines", "test.baseball_computer.source_not_null_box_score_box_score_pinch_running_lines_game_id.08777674e3", "test.baseball_computer.source_not_null_box_score_box_score_pinch_running_lines_pinch_runner_id.b0d9ccfc3e"], "source.baseball_computer.box_score.box_score_pitching_lines": ["model.baseball_computer.stg_box_score_pitching_lines"], "source.baseball_computer.box_score.box_score_stolen_bases": ["model.baseball_computer.stg_box_score_stolen_bases", "test.baseball_computer.source_not_null_box_score_box_score_stolen_bases_game_id.026246df9e", "test.baseball_computer.source_not_null_box_score_box_score_stolen_bases_runner_id.c702a78489", "test.baseball_computer.source_not_null_box_score_box_score_stolen_bases_running_side.c2c5c13135"], "source.baseball_computer.box_score.box_score_team_batting_lines": ["model.baseball_computer.stg_box_score_team_batting_lines", "test.baseball_computer.source_not_null_box_score_box_score_team_batting_lines_at_bats.0a61108426", "test.baseball_computer.source_not_null_box_score_box_score_team_batting_lines_game_id.bd95c834cc", "test.baseball_computer.source_not_null_box_score_box_score_team_batting_lines_hits.a6fddad181", "test.baseball_computer.source_not_null_box_score_box_score_team_batting_lines_runs.eb5d3c40d4", "test.baseball_computer.source_not_null_box_score_box_score_team_batting_lines_side.804ee6c99a"], "source.baseball_computer.box_score.box_score_team_fielding_lines": ["model.baseball_computer.stg_box_score_team_fielding_lines", "test.baseball_computer.source_not_null_box_score_box_score_team_fielding_lines_game_id.8437d7158c", "test.baseball_computer.source_not_null_box_score_box_score_team_fielding_lines_outs_played.14ebdb3b7b", "test.baseball_computer.source_not_null_box_score_box_score_team_fielding_lines_side.7918cf72f9"], "source.baseball_computer.box_score.box_score_team_miscellaneous_lines": ["model.baseball_computer.stg_box_score_team_miscellaneous_lines", "test.baseball_computer.source_not_null_box_score_box_score_team_miscellaneous_lines_game_id.fcda3e41c8", "test.baseball_computer.source_not_null_box_score_box_score_team_miscellaneous_lines_side.40c4727a51"], "source.baseball_computer.box_score.box_score_triple_plays": ["model.baseball_computer.stg_box_score_triple_plays", "test.baseball_computer.source_not_null_box_score_box_score_triple_plays_defense_side.2eec5d74dc", "test.baseball_computer.source_not_null_box_score_box_score_triple_plays_game_id.bcc2a3622b"], "source.baseball_computer.box_score.box_score_comments": ["model.baseball_computer.stg_box_score_comments", "test.baseball_computer.source_not_null_box_score_box_score_comments_comment.27f5650bb2", "test.baseball_computer.source_not_null_box_score_box_score_comments_game_id.ee9b68198f", "test.baseball_computer.source_not_null_box_score_box_score_comments_sequence_id.61b7b70a39"], "source.baseball_computer.box_score.box_score_line_scores": ["model.baseball_computer.stg_box_score_line_scores"], "source.baseball_computer.game.games": ["model.baseball_computer.stg_games", "test.baseball_computer.source_not_null_game_games_account_type.7a0a3ee64a", "test.baseball_computer.source_not_null_game_games_away_team_id.8e41b8425b", "test.baseball_computer.source_not_null_game_games_bat_first_side.91b0360bdd", "test.baseball_computer.source_not_null_game_games_date.742eb9e3c2", "test.baseball_computer.source_not_null_game_games_doubleheader_status.053829553b", "test.baseball_computer.source_not_null_game_games_field_condition.68aa42357b", "test.baseball_computer.source_not_null_game_games_filename.b603af55c2", "test.baseball_computer.source_not_null_game_games_game_id.2418071e8e", "test.baseball_computer.source_not_null_game_games_game_key.888d752037", "test.baseball_computer.source_not_null_game_games_game_type.8ba97fed9b", "test.baseball_computer.source_not_null_game_games_home_team_id.8a8347ed3c", "test.baseball_computer.source_not_null_game_games_park_id.ae1e9e1fda", "test.baseball_computer.source_not_null_game_games_precipitation.53cfe6a1d5", "test.baseball_computer.source_not_null_game_games_scoring_method.b1ac89e487", "test.baseball_computer.source_not_null_game_games_sky.d1e4d31777", "test.baseball_computer.source_not_null_game_games_time_of_day.c9113d1123", "test.baseball_computer.source_not_null_game_games_use_dh.9dcb036550", "test.baseball_computer.source_not_null_game_games_wind_direction.28ae0e1ff6", "test.baseball_computer.source_unique_game_games_game_id.ed73a19cd5", "test.baseball_computer.source_unique_game_games_game_key.caa87137ff"], "source.baseball_computer.game.game_earned_runs": ["model.baseball_computer.stg_game_earned_runs", "test.baseball_computer.source_not_null_game_game_earned_runs_earned_runs.e4409d3c75", "test.baseball_computer.source_not_null_game_game_earned_runs_game_id.5b52e3dc8e", "test.baseball_computer.source_not_null_game_game_earned_runs_player_id.c46963cd36"], "source.baseball_computer.game.game_fielding_appearances": ["model.baseball_computer.stg_game_fielding_appearances", "test.baseball_computer.source_not_null_game_game_fielding_appearances_end_event_id.60aa09d0ec", "test.baseball_computer.source_not_null_game_game_fielding_appearances_fielding_position.fb3999bb73", "test.baseball_computer.source_not_null_game_game_fielding_appearances_game_id.dd2b7e8969", "test.baseball_computer.source_not_null_game_game_fielding_appearances_player_id.0c7ac8daaa", "test.baseball_computer.source_not_null_game_game_fielding_appearances_side.266aa13571", "test.baseball_computer.source_not_null_game_game_fielding_appearances_start_event_id.408c346cde"], "source.baseball_computer.game.game_lineup_appearances": ["model.baseball_computer.stg_game_lineup_appearances", "test.baseball_computer.source_not_null_game_game_lineup_appearances_end_event_id.62781ded2c", "test.baseball_computer.source_not_null_game_game_lineup_appearances_entered_game_as.a9e19b02e5", "test.baseball_computer.source_not_null_game_game_lineup_appearances_game_id.f63a900428", "test.baseball_computer.source_not_null_game_game_lineup_appearances_lineup_position.4b45e3e931", "test.baseball_computer.source_not_null_game_game_lineup_appearances_player_id.6033a911ba", "test.baseball_computer.source_not_null_game_game_lineup_appearances_side.bcbf5ff7f4", "test.baseball_computer.source_not_null_game_game_lineup_appearances_start_event_id.b44f764b97"], "source.baseball_computer.event.event_audit": ["model.baseball_computer.stg_event_audit"], "source.baseball_computer.event.event_baserunners": ["model.baseball_computer.stg_event_baserunners"], "source.baseball_computer.event.event_comments": ["model.baseball_computer.stg_event_comments"], "source.baseball_computer.event.event_fielding_play": ["model.baseball_computer.stg_event_fielding_plays"], "source.baseball_computer.event.event_flags": ["model.baseball_computer.stg_event_flags"], "source.baseball_computer.event.event_pitch_sequences": ["model.baseball_computer.stg_event_pitch_sequences"], "source.baseball_computer.event.events": ["model.baseball_computer.stg_events"]}, "group_map": {}, "saved_queries": {}, "semantic_models": {}}